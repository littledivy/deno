<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="597.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="14648"><g><title>deno_head`deno::run_command::_{{closure}} (2 samples, 0.01%)</title><rect x="0.0000%" y="549" width="0.0137%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="559.50"></text></g><g><title>deno_head`deno::worker::create_main_worker (2 samples, 0.01%)</title><rect x="0.0000%" y="533" width="0.0137%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="543.50"></text></g><g><title>deno_head`deno_runtime::worker::MainWorker::bootstrap_from_options (2 samples, 0.01%)</title><rect x="0.0000%" y="517" width="0.0137%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="527.50"></text></g><g><title>deno_head`deno_core::runtime::JsRuntime::new (2 samples, 0.01%)</title><rect x="0.0000%" y="501" width="0.0137%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="511.50"></text></g><g><title>deno_head`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (2 samples, 0.01%)</title><rect x="0.0205%" y="485" width="0.0137%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="2"/><text x="0.2705%" y="495.50"></text></g><g><title>deno_head`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (2 samples, 0.01%)</title><rect x="0.0205%" y="469" width="0.0137%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="2"/><text x="0.2705%" y="479.50"></text></g><g><title>deno_head`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.01%)</title><rect x="0.0205%" y="453" width="0.0137%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="2"/><text x="0.2705%" y="463.50"></text></g><g><title>deno_head`Builtins_JSEntry (2 samples, 0.01%)</title><rect x="0.0205%" y="437" width="0.0137%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="2"/><text x="0.2705%" y="447.50"></text></g><g><title>deno_head`Builtins_JSEntryTrampoline (2 samples, 0.01%)</title><rect x="0.0205%" y="421" width="0.0137%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="2"/><text x="0.2705%" y="431.50"></text></g><g><title>deno_head`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="0.0205%" y="405" width="0.0137%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="2"/><text x="0.2705%" y="415.50"></text></g><g><title>deno_head`deno_runtime::worker::MainWorker::bootstrap_from_options (4 samples, 0.03%)</title><rect x="0.0137%" y="549" width="0.0273%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="4"/><text x="0.2637%" y="559.50"></text></g><g><title>deno_head`deno_runtime::worker::MainWorker::execute_script (4 samples, 0.03%)</title><rect x="0.0137%" y="533" width="0.0273%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="4"/><text x="0.2637%" y="543.50"></text></g><g><title>deno_head`deno_core::runtime::JsRuntime::execute_script (4 samples, 0.03%)</title><rect x="0.0137%" y="517" width="0.0273%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="4"/><text x="0.2637%" y="527.50"></text></g><g><title>deno_head`deno_core::runtime::JsRealm::execute_script (4 samples, 0.03%)</title><rect x="0.0137%" y="501" width="0.0273%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="4"/><text x="0.2637%" y="511.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_17075 (2 samples, 0.01%)</title><rect x="0.0478%" y="485" width="0.0137%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="2"/><text x="0.2978%" y="495.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_3570 (2 samples, 0.01%)</title><rect x="0.0751%" y="485" width="0.0137%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="2"/><text x="0.3251%" y="495.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_5949 (4 samples, 0.03%)</title><rect x="0.0956%" y="485" width="0.0273%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="4"/><text x="0.3456%" y="495.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_7734 (3 samples, 0.02%)</title><rect x="0.1229%" y="485" width="0.0205%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="3"/><text x="0.3729%" y="495.50"></text></g><g><title>deno_head`core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.01%)</title><rect x="0.1638%" y="485" width="0.0137%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="2"/><text x="0.4138%" y="495.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.3413%" y="453" width="0.0137%" height="15" fill="rgb(226,26,5)" fg:x="50" fg:w="2"/><text x="0.5913%" y="463.50"></text></g><g><title>deno_head`&lt;tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set::Reset as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="0.3550%" y="453" width="0.0205%" height="15" fill="rgb(249,33,26)" fg:x="52" fg:w="3"/><text x="0.6050%" y="463.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="0.3550%" y="437" width="0.0205%" height="15" fill="rgb(235,183,28)" fg:x="52" fg:w="3"/><text x="0.6050%" y="447.50"></text></g><g><title>deno_head`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="0.6212%" y="357" width="0.0137%" height="15" fill="rgb(221,5,38)" fg:x="91" fg:w="2"/><text x="0.8712%" y="367.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.6349%" y="341" width="0.0137%" height="15" fill="rgb(247,18,42)" fg:x="93" fg:w="2"/><text x="0.8849%" y="351.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.6349%" y="325" width="0.0137%" height="15" fill="rgb(241,131,45)" fg:x="93" fg:w="2"/><text x="0.8849%" y="335.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="0.6349%" y="357" width="0.0205%" height="15" fill="rgb(249,31,29)" fg:x="93" fg:w="3"/><text x="0.8849%" y="367.50"></text></g><g><title>deno_head`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="0.6690%" y="357" width="0.0137%" height="15" fill="rgb(225,111,53)" fg:x="98" fg:w="2"/><text x="0.9190%" y="367.50"></text></g><g><title>deno_head`core::ptr::drop_in_place&lt;[v8::handle::Global&lt;v8::data::Function&gt;]&gt; (3 samples, 0.02%)</title><rect x="0.7168%" y="357" width="0.0205%" height="15" fill="rgb(238,160,17)" fg:x="105" fg:w="3"/><text x="0.9668%" y="367.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="1.1674%" y="325" width="0.0137%" height="15" fill="rgb(214,148,48)" fg:x="171" fg:w="2"/><text x="1.4174%" y="335.50"></text></g><g><title>deno_head`v8__Global__New (4 samples, 0.03%)</title><rect x="1.1810%" y="325" width="0.0273%" height="15" fill="rgb(232,36,49)" fg:x="173" fg:w="4"/><text x="1.4310%" y="335.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="1.1879%" y="309" width="0.0205%" height="15" fill="rgb(209,103,24)" fg:x="174" fg:w="3"/><text x="1.4379%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="1.2152%" y="293" width="0.0137%" height="15" fill="rgb(229,88,8)" fg:x="178" fg:w="2"/><text x="1.4652%" y="303.50"></text></g><g><title>deno_head`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.08%)</title><rect x="1.1606%" y="341" width="0.0751%" height="15" fill="rgb(213,181,19)" fg:x="170" fg:w="11"/><text x="1.4106%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="1.2084%" y="325" width="0.0273%" height="15" fill="rgb(254,191,54)" fg:x="177" fg:w="4"/><text x="1.4584%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="1.2152%" y="309" width="0.0205%" height="15" fill="rgb(241,83,37)" fg:x="178" fg:w="3"/><text x="1.4652%" y="319.50"></text></g><g><title>deno_head`core::ptr::drop_in_place&lt;deno_core::async_cancel::internal::Node&gt; (5 samples, 0.03%)</title><rect x="1.3722%" y="325" width="0.0341%" height="15" fill="rgb(233,36,39)" fg:x="201" fg:w="5"/><text x="1.6222%" y="335.50"></text></g><g><title>deno_head`&lt;deno_core::async_cancel::internal::Node as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="1.3722%" y="309" width="0.0341%" height="15" fill="rgb(226,3,54)" fg:x="201" fg:w="5"/><text x="1.6222%" y="319.50"></text></g><g><title>deno_head`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (9 samples, 0.06%)</title><rect x="1.4132%" y="325" width="0.0614%" height="15" fill="rgb(245,192,40)" fg:x="207" fg:w="9"/><text x="1.6632%" y="335.50"></text></g><g><title>deno_head`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.03%)</title><rect x="1.4746%" y="325" width="0.0273%" height="15" fill="rgb(238,167,29)" fg:x="216" fg:w="4"/><text x="1.7246%" y="335.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.29%)</title><rect x="1.2357%" y="341" width="0.2867%" height="15" fill="rgb(232,182,51)" fg:x="181" fg:w="42"/><text x="1.4857%" y="351.50"></text></g><g><title>deno_head`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (3 samples, 0.02%)</title><rect x="1.5019%" y="325" width="0.0205%" height="15" fill="rgb(231,60,39)" fg:x="220" fg:w="3"/><text x="1.7519%" y="335.50"></text></g><g><title>deno_head`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.01%)</title><rect x="1.5360%" y="309" width="0.0137%" height="15" fill="rgb(208,69,12)" fg:x="225" fg:w="2"/><text x="1.7860%" y="319.50"></text></g><g><title>deno_head`v8::HandleScope::~HandleScope (2 samples, 0.01%)</title><rect x="1.5360%" y="293" width="0.0137%" height="15" fill="rgb(235,93,37)" fg:x="225" fg:w="2"/><text x="1.7860%" y="303.50"></text></g><g><title>deno_head`v8::internal::HandleScope::DeleteExtensions (2 samples, 0.01%)</title><rect x="1.5360%" y="277" width="0.0137%" height="15" fill="rgb(213,116,39)" fg:x="225" fg:w="2"/><text x="1.7860%" y="287.50"></text></g><g><title>deno_head`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (4 samples, 0.03%)</title><rect x="1.5292%" y="341" width="0.0273%" height="15" fill="rgb(222,207,29)" fg:x="224" fg:w="4"/><text x="1.7792%" y="351.50"></text></g><g><title>deno_head`v8::scope::data::ScopeData::try_exit_scope (3 samples, 0.02%)</title><rect x="1.5360%" y="325" width="0.0205%" height="15" fill="rgb(206,96,30)" fg:x="225" fg:w="3"/><text x="1.7860%" y="335.50"></text></g><g><title>deno_head`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="1.5702%" y="341" width="0.0137%" height="15" fill="rgb(218,138,4)" fg:x="230" fg:w="2"/><text x="1.8202%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.01%)</title><rect x="1.6248%" y="261" width="0.0137%" height="15" fill="rgb(250,191,14)" fg:x="238" fg:w="2"/><text x="1.8748%" y="271.50"></text></g><g><title>deno_head`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 0.10%)</title><rect x="1.5907%" y="341" width="0.0956%" height="15" fill="rgb(239,60,40)" fg:x="233" fg:w="14"/><text x="1.8407%" y="351.50"></text></g><g><title>deno_head`alloc::raw_vec::finish_grow (13 samples, 0.09%)</title><rect x="1.5975%" y="325" width="0.0887%" height="15" fill="rgb(206,27,48)" fg:x="234" fg:w="13"/><text x="1.8475%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.09%)</title><rect x="1.5975%" y="309" width="0.0887%" height="15" fill="rgb(225,35,8)" fg:x="234" fg:w="13"/><text x="1.8475%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.08%)</title><rect x="1.6043%" y="293" width="0.0819%" height="15" fill="rgb(250,213,24)" fg:x="235" fg:w="12"/><text x="1.8543%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.08%)</title><rect x="1.6111%" y="277" width="0.0751%" height="15" fill="rgb(247,123,22)" fg:x="236" fg:w="11"/><text x="1.8611%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.05%)</title><rect x="1.6384%" y="261" width="0.0478%" height="15" fill="rgb(231,138,38)" fg:x="240" fg:w="7"/><text x="1.8884%" y="271.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="1.6999%" y="325" width="0.0137%" height="15" fill="rgb(231,145,46)" fg:x="249" fg:w="2"/><text x="1.9499%" y="335.50"></text></g><g><title>deno_head`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (6 samples, 0.04%)</title><rect x="1.6862%" y="341" width="0.0410%" height="15" fill="rgb(251,118,11)" fg:x="247" fg:w="6"/><text x="1.9362%" y="351.50"></text></g><g><title>deno_head`core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.03%)</title><rect x="1.7272%" y="341" width="0.0341%" height="15" fill="rgb(217,147,25)" fg:x="253" fg:w="5"/><text x="1.9772%" y="351.50"></text></g><g><title>deno_head`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="1.7682%" y="341" width="0.0273%" height="15" fill="rgb(247,81,37)" fg:x="259" fg:w="4"/><text x="2.0182%" y="351.50"></text></g><g><title>deno_head`futures_core::task::__internal::atomic_waker::AtomicWaker::register (2 samples, 0.01%)</title><rect x="1.8637%" y="325" width="0.0137%" height="15" fill="rgb(209,12,38)" fg:x="273" fg:w="2"/><text x="2.1137%" y="335.50"></text></g><g><title>deno_head`deno_core::inspector::JsRuntimeInspector::poll_sessions (17 samples, 0.12%)</title><rect x="1.7955%" y="341" width="0.1161%" height="15" fill="rgb(227,1,9)" fg:x="263" fg:w="17"/><text x="2.0455%" y="351.50"></text></g><g><title>deno_head`futures_task::waker::clone_arc_raw (5 samples, 0.03%)</title><rect x="1.8774%" y="325" width="0.0341%" height="15" fill="rgb(248,47,43)" fg:x="275" fg:w="5"/><text x="2.1274%" y="335.50"></text></g><g><title>deno_head`deno_core::runtime::JsRealm::state (4 samples, 0.03%)</title><rect x="1.9115%" y="341" width="0.0273%" height="15" fill="rgb(221,10,30)" fg:x="280" fg:w="4"/><text x="2.1615%" y="351.50"></text></g><g><title>deno_head`v8::handle::HandleHost::assert_match_isolate (2 samples, 0.01%)</title><rect x="1.9252%" y="325" width="0.0137%" height="15" fill="rgb(210,229,1)" fg:x="282" fg:w="2"/><text x="2.1752%" y="335.50"></text></g><g><title>deno_head`deno_core::runtime::JsRuntime::evaluate_pending_module (2 samples, 0.01%)</title><rect x="1.9457%" y="341" width="0.0137%" height="15" fill="rgb(222,148,37)" fg:x="285" fg:w="2"/><text x="2.1957%" y="351.50"></text></g><g><title>deno_head`v8::internal::wasm::WasmEngine::HasRunningCompileJob (2 samples, 0.01%)</title><rect x="2.0208%" y="325" width="0.0137%" height="15" fill="rgb(234,67,33)" fg:x="296" fg:w="2"/><text x="2.2708%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="2.0208%" y="309" width="0.0137%" height="15" fill="rgb(247,98,35)" fg:x="296" fg:w="2"/><text x="2.2708%" y="319.50"></text></g><g><title>deno_head`deno_core::runtime::JsRuntime::event_loop_pending_state (13 samples, 0.09%)</title><rect x="1.9593%" y="341" width="0.0887%" height="15" fill="rgb(247,138,52)" fg:x="287" fg:w="13"/><text x="2.2093%" y="351.50"></text></g><g><title>deno_head`v8__Global__New (2 samples, 0.01%)</title><rect x="2.0344%" y="325" width="0.0137%" height="15" fill="rgb(213,79,30)" fg:x="298" fg:w="2"/><text x="2.2844%" y="335.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="2.0344%" y="309" width="0.0137%" height="15" fill="rgb(246,177,23)" fg:x="298" fg:w="2"/><text x="2.2844%" y="319.50"></text></g><g><title>deno_head`deno_core::runtime::JsRuntime::global_realm (2 samples, 0.01%)</title><rect x="2.0481%" y="341" width="0.0137%" height="15" fill="rgb(230,62,27)" fg:x="300" fg:w="2"/><text x="2.2981%" y="351.50"></text></g><g><title>deno_head`v8::HandleScope::~HandleScope (3 samples, 0.02%)</title><rect x="2.1027%" y="277" width="0.0205%" height="15" fill="rgb(216,154,8)" fg:x="308" fg:w="3"/><text x="2.3527%" y="287.50"></text></g><g><title>deno_head`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (6 samples, 0.04%)</title><rect x="2.0958%" y="293" width="0.0410%" height="15" fill="rgb(244,35,45)" fg:x="307" fg:w="6"/><text x="2.3458%" y="303.50"></text></g><g><title>deno_head`v8::internal::HandleScope::DeleteExtensions (2 samples, 0.01%)</title><rect x="2.1232%" y="277" width="0.0137%" height="15" fill="rgb(251,115,12)" fg:x="311" fg:w="2"/><text x="2.3732%" y="287.50"></text></g><g><title>deno_head`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (11 samples, 0.08%)</title><rect x="2.0822%" y="325" width="0.0751%" height="15" fill="rgb(240,54,50)" fg:x="305" fg:w="11"/><text x="2.3322%" y="335.50"></text></g><g><title>deno_head`v8::scope::data::ScopeData::try_exit_scope (10 samples, 0.07%)</title><rect x="2.0890%" y="309" width="0.0683%" height="15" fill="rgb(233,84,52)" fg:x="306" fg:w="10"/><text x="2.3390%" y="319.50"></text></g><g><title>deno_head`v8::Context::Exit (3 samples, 0.02%)</title><rect x="2.1368%" y="293" width="0.0205%" height="15" fill="rgb(207,117,47)" fg:x="313" fg:w="3"/><text x="2.3868%" y="303.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="2.1983%" y="309" width="0.0137%" height="15" fill="rgb(249,43,39)" fg:x="322" fg:w="2"/><text x="2.4483%" y="319.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::MoveGlobal (2 samples, 0.01%)</title><rect x="2.2119%" y="309" width="0.0137%" height="15" fill="rgb(209,38,44)" fg:x="324" fg:w="2"/><text x="2.4619%" y="319.50"></text></g><g><title>deno_head`v8__Global__New (5 samples, 0.03%)</title><rect x="2.2324%" y="309" width="0.0341%" height="15" fill="rgb(236,212,23)" fg:x="327" fg:w="5"/><text x="2.4824%" y="319.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Create (5 samples, 0.03%)</title><rect x="2.2324%" y="293" width="0.0341%" height="15" fill="rgb(242,79,21)" fg:x="327" fg:w="5"/><text x="2.4824%" y="303.50"></text></g><g><title>deno_head`deno_core::runtime::JsRuntime::global_realm (17 samples, 0.12%)</title><rect x="2.1573%" y="325" width="0.1161%" height="15" fill="rgb(211,96,35)" fg:x="316" fg:w="17"/><text x="2.4073%" y="335.50"></text></g><g><title>deno_head`v8::Context::Enter (6 samples, 0.04%)</title><rect x="2.2870%" y="309" width="0.0410%" height="15" fill="rgb(253,215,40)" fg:x="335" fg:w="6"/><text x="2.5370%" y="319.50"></text></g><g><title>deno_head`v8::HandleScope::CreateHandle (3 samples, 0.02%)</title><rect x="2.3280%" y="309" width="0.0205%" height="15" fill="rgb(211,81,21)" fg:x="341" fg:w="3"/><text x="2.5780%" y="319.50"></text></g><g><title>deno_head`v8::internal::HandleScope::Extend (3 samples, 0.02%)</title><rect x="2.3484%" y="309" width="0.0205%" height="15" fill="rgb(208,190,38)" fg:x="344" fg:w="3"/><text x="2.5984%" y="319.50"></text></g><g><title>deno_head`deno_core::runtime::JsRuntime::handle_scope (46 samples, 0.31%)</title><rect x="2.0617%" y="341" width="0.3140%" height="15" fill="rgb(235,213,38)" fg:x="302" fg:w="46"/><text x="2.3117%" y="351.50"></text></g><g><title>deno_head`v8::scope::data::ScopeData::new_handle_scope_data_with_context (13 samples, 0.09%)</title><rect x="2.2870%" y="325" width="0.0887%" height="15" fill="rgb(237,122,38)" fg:x="335" fg:w="13"/><text x="2.5370%" y="335.50"></text></g><g><title>deno_head`deno_core::gotham_state::GothamState::borrow_mut (5 samples, 0.03%)</title><rect x="2.3826%" y="325" width="0.0341%" height="15" fill="rgb(244,218,35)" fg:x="349" fg:w="5"/><text x="2.6326%" y="335.50"></text></g><g><title>deno_head`deno_ffi::init::_{{closure}} (7 samples, 0.05%)</title><rect x="2.3758%" y="341" width="0.0478%" height="15" fill="rgb(240,68,47)" fg:x="348" fg:w="7"/><text x="2.6258%" y="351.50"></text></g><g><title>deno_head`futures_core::task::__internal::atomic_waker::AtomicWaker::register (14 samples, 0.10%)</title><rect x="2.4304%" y="341" width="0.0956%" height="15" fill="rgb(210,16,53)" fg:x="356" fg:w="14"/><text x="2.6804%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="2.5328%" y="325" width="0.0273%" height="15" fill="rgb(235,124,12)" fg:x="371" fg:w="4"/><text x="2.7828%" y="335.50"></text></g><g><title>deno_head`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (7 samples, 0.05%)</title><rect x="2.5259%" y="341" width="0.0478%" height="15" fill="rgb(224,169,11)" fg:x="370" fg:w="7"/><text x="2.7759%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="2.5601%" y="325" width="0.0137%" height="15" fill="rgb(250,166,2)" fg:x="375" fg:w="2"/><text x="2.8101%" y="335.50"></text></g><g><title>deno_head`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.01%)</title><rect x="2.5806%" y="341" width="0.0137%" height="15" fill="rgb(242,216,29)" fg:x="378" fg:w="2"/><text x="2.8306%" y="351.50"></text></g><g><title>deno_head`tokio::util::wake::clone_arc_raw (2 samples, 0.01%)</title><rect x="2.6010%" y="341" width="0.0137%" height="15" fill="rgb(230,116,27)" fg:x="381" fg:w="2"/><text x="2.8510%" y="351.50"></text></g><g><title>deno_head`tokio::util::wake::drop_arc_raw (2 samples, 0.01%)</title><rect x="2.6147%" y="341" width="0.0137%" height="15" fill="rgb(228,99,48)" fg:x="383" fg:w="2"/><text x="2.8647%" y="351.50"></text></g><g><title>deno_head`tokio::util::wake::wake_arc_raw (64 samples, 0.44%)</title><rect x="2.6283%" y="341" width="0.4369%" height="15" fill="rgb(253,11,6)" fg:x="385" fg:w="64"/><text x="2.8783%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`kevent (62 samples, 0.42%)</title><rect x="2.6420%" y="325" width="0.4233%" height="15" fill="rgb(247,143,39)" fg:x="387" fg:w="62"/><text x="2.8920%" y="335.50"></text></g><g><title>deno_head`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (2 samples, 0.01%)</title><rect x="3.0653%" y="341" width="0.0137%" height="15" fill="rgb(236,97,10)" fg:x="449" fg:w="2"/><text x="3.3153%" y="351.50"></text></g><g><title>deno_head`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (6 samples, 0.04%)</title><rect x="3.1335%" y="325" width="0.0410%" height="15" fill="rgb(233,208,19)" fg:x="459" fg:w="6"/><text x="3.3835%" y="335.50"></text></g><g><title>deno_head`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (4 samples, 0.03%)</title><rect x="3.1813%" y="325" width="0.0273%" height="15" fill="rgb(216,164,2)" fg:x="466" fg:w="4"/><text x="3.4313%" y="335.50"></text></g><g><title>deno_head`Builtins_JSEntry (5 samples, 0.03%)</title><rect x="3.2223%" y="309" width="0.0341%" height="15" fill="rgb(220,129,5)" fg:x="472" fg:w="5"/><text x="3.4723%" y="319.50"></text></g><g><title>0x1100645e0 (3 samples, 0.02%)</title><rect x="3.3520%" y="277" width="0.0205%" height="15" fill="rgb(242,17,10)" fg:x="491" fg:w="3"/><text x="3.6020%" y="287.50"></text></g><g><title>0x110064740 (5 samples, 0.03%)</title><rect x="3.3793%" y="277" width="0.0341%" height="15" fill="rgb(242,107,0)" fg:x="495" fg:w="5"/><text x="3.6293%" y="287.50"></text></g><g><title>0x1100684c0 (4 samples, 0.03%)</title><rect x="3.4203%" y="277" width="0.0273%" height="15" fill="rgb(251,28,31)" fg:x="501" fg:w="4"/><text x="3.6703%" y="287.50"></text></g><g><title>deno_head`Builtins_CallFunction_ReceiverIsAny (5 samples, 0.03%)</title><rect x="3.4476%" y="277" width="0.0341%" height="15" fill="rgb(233,223,10)" fg:x="505" fg:w="5"/><text x="3.6976%" y="287.50"></text></g><g><title>deno_head`Builtins_Call_ReceiverIsAny (4 samples, 0.03%)</title><rect x="3.4817%" y="277" width="0.0273%" height="15" fill="rgb(215,21,27)" fg:x="510" fg:w="4"/><text x="3.7317%" y="287.50"></text></g><g><title>0x11006483c (2 samples, 0.01%)</title><rect x="3.5500%" y="261" width="0.0137%" height="15" fill="rgb(232,23,21)" fg:x="520" fg:w="2"/><text x="3.8000%" y="271.50"></text></g><g><title>deno_head`Builtins_PromiseCapabilityDefaultResolve (7 samples, 0.05%)</title><rect x="3.5773%" y="245" width="0.0478%" height="15" fill="rgb(244,5,23)" fg:x="524" fg:w="7"/><text x="3.8273%" y="255.50"></text></g><g><title>deno_head`Builtins_ResolvePromise (5 samples, 0.03%)</title><rect x="3.5909%" y="229" width="0.0341%" height="15" fill="rgb(226,81,46)" fg:x="526" fg:w="5"/><text x="3.8409%" y="239.50"></text></g><g><title>deno_head`Builtins_FulfillPromise (4 samples, 0.03%)</title><rect x="3.5978%" y="213" width="0.0273%" height="15" fill="rgb(247,70,30)" fg:x="527" fg:w="4"/><text x="3.8478%" y="223.50"></text></g><g><title>0x11006495c (8 samples, 0.05%)</title><rect x="3.5773%" y="261" width="0.0546%" height="15" fill="rgb(212,68,19)" fg:x="524" fg:w="8"/><text x="3.8273%" y="271.50"></text></g><g><title>deno_head`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (5 samples, 0.03%)</title><rect x="3.6387%" y="261" width="0.0341%" height="15" fill="rgb(240,187,13)" fg:x="533" fg:w="5"/><text x="3.8887%" y="271.50"></text></g><g><title>deno_head`Builtins_JSEntry (54 samples, 0.37%)</title><rect x="3.3315%" y="293" width="0.3687%" height="15" fill="rgb(223,113,26)" fg:x="488" fg:w="54"/><text x="3.5815%" y="303.50"></text></g><g><title>deno_head`Builtins_JSEntryTrampoline (28 samples, 0.19%)</title><rect x="3.5090%" y="277" width="0.1912%" height="15" fill="rgb(206,192,2)" fg:x="514" fg:w="28"/><text x="3.7590%" y="287.50"></text></g><g><title>deno_head`Builtins_PromiseCapabilityDefaultResolve (2 samples, 0.01%)</title><rect x="3.6865%" y="261" width="0.0137%" height="15" fill="rgb(241,108,4)" fg:x="540" fg:w="2"/><text x="3.9365%" y="271.50"></text></g><g><title>deno_head`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (66 samples, 0.45%)</title><rect x="3.2564%" y="309" width="0.4506%" height="15" fill="rgb(247,173,49)" fg:x="477" fg:w="66"/><text x="3.5064%" y="319.50"></text></g><g><title>deno_head`v8::internal::AllowJavascriptExecution::IsAllowed (3 samples, 0.02%)</title><rect x="3.7070%" y="309" width="0.0205%" height="15" fill="rgb(224,114,35)" fg:x="543" fg:w="3"/><text x="3.9570%" y="319.50"></text></g><g><title>deno_head`v8::internal::SaveContext::SaveContext (2 samples, 0.01%)</title><rect x="3.7275%" y="309" width="0.0137%" height="15" fill="rgb(245,159,27)" fg:x="546" fg:w="2"/><text x="3.9775%" y="319.50"></text></g><g><title>deno_head`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (82 samples, 0.56%)</title><rect x="3.2086%" y="325" width="0.5598%" height="15" fill="rgb(245,172,44)" fg:x="470" fg:w="82"/><text x="3.4586%" y="335.50"></text></g><g><title>deno_head`v8::internal::ScopeInfo::is_script_scope (3 samples, 0.02%)</title><rect x="3.7480%" y="309" width="0.0205%" height="15" fill="rgb(236,23,11)" fg:x="549" fg:w="3"/><text x="3.9980%" y="319.50"></text></g><g><title>deno_head`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.01%)</title><rect x="3.7684%" y="325" width="0.0137%" height="15" fill="rgb(205,117,38)" fg:x="552" fg:w="2"/><text x="4.0184%" y="335.50"></text></g><g><title>deno_head`v8::Isolate::SuppressMicrotaskExecutionScope::SuppressMicrotaskExecutionScope (3 samples, 0.02%)</title><rect x="3.8094%" y="293" width="0.0205%" height="15" fill="rgb(237,72,25)" fg:x="558" fg:w="3"/><text x="4.0594%" y="303.50"></text></g><g><title>deno_head`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (3 samples, 0.02%)</title><rect x="3.8981%" y="261" width="0.0205%" height="15" fill="rgb(244,70,9)" fg:x="571" fg:w="3"/><text x="4.1481%" y="271.50"></text></g><g><title>deno_head`Builtins_AsyncFunctionAwaitResolveClosure (2 samples, 0.01%)</title><rect x="4.2804%" y="197" width="0.0137%" height="15" fill="rgb(217,125,39)" fg:x="627" fg:w="2"/><text x="4.5304%" y="207.50"></text></g><g><title>deno_head`Builtins_CallFunction_ReceiverIsNullOrUndefined (4 samples, 0.03%)</title><rect x="4.2941%" y="197" width="0.0273%" height="15" fill="rgb(235,36,10)" fg:x="629" fg:w="4"/><text x="4.5441%" y="207.50"></text></g><g><title>0x11004baf4 (2 samples, 0.01%)</title><rect x="4.4716%" y="165" width="0.0137%" height="15" fill="rgb(251,123,47)" fg:x="655" fg:w="2"/><text x="4.7216%" y="175.50"></text></g><g><title>0x11005eeac (2 samples, 0.01%)</title><rect x="4.4716%" y="149" width="0.0137%" height="15" fill="rgb(221,13,13)" fg:x="655" fg:w="2"/><text x="4.7216%" y="159.50"></text></g><g><title>deno_head`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.01%)</title><rect x="4.4716%" y="133" width="0.0137%" height="15" fill="rgb(238,131,9)" fg:x="655" fg:w="2"/><text x="4.7216%" y="143.50"></text></g><g><title>deno_head`v8::internal::Builtin_HandleApiCall (2 samples, 0.01%)</title><rect x="4.4716%" y="117" width="0.0137%" height="15" fill="rgb(211,50,8)" fg:x="655" fg:w="2"/><text x="4.7216%" y="127.50"></text></g><g><title>deno_head`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2 samples, 0.01%)</title><rect x="4.4716%" y="101" width="0.0137%" height="15" fill="rgb(245,182,24)" fg:x="655" fg:w="2"/><text x="4.7216%" y="111.50"></text></g><g><title>deno_head`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.01%)</title><rect x="4.4716%" y="85" width="0.0137%" height="15" fill="rgb(242,14,37)" fg:x="655" fg:w="2"/><text x="4.7216%" y="95.50"></text></g><g><title>0x11004834c (2 samples, 0.01%)</title><rect x="4.4989%" y="117" width="0.0137%" height="15" fill="rgb(246,228,12)" fg:x="659" fg:w="2"/><text x="4.7489%" y="127.50"></text></g><g><title>0x1100485a4 (2 samples, 0.01%)</title><rect x="4.5194%" y="117" width="0.0137%" height="15" fill="rgb(213,55,15)" fg:x="662" fg:w="2"/><text x="4.7694%" y="127.50"></text></g><g><title>0x11004fa04 (2 samples, 0.01%)</title><rect x="4.5194%" y="101" width="0.0137%" height="15" fill="rgb(209,9,3)" fg:x="662" fg:w="2"/><text x="4.7694%" y="111.50"></text></g><g><title>deno_head`Builtins_ArrayPrototypePush (2 samples, 0.01%)</title><rect x="4.5194%" y="85" width="0.0137%" height="15" fill="rgb(230,59,30)" fg:x="662" fg:w="2"/><text x="4.7694%" y="95.50"></text></g><g><title>0x11004c688 (8 samples, 0.05%)</title><rect x="4.4921%" y="165" width="0.0546%" height="15" fill="rgb(209,121,21)" fg:x="658" fg:w="8"/><text x="4.7421%" y="175.50"></text></g><g><title>0x11004af60 (8 samples, 0.05%)</title><rect x="4.4921%" y="149" width="0.0546%" height="15" fill="rgb(220,109,13)" fg:x="658" fg:w="8"/><text x="4.7421%" y="159.50"></text></g><g><title>deno_head`construct_stub_create_deopt_addr (8 samples, 0.05%)</title><rect x="4.4921%" y="133" width="0.0546%" height="15" fill="rgb(232,18,1)" fg:x="658" fg:w="8"/><text x="4.7421%" y="143.50"></text></g><g><title>0x11004e05c (2 samples, 0.01%)</title><rect x="4.5535%" y="165" width="0.0137%" height="15" fill="rgb(215,41,42)" fg:x="667" fg:w="2"/><text x="4.8035%" y="175.50"></text></g><g><title>deno_head`Builtins_KeyedLoadIC (2 samples, 0.01%)</title><rect x="4.5672%" y="149" width="0.0137%" height="15" fill="rgb(224,123,36)" fg:x="669" fg:w="2"/><text x="4.8172%" y="159.50"></text></g><g><title>deno_head`unsigned int v8::internal::StringHasher::HashSequentialString&lt;unsigned char&gt; (2 samples, 0.01%)</title><rect x="4.5808%" y="133" width="0.0137%" height="15" fill="rgb(240,125,3)" fg:x="671" fg:w="2"/><text x="4.8308%" y="143.50"></text></g><g><title>deno_head`Builtins_KeyedLoadIC_Megamorphic (3 samples, 0.02%)</title><rect x="4.5808%" y="149" width="0.0205%" height="15" fill="rgb(205,98,50)" fg:x="671" fg:w="3"/><text x="4.8308%" y="159.50"></text></g><g><title>0x11004e1ec (6 samples, 0.04%)</title><rect x="4.5672%" y="165" width="0.0410%" height="15" fill="rgb(205,185,37)" fg:x="669" fg:w="6"/><text x="4.8172%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (12 samples, 0.08%)</title><rect x="4.6081%" y="53" width="0.0819%" height="15" fill="rgb(238,207,15)" fg:x="675" fg:w="12"/><text x="4.8581%" y="63.50"></text></g><g><title>deno_head`deno_flash::flash_respond (13 samples, 0.09%)</title><rect x="4.6081%" y="69" width="0.0887%" height="15" fill="rgb(213,199,42)" fg:x="675" fg:w="13"/><text x="4.8581%" y="79.50"></text></g><g><title>0x11004b77c (15 samples, 0.10%)</title><rect x="4.6081%" y="149" width="0.1024%" height="15" fill="rgb(235,201,11)" fg:x="675" fg:w="15"/><text x="4.8581%" y="159.50"></text></g><g><title>deno_head`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (15 samples, 0.10%)</title><rect x="4.6081%" y="133" width="0.1024%" height="15" fill="rgb(207,46,11)" fg:x="675" fg:w="15"/><text x="4.8581%" y="143.50"></text></g><g><title>deno_head`v8::internal::Builtin_HandleApiCall (15 samples, 0.10%)</title><rect x="4.6081%" y="117" width="0.1024%" height="15" fill="rgb(241,35,35)" fg:x="675" fg:w="15"/><text x="4.8581%" y="127.50"></text></g><g><title>deno_head`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (15 samples, 0.10%)</title><rect x="4.6081%" y="101" width="0.1024%" height="15" fill="rgb(243,32,47)" fg:x="675" fg:w="15"/><text x="4.8581%" y="111.50"></text></g><g><title>deno_head`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (15 samples, 0.10%)</title><rect x="4.6081%" y="85" width="0.1024%" height="15" fill="rgb(247,202,23)" fg:x="675" fg:w="15"/><text x="4.8581%" y="95.50"></text></g><g><title>0x11004e5b8 (19 samples, 0.13%)</title><rect x="4.6081%" y="165" width="0.1297%" height="15" fill="rgb(219,102,11)" fg:x="675" fg:w="19"/><text x="4.8581%" y="175.50"></text></g><g><title>0x1100652d8 (4 samples, 0.03%)</title><rect x="4.7105%" y="149" width="0.0273%" height="15" fill="rgb(243,110,44)" fg:x="690" fg:w="4"/><text x="4.9605%" y="159.50"></text></g><g><title>deno_head`deno_flash::flash_respond (4 samples, 0.03%)</title><rect x="4.7105%" y="133" width="0.0273%" height="15" fill="rgb(222,74,54)" fg:x="690" fg:w="4"/><text x="4.9605%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (4 samples, 0.03%)</title><rect x="4.7105%" y="117" width="0.0273%" height="15" fill="rgb(216,99,12)" fg:x="690" fg:w="4"/><text x="4.9605%" y="127.50"></text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.01%)</title><rect x="4.7720%" y="133" width="0.0137%" height="15" fill="rgb(226,22,26)" fg:x="699" fg:w="2"/><text x="5.0220%" y="143.50"></text></g><g><title>deno_head`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.01%)</title><rect x="4.7856%" y="133" width="0.0137%" height="15" fill="rgb(217,163,10)" fg:x="701" fg:w="2"/><text x="5.0356%" y="143.50"></text></g><g><title>deno_head`deno_flash::next_request_sync (8 samples, 0.05%)</title><rect x="4.7515%" y="149" width="0.0546%" height="15" fill="rgb(213,25,53)" fg:x="696" fg:w="8"/><text x="5.0015%" y="159.50"></text></g><g><title>0x1100579b8 (9 samples, 0.06%)</title><rect x="4.7515%" y="165" width="0.0614%" height="15" fill="rgb(252,105,26)" fg:x="696" fg:w="9"/><text x="5.0015%" y="175.50"></text></g><g><title>0x110057f08 (9 samples, 0.06%)</title><rect x="4.8266%" y="165" width="0.0614%" height="15" fill="rgb(220,39,43)" fg:x="707" fg:w="9"/><text x="5.0766%" y="175.50"></text></g><g><title>deno_head`Builtins_StringAdd_CheckNone (6 samples, 0.04%)</title><rect x="4.8471%" y="149" width="0.0410%" height="15" fill="rgb(229,68,48)" fg:x="710" fg:w="6"/><text x="5.0971%" y="159.50"></text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.01%)</title><rect x="4.9085%" y="133" width="0.0137%" height="15" fill="rgb(252,8,32)" fg:x="719" fg:w="2"/><text x="5.1585%" y="143.50"></text></g><g><title>deno_head`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="4.9085%" y="117" width="0.0137%" height="15" fill="rgb(223,20,43)" fg:x="719" fg:w="2"/><text x="5.1585%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (294 samples, 2.01%)</title><rect x="4.9222%" y="133" width="2.0071%" height="15" fill="rgb(229,81,49)" fg:x="721" fg:w="294"/><text x="5.1722%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="6.9293%" y="133" width="0.0205%" height="15" fill="rgb(236,28,36)" fg:x="1015" fg:w="3"/><text x="7.1793%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="6.9361%" y="117" width="0.0137%" height="15" fill="rgb(249,185,26)" fg:x="1016" fg:w="2"/><text x="7.1861%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="6.9361%" y="101" width="0.0137%" height="15" fill="rgb(249,174,33)" fg:x="1016" fg:w="2"/><text x="7.1861%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.03%)</title><rect x="6.9839%" y="117" width="0.0273%" height="15" fill="rgb(233,201,37)" fg:x="1023" fg:w="4"/><text x="7.2339%" y="127.50"></text></g><g><title>deno_head`deno_flash::flash_respond (312 samples, 2.13%)</title><rect x="4.9017%" y="149" width="2.1300%" height="15" fill="rgb(221,78,26)" fg:x="718" fg:w="312"/><text x="5.1517%" y="159.50">d..</text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.08%)</title><rect x="6.9498%" y="133" width="0.0819%" height="15" fill="rgb(250,127,30)" fg:x="1018" fg:w="12"/><text x="7.1998%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="7.0180%" y="117" width="0.0137%" height="15" fill="rgb(230,49,44)" fg:x="1028" fg:w="2"/><text x="7.2680%" y="127.50"></text></g><g><title>0x110058124 (317 samples, 2.16%)</title><rect x="4.8880%" y="165" width="2.1641%" height="15" fill="rgb(229,67,23)" fg:x="716" fg:w="317"/><text x="5.1380%" y="175.50">0..</text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="7.0385%" y="149" width="0.0137%" height="15" fill="rgb(249,83,47)" fg:x="1031" fg:w="2"/><text x="7.2885%" y="159.50"></text></g><g><title>deno_head`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.01%)</title><rect x="7.0726%" y="85" width="0.0137%" height="15" fill="rgb(215,43,3)" fg:x="1036" fg:w="2"/><text x="7.3226%" y="95.50"></text></g><g><title>0x1100522b8 (3 samples, 0.02%)</title><rect x="7.0726%" y="149" width="0.0205%" height="15" fill="rgb(238,154,13)" fg:x="1036" fg:w="3"/><text x="7.3226%" y="159.50"></text></g><g><title>deno_head`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (3 samples, 0.02%)</title><rect x="7.0726%" y="133" width="0.0205%" height="15" fill="rgb(219,56,2)" fg:x="1036" fg:w="3"/><text x="7.3226%" y="143.50"></text></g><g><title>deno_head`v8::internal::Builtin_HandleApiCall (3 samples, 0.02%)</title><rect x="7.0726%" y="117" width="0.0205%" height="15" fill="rgb(233,0,4)" fg:x="1036" fg:w="3"/><text x="7.3226%" y="127.50"></text></g><g><title>deno_head`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (3 samples, 0.02%)</title><rect x="7.0726%" y="101" width="0.0205%" height="15" fill="rgb(235,30,7)" fg:x="1036" fg:w="3"/><text x="7.3226%" y="111.50"></text></g><g><title>deno_head`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.01%)</title><rect x="7.1136%" y="85" width="0.0137%" height="15" fill="rgb(250,79,13)" fg:x="1042" fg:w="2"/><text x="7.3636%" y="95.50"></text></g><g><title>deno_head`v8::scope::data::ScopeData::notify_scope_dropped (2 samples, 0.01%)</title><rect x="7.1136%" y="69" width="0.0137%" height="15" fill="rgb(211,146,34)" fg:x="1042" fg:w="2"/><text x="7.3636%" y="79.50"></text></g><g><title>0x11005eeac (4 samples, 0.03%)</title><rect x="7.1068%" y="149" width="0.0273%" height="15" fill="rgb(228,22,38)" fg:x="1041" fg:w="4"/><text x="7.3568%" y="159.50"></text></g><g><title>deno_head`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (4 samples, 0.03%)</title><rect x="7.1068%" y="133" width="0.0273%" height="15" fill="rgb(235,168,5)" fg:x="1041" fg:w="4"/><text x="7.3568%" y="143.50"></text></g><g><title>deno_head`v8::internal::Builtin_HandleApiCall (4 samples, 0.03%)</title><rect x="7.1068%" y="117" width="0.0273%" height="15" fill="rgb(221,155,16)" fg:x="1041" fg:w="4"/><text x="7.3568%" y="127.50"></text></g><g><title>deno_head`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (4 samples, 0.03%)</title><rect x="7.1068%" y="101" width="0.0273%" height="15" fill="rgb(215,215,53)" fg:x="1041" fg:w="4"/><text x="7.3568%" y="111.50"></text></g><g><title>0x1100583f4 (10 samples, 0.07%)</title><rect x="7.0726%" y="165" width="0.0683%" height="15" fill="rgb(223,4,10)" fg:x="1036" fg:w="10"/><text x="7.3226%" y="175.50"></text></g><g><title>0x110058840 (2 samples, 0.01%)</title><rect x="7.1614%" y="165" width="0.0137%" height="15" fill="rgb(234,103,6)" fg:x="1049" fg:w="2"/><text x="7.4114%" y="175.50"></text></g><g><title>deno_head`Builtins_LoadIC (2 samples, 0.01%)</title><rect x="7.1887%" y="149" width="0.0137%" height="15" fill="rgb(227,97,0)" fg:x="1053" fg:w="2"/><text x="7.4387%" y="159.50"></text></g><g><title>0x110058a30 (7 samples, 0.05%)</title><rect x="7.1750%" y="165" width="0.0478%" height="15" fill="rgb(234,150,53)" fg:x="1051" fg:w="7"/><text x="7.4250%" y="175.50"></text></g><g><title>deno_head`Builtins_LoadIC_FunctionPrototype (2 samples, 0.01%)</title><rect x="7.2092%" y="149" width="0.0137%" height="15" fill="rgb(228,201,54)" fg:x="1056" fg:w="2"/><text x="7.4592%" y="159.50"></text></g><g><title>0x110058c18 (2 samples, 0.01%)</title><rect x="7.2501%" y="165" width="0.0137%" height="15" fill="rgb(222,22,37)" fg:x="1062" fg:w="2"/><text x="7.5001%" y="175.50"></text></g><g><title>0x110058cac (4 samples, 0.03%)</title><rect x="7.2774%" y="165" width="0.0273%" height="15" fill="rgb(237,53,32)" fg:x="1066" fg:w="4"/><text x="7.5274%" y="175.50"></text></g><g><title>0x11005ae00 (2 samples, 0.01%)</title><rect x="7.3457%" y="149" width="0.0137%" height="15" fill="rgb(233,25,53)" fg:x="1076" fg:w="2"/><text x="7.5957%" y="159.50"></text></g><g><title>0x110058edc (5 samples, 0.03%)</title><rect x="7.3457%" y="165" width="0.0341%" height="15" fill="rgb(210,40,34)" fg:x="1076" fg:w="5"/><text x="7.5957%" y="175.50"></text></g><g><title>0x110059328 (7 samples, 0.05%)</title><rect x="7.3935%" y="165" width="0.0478%" height="15" fill="rgb(241,220,44)" fg:x="1083" fg:w="7"/><text x="7.6435%" y="175.50"></text></g><g><title>deno_head`Builtins_AsyncFunctionAwaitCaught (7 samples, 0.05%)</title><rect x="7.3935%" y="149" width="0.0478%" height="15" fill="rgb(235,28,35)" fg:x="1083" fg:w="7"/><text x="7.6435%" y="159.50"></text></g><g><title>deno_head`Builtins_ResolvePromise (5 samples, 0.03%)</title><rect x="7.4072%" y="133" width="0.0341%" height="15" fill="rgb(210,56,17)" fg:x="1085" fg:w="5"/><text x="7.6572%" y="143.50"></text></g><g><title>deno_head`Builtins_GetProperty (4 samples, 0.03%)</title><rect x="7.4140%" y="117" width="0.0273%" height="15" fill="rgb(224,130,29)" fg:x="1086" fg:w="4"/><text x="7.6640%" y="127.50"></text></g><g><title>deno_head`unsigned int v8::internal::StringHasher::HashSequentialString&lt;unsigned char&gt; (22 samples, 0.15%)</title><rect x="7.4549%" y="149" width="0.1502%" height="15" fill="rgb(235,212,8)" fg:x="1092" fg:w="22"/><text x="7.7049%" y="159.50"></text></g><g><title>deno_head`v8::internal::(anonymous namespace)::SetInternalizedReference (3 samples, 0.02%)</title><rect x="7.6256%" y="133" width="0.0205%" height="15" fill="rgb(223,33,50)" fg:x="1117" fg:w="3"/><text x="7.8756%" y="143.50"></text></g><g><title>deno_head`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (11 samples, 0.08%)</title><rect x="7.6461%" y="133" width="0.0751%" height="15" fill="rgb(219,149,13)" fg:x="1120" fg:w="11"/><text x="7.8961%" y="143.50"></text></g><g><title>deno_head`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (4 samples, 0.03%)</title><rect x="7.6939%" y="117" width="0.0273%" height="15" fill="rgb(250,156,29)" fg:x="1127" fg:w="4"/><text x="7.9439%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.05%)</title><rect x="7.7417%" y="133" width="0.0546%" height="15" fill="rgb(216,193,19)" fg:x="1134" fg:w="8"/><text x="7.9917%" y="143.50"></text></g><g><title>0x110059648 (51 samples, 0.35%)</title><rect x="7.4549%" y="165" width="0.3482%" height="15" fill="rgb(216,135,14)" fg:x="1092" fg:w="51"/><text x="7.7049%" y="175.50"></text></g><g><title>deno_head`unsigned long v8::internal::StringTable::Data::TryStringToIndexOrLookupExisting&lt;unsigned char&gt; (29 samples, 0.20%)</title><rect x="7.6051%" y="149" width="0.1980%" height="15" fill="rgb(241,47,5)" fg:x="1114" fg:w="29"/><text x="7.8551%" y="159.50"></text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.03%)</title><rect x="7.8850%" y="133" width="0.0341%" height="15" fill="rgb(233,42,35)" fg:x="1155" fg:w="5"/><text x="8.1350%" y="143.50"></text></g><g><title>deno_head`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="7.9055%" y="117" width="0.0137%" height="15" fill="rgb(231,13,6)" fg:x="1158" fg:w="2"/><text x="8.1555%" y="127.50"></text></g><g><title>deno_head`deno_flash::next_request_sync (14 samples, 0.10%)</title><rect x="7.8304%" y="149" width="0.0956%" height="15" fill="rgb(207,181,40)" fg:x="1147" fg:w="14"/><text x="8.0804%" y="159.50"></text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.02%)</title><rect x="7.9260%" y="149" width="0.0205%" height="15" fill="rgb(254,173,49)" fg:x="1161" fg:w="3"/><text x="8.1760%" y="159.50"></text></g><g><title>0x110060fc8 (18 samples, 0.12%)</title><rect x="7.8304%" y="165" width="0.1229%" height="15" fill="rgb(221,1,38)" fg:x="1147" fg:w="18"/><text x="8.0804%" y="175.50"></text></g><g><title>0x110061080 (2 samples, 0.01%)</title><rect x="7.9601%" y="165" width="0.0137%" height="15" fill="rgb(206,124,46)" fg:x="1166" fg:w="2"/><text x="8.2101%" y="175.50"></text></g><g><title>0x1100613b8 (2 samples, 0.01%)</title><rect x="8.0011%" y="165" width="0.0137%" height="15" fill="rgb(249,21,11)" fg:x="1172" fg:w="2"/><text x="8.2511%" y="175.50"></text></g><g><title>0x1100567ec (3 samples, 0.02%)</title><rect x="8.0284%" y="149" width="0.0205%" height="15" fill="rgb(222,201,40)" fg:x="1176" fg:w="3"/><text x="8.2784%" y="159.50"></text></g><g><title>deno_head`Builtins_NumberToString (2 samples, 0.01%)</title><rect x="8.0898%" y="149" width="0.0137%" height="15" fill="rgb(235,61,29)" fg:x="1185" fg:w="2"/><text x="8.3398%" y="159.50"></text></g><g><title>deno_head`Builtins_StringAdd_CheckNone (7 samples, 0.05%)</title><rect x="8.1035%" y="149" width="0.0478%" height="15" fill="rgb(219,207,3)" fg:x="1187" fg:w="7"/><text x="8.3535%" y="159.50"></text></g><g><title>0x110061534 (19 samples, 0.13%)</title><rect x="8.0284%" y="165" width="0.1297%" height="15" fill="rgb(222,56,46)" fg:x="1176" fg:w="19"/><text x="8.2784%" y="175.50"></text></g><g><title>deno_head`unsigned int v8::internal::StringHasher::HashSequentialString&lt;unsigned char&gt; (28 samples, 0.19%)</title><rect x="8.1718%" y="133" width="0.1912%" height="15" fill="rgb(239,76,54)" fg:x="1197" fg:w="28"/><text x="8.4218%" y="143.50"></text></g><g><title>deno_head`bool v8::internal::String::IsEqualTo&lt;(v8::internal::String::EqualityType)2, unsigned char&gt;(v8::base::Vector (3 samples, 0.02%)</title><rect x="8.4039%" y="117" width="0.0205%" height="15" fill="rgb(231,124,27)" fg:x="1231" fg:w="3"/><text x="8.6539%" y="127.50"></text></g><g><title>deno_head`v8::internal::(anonymous namespace)::SetInternalizedReference (4 samples, 0.03%)</title><rect x="8.4312%" y="117" width="0.0273%" height="15" fill="rgb(249,195,6)" fg:x="1235" fg:w="4"/><text x="8.6812%" y="127.50"></text></g><g><title>deno_head`void v8::internal::String::MakeThin&lt;v8::internal::Isolate&gt; (2 samples, 0.01%)</title><rect x="8.4448%" y="101" width="0.0137%" height="15" fill="rgb(237,174,47)" fg:x="1237" fg:w="2"/><text x="8.6948%" y="111.50"></text></g><g><title>deno_head`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (14 samples, 0.10%)</title><rect x="8.4585%" y="117" width="0.0956%" height="15" fill="rgb(206,201,31)" fg:x="1239" fg:w="14"/><text x="8.7085%" y="127.50"></text></g><g><title>deno_head`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (6 samples, 0.04%)</title><rect x="8.5131%" y="101" width="0.0410%" height="15" fill="rgb(231,57,52)" fg:x="1247" fg:w="6"/><text x="8.7631%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.03%)</title><rect x="8.5609%" y="117" width="0.0273%" height="15" fill="rgb(248,177,22)" fg:x="1254" fg:w="4"/><text x="8.8109%" y="127.50"></text></g><g><title>deno_head`unsigned long v8::internal::StringTable::Data::TryStringToIndexOrLookupExisting&lt;unsigned char&gt; (34 samples, 0.23%)</title><rect x="8.3629%" y="133" width="0.2321%" height="15" fill="rgb(215,211,37)" fg:x="1225" fg:w="34"/><text x="8.6129%" y="143.50"></text></g><g><title>deno_head`Builtins_KeyedLoadIC_Megamorphic (67 samples, 0.46%)</title><rect x="8.1581%" y="149" width="0.4574%" height="15" fill="rgb(241,128,51)" fg:x="1195" fg:w="67"/><text x="8.4081%" y="159.50"></text></g><g><title>0x110061598 (68 samples, 0.46%)</title><rect x="8.1581%" y="165" width="0.4642%" height="15" fill="rgb(227,165,31)" fg:x="1195" fg:w="68"/><text x="8.4081%" y="175.50"></text></g><g><title>0x1100616a0 (2 samples, 0.01%)</title><rect x="8.6223%" y="165" width="0.0137%" height="15" fill="rgb(228,167,24)" fg:x="1263" fg:w="2"/><text x="8.8723%" y="175.50"></text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (3 samples, 0.02%)</title><rect x="8.6428%" y="133" width="0.0205%" height="15" fill="rgb(228,143,12)" fg:x="1266" fg:w="3"/><text x="8.8928%" y="143.50"></text></g><g><title>deno_head`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="8.6496%" y="117" width="0.0137%" height="15" fill="rgb(249,149,8)" fg:x="1267" fg:w="2"/><text x="8.8996%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (438 samples, 2.99%)</title><rect x="8.6633%" y="133" width="2.9902%" height="15" fill="rgb(243,35,44)" fg:x="1269" fg:w="438"/><text x="8.9133%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.02%)</title><rect x="11.6603%" y="117" width="0.0205%" height="15" fill="rgb(246,89,9)" fg:x="1708" fg:w="3"/><text x="11.9103%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.05%)</title><rect x="11.6535%" y="133" width="0.0546%" height="15" fill="rgb(233,213,13)" fg:x="1707" fg:w="8"/><text x="11.9035%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.03%)</title><rect x="11.6808%" y="117" width="0.0273%" height="15" fill="rgb(233,141,41)" fg:x="1711" fg:w="4"/><text x="11.9308%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.03%)</title><rect x="11.6808%" y="101" width="0.0273%" height="15" fill="rgb(239,167,4)" fg:x="1711" fg:w="4"/><text x="11.9308%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (4 samples, 0.03%)</title><rect x="11.7832%" y="117" width="0.0273%" height="15" fill="rgb(209,217,16)" fg:x="1726" fg:w="4"/><text x="12.0332%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.04%)</title><rect x="11.8105%" y="117" width="0.0410%" height="15" fill="rgb(219,88,35)" fg:x="1730" fg:w="6"/><text x="12.0605%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (25 samples, 0.17%)</title><rect x="11.7081%" y="133" width="0.1707%" height="15" fill="rgb(220,193,23)" fg:x="1715" fg:w="25"/><text x="11.9581%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.03%)</title><rect x="11.8514%" y="117" width="0.0273%" height="15" fill="rgb(230,90,52)" fg:x="1736" fg:w="4"/><text x="12.1014%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="11.8788%" y="133" width="0.0137%" height="15" fill="rgb(252,106,19)" fg:x="1740" fg:w="2"/><text x="12.1288%" y="143.50"></text></g><g><title>deno_head`deno_flash::flash_respond (478 samples, 3.26%)</title><rect x="8.6360%" y="149" width="3.2632%" height="15" fill="rgb(206,74,20)" fg:x="1265" fg:w="478"/><text x="8.8860%" y="159.50">den..</text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.01%)</title><rect x="11.8992%" y="149" width="0.0137%" height="15" fill="rgb(230,138,44)" fg:x="1743" fg:w="2"/><text x="12.1492%" y="159.50"></text></g><g><title>deno_head`v8__Object__GetAlignedPointerFromInternalField (2 samples, 0.01%)</title><rect x="11.9129%" y="149" width="0.0137%" height="15" fill="rgb(235,182,43)" fg:x="1745" fg:w="2"/><text x="12.1629%" y="159.50"></text></g><g><title>0x110061754 (484 samples, 3.30%)</title><rect x="8.6360%" y="165" width="3.3042%" height="15" fill="rgb(242,16,51)" fg:x="1265" fg:w="484"/><text x="8.8860%" y="175.50">0x1..</text></g><g><title>0x11005be08 (4 samples, 0.03%)</title><rect x="11.9607%" y="149" width="0.0273%" height="15" fill="rgb(248,9,4)" fg:x="1752" fg:w="4"/><text x="12.2107%" y="159.50"></text></g><g><title>0x110061ac0 (8 samples, 0.05%)</title><rect x="11.9402%" y="165" width="0.0546%" height="15" fill="rgb(210,31,22)" fg:x="1749" fg:w="8"/><text x="12.1902%" y="175.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="12.0016%" y="117" width="0.0341%" height="15" fill="rgb(239,54,39)" fg:x="1758" fg:w="5"/><text x="12.2516%" y="127.50"></text></g><g><title>deno_head`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.01%)</title><rect x="12.0221%" y="101" width="0.0137%" height="15" fill="rgb(230,99,41)" fg:x="1761" fg:w="2"/><text x="12.2721%" y="111.50"></text></g><g><title>deno_head`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (7 samples, 0.05%)</title><rect x="12.0016%" y="133" width="0.0478%" height="15" fill="rgb(253,106,12)" fg:x="1758" fg:w="7"/><text x="12.2516%" y="143.50"></text></g><g><title>0x110061dc8 (9 samples, 0.06%)</title><rect x="11.9948%" y="165" width="0.0614%" height="15" fill="rgb(213,46,41)" fg:x="1757" fg:w="9"/><text x="12.2448%" y="175.50"></text></g><g><title>deno_head`Builtins_CallApiCallback (8 samples, 0.05%)</title><rect x="12.0016%" y="149" width="0.0546%" height="15" fill="rgb(215,133,35)" fg:x="1758" fg:w="8"/><text x="12.2516%" y="159.50"></text></g><g><title>0x1100625d4 (3 samples, 0.02%)</title><rect x="12.0699%" y="165" width="0.0205%" height="15" fill="rgb(213,28,5)" fg:x="1768" fg:w="3"/><text x="12.3199%" y="175.50"></text></g><g><title>0x1100625dc (2 samples, 0.01%)</title><rect x="12.0904%" y="165" width="0.0137%" height="15" fill="rgb(215,77,49)" fg:x="1771" fg:w="2"/><text x="12.3404%" y="175.50"></text></g><g><title>deno_head`deno_flash::op_flash_get_method_fast (2 samples, 0.01%)</title><rect x="12.0904%" y="149" width="0.0137%" height="15" fill="rgb(248,100,22)" fg:x="1771" fg:w="2"/><text x="12.3404%" y="159.50"></text></g><g><title>deno_head`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="12.0904%" y="133" width="0.0137%" height="15" fill="rgb(208,67,9)" fg:x="1771" fg:w="2"/><text x="12.3404%" y="143.50"></text></g><g><title>deno_head`Builtins_FastNewObject (4 samples, 0.03%)</title><rect x="12.1450%" y="149" width="0.0273%" height="15" fill="rgb(219,133,21)" fg:x="1779" fg:w="4"/><text x="12.3950%" y="159.50"></text></g><g><title>0x11005b78c (2 samples, 0.01%)</title><rect x="12.1928%" y="133" width="0.0137%" height="15" fill="rgb(246,46,29)" fg:x="1786" fg:w="2"/><text x="12.4428%" y="143.50"></text></g><g><title>0x11005fe9c (4 samples, 0.03%)</title><rect x="12.2064%" y="133" width="0.0273%" height="15" fill="rgb(246,185,52)" fg:x="1788" fg:w="4"/><text x="12.4564%" y="143.50"></text></g><g><title>0x110060118 (2 samples, 0.01%)</title><rect x="12.2474%" y="133" width="0.0137%" height="15" fill="rgb(252,136,11)" fg:x="1794" fg:w="2"/><text x="12.4974%" y="143.50"></text></g><g><title>0x110062924 (21 samples, 0.14%)</title><rect x="12.1382%" y="165" width="0.1434%" height="15" fill="rgb(219,138,53)" fg:x="1778" fg:w="21"/><text x="12.3882%" y="175.50"></text></g><g><title>deno_head`construct_stub_create_deopt_addr (16 samples, 0.11%)</title><rect x="12.1723%" y="149" width="0.1092%" height="15" fill="rgb(211,51,23)" fg:x="1783" fg:w="16"/><text x="12.4223%" y="159.50"></text></g><g><title>0x110062938 (12 samples, 0.08%)</title><rect x="12.2815%" y="165" width="0.0819%" height="15" fill="rgb(247,221,28)" fg:x="1799" fg:w="12"/><text x="12.5315%" y="175.50"></text></g><g><title>deno_head`Builtins_AsyncFunctionAwaitCaught (12 samples, 0.08%)</title><rect x="12.2815%" y="149" width="0.0819%" height="15" fill="rgb(251,222,45)" fg:x="1799" fg:w="12"/><text x="12.5315%" y="159.50"></text></g><g><title>deno_head`Builtins_ResolvePromise (5 samples, 0.03%)</title><rect x="12.3293%" y="133" width="0.0341%" height="15" fill="rgb(217,162,53)" fg:x="1806" fg:w="5"/><text x="12.5793%" y="143.50"></text></g><g><title>deno_head`Builtins_GetProperty (5 samples, 0.03%)</title><rect x="12.3293%" y="117" width="0.0341%" height="15" fill="rgb(229,93,14)" fg:x="1806" fg:w="5"/><text x="12.5793%" y="127.50"></text></g><g><title>0x110063958 (4 samples, 0.03%)</title><rect x="12.3635%" y="165" width="0.0273%" height="15" fill="rgb(209,67,49)" fg:x="1811" fg:w="4"/><text x="12.6135%" y="175.50"></text></g><g><title>deno_head`Builtins_RecordWriteSaveFP (3 samples, 0.02%)</title><rect x="12.3703%" y="149" width="0.0205%" height="15" fill="rgb(213,87,29)" fg:x="1812" fg:w="3"/><text x="12.6203%" y="159.50"></text></g><g><title>0x110065790 (4 samples, 0.03%)</title><rect x="12.4249%" y="165" width="0.0273%" height="15" fill="rgb(205,151,52)" fg:x="1820" fg:w="4"/><text x="12.6749%" y="175.50"></text></g><g><title>0x1100658e8 (3 samples, 0.02%)</title><rect x="12.4659%" y="165" width="0.0205%" height="15" fill="rgb(253,215,39)" fg:x="1826" fg:w="3"/><text x="12.7159%" y="175.50"></text></g><g><title>0x110065954 (2 samples, 0.01%)</title><rect x="12.5068%" y="165" width="0.0137%" height="15" fill="rgb(221,220,41)" fg:x="1832" fg:w="2"/><text x="12.7568%" y="175.50"></text></g><g><title>deno_head`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (2 samples, 0.01%)</title><rect x="12.5273%" y="149" width="0.0137%" height="15" fill="rgb(218,133,21)" fg:x="1835" fg:w="2"/><text x="12.7773%" y="159.50"></text></g><g><title>deno_head`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.05%)</title><rect x="13.0735%" y="117" width="0.0546%" height="15" fill="rgb(221,193,43)" fg:x="1915" fg:w="8"/><text x="13.3235%" y="127.50"></text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (37 samples, 0.25%)</title><rect x="12.8960%" y="133" width="0.2526%" height="15" fill="rgb(240,128,52)" fg:x="1889" fg:w="37"/><text x="13.1460%" y="143.50"></text></g><g><title>deno_head`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="13.1281%" y="117" width="0.0205%" height="15" fill="rgb(253,114,12)" fg:x="1923" fg:w="3"/><text x="13.3781%" y="127.50"></text></g><g><title>deno_head`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (20 samples, 0.14%)</title><rect x="13.1486%" y="133" width="0.1365%" height="15" fill="rgb(215,223,47)" fg:x="1926" fg:w="20"/><text x="13.3986%" y="143.50"></text></g><g><title>deno_head`deno_flash::next_request_sync (145 samples, 0.99%)</title><rect x="12.5410%" y="149" width="0.9899%" height="15" fill="rgb(248,225,23)" fg:x="1837" fg:w="145"/><text x="12.7910%" y="159.50"></text></g><g><title>deno_head`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (36 samples, 0.25%)</title><rect x="13.2851%" y="133" width="0.2458%" height="15" fill="rgb(250,108,0)" fg:x="1946" fg:w="36"/><text x="13.5351%" y="143.50"></text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.04%)</title><rect x="13.5309%" y="149" width="0.0410%" height="15" fill="rgb(228,208,7)" fg:x="1982" fg:w="6"/><text x="13.7809%" y="159.50"></text></g><g><title>deno_head`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.01%)</title><rect x="13.5718%" y="149" width="0.0137%" height="15" fill="rgb(244,45,10)" fg:x="1988" fg:w="2"/><text x="13.8218%" y="159.50"></text></g><g><title>deno_head`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (5 samples, 0.03%)</title><rect x="13.5855%" y="149" width="0.0341%" height="15" fill="rgb(207,125,25)" fg:x="1990" fg:w="5"/><text x="13.8355%" y="159.50"></text></g><g><title>0x1100659b8 (161 samples, 1.10%)</title><rect x="12.5273%" y="165" width="1.0991%" height="15" fill="rgb(210,195,18)" fg:x="1835" fg:w="161"/><text x="12.7773%" y="175.50"></text></g><g><title>0x110065a60 (5 samples, 0.03%)</title><rect x="13.6401%" y="165" width="0.0341%" height="15" fill="rgb(249,80,12)" fg:x="1998" fg:w="5"/><text x="13.8901%" y="175.50"></text></g><g><title>0x110065a6c (2 samples, 0.01%)</title><rect x="13.6742%" y="165" width="0.0137%" height="15" fill="rgb(221,65,9)" fg:x="2003" fg:w="2"/><text x="13.9242%" y="175.50"></text></g><g><title>0x110065b60 (11 samples, 0.08%)</title><rect x="13.7220%" y="165" width="0.0751%" height="15" fill="rgb(235,49,36)" fg:x="2010" fg:w="11"/><text x="13.9720%" y="175.50"></text></g><g><title>0x110065b70 (2 samples, 0.01%)</title><rect x="13.7971%" y="165" width="0.0137%" height="15" fill="rgb(225,32,20)" fg:x="2021" fg:w="2"/><text x="14.0471%" y="175.50"></text></g><g><title>0x110065b98 (2 samples, 0.01%)</title><rect x="13.8108%" y="165" width="0.0137%" height="15" fill="rgb(215,141,46)" fg:x="2023" fg:w="2"/><text x="14.0608%" y="175.50"></text></g><g><title>0x110065bf4 (3 samples, 0.02%)</title><rect x="13.8381%" y="165" width="0.0205%" height="15" fill="rgb(250,160,47)" fg:x="2027" fg:w="3"/><text x="14.0881%" y="175.50"></text></g><g><title>0x110065c00 (2 samples, 0.01%)</title><rect x="13.8585%" y="165" width="0.0137%" height="15" fill="rgb(216,222,40)" fg:x="2030" fg:w="2"/><text x="14.1085%" y="175.50"></text></g><g><title>0x110065cc8 (3 samples, 0.02%)</title><rect x="13.8790%" y="165" width="0.0205%" height="15" fill="rgb(234,217,39)" fg:x="2033" fg:w="3"/><text x="14.1290%" y="175.50"></text></g><g><title>0x110065d54 (2 samples, 0.01%)</title><rect x="13.9200%" y="165" width="0.0137%" height="15" fill="rgb(207,178,40)" fg:x="2039" fg:w="2"/><text x="14.1700%" y="175.50"></text></g><g><title>0x110065dc4 (3 samples, 0.02%)</title><rect x="13.9336%" y="165" width="0.0205%" height="15" fill="rgb(221,136,13)" fg:x="2041" fg:w="3"/><text x="14.1836%" y="175.50"></text></g><g><title>0x110065ddc (2 samples, 0.01%)</title><rect x="13.9541%" y="165" width="0.0137%" height="15" fill="rgb(249,199,10)" fg:x="2044" fg:w="2"/><text x="14.2041%" y="175.50"></text></g><g><title>0x110065e2c (4 samples, 0.03%)</title><rect x="13.9746%" y="165" width="0.0273%" height="15" fill="rgb(249,222,13)" fg:x="2047" fg:w="4"/><text x="14.2246%" y="175.50"></text></g><g><title>0x110065e40 (3 samples, 0.02%)</title><rect x="14.0019%" y="165" width="0.0205%" height="15" fill="rgb(244,185,38)" fg:x="2051" fg:w="3"/><text x="14.2519%" y="175.50"></text></g><g><title>0x1100567ec (15 samples, 0.10%)</title><rect x="14.0429%" y="149" width="0.1024%" height="15" fill="rgb(236,202,9)" fg:x="2057" fg:w="15"/><text x="14.2929%" y="159.50"></text></g><g><title>deno_head`Builtins_ToString (14 samples, 0.10%)</title><rect x="14.0497%" y="133" width="0.0956%" height="15" fill="rgb(250,229,37)" fg:x="2058" fg:w="14"/><text x="14.2997%" y="143.50"></text></g><g><title>0x11005683c (4 samples, 0.03%)</title><rect x="14.1453%" y="149" width="0.0273%" height="15" fill="rgb(206,174,23)" fg:x="2072" fg:w="4"/><text x="14.3953%" y="159.50"></text></g><g><title>0x1100568b4 (2 samples, 0.01%)</title><rect x="14.1862%" y="149" width="0.0137%" height="15" fill="rgb(211,33,43)" fg:x="2078" fg:w="2"/><text x="14.4362%" y="159.50"></text></g><g><title>deno_head`Builtins_ToString (2 samples, 0.01%)</title><rect x="14.1862%" y="133" width="0.0137%" height="15" fill="rgb(245,58,50)" fg:x="2078" fg:w="2"/><text x="14.4362%" y="143.50"></text></g><g><title>0x11005692c (2 samples, 0.01%)</title><rect x="14.2272%" y="149" width="0.0137%" height="15" fill="rgb(244,68,36)" fg:x="2084" fg:w="2"/><text x="14.4772%" y="159.50"></text></g><g><title>deno_head`Builtins_ToString (2 samples, 0.01%)</title><rect x="14.2272%" y="133" width="0.0137%" height="15" fill="rgb(232,229,15)" fg:x="2084" fg:w="2"/><text x="14.4772%" y="143.50"></text></g><g><title>0x110056b68 (2 samples, 0.01%)</title><rect x="14.3364%" y="149" width="0.0137%" height="15" fill="rgb(254,30,23)" fg:x="2100" fg:w="2"/><text x="14.5864%" y="159.50"></text></g><g><title>0x110056ba8 (4 samples, 0.03%)</title><rect x="14.3501%" y="149" width="0.0273%" height="15" fill="rgb(235,160,14)" fg:x="2102" fg:w="4"/><text x="14.6001%" y="159.50"></text></g><g><title>0x110056bd0 (2 samples, 0.01%)</title><rect x="14.3774%" y="149" width="0.0137%" height="15" fill="rgb(212,155,44)" fg:x="2106" fg:w="2"/><text x="14.6274%" y="159.50"></text></g><g><title>0x110056e94 (2 samples, 0.01%)</title><rect x="14.4252%" y="149" width="0.0137%" height="15" fill="rgb(226,2,50)" fg:x="2113" fg:w="2"/><text x="14.6752%" y="159.50"></text></g><g><title>0x110056f34 (2 samples, 0.01%)</title><rect x="14.4388%" y="149" width="0.0137%" height="15" fill="rgb(234,177,6)" fg:x="2115" fg:w="2"/><text x="14.6888%" y="159.50"></text></g><g><title>0x110056f7c (2 samples, 0.01%)</title><rect x="14.4525%" y="149" width="0.0137%" height="15" fill="rgb(217,24,9)" fg:x="2117" fg:w="2"/><text x="14.7025%" y="159.50"></text></g><g><title>deno_head`Builtins_NumberToString (5 samples, 0.03%)</title><rect x="14.4730%" y="149" width="0.0341%" height="15" fill="rgb(220,13,46)" fg:x="2120" fg:w="5"/><text x="14.7230%" y="159.50"></text></g><g><title>deno_head`Builtins_StringAdd_CheckNone (65 samples, 0.44%)</title><rect x="14.5071%" y="149" width="0.4437%" height="15" fill="rgb(239,221,27)" fg:x="2125" fg:w="65"/><text x="14.7571%" y="159.50"></text></g><g><title>0x110065ef4 (138 samples, 0.94%)</title><rect x="14.0360%" y="165" width="0.9421%" height="15" fill="rgb(222,198,25)" fg:x="2056" fg:w="138"/><text x="14.2860%" y="175.50"></text></g><g><title>deno_head`Builtins_ToString (4 samples, 0.03%)</title><rect x="14.9508%" y="149" width="0.0273%" height="15" fill="rgb(211,99,13)" fg:x="2190" fg:w="4"/><text x="15.2008%" y="159.50"></text></g><g><title>deno_head`operator new(unsigned long) (5 samples, 0.03%)</title><rect x="15.1079%" y="133" width="0.0341%" height="15" fill="rgb(232,111,31)" fg:x="2213" fg:w="5"/><text x="15.3579%" y="143.50"></text></g><g><title>deno_head`operator new[](unsigned long) (3 samples, 0.02%)</title><rect x="15.1420%" y="133" width="0.0205%" height="15" fill="rgb(245,82,37)" fg:x="2218" fg:w="3"/><text x="15.3920%" y="143.50"></text></g><g><title>deno_head`unsigned int v8::internal::StringHasher::HashSequentialString&lt;unsigned char&gt; (301 samples, 2.05%)</title><rect x="15.1625%" y="133" width="2.0549%" height="15" fill="rgb(227,149,46)" fg:x="2221" fg:w="301"/><text x="15.4125%" y="143.50">d..</text></g><g><title>deno_head`DYLD-STUB$$memcmp (6 samples, 0.04%)</title><rect x="17.5314%" y="117" width="0.0410%" height="15" fill="rgb(218,36,50)" fg:x="2568" fg:w="6"/><text x="17.7814%" y="127.50"></text></g><g><title>deno_head`DYLD-STUB$$memmove (4 samples, 0.03%)</title><rect x="17.5724%" y="117" width="0.0273%" height="15" fill="rgb(226,80,48)" fg:x="2574" fg:w="4"/><text x="17.8224%" y="127.50"></text></g><g><title>deno_head`bool v8::internal::String::IsEqualTo&lt;(v8::internal::String::EqualityType)2, unsigned char&gt;(v8::base::Vector (17 samples, 0.12%)</title><rect x="17.5997%" y="117" width="0.1161%" height="15" fill="rgb(238,224,15)" fg:x="2578" fg:w="17"/><text x="17.8497%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="17.7703%" y="85" width="0.0205%" height="15" fill="rgb(241,136,10)" fg:x="2603" fg:w="3"/><text x="18.0203%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.16%)</title><rect x="17.7157%" y="101" width="0.1638%" height="15" fill="rgb(208,32,45)" fg:x="2595" fg:w="24"/><text x="17.9657%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.09%)</title><rect x="17.7908%" y="85" width="0.0887%" height="15" fill="rgb(207,135,9)" fg:x="2606" fg:w="13"/><text x="18.0408%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.07%)</title><rect x="17.8113%" y="69" width="0.0683%" height="15" fill="rgb(206,86,44)" fg:x="2609" fg:w="10"/><text x="18.0613%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="17.8386%" y="53" width="0.0410%" height="15" fill="rgb(245,177,15)" fg:x="2613" fg:w="6"/><text x="18.0886%" y="63.50"></text></g><g><title>deno_head`operator new(unsigned long) (25 samples, 0.17%)</title><rect x="17.7157%" y="117" width="0.1707%" height="15" fill="rgb(206,64,50)" fg:x="2595" fg:w="25"/><text x="17.9657%" y="127.50"></text></g><g><title>deno_head`v8::internal::Heap::IsLargeObject (3 samples, 0.02%)</title><rect x="17.9205%" y="101" width="0.0205%" height="15" fill="rgb(234,36,40)" fg:x="2625" fg:w="3"/><text x="18.1705%" y="111.50"></text></g><g><title>deno_head`v8::internal::LocalHeap::Current (3 samples, 0.02%)</title><rect x="17.9547%" y="85" width="0.0205%" height="15" fill="rgb(213,64,8)" fg:x="2630" fg:w="3"/><text x="18.2047%" y="95.50"></text></g><g><title>deno_head`v8::internal::Heap::NotifyObjectSizeChange (7 samples, 0.05%)</title><rect x="17.9410%" y="101" width="0.0478%" height="15" fill="rgb(210,75,36)" fg:x="2628" fg:w="7"/><text x="18.1910%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.01%)</title><rect x="17.9752%" y="85" width="0.0137%" height="15" fill="rgb(229,88,21)" fg:x="2633" fg:w="2"/><text x="18.2252%" y="95.50"></text></g><g><title>deno_head`v8::internal::Heap::UpdateInvalidatedObjectSize (4 samples, 0.03%)</title><rect x="17.9888%" y="101" width="0.0273%" height="15" fill="rgb(252,204,47)" fg:x="2635" fg:w="4"/><text x="18.2388%" y="111.50"></text></g><g><title>deno_head`v8::internal::(anonymous namespace)::SetInternalizedReference (33 samples, 0.23%)</title><rect x="17.8864%" y="117" width="0.2253%" height="15" fill="rgb(208,77,27)" fg:x="2620" fg:w="33"/><text x="18.1364%" y="127.50"></text></g><g><title>deno_head`void v8::internal::String::MakeThin&lt;v8::internal::Isolate&gt; (13 samples, 0.09%)</title><rect x="18.0229%" y="101" width="0.0887%" height="15" fill="rgb(221,76,26)" fg:x="2640" fg:w="13"/><text x="18.2729%" y="111.50"></text></g><g><title>deno_head`v8::internal::HeapObject::SizeFromMap (2 samples, 0.01%)</title><rect x="18.0980%" y="85" width="0.0137%" height="15" fill="rgb(225,139,18)" fg:x="2651" fg:w="2"/><text x="18.3480%" y="95.50"></text></g><g><title>deno_head`v8::internal::Heap::NotifyObjectSizeChange (3 samples, 0.02%)</title><rect x="18.1117%" y="117" width="0.0205%" height="15" fill="rgb(230,137,11)" fg:x="2653" fg:w="3"/><text x="18.3617%" y="127.50"></text></g><g><title>deno_head`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (3 samples, 0.02%)</title><rect x="18.4257%" y="101" width="0.0205%" height="15" fill="rgb(212,28,1)" fg:x="2699" fg:w="3"/><text x="18.6757%" y="111.50"></text></g><g><title>deno_head`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (2 samples, 0.01%)</title><rect x="18.7671%" y="85" width="0.0137%" height="15" fill="rgb(248,164,17)" fg:x="2749" fg:w="2"/><text x="19.0171%" y="95.50"></text></g><g><title>deno_head`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (61 samples, 0.42%)</title><rect x="18.4462%" y="101" width="0.4164%" height="15" fill="rgb(222,171,42)" fg:x="2702" fg:w="61"/><text x="18.6962%" y="111.50"></text></g><g><title>deno_head`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (12 samples, 0.08%)</title><rect x="18.7807%" y="85" width="0.0819%" height="15" fill="rgb(243,84,45)" fg:x="2751" fg:w="12"/><text x="19.0307%" y="95.50"></text></g><g><title>deno_head`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (119 samples, 0.81%)</title><rect x="18.1322%" y="117" width="0.8124%" height="15" fill="rgb(252,49,23)" fg:x="2656" fg:w="119"/><text x="18.3822%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.08%)</title><rect x="18.8626%" y="101" width="0.0819%" height="15" fill="rgb(215,19,7)" fg:x="2763" fg:w="12"/><text x="19.1126%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="18.9446%" y="117" width="0.0273%" height="15" fill="rgb(238,81,41)" fg:x="2775" fg:w="4"/><text x="19.1946%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.13%)</title><rect x="18.9719%" y="117" width="0.1297%" height="15" fill="rgb(210,199,37)" fg:x="2779" fg:w="19"/><text x="19.2219%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.05%)</title><rect x="19.0538%" y="101" width="0.0478%" height="15" fill="rgb(244,192,49)" fg:x="2791" fg:w="7"/><text x="19.3038%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.04%)</title><rect x="19.1084%" y="117" width="0.0410%" height="15" fill="rgb(226,211,11)" fg:x="2799" fg:w="6"/><text x="19.3584%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.03%)</title><rect x="19.1494%" y="117" width="0.0273%" height="15" fill="rgb(236,162,54)" fg:x="2805" fg:w="4"/><text x="19.3994%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (53 samples, 0.36%)</title><rect x="19.1767%" y="117" width="0.3618%" height="15" fill="rgb(220,229,9)" fg:x="2809" fg:w="53"/><text x="19.4267%" y="127.50"></text></g><g><title>deno_head`unsigned long v8::internal::StringTable::Data::TryStringToIndexOrLookupExisting&lt;unsigned char&gt; (345 samples, 2.36%)</title><rect x="17.2174%" y="133" width="2.3553%" height="15" fill="rgb(250,87,22)" fg:x="2522" fg:w="345"/><text x="17.4674%" y="143.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.03%)</title><rect x="19.5385%" y="117" width="0.0341%" height="15" fill="rgb(239,43,17)" fg:x="2862" fg:w="5"/><text x="19.7885%" y="127.50"></text></g><g><title>deno_head`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (3 samples, 0.02%)</title><rect x="19.5795%" y="133" width="0.0205%" height="15" fill="rgb(231,177,25)" fg:x="2868" fg:w="3"/><text x="19.8295%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="19.5999%" y="133" width="0.0205%" height="15" fill="rgb(219,179,1)" fg:x="2871" fg:w="3"/><text x="19.8499%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="19.6204%" y="133" width="0.0137%" height="15" fill="rgb(238,219,53)" fg:x="2874" fg:w="2"/><text x="19.8704%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.04%)</title><rect x="19.6341%" y="133" width="0.0410%" height="15" fill="rgb(232,167,36)" fg:x="2876" fg:w="6"/><text x="19.8841%" y="143.50"></text></g><g><title>deno_head`Builtins_KeyedLoadIC_Megamorphic (688 samples, 4.70%)</title><rect x="14.9918%" y="149" width="4.6969%" height="15" fill="rgb(244,19,51)" fg:x="2196" fg:w="688"/><text x="15.2418%" y="159.50">deno_..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="19.6750%" y="133" width="0.0137%" height="15" fill="rgb(224,6,22)" fg:x="2882" fg:w="2"/><text x="19.9250%" y="143.50"></text></g><g><title>deno_head`unsigned long v8::internal::StringTable::Data::TryStringToIndexOrLookupExisting&lt;unsigned char&gt; (4 samples, 0.03%)</title><rect x="19.6887%" y="149" width="0.0273%" height="15" fill="rgb(224,145,5)" fg:x="2884" fg:w="4"/><text x="19.9387%" y="159.50"></text></g><g><title>0x110065f58 (703 samples, 4.80%)</title><rect x="14.9850%" y="165" width="4.7993%" height="15" fill="rgb(234,130,49)" fg:x="2195" fg:w="703"/><text x="15.2350%" y="175.50">0x1100..</text></g><g><title>deno_head`v8::internal::StringTable::TryStringToIndexOrLookupExisting (10 samples, 0.07%)</title><rect x="19.7160%" y="149" width="0.0683%" height="15" fill="rgb(254,6,2)" fg:x="2888" fg:w="10"/><text x="19.9660%" y="159.50"></text></g><g><title>0x110066000 (2 samples, 0.01%)</title><rect x="19.7979%" y="165" width="0.0137%" height="15" fill="rgb(208,96,46)" fg:x="2900" fg:w="2"/><text x="20.0479%" y="175.50"></text></g><g><title>deno_head`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (6 samples, 0.04%)</title><rect x="19.9208%" y="133" width="0.0410%" height="15" fill="rgb(239,3,39)" fg:x="2918" fg:w="6"/><text x="20.1708%" y="143.50"></text></g><g><title>deno_head`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="20.0847%" y="117" width="0.0137%" height="15" fill="rgb(233,210,1)" fg:x="2942" fg:w="2"/><text x="20.3347%" y="127.50"></text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (31 samples, 0.21%)</title><rect x="19.9618%" y="133" width="0.2116%" height="15" fill="rgb(244,137,37)" fg:x="2924" fg:w="31"/><text x="20.2118%" y="143.50"></text></g><g><title>deno_head`core::hash::BuildHasher::hash_one (11 samples, 0.08%)</title><rect x="20.0983%" y="117" width="0.0751%" height="15" fill="rgb(240,136,2)" fg:x="2944" fg:w="11"/><text x="20.3483%" y="127.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (2 samples, 0.01%)</title><rect x="20.1734%" y="133" width="0.0137%" height="15" fill="rgb(239,18,37)" fg:x="2955" fg:w="2"/><text x="20.4234%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (3,693 samples, 25.21%)</title><rect x="20.1871%" y="133" width="25.2116%" height="15" fill="rgb(218,185,22)" fg:x="2957" fg:w="3693"/><text x="20.4371%" y="143.50">libsystem_kernel.dylib`__sendto</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="45.5147%" y="117" width="0.0205%" height="15" fill="rgb(225,218,4)" fg:x="6667" fg:w="3"/><text x="45.7647%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (13 samples, 0.09%)</title><rect x="45.5352%" y="117" width="0.0887%" height="15" fill="rgb(230,182,32)" fg:x="6670" fg:w="13"/><text x="45.7852%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (79 samples, 0.54%)</title><rect x="45.4055%" y="133" width="0.5393%" height="15" fill="rgb(242,56,43)" fg:x="6651" fg:w="79"/><text x="45.6555%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (47 samples, 0.32%)</title><rect x="45.6240%" y="117" width="0.3209%" height="15" fill="rgb(233,99,24)" fg:x="6683" fg:w="47"/><text x="45.8740%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (39 samples, 0.27%)</title><rect x="45.6786%" y="101" width="0.2662%" height="15" fill="rgb(234,209,42)" fg:x="6691" fg:w="39"/><text x="45.9286%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (5 samples, 0.03%)</title><rect x="46.5388%" y="117" width="0.0341%" height="15" fill="rgb(227,7,12)" fg:x="6817" fg:w="5"/><text x="46.7888%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (22 samples, 0.15%)</title><rect x="46.5729%" y="117" width="0.1502%" height="15" fill="rgb(245,203,43)" fg:x="6822" fg:w="22"/><text x="46.8229%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (6 samples, 0.04%)</title><rect x="46.7231%" y="117" width="0.0410%" height="15" fill="rgb(238,205,33)" fg:x="6844" fg:w="6"/><text x="46.9731%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (6 samples, 0.04%)</title><rect x="46.7641%" y="117" width="0.0410%" height="15" fill="rgb(231,56,7)" fg:x="6850" fg:w="6"/><text x="47.0141%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (32 samples, 0.22%)</title><rect x="46.8050%" y="117" width="0.2185%" height="15" fill="rgb(244,186,29)" fg:x="6856" fg:w="32"/><text x="47.0550%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (159 samples, 1.09%)</title><rect x="45.9448%" y="133" width="1.0855%" height="15" fill="rgb(234,111,31)" fg:x="6730" fg:w="159"/><text x="46.1948%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="47.0303%" y="133" width="0.0137%" height="15" fill="rgb(241,149,10)" fg:x="6889" fg:w="2"/><text x="47.2803%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (7 samples, 0.05%)</title><rect x="47.0508%" y="133" width="0.0478%" height="15" fill="rgb(249,206,44)" fg:x="6892" fg:w="7"/><text x="47.3008%" y="143.50"></text></g><g><title>deno_head`deno_flash::flash_respond (3,994 samples, 27.27%)</title><rect x="19.8525%" y="149" width="27.2665%" height="15" fill="rgb(251,153,30)" fg:x="2908" fg:w="3994"/><text x="20.1025%" y="159.50">deno_head`deno_flash::flash_respond</text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="47.0986%" y="133" width="0.0205%" height="15" fill="rgb(239,152,38)" fg:x="6899" fg:w="3"/><text x="47.3486%" y="143.50"></text></g><g><title>deno_head`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (4 samples, 0.03%)</title><rect x="47.1191%" y="149" width="0.0273%" height="15" fill="rgb(249,139,47)" fg:x="6902" fg:w="4"/><text x="47.3691%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.03%)</title><rect x="47.1532%" y="149" width="0.0273%" height="15" fill="rgb(244,64,35)" fg:x="6907" fg:w="4"/><text x="47.4032%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="47.1805%" y="149" width="0.0273%" height="15" fill="rgb(216,46,15)" fg:x="6911" fg:w="4"/><text x="47.4305%" y="159.50"></text></g><g><title>0x110066114 (4,013 samples, 27.40%)</title><rect x="19.8389%" y="165" width="27.3962%" height="15" fill="rgb(250,74,19)" fg:x="2906" fg:w="4013"/><text x="20.0889%" y="175.50">0x110066114</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="47.2146%" y="149" width="0.0205%" height="15" fill="rgb(249,42,33)" fg:x="6916" fg:w="3"/><text x="47.4646%" y="159.50"></text></g><g><title>0x110066400 (2 samples, 0.01%)</title><rect x="47.2419%" y="165" width="0.0137%" height="15" fill="rgb(242,149,17)" fg:x="6920" fg:w="2"/><text x="47.4919%" y="175.50"></text></g><g><title>0x11005bcc0 (2 samples, 0.01%)</title><rect x="47.2897%" y="149" width="0.0137%" height="15" fill="rgb(244,29,21)" fg:x="6927" fg:w="2"/><text x="47.5397%" y="159.50"></text></g><g><title>0x11005bd1c (5 samples, 0.03%)</title><rect x="47.3170%" y="149" width="0.0341%" height="15" fill="rgb(220,130,37)" fg:x="6931" fg:w="5"/><text x="47.5670%" y="159.50"></text></g><g><title>0x11005bd4c (2 samples, 0.01%)</title><rect x="47.3580%" y="149" width="0.0137%" height="15" fill="rgb(211,67,2)" fg:x="6937" fg:w="2"/><text x="47.6080%" y="159.50"></text></g><g><title>0x11005bd74 (2 samples, 0.01%)</title><rect x="47.3717%" y="149" width="0.0137%" height="15" fill="rgb(235,68,52)" fg:x="6939" fg:w="2"/><text x="47.6217%" y="159.50"></text></g><g><title>0x11005be08 (10 samples, 0.07%)</title><rect x="47.3921%" y="149" width="0.0683%" height="15" fill="rgb(246,142,3)" fg:x="6942" fg:w="10"/><text x="47.6421%" y="159.50"></text></g><g><title>0x11005be5c (2 samples, 0.01%)</title><rect x="47.4741%" y="149" width="0.0137%" height="15" fill="rgb(241,25,7)" fg:x="6954" fg:w="2"/><text x="47.7241%" y="159.50"></text></g><g><title>0x11005beb0 (6 samples, 0.04%)</title><rect x="47.4877%" y="149" width="0.0410%" height="15" fill="rgb(242,119,39)" fg:x="6956" fg:w="6"/><text x="47.7377%" y="159.50"></text></g><g><title>0x11005bec8 (10 samples, 0.07%)</title><rect x="47.5355%" y="149" width="0.0683%" height="15" fill="rgb(241,98,45)" fg:x="6963" fg:w="10"/><text x="47.7855%" y="159.50"></text></g><g><title>deno_head`Builtins_FulfillPromise (10 samples, 0.07%)</title><rect x="47.5355%" y="133" width="0.0683%" height="15" fill="rgb(254,28,30)" fg:x="6963" fg:w="10"/><text x="47.7855%" y="143.50"></text></g><g><title>0x11005bed4 (2 samples, 0.01%)</title><rect x="47.6106%" y="149" width="0.0137%" height="15" fill="rgb(241,142,54)" fg:x="6974" fg:w="2"/><text x="47.8606%" y="159.50"></text></g><g><title>deno_head`Builtins_CompileLazy (8 samples, 0.05%)</title><rect x="47.6242%" y="149" width="0.0546%" height="15" fill="rgb(222,85,15)" fg:x="6976" fg:w="8"/><text x="47.8742%" y="159.50"></text></g><g><title>0x110066440 (62 samples, 0.42%)</title><rect x="47.2624%" y="165" width="0.4233%" height="15" fill="rgb(210,85,47)" fg:x="6923" fg:w="62"/><text x="47.5124%" y="175.50"></text></g><g><title>0x11006644c (3 samples, 0.02%)</title><rect x="47.6857%" y="165" width="0.0205%" height="15" fill="rgb(224,206,25)" fg:x="6985" fg:w="3"/><text x="47.9357%" y="175.50"></text></g><g><title>0x110066498 (2 samples, 0.01%)</title><rect x="47.7130%" y="165" width="0.0137%" height="15" fill="rgb(243,201,19)" fg:x="6989" fg:w="2"/><text x="47.9630%" y="175.50"></text></g><g><title>deno_head`Builtins_EnqueueMicrotask (3 samples, 0.02%)</title><rect x="47.7267%" y="149" width="0.0205%" height="15" fill="rgb(236,59,4)" fg:x="6991" fg:w="3"/><text x="47.9767%" y="159.50"></text></g><g><title>0x1100664f8 (15 samples, 0.10%)</title><rect x="47.7267%" y="165" width="0.1024%" height="15" fill="rgb(254,179,45)" fg:x="6991" fg:w="15"/><text x="47.9767%" y="175.50"></text></g><g><title>deno_head`Builtins_PerformPromiseThen (12 samples, 0.08%)</title><rect x="47.7471%" y="149" width="0.0819%" height="15" fill="rgb(226,14,10)" fg:x="6994" fg:w="12"/><text x="47.9971%" y="159.50"></text></g><g><title>0x110066500 (3 samples, 0.02%)</title><rect x="47.8291%" y="165" width="0.0205%" height="15" fill="rgb(244,27,41)" fg:x="7006" fg:w="3"/><text x="48.0791%" y="175.50"></text></g><g><title>0x110066530 (4 samples, 0.03%)</title><rect x="47.8632%" y="165" width="0.0273%" height="15" fill="rgb(235,35,32)" fg:x="7011" fg:w="4"/><text x="48.1132%" y="175.50"></text></g><g><title>0x1100665d4 (2 samples, 0.01%)</title><rect x="47.8905%" y="165" width="0.0137%" height="15" fill="rgb(218,68,31)" fg:x="7015" fg:w="2"/><text x="48.1405%" y="175.50"></text></g><g><title>0x11005ee78 (2 samples, 0.01%)</title><rect x="47.9246%" y="149" width="0.0137%" height="15" fill="rgb(207,120,37)" fg:x="7020" fg:w="2"/><text x="48.1746%" y="159.50"></text></g><g><title>deno_head`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.01%)</title><rect x="47.9519%" y="101" width="0.0137%" height="15" fill="rgb(227,98,0)" fg:x="7024" fg:w="2"/><text x="48.2019%" y="111.50"></text></g><g><title>deno_head`&lt;T as core::any::Any&gt;::type_id (2 samples, 0.01%)</title><rect x="48.0270%" y="53" width="0.0137%" height="15" fill="rgb(207,7,3)" fg:x="7035" fg:w="2"/><text x="48.2770%" y="63.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_11426 (2 samples, 0.01%)</title><rect x="48.0475%" y="53" width="0.0137%" height="15" fill="rgb(206,98,19)" fg:x="7038" fg:w="2"/><text x="48.2975%" y="63.50"></text></g><g><title>deno_head`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (10 samples, 0.07%)</title><rect x="48.0748%" y="53" width="0.0683%" height="15" fill="rgb(217,5,26)" fg:x="7042" fg:w="10"/><text x="48.3248%" y="63.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21 samples, 0.14%)</title><rect x="48.0134%" y="69" width="0.1434%" height="15" fill="rgb(235,190,38)" fg:x="7033" fg:w="21"/><text x="48.2634%" y="79.50"></text></g><g><title>deno_head`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (4 samples, 0.03%)</title><rect x="48.1636%" y="69" width="0.0273%" height="15" fill="rgb(247,86,24)" fg:x="7055" fg:w="4"/><text x="48.4136%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="48.1704%" y="53" width="0.0205%" height="15" fill="rgb(205,101,16)" fg:x="7056" fg:w="3"/><text x="48.4204%" y="63.50"></text></g><g><title>deno_head`v8::Isolate::GetCurrentContext (3 samples, 0.02%)</title><rect x="48.2114%" y="69" width="0.0205%" height="15" fill="rgb(246,168,33)" fg:x="7062" fg:w="3"/><text x="48.4614%" y="79.50"></text></g><g><title>deno_head`v8::Value::IsInt32 (2 samples, 0.01%)</title><rect x="48.2318%" y="69" width="0.0137%" height="15" fill="rgb(231,114,1)" fg:x="7065" fg:w="2"/><text x="48.4818%" y="79.50"></text></g><g><title>deno_head`v8::api_internal::GlobalizeReference (2 samples, 0.01%)</title><rect x="48.2523%" y="69" width="0.0137%" height="15" fill="rgb(207,184,53)" fg:x="7068" fg:w="2"/><text x="48.5023%" y="79.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="48.2728%" y="69" width="0.0205%" height="15" fill="rgb(224,95,51)" fg:x="7071" fg:w="3"/><text x="48.5228%" y="79.50"></text></g><g><title>deno_head`v8::scope::data::ScopeData::new_callback_scope_data (2 samples, 0.01%)</title><rect x="48.2933%" y="69" width="0.0137%" height="15" fill="rgb(212,188,45)" fg:x="7074" fg:w="2"/><text x="48.5433%" y="79.50"></text></g><g><title>deno_head`v8__Global__New (3 samples, 0.02%)</title><rect x="48.3069%" y="69" width="0.0205%" height="15" fill="rgb(223,154,38)" fg:x="7076" fg:w="3"/><text x="48.5569%" y="79.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="48.3069%" y="53" width="0.0205%" height="15" fill="rgb(251,22,52)" fg:x="7076" fg:w="3"/><text x="48.5569%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="48.3479%" y="69" width="0.0137%" height="15" fill="rgb(229,209,22)" fg:x="7082" fg:w="2"/><text x="48.5979%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="48.3479%" y="53" width="0.0137%" height="15" fill="rgb(234,138,34)" fg:x="7082" fg:w="2"/><text x="48.5979%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="48.3479%" y="37" width="0.0137%" height="15" fill="rgb(212,95,11)" fg:x="7082" fg:w="2"/><text x="48.5979%" y="47.50"></text></g><g><title>deno_head`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (57 samples, 0.39%)</title><rect x="47.9792%" y="85" width="0.3891%" height="15" fill="rgb(240,179,47)" fg:x="7028" fg:w="57"/><text x="48.2292%" y="95.50"></text></g><g><title>deno_head`deno_core::runtime::JsRuntime::state (3 samples, 0.02%)</title><rect x="48.3752%" y="85" width="0.0205%" height="15" fill="rgb(240,163,11)" fg:x="7086" fg:w="3"/><text x="48.6252%" y="95.50"></text></g><g><title>deno_head`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (2 samples, 0.01%)</title><rect x="48.4230%" y="85" width="0.0137%" height="15" fill="rgb(236,37,12)" fg:x="7093" fg:w="2"/><text x="48.6730%" y="95.50"></text></g><g><title>deno_head`v8::internal::ExternalCallbackScope::ExternalCallbackScope (2 samples, 0.01%)</title><rect x="48.4366%" y="85" width="0.0137%" height="15" fill="rgb(232,164,16)" fg:x="7095" fg:w="2"/><text x="48.6866%" y="95.50"></text></g><g><title>deno_head`v8::internal::Builtin_HandleApiCall (76 samples, 0.52%)</title><rect x="47.9383%" y="117" width="0.5188%" height="15" fill="rgb(244,205,15)" fg:x="7022" fg:w="76"/><text x="48.1883%" y="127.50"></text></g><g><title>deno_head`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (72 samples, 0.49%)</title><rect x="47.9656%" y="101" width="0.4915%" height="15" fill="rgb(223,117,47)" fg:x="7026" fg:w="72"/><text x="48.2156%" y="111.50"></text></g><g><title>deno_head`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (77 samples, 0.53%)</title><rect x="47.9383%" y="133" width="0.5257%" height="15" fill="rgb(244,107,35)" fg:x="7022" fg:w="77"/><text x="48.1883%" y="143.50"></text></g><g><title>0x11005eeac (82 samples, 0.56%)</title><rect x="47.9383%" y="149" width="0.5598%" height="15" fill="rgb(205,140,8)" fg:x="7022" fg:w="82"/><text x="48.1883%" y="159.50"></text></g><g><title>deno_head`v8::internal::Builtin_HandleApiCall (5 samples, 0.03%)</title><rect x="48.4640%" y="133" width="0.0341%" height="15" fill="rgb(228,84,46)" fg:x="7099" fg:w="5"/><text x="48.7140%" y="143.50"></text></g><g><title>0x11005f5b8 (3 samples, 0.02%)</title><rect x="48.5322%" y="149" width="0.0205%" height="15" fill="rgb(254,188,9)" fg:x="7109" fg:w="3"/><text x="48.7822%" y="159.50"></text></g><g><title>deno_head`Builtins_RecordWriteSaveFP (3 samples, 0.02%)</title><rect x="48.5322%" y="133" width="0.0205%" height="15" fill="rgb(206,112,54)" fg:x="7109" fg:w="3"/><text x="48.7822%" y="143.50"></text></g><g><title>0x110066670 (101 samples, 0.69%)</title><rect x="47.9042%" y="165" width="0.6895%" height="15" fill="rgb(216,84,49)" fg:x="7017" fg:w="101"/><text x="48.1542%" y="175.50"></text></g><g><title>deno_head`Builtins_CallForwardVarargs (5 samples, 0.03%)</title><rect x="48.5595%" y="149" width="0.0341%" height="15" fill="rgb(214,194,35)" fg:x="7113" fg:w="5"/><text x="48.8095%" y="159.50"></text></g><g><title>0x110066684 (2 samples, 0.01%)</title><rect x="48.5937%" y="165" width="0.0137%" height="15" fill="rgb(249,28,3)" fg:x="7118" fg:w="2"/><text x="48.8437%" y="175.50"></text></g><g><title>deno_head`Builtins_AsyncFunctionAwaitUncaught (2 samples, 0.01%)</title><rect x="48.5937%" y="149" width="0.0137%" height="15" fill="rgb(222,56,52)" fg:x="7118" fg:w="2"/><text x="48.8437%" y="159.50"></text></g><g><title>0x1100669b8 (2 samples, 0.01%)</title><rect x="48.6141%" y="165" width="0.0137%" height="15" fill="rgb(245,217,50)" fg:x="7121" fg:w="2"/><text x="48.8641%" y="175.50"></text></g><g><title>0x110066ab4 (13 samples, 0.09%)</title><rect x="48.6688%" y="165" width="0.0887%" height="15" fill="rgb(213,201,24)" fg:x="7129" fg:w="13"/><text x="48.9188%" y="175.50"></text></g><g><title>deno_head`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.05%)</title><rect x="48.7848%" y="133" width="0.0478%" height="15" fill="rgb(248,116,28)" fg:x="7146" fg:w="7"/><text x="49.0348%" y="143.50"></text></g><g><title>deno_head`deno_flash::op_flash_get_method_fast (23 samples, 0.16%)</title><rect x="48.7712%" y="149" width="0.1570%" height="15" fill="rgb(219,72,43)" fg:x="7144" fg:w="23"/><text x="49.0212%" y="159.50"></text></g><g><title>deno_head`core::hash::BuildHasher::hash_one (14 samples, 0.10%)</title><rect x="48.8326%" y="133" width="0.0956%" height="15" fill="rgb(209,138,14)" fg:x="7153" fg:w="14"/><text x="49.0826%" y="143.50"></text></g><g><title>0x110066abc (27 samples, 0.18%)</title><rect x="48.7575%" y="165" width="0.1843%" height="15" fill="rgb(222,18,33)" fg:x="7142" fg:w="27"/><text x="49.0075%" y="175.50"></text></g><g><title>deno_head`v8__Object__GetAlignedPointerFromInternalField (2 samples, 0.01%)</title><rect x="48.9282%" y="149" width="0.0137%" height="15" fill="rgb(213,199,7)" fg:x="7167" fg:w="2"/><text x="49.1782%" y="159.50"></text></g><g><title>0x110066b9c (3 samples, 0.02%)</title><rect x="48.9691%" y="165" width="0.0205%" height="15" fill="rgb(250,110,10)" fg:x="7173" fg:w="3"/><text x="49.2191%" y="175.50"></text></g><g><title>0x110066c2c (4 samples, 0.03%)</title><rect x="49.0238%" y="165" width="0.0273%" height="15" fill="rgb(248,123,6)" fg:x="7181" fg:w="4"/><text x="49.2738%" y="175.50"></text></g><g><title>0x110066c58 (2 samples, 0.01%)</title><rect x="49.0511%" y="165" width="0.0137%" height="15" fill="rgb(206,91,31)" fg:x="7185" fg:w="2"/><text x="49.3011%" y="175.50"></text></g><g><title>0x110066c98 (3 samples, 0.02%)</title><rect x="49.0715%" y="165" width="0.0205%" height="15" fill="rgb(211,154,13)" fg:x="7188" fg:w="3"/><text x="49.3215%" y="175.50"></text></g><g><title>0x110066d20 (2 samples, 0.01%)</title><rect x="49.1125%" y="165" width="0.0137%" height="15" fill="rgb(225,148,7)" fg:x="7194" fg:w="2"/><text x="49.3625%" y="175.50"></text></g><g><title>0x110066d40 (2 samples, 0.01%)</title><rect x="49.1262%" y="165" width="0.0137%" height="15" fill="rgb(220,160,43)" fg:x="7196" fg:w="2"/><text x="49.3762%" y="175.50"></text></g><g><title>0x110066da0 (2 samples, 0.01%)</title><rect x="49.1535%" y="165" width="0.0137%" height="15" fill="rgb(213,52,39)" fg:x="7200" fg:w="2"/><text x="49.4035%" y="175.50"></text></g><g><title>0x110066db4 (3 samples, 0.02%)</title><rect x="49.1671%" y="165" width="0.0205%" height="15" fill="rgb(243,137,7)" fg:x="7202" fg:w="3"/><text x="49.4171%" y="175.50"></text></g><g><title>0x11005fd68 (3 samples, 0.02%)</title><rect x="49.2081%" y="149" width="0.0205%" height="15" fill="rgb(230,79,13)" fg:x="7208" fg:w="3"/><text x="49.4581%" y="159.50"></text></g><g><title>deno_head`Builtins_FastNewObject (64 samples, 0.44%)</title><rect x="49.2286%" y="149" width="0.4369%" height="15" fill="rgb(247,105,23)" fg:x="7211" fg:w="64"/><text x="49.4786%" y="159.50"></text></g><g><title>deno_head`Builtins_JSConstructStubGeneric (2 samples, 0.01%)</title><rect x="49.6655%" y="149" width="0.0137%" height="15" fill="rgb(223,179,41)" fg:x="7275" fg:w="2"/><text x="49.9155%" y="159.50"></text></g><g><title>0x11005b200 (2 samples, 0.01%)</title><rect x="49.8293%" y="133" width="0.0137%" height="15" fill="rgb(218,9,34)" fg:x="7299" fg:w="2"/><text x="50.0793%" y="143.50"></text></g><g><title>0x11005fd90 (2 samples, 0.01%)</title><rect x="49.8566%" y="133" width="0.0137%" height="15" fill="rgb(222,106,8)" fg:x="7303" fg:w="2"/><text x="50.1066%" y="143.50"></text></g><g><title>0x11005fde8 (2 samples, 0.01%)</title><rect x="49.8771%" y="133" width="0.0137%" height="15" fill="rgb(211,220,0)" fg:x="7306" fg:w="2"/><text x="50.1271%" y="143.50"></text></g><g><title>0x11005fe54 (2 samples, 0.01%)</title><rect x="49.8976%" y="133" width="0.0137%" height="15" fill="rgb(229,52,16)" fg:x="7309" fg:w="2"/><text x="50.1476%" y="143.50"></text></g><g><title>0x11005b22c (5 samples, 0.03%)</title><rect x="49.9181%" y="117" width="0.0341%" height="15" fill="rgb(212,155,18)" fg:x="7312" fg:w="5"/><text x="50.1681%" y="127.50"></text></g><g><title>0x11005b260 (3 samples, 0.02%)</title><rect x="49.9590%" y="117" width="0.0205%" height="15" fill="rgb(242,21,14)" fg:x="7318" fg:w="3"/><text x="50.2090%" y="127.50"></text></g><g><title>0x11005b268 (8 samples, 0.05%)</title><rect x="49.9795%" y="117" width="0.0546%" height="15" fill="rgb(222,19,48)" fg:x="7321" fg:w="8"/><text x="50.2295%" y="127.50"></text></g><g><title>deno_head`Builtins_ObjectPrototypeIsPrototypeOf (8 samples, 0.05%)</title><rect x="49.9795%" y="101" width="0.0546%" height="15" fill="rgb(232,45,27)" fg:x="7321" fg:w="8"/><text x="50.2295%" y="111.50"></text></g><g><title>0x11005b298 (4 samples, 0.03%)</title><rect x="50.0341%" y="117" width="0.0273%" height="15" fill="rgb(249,103,42)" fg:x="7329" fg:w="4"/><text x="50.2841%" y="127.50"></text></g><g><title>0x11005b2a0 (10 samples, 0.07%)</title><rect x="50.0614%" y="117" width="0.0683%" height="15" fill="rgb(246,81,33)" fg:x="7333" fg:w="10"/><text x="50.3114%" y="127.50"></text></g><g><title>deno_head`Builtins_ObjectPrototypeIsPrototypeOf (8 samples, 0.05%)</title><rect x="50.0751%" y="101" width="0.0546%" height="15" fill="rgb(252,33,42)" fg:x="7335" fg:w="8"/><text x="50.3251%" y="111.50"></text></g><g><title>0x11005b2d0 (3 samples, 0.02%)</title><rect x="50.1297%" y="117" width="0.0205%" height="15" fill="rgb(209,212,41)" fg:x="7343" fg:w="3"/><text x="50.3797%" y="127.50"></text></g><g><title>0x11005b2d8 (10 samples, 0.07%)</title><rect x="50.1502%" y="117" width="0.0683%" height="15" fill="rgb(207,154,6)" fg:x="7346" fg:w="10"/><text x="50.4002%" y="127.50"></text></g><g><title>deno_head`Builtins_ObjectPrototypeIsPrototypeOf (10 samples, 0.07%)</title><rect x="50.1502%" y="101" width="0.0683%" height="15" fill="rgb(223,64,47)" fg:x="7346" fg:w="10"/><text x="50.4002%" y="111.50"></text></g><g><title>0x11005b308 (3 samples, 0.02%)</title><rect x="50.2185%" y="117" width="0.0205%" height="15" fill="rgb(211,161,38)" fg:x="7356" fg:w="3"/><text x="50.4685%" y="127.50"></text></g><g><title>0x11005b310 (5 samples, 0.03%)</title><rect x="50.2389%" y="117" width="0.0341%" height="15" fill="rgb(219,138,40)" fg:x="7359" fg:w="5"/><text x="50.4889%" y="127.50"></text></g><g><title>deno_head`Builtins_ObjectPrototypeIsPrototypeOf (5 samples, 0.03%)</title><rect x="50.2389%" y="101" width="0.0341%" height="15" fill="rgb(241,228,46)" fg:x="7359" fg:w="5"/><text x="50.4889%" y="111.50"></text></g><g><title>deno_head`Builtins_LoadIC (7 samples, 0.05%)</title><rect x="50.2867%" y="117" width="0.0478%" height="15" fill="rgb(223,209,38)" fg:x="7366" fg:w="7"/><text x="50.5367%" y="127.50"></text></g><g><title>deno_head`Builtins_LoadICTrampoline (2 samples, 0.01%)</title><rect x="50.3345%" y="117" width="0.0137%" height="15" fill="rgb(236,164,45)" fg:x="7373" fg:w="2"/><text x="50.5845%" y="127.50"></text></g><g><title>0x11005fe9c (66 samples, 0.45%)</title><rect x="49.9181%" y="133" width="0.4506%" height="15" fill="rgb(231,15,5)" fg:x="7312" fg:w="66"/><text x="50.1681%" y="143.50"></text></g><g><title>deno_head`Builtins_ObjectPrototypeIsPrototypeOf (3 samples, 0.02%)</title><rect x="50.3482%" y="117" width="0.0205%" height="15" fill="rgb(252,35,15)" fg:x="7375" fg:w="3"/><text x="50.5982%" y="127.50"></text></g><g><title>0x11005febc (3 samples, 0.02%)</title><rect x="50.3687%" y="133" width="0.0205%" height="15" fill="rgb(248,181,18)" fg:x="7378" fg:w="3"/><text x="50.6187%" y="143.50"></text></g><g><title>0x11005fff0 (3 samples, 0.02%)</title><rect x="50.4028%" y="133" width="0.0205%" height="15" fill="rgb(233,39,42)" fg:x="7383" fg:w="3"/><text x="50.6528%" y="143.50"></text></g><g><title>0x11005fffc (4 samples, 0.03%)</title><rect x="50.4233%" y="133" width="0.0273%" height="15" fill="rgb(238,110,33)" fg:x="7386" fg:w="4"/><text x="50.6733%" y="143.50"></text></g><g><title>0x110060030 (3 samples, 0.02%)</title><rect x="50.4574%" y="133" width="0.0205%" height="15" fill="rgb(233,195,10)" fg:x="7391" fg:w="3"/><text x="50.7074%" y="143.50"></text></g><g><title>0x110060038 (3 samples, 0.02%)</title><rect x="50.4779%" y="133" width="0.0205%" height="15" fill="rgb(254,105,3)" fg:x="7394" fg:w="3"/><text x="50.7279%" y="143.50"></text></g><g><title>0x110060060 (2 samples, 0.01%)</title><rect x="50.4984%" y="133" width="0.0137%" height="15" fill="rgb(221,225,9)" fg:x="7397" fg:w="2"/><text x="50.7484%" y="143.50"></text></g><g><title>0x11005b65c (10 samples, 0.07%)</title><rect x="50.5393%" y="117" width="0.0683%" height="15" fill="rgb(224,227,45)" fg:x="7403" fg:w="10"/><text x="50.7893%" y="127.50"></text></g><g><title>0x11005b688 (3 samples, 0.02%)</title><rect x="50.6076%" y="117" width="0.0205%" height="15" fill="rgb(229,198,43)" fg:x="7413" fg:w="3"/><text x="50.8576%" y="127.50"></text></g><g><title>0x11005b760 (6 samples, 0.04%)</title><rect x="50.6486%" y="117" width="0.0410%" height="15" fill="rgb(206,209,35)" fg:x="7419" fg:w="6"/><text x="50.8986%" y="127.50"></text></g><g><title>0x110060118 (26 samples, 0.18%)</title><rect x="50.5325%" y="133" width="0.1775%" height="15" fill="rgb(245,195,53)" fg:x="7402" fg:w="26"/><text x="50.7825%" y="143.50"></text></g><g><title>deno_head`Builtins_SameValueNumbersOnly (2 samples, 0.01%)</title><rect x="50.6963%" y="117" width="0.0137%" height="15" fill="rgb(240,92,26)" fg:x="7426" fg:w="2"/><text x="50.9463%" y="127.50"></text></g><g><title>0x110060148 (2 samples, 0.01%)</title><rect x="50.7168%" y="133" width="0.0137%" height="15" fill="rgb(207,40,23)" fg:x="7429" fg:w="2"/><text x="50.9668%" y="143.50"></text></g><g><title>0x1100601d8 (2 samples, 0.01%)</title><rect x="50.7373%" y="133" width="0.0137%" height="15" fill="rgb(223,111,35)" fg:x="7432" fg:w="2"/><text x="50.9873%" y="143.50"></text></g><g><title>0x1100602b4 (3 samples, 0.02%)</title><rect x="50.7578%" y="133" width="0.0205%" height="15" fill="rgb(229,147,28)" fg:x="7435" fg:w="3"/><text x="51.0078%" y="143.50"></text></g><g><title>0x1100602e8 (3 samples, 0.02%)</title><rect x="50.7851%" y="133" width="0.0205%" height="15" fill="rgb(211,29,28)" fg:x="7439" fg:w="3"/><text x="51.0351%" y="143.50"></text></g><g><title>0x11006037c (2 samples, 0.01%)</title><rect x="50.8056%" y="133" width="0.0137%" height="15" fill="rgb(228,72,33)" fg:x="7442" fg:w="2"/><text x="51.0556%" y="143.50"></text></g><g><title>deno_head`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="50.8056%" y="117" width="0.0137%" height="15" fill="rgb(205,214,31)" fg:x="7442" fg:w="2"/><text x="51.0556%" y="127.50"></text></g><g><title>deno_head`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="50.8056%" y="101" width="0.0137%" height="15" fill="rgb(224,111,15)" fg:x="7442" fg:w="2"/><text x="51.0556%" y="111.50"></text></g><g><title>deno_head`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="50.8056%" y="85" width="0.0137%" height="15" fill="rgb(253,21,26)" fg:x="7442" fg:w="2"/><text x="51.0556%" y="95.50"></text></g><g><title>deno_head`Builtins_GrowFastSmiOrObjectElements (17 samples, 0.12%)</title><rect x="50.8329%" y="133" width="0.1161%" height="15" fill="rgb(245,139,43)" fg:x="7446" fg:w="17"/><text x="51.0829%" y="143.50"></text></g><g><title>deno_head`Builtins_LoadIC (13 samples, 0.09%)</title><rect x="50.9489%" y="133" width="0.0887%" height="15" fill="rgb(252,170,7)" fg:x="7463" fg:w="13"/><text x="51.1989%" y="143.50"></text></g><g><title>deno_head`Builtins_LoadICTrampoline (6 samples, 0.04%)</title><rect x="51.0377%" y="133" width="0.0410%" height="15" fill="rgb(231,118,14)" fg:x="7476" fg:w="6"/><text x="51.2877%" y="143.50"></text></g><g><title>deno_head`construct_stub_create_deopt_addr (209 samples, 1.43%)</title><rect x="49.6791%" y="149" width="1.4268%" height="15" fill="rgb(238,83,0)" fg:x="7277" fg:w="209"/><text x="49.9291%" y="159.50"></text></g><g><title>deno_head`Builtins_SameValueNumbersOnly (4 samples, 0.03%)</title><rect x="51.0786%" y="133" width="0.0273%" height="15" fill="rgb(221,39,39)" fg:x="7482" fg:w="4"/><text x="51.3286%" y="143.50"></text></g><g><title>0x110066e00 (280 samples, 1.91%)</title><rect x="49.2013%" y="165" width="1.9115%" height="15" fill="rgb(222,119,46)" fg:x="7207" fg:w="280"/><text x="49.4513%" y="175.50">0..</text></g><g><title>deno_head`Builtins_PerformPromiseThen (8 samples, 0.05%)</title><rect x="51.3995%" y="133" width="0.0546%" height="15" fill="rgb(222,165,49)" fg:x="7529" fg:w="8"/><text x="51.6495%" y="143.50"></text></g><g><title>deno_head`Builtins_FulfillPromise (2 samples, 0.01%)</title><rect x="51.5087%" y="117" width="0.0137%" height="15" fill="rgb(219,113,52)" fg:x="7545" fg:w="2"/><text x="51.7587%" y="127.50"></text></g><g><title>deno_head`Builtins_AsyncFunctionAwaitCaught (113 samples, 0.77%)</title><rect x="51.1196%" y="149" width="0.7714%" height="15" fill="rgb(214,7,15)" fg:x="7488" fg:w="113"/><text x="51.3696%" y="159.50"></text></g><g><title>deno_head`Builtins_ResolvePromise (64 samples, 0.44%)</title><rect x="51.4541%" y="133" width="0.4369%" height="15" fill="rgb(235,32,4)" fg:x="7537" fg:w="64"/><text x="51.7041%" y="143.50"></text></g><g><title>deno_head`Builtins_GetProperty (54 samples, 0.37%)</title><rect x="51.5224%" y="117" width="0.3687%" height="15" fill="rgb(238,90,54)" fg:x="7547" fg:w="54"/><text x="51.7724%" y="127.50"></text></g><g><title>0x110066e14 (114 samples, 0.78%)</title><rect x="51.1196%" y="165" width="0.7783%" height="15" fill="rgb(213,208,19)" fg:x="7488" fg:w="114"/><text x="51.3696%" y="175.50"></text></g><g><title>0x110066e98 (2 samples, 0.01%)</title><rect x="51.8979%" y="165" width="0.0137%" height="15" fill="rgb(233,156,4)" fg:x="7602" fg:w="2"/><text x="52.1479%" y="175.50"></text></g><g><title>0x1100671ec (2 samples, 0.01%)</title><rect x="51.9320%" y="165" width="0.0137%" height="15" fill="rgb(207,194,5)" fg:x="7607" fg:w="2"/><text x="52.1820%" y="175.50"></text></g><g><title>deno_head`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="51.9320%" y="149" width="0.0137%" height="15" fill="rgb(206,111,30)" fg:x="7607" fg:w="2"/><text x="52.1820%" y="159.50"></text></g><g><title>0x11006781c (2 samples, 0.01%)</title><rect x="51.9457%" y="165" width="0.0137%" height="15" fill="rgb(243,70,54)" fg:x="7609" fg:w="2"/><text x="52.1957%" y="175.50"></text></g><g><title>deno_head`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="51.9457%" y="149" width="0.0137%" height="15" fill="rgb(242,28,8)" fg:x="7609" fg:w="2"/><text x="52.1957%" y="159.50"></text></g><g><title>deno_head`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="51.9457%" y="133" width="0.0137%" height="15" fill="rgb(219,106,18)" fg:x="7609" fg:w="2"/><text x="52.1957%" y="143.50"></text></g><g><title>deno_head`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="51.9457%" y="117" width="0.0137%" height="15" fill="rgb(244,222,10)" fg:x="7609" fg:w="2"/><text x="52.1957%" y="127.50"></text></g><g><title>0x110067a4c (2 samples, 0.01%)</title><rect x="51.9661%" y="165" width="0.0137%" height="15" fill="rgb(236,179,52)" fg:x="7612" fg:w="2"/><text x="52.2161%" y="175.50"></text></g><g><title>0x110067a54 (6 samples, 0.04%)</title><rect x="51.9798%" y="165" width="0.0410%" height="15" fill="rgb(213,23,39)" fg:x="7614" fg:w="6"/><text x="52.2298%" y="175.50"></text></g><g><title>deno_head`Builtins_RecordWriteSaveFP (6 samples, 0.04%)</title><rect x="51.9798%" y="149" width="0.0410%" height="15" fill="rgb(238,48,10)" fg:x="7614" fg:w="6"/><text x="52.2298%" y="159.50"></text></g><g><title>0x110067a80 (8 samples, 0.05%)</title><rect x="52.0276%" y="165" width="0.0546%" height="15" fill="rgb(251,196,23)" fg:x="7621" fg:w="8"/><text x="52.2776%" y="175.50"></text></g><g><title>deno_head`Builtins_RecordWriteSaveFP (8 samples, 0.05%)</title><rect x="52.0276%" y="149" width="0.0546%" height="15" fill="rgb(250,152,24)" fg:x="7621" fg:w="8"/><text x="52.2776%" y="159.50"></text></g><g><title>0x110067aac (10 samples, 0.07%)</title><rect x="52.0890%" y="165" width="0.0683%" height="15" fill="rgb(209,150,17)" fg:x="7630" fg:w="10"/><text x="52.3390%" y="175.50"></text></g><g><title>deno_head`Builtins_RecordWriteSaveFP (10 samples, 0.07%)</title><rect x="52.0890%" y="149" width="0.0683%" height="15" fill="rgb(234,202,34)" fg:x="7630" fg:w="10"/><text x="52.3390%" y="159.50"></text></g><g><title>deno_head`Builtins_CallFunction_ReceiverIsNullOrUndefined (6 samples, 0.04%)</title><rect x="52.1709%" y="165" width="0.0410%" height="15" fill="rgb(253,148,53)" fg:x="7642" fg:w="6"/><text x="52.4209%" y="175.50"></text></g><g><title>deno_head`Builtins_CompileLazy (2 samples, 0.01%)</title><rect x="52.2119%" y="165" width="0.0137%" height="15" fill="rgb(218,129,16)" fg:x="7648" fg:w="2"/><text x="52.4619%" y="175.50"></text></g><g><title>deno_head`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="52.2256%" y="165" width="0.0137%" height="15" fill="rgb(216,85,19)" fg:x="7650" fg:w="2"/><text x="52.4756%" y="175.50"></text></g><g><title>deno_head`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="52.2256%" y="149" width="0.0137%" height="15" fill="rgb(235,228,7)" fg:x="7650" fg:w="2"/><text x="52.4756%" y="159.50"></text></g><g><title>deno_head`Builtins_JSConstructStubGeneric (2 samples, 0.01%)</title><rect x="52.2392%" y="165" width="0.0137%" height="15" fill="rgb(245,175,0)" fg:x="7652" fg:w="2"/><text x="52.4892%" y="175.50"></text></g><g><title>deno_head`Builtins_KeyedLoadICTrampoline_Megamorphic (3 samples, 0.02%)</title><rect x="52.2529%" y="165" width="0.0205%" height="15" fill="rgb(208,168,36)" fg:x="7654" fg:w="3"/><text x="52.5029%" y="175.50"></text></g><g><title>deno_head`Builtins_KeyedLoadIC_Megamorphic (2 samples, 0.01%)</title><rect x="52.2733%" y="165" width="0.0137%" height="15" fill="rgb(246,171,24)" fg:x="7657" fg:w="2"/><text x="52.5233%" y="175.50"></text></g><g><title>deno_head`Builtins_LoadIC (4 samples, 0.03%)</title><rect x="52.2870%" y="165" width="0.0273%" height="15" fill="rgb(215,142,24)" fg:x="7659" fg:w="4"/><text x="52.5370%" y="175.50"></text></g><g><title>deno_head`Builtins_RecordWriteSaveFP (2 samples, 0.01%)</title><rect x="52.3211%" y="165" width="0.0137%" height="15" fill="rgb(250,187,7)" fg:x="7664" fg:w="2"/><text x="52.5711%" y="175.50"></text></g><g><title>deno_head`deno_flash::next_request_sync (3 samples, 0.02%)</title><rect x="52.3553%" y="165" width="0.0205%" height="15" fill="rgb(228,66,33)" fg:x="7669" fg:w="3"/><text x="52.6053%" y="175.50"></text></g><g><title>deno_head`deno_flash::op_flash_next_fast (2 samples, 0.01%)</title><rect x="52.3826%" y="165" width="0.0137%" height="15" fill="rgb(234,215,21)" fg:x="7673" fg:w="2"/><text x="52.6326%" y="175.50"></text></g><g><title>deno_head`Builtins_AsyncFunctionAwaitResolveClosure (7,032 samples, 48.01%)</title><rect x="4.3965%" y="181" width="48.0066%" height="15" fill="rgb(222,191,20)" fg:x="644" fg:w="7032"/><text x="4.6465%" y="191.50">deno_head`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno_head`Builtins_ResolvePromise (10 samples, 0.07%)</title><rect x="52.4031%" y="181" width="0.0683%" height="15" fill="rgb(245,79,54)" fg:x="7676" fg:w="10"/><text x="52.6531%" y="191.50"></text></g><g><title>deno_head`Builtins_FulfillPromise (6 samples, 0.04%)</title><rect x="52.4304%" y="165" width="0.0410%" height="15" fill="rgb(240,10,37)" fg:x="7680" fg:w="6"/><text x="52.6804%" y="175.50"></text></g><g><title>deno_head`Builtins_PromiseFulfillReactionJob (7,061 samples, 48.20%)</title><rect x="4.3214%" y="197" width="48.2045%" height="15" fill="rgb(214,192,32)" fg:x="633" fg:w="7061"/><text x="4.5714%" y="207.50">deno_head`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno_head`Builtins_ResumeGeneratorTrampoline (8 samples, 0.05%)</title><rect x="52.4713%" y="181" width="0.0546%" height="15" fill="rgb(209,36,54)" fg:x="7686" fg:w="8"/><text x="52.7213%" y="191.50"></text></g><g><title>deno_head`Builtins_RecordWriteIgnoreFP (5 samples, 0.03%)</title><rect x="52.4918%" y="165" width="0.0341%" height="15" fill="rgb(220,10,11)" fg:x="7689" fg:w="5"/><text x="52.7418%" y="175.50"></text></g><g><title>deno_head`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (7,118 samples, 48.59%)</title><rect x="3.9459%" y="245" width="48.5937%" height="15" fill="rgb(221,106,17)" fg:x="578" fg:w="7118"/><text x="4.1959%" y="255.50">deno_head`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8..</text></g><g><title>deno_head`Builtins_JSRunMicrotasksEntry (7,112 samples, 48.55%)</title><rect x="3.9869%" y="229" width="48.5527%" height="15" fill="rgb(251,142,44)" fg:x="584" fg:w="7112"/><text x="4.2369%" y="239.50">deno_head`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno_head`Builtins_RunMicrotasks (7,109 samples, 48.53%)</title><rect x="4.0074%" y="213" width="48.5322%" height="15" fill="rgb(238,13,15)" fg:x="587" fg:w="7109"/><text x="4.2574%" y="223.50">deno_head`Builtins_RunMicrotasks</text></g><g><title>deno_head`Builtins_ResolvePromise (2 samples, 0.01%)</title><rect x="52.5259%" y="197" width="0.0137%" height="15" fill="rgb(208,107,27)" fg:x="7694" fg:w="2"/><text x="52.7759%" y="207.50"></text></g><g><title>deno_head`v8::internal::MicrotaskQueue::PerformCheckpointInternal (7,142 samples, 48.76%)</title><rect x="3.8026%" y="309" width="48.7575%" height="15" fill="rgb(205,136,37)" fg:x="557" fg:w="7142"/><text x="4.0526%" y="319.50">deno_head`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno_head`v8::internal::MicrotaskQueue::RunMicrotasks (7,138 samples, 48.73%)</title><rect x="3.8299%" y="293" width="48.7302%" height="15" fill="rgb(250,205,27)" fg:x="561" fg:w="7138"/><text x="4.0799%" y="303.50">deno_head`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno_head`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*, v8::internal::MaybeHandle (7,131 samples, 48.68%)</title><rect x="3.8777%" y="277" width="48.6824%" height="15" fill="rgb(210,80,43)" fg:x="568" fg:w="7131"/><text x="4.1277%" y="287.50">deno_head`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::..</text></g><g><title>deno_head`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (7,125 samples, 48.64%)</title><rect x="3.9186%" y="261" width="48.6415%" height="15" fill="rgb(247,160,36)" fg:x="574" fg:w="7125"/><text x="4.1686%" y="271.50">deno_head`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::..</text></g><g><title>deno_head`v8::internal::Isolate::FireCallCompletedCallbackInternal (7,147 samples, 48.79%)</title><rect x="3.7821%" y="325" width="48.7916%" height="15" fill="rgb(234,13,49)" fg:x="554" fg:w="7147"/><text x="4.0321%" y="335.50">deno_head`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno_head`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.01%)</title><rect x="52.5601%" y="309" width="0.0137%" height="15" fill="rgb(234,122,0)" fg:x="7699" fg:w="2"/><text x="52.8101%" y="319.50"></text></g><g><title>deno_head`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (7,250 samples, 49.49%)</title><rect x="3.0857%" y="341" width="49.4948%" height="15" fill="rgb(207,146,38)" fg:x="452" fg:w="7250"/><text x="3.3357%" y="351.50">deno_head`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v..</text></g><g><title>deno_head`v8::TryCatch::TryCatch (3 samples, 0.02%)</title><rect x="52.5874%" y="341" width="0.0205%" height="15" fill="rgb(207,177,25)" fg:x="7703" fg:w="3"/><text x="52.8374%" y="351.50"></text></g><g><title>deno_head`v8::TryCatch::~TryCatch (5 samples, 0.03%)</title><rect x="52.6079%" y="341" width="0.0341%" height="15" fill="rgb(211,178,42)" fg:x="7706" fg:w="5"/><text x="52.8579%" y="351.50"></text></g><g><title>deno_head`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (2 samples, 0.01%)</title><rect x="52.6625%" y="341" width="0.0137%" height="15" fill="rgb(230,69,54)" fg:x="7714" fg:w="2"/><text x="52.9125%" y="351.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="52.6761%" y="341" width="0.0137%" height="15" fill="rgb(214,135,41)" fg:x="7716" fg:w="2"/><text x="52.9261%" y="351.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Destroy (9 samples, 0.06%)</title><rect x="52.6898%" y="341" width="0.0614%" height="15" fill="rgb(237,67,25)" fg:x="7718" fg:w="9"/><text x="52.9398%" y="351.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::MoveGlobal (3 samples, 0.02%)</title><rect x="52.7512%" y="341" width="0.0205%" height="15" fill="rgb(222,189,50)" fg:x="7727" fg:w="3"/><text x="53.0012%" y="351.50"></text></g><g><title>deno_head`v8::internal::Isolate::FireCallCompletedCallbackInternal (4 samples, 0.03%)</title><rect x="52.7785%" y="341" width="0.0273%" height="15" fill="rgb(245,148,34)" fg:x="7731" fg:w="4"/><text x="53.0285%" y="351.50"></text></g><g><title>deno_head`v8::internal::MicrotaskQueue::PerformCheckpointInternal (3 samples, 0.02%)</title><rect x="52.8058%" y="341" width="0.0205%" height="15" fill="rgb(222,29,6)" fg:x="7735" fg:w="3"/><text x="53.0558%" y="351.50"></text></g><g><title>deno_head`v8::internal::MicrotaskQueue::RunMicrotasks (3 samples, 0.02%)</title><rect x="52.8058%" y="325" width="0.0205%" height="15" fill="rgb(221,189,43)" fg:x="7735" fg:w="3"/><text x="53.0558%" y="335.50"></text></g><g><title>deno_head`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (3 samples, 0.02%)</title><rect x="52.8263%" y="341" width="0.0205%" height="15" fill="rgb(207,36,27)" fg:x="7738" fg:w="3"/><text x="53.0763%" y="351.50"></text></g><g><title>deno_head`v8::internal::wasm::WasmEngine::HasRunningCompileJob (4 samples, 0.03%)</title><rect x="52.8468%" y="341" width="0.0273%" height="15" fill="rgb(217,90,24)" fg:x="7741" fg:w="4"/><text x="53.0968%" y="351.50"></text></g><g><title>deno_head`v8::isolate::Isolate::is_execution_terminating (9 samples, 0.06%)</title><rect x="52.8741%" y="341" width="0.0614%" height="15" fill="rgb(224,66,35)" fg:x="7745" fg:w="9"/><text x="53.1241%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="52.9219%" y="325" width="0.0137%" height="15" fill="rgb(221,13,50)" fg:x="7752" fg:w="2"/><text x="53.1719%" y="335.50"></text></g><g><title>deno_head`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (4 samples, 0.03%)</title><rect x="52.9492%" y="341" width="0.0273%" height="15" fill="rgb(236,68,49)" fg:x="7756" fg:w="4"/><text x="53.1992%" y="351.50"></text></g><g><title>deno_head`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (8 samples, 0.05%)</title><rect x="53.0038%" y="229" width="0.0546%" height="15" fill="rgb(229,146,28)" fg:x="7764" fg:w="8"/><text x="53.2538%" y="239.50"></text></g><g><title>deno_head`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (10 samples, 0.07%)</title><rect x="53.0038%" y="245" width="0.0683%" height="15" fill="rgb(225,31,38)" fg:x="7764" fg:w="10"/><text x="53.2538%" y="255.50"></text></g><g><title>deno_head`operator new(unsigned long) (2 samples, 0.01%)</title><rect x="53.0926%" y="197" width="0.0137%" height="15" fill="rgb(250,208,3)" fg:x="7777" fg:w="2"/><text x="53.3426%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="53.0926%" y="181" width="0.0137%" height="15" fill="rgb(246,54,23)" fg:x="7777" fg:w="2"/><text x="53.3426%" y="191.50"></text></g><g><title>deno_head`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (3 samples, 0.02%)</title><rect x="53.0926%" y="245" width="0.0205%" height="15" fill="rgb(243,76,11)" fg:x="7777" fg:w="3"/><text x="53.3426%" y="255.50"></text></g><g><title>deno_head`v8::internal::CompactionSpaceCollection::CompactionSpaceCollection (3 samples, 0.02%)</title><rect x="53.0926%" y="229" width="0.0205%" height="15" fill="rgb(245,21,50)" fg:x="7777" fg:w="3"/><text x="53.3426%" y="239.50"></text></g><g><title>deno_head`v8::internal::FreeList::CreateFreeList (3 samples, 0.02%)</title><rect x="53.0926%" y="213" width="0.0205%" height="15" fill="rgb(228,9,43)" fg:x="7777" fg:w="3"/><text x="53.3426%" y="223.50"></text></g><g><title>deno_head`v8::internal::Scavenger::Process (3 samples, 0.02%)</title><rect x="53.1131%" y="197" width="0.0205%" height="15" fill="rgb(208,100,47)" fg:x="7780" fg:w="3"/><text x="53.3631%" y="207.50"></text></g><g><title>deno_head`v8::platform::DefaultJobHandle::Join (5 samples, 0.03%)</title><rect x="53.1131%" y="245" width="0.0341%" height="15" fill="rgb(232,26,8)" fg:x="7780" fg:w="5"/><text x="53.3631%" y="255.50"></text></g><g><title>deno_head`v8::platform::DefaultJobState::Join (5 samples, 0.03%)</title><rect x="53.1131%" y="229" width="0.0341%" height="15" fill="rgb(216,166,38)" fg:x="7780" fg:w="5"/><text x="53.3631%" y="239.50"></text></g><g><title>deno_head`v8::internal::ScavengerCollector::JobTask::ProcessItems (5 samples, 0.03%)</title><rect x="53.1131%" y="213" width="0.0341%" height="15" fill="rgb(251,202,51)" fg:x="7780" fg:w="5"/><text x="53.3631%" y="223.50"></text></g><g><title>deno_head`v8::internal::Scavenger::ScavengePage (2 samples, 0.01%)</title><rect x="53.1335%" y="197" width="0.0137%" height="15" fill="rgb(254,216,34)" fg:x="7783" fg:w="2"/><text x="53.3835%" y="207.50"></text></g><g><title>deno_head`v8::internal::ScavengerCollector::CollectGarbage (28 samples, 0.19%)</title><rect x="52.9970%" y="261" width="0.1912%" height="15" fill="rgb(251,32,27)" fg:x="7763" fg:w="28"/><text x="53.2470%" y="271.50"></text></g><g><title>deno_head`v8::platform::DefaultPlatform::PostJob(v8::TaskPriority, std::__1::unique_ptr&lt;v8::JobTask, std::__1::default_delete (6 samples, 0.04%)</title><rect x="53.1472%" y="245" width="0.0410%" height="15" fill="rgb(208,127,28)" fg:x="7785" fg:w="6"/><text x="53.3972%" y="255.50"></text></g><g><title>deno_head`v8::platform::DefaultJobState::NotifyConcurrencyIncrease (6 samples, 0.04%)</title><rect x="53.1472%" y="229" width="0.0410%" height="15" fill="rgb(224,137,22)" fg:x="7785" fg:w="6"/><text x="53.3972%" y="239.50"></text></g><g><title>deno_head`v8::platform::DefaultWorkerThreadsTaskRunner::PostTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (6 samples, 0.04%)</title><rect x="53.1472%" y="213" width="0.0410%" height="15" fill="rgb(254,70,32)" fg:x="7785" fg:w="6"/><text x="53.3972%" y="223.50"></text></g><g><title>deno_head`v8::platform::DelayedTaskQueue::Append(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (6 samples, 0.04%)</title><rect x="53.1472%" y="197" width="0.0410%" height="15" fill="rgb(229,75,37)" fg:x="7785" fg:w="6"/><text x="53.3972%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (6 samples, 0.04%)</title><rect x="53.1472%" y="181" width="0.0410%" height="15" fill="rgb(252,64,23)" fg:x="7785" fg:w="6"/><text x="53.3972%" y="191.50"></text></g><g><title>deno_head`v8::internal::ScavengeJob::Task::RunInternal (35 samples, 0.24%)</title><rect x="52.9833%" y="325" width="0.2389%" height="15" fill="rgb(232,162,48)" fg:x="7761" fg:w="35"/><text x="53.2333%" y="335.50"></text></g><g><title>deno_head`v8::internal::Heap::CollectGarbage (35 samples, 0.24%)</title><rect x="52.9833%" y="309" width="0.2389%" height="15" fill="rgb(246,160,12)" fg:x="7761" fg:w="35"/><text x="53.2333%" y="319.50"></text></g><g><title>deno_head`v8::internal::Heap::PerformGarbageCollection (34 samples, 0.23%)</title><rect x="52.9902%" y="293" width="0.2321%" height="15" fill="rgb(247,166,0)" fg:x="7762" fg:w="34"/><text x="53.2402%" y="303.50"></text></g><g><title>deno_head`v8::internal::Heap::Scavenge (33 samples, 0.23%)</title><rect x="52.9970%" y="277" width="0.2253%" height="15" fill="rgb(249,219,21)" fg:x="7763" fg:w="33"/><text x="53.2470%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.03%)</title><rect x="53.1950%" y="261" width="0.0273%" height="15" fill="rgb(205,209,3)" fg:x="7792" fg:w="4"/><text x="53.4450%" y="271.50"></text></g><g><title>deno_head`v8::platform::DefaultForegroundTaskRunner::MoveExpiredDelayedTasks(v8::base::LockGuard&lt;v8::base::Mutex,  (11 samples, 0.08%)</title><rect x="53.2291%" y="309" width="0.0751%" height="15" fill="rgb(243,44,1)" fg:x="7797" fg:w="11"/><text x="53.4791%" y="319.50"></text></g><g><title>deno_head`v8::platform::DefaultForegroundTaskRunner::PopTaskFromDelayedQueueLocked(v8::base::LockGuard&lt;v8::base::Mutex,  (10 samples, 0.07%)</title><rect x="53.2359%" y="293" width="0.0683%" height="15" fill="rgb(206,159,16)" fg:x="7798" fg:w="10"/><text x="53.4859%" y="303.50"></text></g><g><title>deno_head`v8::platform::(anonymous namespace)::DefaultTimeFunction (10 samples, 0.07%)</title><rect x="53.2359%" y="277" width="0.0683%" height="15" fill="rgb(244,77,30)" fg:x="7798" fg:w="10"/><text x="53.4859%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.07%)</title><rect x="53.2359%" y="261" width="0.0683%" height="15" fill="rgb(218,69,12)" fg:x="7798" fg:w="10"/><text x="53.4859%" y="271.50"></text></g><g><title>deno_head`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (14 samples, 0.10%)</title><rect x="53.2291%" y="325" width="0.0956%" height="15" fill="rgb(212,87,7)" fg:x="7797" fg:w="14"/><text x="53.4791%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="53.3042%" y="309" width="0.0205%" height="15" fill="rgb(245,114,25)" fg:x="7808" fg:w="3"/><text x="53.5542%" y="319.50"></text></g><g><title>deno_head`v8::platform::DefaultPlatform::PumpMessageLoop (53 samples, 0.36%)</title><rect x="52.9765%" y="341" width="0.3618%" height="15" fill="rgb(210,61,42)" fg:x="7760" fg:w="53"/><text x="53.2265%" y="351.50"></text></g><g><title>deno_head`v8::primitives::undefined (4 samples, 0.03%)</title><rect x="53.3383%" y="341" width="0.0273%" height="15" fill="rgb(211,52,33)" fg:x="7813" fg:w="4"/><text x="53.5883%" y="351.50"></text></g><g><title>deno_head`v8::scope::data::ScopeData::get_try_catch (2 samples, 0.01%)</title><rect x="53.3656%" y="341" width="0.0137%" height="15" fill="rgb(234,58,33)" fg:x="7817" fg:w="2"/><text x="53.6156%" y="351.50"></text></g><g><title>deno_head`v8::scope::data::ScopeData::new_handle_scope_data_with_context (3 samples, 0.02%)</title><rect x="53.3793%" y="341" width="0.0205%" height="15" fill="rgb(220,115,36)" fg:x="7819" fg:w="3"/><text x="53.6293%" y="351.50"></text></g><g><title>deno_head`v8::scope::data::ScopeData::new_try_catch_data (2 samples, 0.01%)</title><rect x="53.3998%" y="341" width="0.0137%" height="15" fill="rgb(243,153,54)" fg:x="7822" fg:w="2"/><text x="53.6498%" y="351.50"></text></g><g><title>deno_head`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.02%)</title><rect x="53.4134%" y="325" width="0.0205%" height="15" fill="rgb(251,47,18)" fg:x="7824" fg:w="3"/><text x="53.6634%" y="335.50"></text></g><g><title>deno_head`v8::scope::data::ScopeData::notify_scope_dropped (4 samples, 0.03%)</title><rect x="53.4134%" y="341" width="0.0273%" height="15" fill="rgb(242,102,42)" fg:x="7824" fg:w="4"/><text x="53.6634%" y="351.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="53.4749%" y="341" width="0.0205%" height="15" fill="rgb(234,31,38)" fg:x="7833" fg:w="3"/><text x="53.7249%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="53.5022%" y="309" width="0.0137%" height="15" fill="rgb(221,117,51)" fg:x="7837" fg:w="2"/><text x="53.7522%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="53.4954%" y="341" width="0.0273%" height="15" fill="rgb(212,20,18)" fg:x="7836" fg:w="4"/><text x="53.7454%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="53.4954%" y="325" width="0.0273%" height="15" fill="rgb(245,133,36)" fg:x="7836" fg:w="4"/><text x="53.7454%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="53.5568%" y="325" width="0.0205%" height="15" fill="rgb(212,6,19)" fg:x="7845" fg:w="3"/><text x="53.8068%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.06%)</title><rect x="53.5227%" y="341" width="0.0614%" height="15" fill="rgb(218,1,36)" fg:x="7840" fg:w="9"/><text x="53.7727%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.03%)</title><rect x="53.5841%" y="341" width="0.0273%" height="15" fill="rgb(246,84,54)" fg:x="7849" fg:w="4"/><text x="53.8341%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.03%)</title><rect x="53.5841%" y="325" width="0.0273%" height="15" fill="rgb(242,110,6)" fg:x="7849" fg:w="4"/><text x="53.8341%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="53.6114%" y="341" width="0.0137%" height="15" fill="rgb(214,47,5)" fg:x="7853" fg:w="2"/><text x="53.8614%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.03%)</title><rect x="53.6251%" y="341" width="0.0341%" height="15" fill="rgb(218,159,25)" fg:x="7855" fg:w="5"/><text x="53.8751%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="53.6592%" y="341" width="0.0137%" height="15" fill="rgb(215,211,28)" fg:x="7860" fg:w="2"/><text x="53.9092%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5 samples, 0.03%)</title><rect x="53.6729%" y="341" width="0.0341%" height="15" fill="rgb(238,59,32)" fg:x="7862" fg:w="5"/><text x="53.9229%" y="351.50"></text></g><g><title>deno_head`deno_core::runtime::JsRuntime::poll_event_loop (7,759 samples, 52.97%)</title><rect x="0.7578%" y="357" width="52.9697%" height="15" fill="rgb(226,82,3)" fg:x="111" fg:w="7759"/><text x="1.0078%" y="367.50">deno_head`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="53.7070%" y="341" width="0.0205%" height="15" fill="rgb(240,164,32)" fg:x="7867" fg:w="3"/><text x="53.9570%" y="351.50"></text></g><g><title>deno_head`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (5 samples, 0.03%)</title><rect x="53.7343%" y="357" width="0.0341%" height="15" fill="rgb(232,46,7)" fg:x="7871" fg:w="5"/><text x="53.9843%" y="367.50"></text></g><g><title>deno_head`v8::Isolate::PerformMicrotaskCheckpoint (3 samples, 0.02%)</title><rect x="53.7684%" y="357" width="0.0205%" height="15" fill="rgb(229,129,53)" fg:x="7876" fg:w="3"/><text x="54.0184%" y="367.50"></text></g><g><title>deno_head`v8::function::_&lt;impl v8::data::Function&gt;::call (3 samples, 0.02%)</title><rect x="53.8026%" y="357" width="0.0205%" height="15" fill="rgb(234,188,29)" fg:x="7881" fg:w="3"/><text x="54.0526%" y="367.50"></text></g><g><title>deno_head`v8::internal::GlobalHandles::Destroy (2 samples, 0.01%)</title><rect x="53.8230%" y="357" width="0.0137%" height="15" fill="rgb(246,141,4)" fg:x="7884" fg:w="2"/><text x="54.0730%" y="367.50"></text></g><g><title>deno_head`v8::isolate::Isolate::is_execution_terminating (2 samples, 0.01%)</title><rect x="53.8435%" y="357" width="0.0137%" height="15" fill="rgb(229,23,39)" fg:x="7887" fg:w="2"/><text x="54.0935%" y="367.50"></text></g><g><title>deno_head`v8::platform::PumpMessageLoop (3 samples, 0.02%)</title><rect x="53.8640%" y="357" width="0.0205%" height="15" fill="rgb(206,12,3)" fg:x="7890" fg:w="3"/><text x="54.1140%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="53.8913%" y="357" width="0.0205%" height="15" fill="rgb(252,226,20)" fg:x="7894" fg:w="3"/><text x="54.1413%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="53.9118%" y="357" width="0.0205%" height="15" fill="rgb(216,123,35)" fg:x="7897" fg:w="3"/><text x="54.1618%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="53.9323%" y="357" width="0.0137%" height="15" fill="rgb(212,68,40)" fg:x="7900" fg:w="2"/><text x="54.1823%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="53.9459%" y="357" width="0.0137%" height="15" fill="rgb(254,125,32)" fg:x="7902" fg:w="2"/><text x="54.1959%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="53.9596%" y="357" width="0.0137%" height="15" fill="rgb(253,97,22)" fg:x="7904" fg:w="2"/><text x="54.2096%" y="367.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,818 samples, 53.37%)</title><rect x="0.6076%" y="373" width="53.3725%" height="15" fill="rgb(241,101,14)" fg:x="89" fg:w="7818"/><text x="0.8576%" y="383.50">deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::..</text></g><g><title>deno_head`OUTLINED_FUNCTION_1567 (4 samples, 0.03%)</title><rect x="53.9801%" y="373" width="0.0273%" height="15" fill="rgb(238,103,29)" fg:x="7907" fg:w="4"/><text x="54.2301%" y="383.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,828 samples, 53.44%)</title><rect x="0.5871%" y="389" width="53.4407%" height="15" fill="rgb(233,195,47)" fg:x="86" fg:w="7828"/><text x="0.8371%" y="399.50">deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::..</text></g><g><title>deno_head`OUTLINED_FUNCTION_37654 (3 samples, 0.02%)</title><rect x="54.0074%" y="373" width="0.0205%" height="15" fill="rgb(246,218,30)" fg:x="7911" fg:w="3"/><text x="54.2574%" y="383.50"></text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,840 samples, 53.52%)</title><rect x="0.5120%" y="405" width="53.5227%" height="15" fill="rgb(219,145,47)" fg:x="75" fg:w="7840"/><text x="0.7620%" y="415.50">deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::..</text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,857 samples, 53.64%)</title><rect x="0.4164%" y="437" width="53.6387%" height="15" fill="rgb(243,12,26)" fg:x="61" fg:w="7857"/><text x="0.6664%" y="447.50">deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::..</text></g><g><title>deno_head`deno::run_command::_{{closure}} (7,847 samples, 53.57%)</title><rect x="0.4847%" y="421" width="53.5705%" height="15" fill="rgb(214,87,16)" fg:x="71" fg:w="7847"/><text x="0.7347%" y="431.50">deno_head`deno::run_command::_{{closure}}</text></g><g><title>deno_head`deno::worker::create_main_worker (2 samples, 0.01%)</title><rect x="54.0415%" y="405" width="0.0137%" height="15" fill="rgb(208,99,42)" fg:x="7916" fg:w="2"/><text x="54.2915%" y="415.50"></text></g><g><title>deno_head`deno_runtime::worker::MainWorker::bootstrap_from_options (2 samples, 0.01%)</title><rect x="54.0415%" y="389" width="0.0137%" height="15" fill="rgb(253,99,2)" fg:x="7916" fg:w="2"/><text x="54.2915%" y="399.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_21340 (2 samples, 0.01%)</title><rect x="54.0620%" y="437" width="0.0137%" height="15" fill="rgb(220,168,23)" fg:x="7919" fg:w="2"/><text x="54.3120%" y="447.50"></text></g><g><title>deno_head`deno::main::_{{closure}} (7,866 samples, 53.70%)</title><rect x="0.3960%" y="453" width="53.7002%" height="15" fill="rgb(242,38,24)" fg:x="58" fg:w="7866"/><text x="0.6460%" y="463.50">deno_head`deno::main::_{{closure}}</text></g><g><title>deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,892 samples, 53.88%)</title><rect x="0.2594%" y="469" width="53.8777%" height="15" fill="rgb(225,182,9)" fg:x="38" fg:w="7892"/><text x="0.5094%" y="479.50">deno_head`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::p..</text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.03%)</title><rect x="54.1098%" y="453" width="0.0273%" height="15" fill="rgb(243,178,37)" fg:x="7926" fg:w="4"/><text x="54.3598%" y="463.50"></text></g><g><title>deno_head`&lt;tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set::Reset as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="54.1371%" y="469" width="0.0137%" height="15" fill="rgb(232,139,19)" fg:x="7930" fg:w="2"/><text x="54.3871%" y="479.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_18150 (4 samples, 0.03%)</title><rect x="54.1712%" y="469" width="0.0273%" height="15" fill="rgb(225,201,24)" fg:x="7935" fg:w="4"/><text x="54.4212%" y="479.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_21571 (2 samples, 0.01%)</title><rect x="54.1985%" y="469" width="0.0137%" height="15" fill="rgb(221,47,46)" fg:x="7939" fg:w="2"/><text x="54.4485%" y="479.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_33800 (4 samples, 0.03%)</title><rect x="54.2122%" y="469" width="0.0273%" height="15" fill="rgb(249,23,13)" fg:x="7941" fg:w="4"/><text x="54.4622%" y="479.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_9910 (3 samples, 0.02%)</title><rect x="54.2531%" y="469" width="0.0205%" height="15" fill="rgb(219,9,5)" fg:x="7947" fg:w="3"/><text x="54.5031%" y="479.50"></text></g><g><title>deno_head`tokio::process::imp::GlobalOrphanQueue::reap_orphans (3 samples, 0.02%)</title><rect x="54.3078%" y="453" width="0.0205%" height="15" fill="rgb(254,171,16)" fg:x="7955" fg:w="3"/><text x="54.5578%" y="463.50"></text></g><g><title>deno_head`tokio::signal::unix::driver::Driver::process (3 samples, 0.02%)</title><rect x="54.3282%" y="453" width="0.0205%" height="15" fill="rgb(230,171,20)" fg:x="7958" fg:w="3"/><text x="54.5782%" y="463.50"></text></g><g><title>deno_head`mio::poll::Poll::poll (2 samples, 0.01%)</title><rect x="54.4170%" y="437" width="0.0137%" height="15" fill="rgb(210,71,41)" fg:x="7971" fg:w="2"/><text x="54.6670%" y="447.50"></text></g><g><title>deno_head`std::time::Instant::checked_duration_since (2 samples, 0.01%)</title><rect x="54.4306%" y="437" width="0.0137%" height="15" fill="rgb(206,173,20)" fg:x="7973" fg:w="2"/><text x="54.6806%" y="447.50"></text></g><g><title>deno_head`tokio::io::driver::Driver::turn (289 samples, 1.97%)</title><rect x="54.4443%" y="437" width="1.9730%" height="15" fill="rgb(233,88,34)" fg:x="7975" fg:w="289"/><text x="54.6943%" y="447.50">d..</text></g><g><title>libsystem_kernel.dylib`kevent (282 samples, 1.93%)</title><rect x="54.4921%" y="421" width="1.9252%" height="15" fill="rgb(223,209,46)" fg:x="7982" fg:w="282"/><text x="54.7421%" y="431.50">l..</text></g><g><title>deno_head`tokio::process::imp::GlobalOrphanQueue::reap_orphans (2 samples, 0.01%)</title><rect x="56.4241%" y="437" width="0.0137%" height="15" fill="rgb(250,43,18)" fg:x="8265" fg:w="2"/><text x="56.6741%" y="447.50"></text></g><g><title>deno_head`tokio::io::driver::registration::Registration::poll_ready (3 samples, 0.02%)</title><rect x="56.4719%" y="421" width="0.0205%" height="15" fill="rgb(208,13,10)" fg:x="8272" fg:w="3"/><text x="56.7219%" y="431.50"></text></g><g><title>deno_head`tokio::signal::unix::driver::Driver::process (11 samples, 0.08%)</title><rect x="56.4377%" y="437" width="0.0751%" height="15" fill="rgb(212,200,36)" fg:x="8267" fg:w="11"/><text x="56.6877%" y="447.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="56.4924%" y="421" width="0.0205%" height="15" fill="rgb(225,90,30)" fg:x="8275" fg:w="3"/><text x="56.7424%" y="431.50"></text></g><g><title>deno_head`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (6 samples, 0.04%)</title><rect x="56.5470%" y="421" width="0.0410%" height="15" fill="rgb(236,182,39)" fg:x="8283" fg:w="6"/><text x="56.7970%" y="431.50"></text></g><g><title> 32]&gt; (6 samples, 0.04%)</title><rect x="56.5470%" y="405" width="0.0410%" height="15" fill="rgb(212,144,35)" fg:x="8283" fg:w="6"/><text x="56.7970%" y="415.50"></text></g><g><title>deno_head`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (12 samples, 0.08%)</title><rect x="56.5128%" y="437" width="0.0819%" height="15" fill="rgb(228,63,44)" fg:x="8278" fg:w="12"/><text x="56.7628%" y="447.50"></text></g><g><title>deno_head`tokio::time::driver::Driver&lt;P&gt;::park_internal (330 samples, 2.25%)</title><rect x="54.3487%" y="453" width="2.2529%" height="15" fill="rgb(228,109,6)" fg:x="7961" fg:w="330"/><text x="54.5987%" y="463.50">d..</text></g><g><title>deno_head`tokio::runtime::basic_scheduler::Context::park (361 samples, 2.46%)</title><rect x="54.2804%" y="469" width="2.4645%" height="15" fill="rgb(238,117,24)" fg:x="7951" fg:w="361"/><text x="54.5304%" y="479.50">de..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (20 samples, 0.14%)</title><rect x="56.6084%" y="453" width="0.1365%" height="15" fill="rgb(242,26,26)" fg:x="8292" fg:w="20"/><text x="56.8584%" y="463.50"></text></g><g><title>deno_head`tokio::task::local::LocalSet::tick (3 samples, 0.02%)</title><rect x="56.7449%" y="469" width="0.0205%" height="15" fill="rgb(221,92,48)" fg:x="8312" fg:w="3"/><text x="56.9949%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.03%)</title><rect x="56.7654%" y="469" width="0.0341%" height="15" fill="rgb(209,209,32)" fg:x="8315" fg:w="5"/><text x="57.0154%" y="479.50"></text></g><g><title>deno_head`deno_runtime::tokio_util::run_local (8,317 samples, 56.78%)</title><rect x="0.1843%" y="485" width="56.7791%" height="15" fill="rgb(221,70,22)" fg:x="27" fg:w="8317"/><text x="0.4343%" y="495.50">deno_head`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.16%)</title><rect x="56.7996%" y="469" width="0.1638%" height="15" fill="rgb(248,145,5)" fg:x="8320" fg:w="24"/><text x="57.0496%" y="479.50"></text></g><g><title>deno_head`std::thread::local::fast::Key&lt;T&gt;::get (5 samples, 0.03%)</title><rect x="56.9634%" y="485" width="0.0341%" height="15" fill="rgb(226,116,26)" fg:x="8344" fg:w="5"/><text x="57.2134%" y="495.50"></text></g><g><title>deno_head`std::sys_common::backtrace::__rust_begin_short_backtrace (8,345 samples, 56.97%)</title><rect x="0.0410%" y="517" width="56.9702%" height="15" fill="rgb(244,5,17)" fg:x="6" fg:w="8345"/><text x="0.2910%" y="527.50">deno_head`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno_head`deno::main (8,345 samples, 56.97%)</title><rect x="0.0410%" y="501" width="56.9702%" height="15" fill="rgb(252,159,33)" fg:x="6" fg:w="8345"/><text x="0.2910%" y="511.50">deno_head`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.01%)</title><rect x="56.9975%" y="485" width="0.0137%" height="15" fill="rgb(206,71,0)" fg:x="8349" fg:w="2"/><text x="57.2475%" y="495.50"></text></g><g><title>dyld`start (8,346 samples, 56.98%)</title><rect x="0.0410%" y="549" width="56.9771%" height="15" fill="rgb(233,118,54)" fg:x="6" fg:w="8346"/><text x="0.2910%" y="559.50">dyld`start</text></g><g><title>deno_head`main (8,346 samples, 56.98%)</title><rect x="0.0410%" y="533" width="56.9771%" height="15" fill="rgb(234,83,48)" fg:x="6" fg:w="8346"/><text x="0.2910%" y="543.50">deno_head`main</text></g><g><title>deno_head`&lt;deno_flash::Stream as std::io::Read&gt;::read (6 samples, 0.04%)</title><rect x="57.0180%" y="453" width="0.0410%" height="15" fill="rgb(228,3,54)" fg:x="8352" fg:w="6"/><text x="57.2680%" y="463.50"></text></g><g><title>deno_head`&lt;tokio::runtime::enter::Enter as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="57.0590%" y="453" width="0.0137%" height="15" fill="rgb(226,155,13)" fg:x="8358" fg:w="2"/><text x="57.3090%" y="463.50"></text></g><g><title>deno_head`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="57.0726%" y="453" width="0.0341%" height="15" fill="rgb(241,28,37)" fg:x="8360" fg:w="5"/><text x="57.3226%" y="463.50"></text></g><g><title>deno_head`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="57.1204%" y="453" width="0.0205%" height="15" fill="rgb(233,93,10)" fg:x="8367" fg:w="3"/><text x="57.3704%" y="463.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_138 (5 samples, 0.03%)</title><rect x="57.1409%" y="453" width="0.0341%" height="15" fill="rgb(225,113,19)" fg:x="8370" fg:w="5"/><text x="57.3909%" y="463.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_88 (2 samples, 0.01%)</title><rect x="57.1887%" y="453" width="0.0137%" height="15" fill="rgb(241,2,18)" fg:x="8377" fg:w="2"/><text x="57.4387%" y="463.50"></text></g><g><title>deno_head`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (2 samples, 0.01%)</title><rect x="58.6701%" y="437" width="0.0137%" height="15" fill="rgb(228,207,21)" fg:x="8594" fg:w="2"/><text x="58.9201%" y="447.50"></text></g><g><title>deno_head`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.12%)</title><rect x="58.6838%" y="437" width="0.1229%" height="15" fill="rgb(213,211,35)" fg:x="8596" fg:w="18"/><text x="58.9338%" y="447.50"></text></g><g><title>deno_head`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (31 samples, 0.21%)</title><rect x="58.8135%" y="437" width="0.2116%" height="15" fill="rgb(209,83,10)" fg:x="8615" fg:w="31"/><text x="59.0635%" y="447.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_11088 (8 samples, 0.05%)</title><rect x="59.0388%" y="437" width="0.0546%" height="15" fill="rgb(209,164,1)" fg:x="8648" fg:w="8"/><text x="59.2888%" y="447.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_210 (2 samples, 0.01%)</title><rect x="59.1002%" y="437" width="0.0137%" height="15" fill="rgb(213,184,43)" fg:x="8657" fg:w="2"/><text x="59.3502%" y="447.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_25124 (4 samples, 0.03%)</title><rect x="59.1139%" y="437" width="0.0273%" height="15" fill="rgb(231,61,34)" fg:x="8659" fg:w="4"/><text x="59.3639%" y="447.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_2527 (6 samples, 0.04%)</title><rect x="59.1412%" y="437" width="0.0410%" height="15" fill="rgb(235,75,3)" fg:x="8663" fg:w="6"/><text x="59.3912%" y="447.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_28329 (3 samples, 0.02%)</title><rect x="59.1821%" y="437" width="0.0205%" height="15" fill="rgb(220,106,47)" fg:x="8669" fg:w="3"/><text x="59.4321%" y="447.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_37769 (5 samples, 0.03%)</title><rect x="59.2094%" y="437" width="0.0341%" height="15" fill="rgb(210,196,33)" fg:x="8673" fg:w="5"/><text x="59.4594%" y="447.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_93 (2 samples, 0.01%)</title><rect x="59.2572%" y="437" width="0.0137%" height="15" fill="rgb(229,154,42)" fg:x="8680" fg:w="2"/><text x="59.5072%" y="447.50"></text></g><g><title>deno_head`core::hash::BuildHasher::hash_one (14 samples, 0.10%)</title><rect x="59.2709%" y="437" width="0.0956%" height="15" fill="rgb(228,114,26)" fg:x="8682" fg:w="14"/><text x="59.5209%" y="447.50"></text></g><g><title>deno_head`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.01%)</title><rect x="59.3938%" y="389" width="0.0137%" height="15" fill="rgb(208,144,1)" fg:x="8700" fg:w="2"/><text x="59.6438%" y="399.50"></text></g><g><title>deno_head`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (132 samples, 0.90%)</title><rect x="59.3733%" y="421" width="0.9011%" height="15" fill="rgb(239,112,37)" fg:x="8697" fg:w="132"/><text x="59.6233%" y="431.50"></text></g><g><title>deno_head`tokio::util::wake::wake_arc_raw (130 samples, 0.89%)</title><rect x="59.3869%" y="405" width="0.8875%" height="15" fill="rgb(210,96,50)" fg:x="8699" fg:w="130"/><text x="59.6369%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`kevent (127 samples, 0.87%)</title><rect x="59.4074%" y="389" width="0.8670%" height="15" fill="rgb(222,178,2)" fg:x="8702" fg:w="127"/><text x="59.6574%" y="399.50"></text></g><g><title>deno_head`futures_task::waker::wake_arc_raw (133 samples, 0.91%)</title><rect x="59.3733%" y="437" width="0.9080%" height="15" fill="rgb(226,74,18)" fg:x="8697" fg:w="133"/><text x="59.6233%" y="447.50"></text></g><g><title>deno_head`http::header::name::HeaderName::from_bytes (5 samples, 0.03%)</title><rect x="60.2813%" y="437" width="0.0341%" height="15" fill="rgb(225,67,54)" fg:x="8830" fg:w="5"/><text x="60.5313%" y="447.50"></text></g><g><title>deno_head`http::header::name::parse_hdr (12 samples, 0.08%)</title><rect x="60.3154%" y="437" width="0.0819%" height="15" fill="rgb(251,92,32)" fg:x="8835" fg:w="12"/><text x="60.5654%" y="447.50"></text></g><g><title>deno_head`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.30%)</title><rect x="60.5270%" y="421" width="0.3004%" height="15" fill="rgb(228,149,22)" fg:x="8866" fg:w="44"/><text x="60.7770%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_1325 (2 samples, 0.01%)</title><rect x="60.8274%" y="421" width="0.0137%" height="15" fill="rgb(243,54,13)" fg:x="8910" fg:w="2"/><text x="61.0774%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_13256 (5 samples, 0.03%)</title><rect x="60.8411%" y="421" width="0.0341%" height="15" fill="rgb(243,180,28)" fg:x="8912" fg:w="5"/><text x="61.0911%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_19462 (9 samples, 0.06%)</title><rect x="60.8752%" y="421" width="0.0614%" height="15" fill="rgb(208,167,24)" fg:x="8917" fg:w="9"/><text x="61.1252%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_2253 (2 samples, 0.01%)</title><rect x="60.9366%" y="421" width="0.0137%" height="15" fill="rgb(245,73,45)" fg:x="8926" fg:w="2"/><text x="61.1866%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_22986 (4 samples, 0.03%)</title><rect x="60.9503%" y="421" width="0.0273%" height="15" fill="rgb(237,203,48)" fg:x="8928" fg:w="4"/><text x="61.2003%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_31619 (3 samples, 0.02%)</title><rect x="60.9776%" y="421" width="0.0205%" height="15" fill="rgb(211,197,16)" fg:x="8932" fg:w="3"/><text x="61.2276%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_542 (6 samples, 0.04%)</title><rect x="60.9981%" y="421" width="0.0410%" height="15" fill="rgb(243,99,51)" fg:x="8935" fg:w="6"/><text x="61.2481%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_7546 (2 samples, 0.01%)</title><rect x="61.0459%" y="421" width="0.0137%" height="15" fill="rgb(215,123,29)" fg:x="8942" fg:w="2"/><text x="61.2959%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_8803 (3 samples, 0.02%)</title><rect x="61.0595%" y="421" width="0.0205%" height="15" fill="rgb(239,186,37)" fg:x="8944" fg:w="3"/><text x="61.3095%" y="431.50"></text></g><g><title>deno_head`OUTLINED_FUNCTION_9860 (2 samples, 0.01%)</title><rect x="61.0800%" y="421" width="0.0137%" height="15" fill="rgb(252,136,39)" fg:x="8947" fg:w="2"/><text x="61.3300%" y="431.50"></text></g><g><title>deno_head`httparse::iter::Bytes::slice_skip (2 samples, 0.01%)</title><rect x="61.1005%" y="421" width="0.0137%" height="15" fill="rgb(223,213,32)" fg:x="8950" fg:w="2"/><text x="61.3505%" y="431.50"></text></g><g><title>deno_head`httparse::parse_headers_iter_uninit (41 samples, 0.28%)</title><rect x="61.1141%" y="421" width="0.2799%" height="15" fill="rgb(233,115,5)" fg:x="8952" fg:w="41"/><text x="61.3641%" y="431.50"></text></g><g><title>deno_head`httparse::parse_version (10 samples, 0.07%)</title><rect x="61.3940%" y="421" width="0.0683%" height="15" fill="rgb(207,226,44)" fg:x="8993" fg:w="10"/><text x="61.6440%" y="431.50"></text></g><g><title>deno_head`httparse::Request::parse_with_config_and_uninit_headers (161 samples, 1.10%)</title><rect x="60.3973%" y="437" width="1.0991%" height="15" fill="rgb(208,126,0)" fg:x="8847" fg:w="161"/><text x="60.6473%" y="447.50"></text></g><g><title>deno_head`httparse::skip_empty_lines (5 samples, 0.03%)</title><rect x="61.4623%" y="421" width="0.0341%" height="15" fill="rgb(244,66,21)" fg:x="9003" fg:w="5"/><text x="61.7123%" y="431.50"></text></g><g><title>deno_head`httparse::parse_headers_iter_uninit (6 samples, 0.04%)</title><rect x="61.5033%" y="437" width="0.0410%" height="15" fill="rgb(222,97,12)" fg:x="9009" fg:w="6"/><text x="61.7533%" y="447.50"></text></g><g><title>deno_head`mio::poll::Poll::poll (5 samples, 0.03%)</title><rect x="61.5579%" y="437" width="0.0341%" height="15" fill="rgb(219,213,19)" fg:x="9017" fg:w="5"/><text x="61.8079%" y="447.50"></text></g><g><title>deno_head`tokio::runtime::enter::enter (4 samples, 0.03%)</title><rect x="61.5989%" y="437" width="0.0273%" height="15" fill="rgb(252,169,30)" fg:x="9023" fg:w="4"/><text x="61.8489%" y="447.50"></text></g><g><title>deno_head`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (11 samples, 0.08%)</title><rect x="61.6262%" y="437" width="0.0751%" height="15" fill="rgb(206,32,51)" fg:x="9027" fg:w="11"/><text x="61.8762%" y="447.50"></text></g><g><title>deno_head`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (6 samples, 0.04%)</title><rect x="61.6603%" y="421" width="0.0410%" height="15" fill="rgb(250,172,42)" fg:x="9032" fg:w="6"/><text x="61.9103%" y="431.50"></text></g><g><title>deno_head`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (8 samples, 0.05%)</title><rect x="61.7013%" y="437" width="0.0546%" height="15" fill="rgb(209,34,43)" fg:x="9038" fg:w="8"/><text x="61.9513%" y="447.50"></text></g><g><title>deno_head`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (2 samples, 0.01%)</title><rect x="61.7559%" y="437" width="0.0137%" height="15" fill="rgb(223,11,35)" fg:x="9046" fg:w="2"/><text x="62.0059%" y="447.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.24%)</title><rect x="61.7695%" y="437" width="0.2389%" height="15" fill="rgb(251,219,26)" fg:x="9048" fg:w="35"/><text x="62.0195%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (3,965 samples, 27.07%)</title><rect x="62.0153%" y="437" width="27.0685%" height="15" fill="rgb(231,119,3)" fg:x="9084" fg:w="3965"/><text x="62.2653%" y="447.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>libsystem_kernel.dylib`kevent (1,156 samples, 7.89%)</title><rect x="89.0838%" y="437" width="7.8919%" height="15" fill="rgb(216,97,11)" fg:x="13049" fg:w="1156"/><text x="89.3338%" y="447.50">libsystem_k..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.02%)</title><rect x="97.0167%" y="421" width="0.0205%" height="15" fill="rgb(223,59,9)" fg:x="14211" fg:w="3"/><text x="97.2667%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (4 samples, 0.03%)</title><rect x="97.0371%" y="421" width="0.0273%" height="15" fill="rgb(233,93,31)" fg:x="14214" fg:w="4"/><text x="97.2871%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (4 samples, 0.03%)</title><rect x="97.1122%" y="405" width="0.0273%" height="15" fill="rgb(239,81,33)" fg:x="14225" fg:w="4"/><text x="97.3622%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.02%)</title><rect x="97.1395%" y="405" width="0.0205%" height="15" fill="rgb(213,120,34)" fg:x="14229" fg:w="3"/><text x="97.3895%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="97.3921%" y="389" width="0.0137%" height="15" fill="rgb(243,49,53)" fg:x="14266" fg:w="2"/><text x="97.6421%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (19 samples, 0.13%)</title><rect x="97.5765%" y="373" width="0.1297%" height="15" fill="rgb(247,216,33)" fg:x="14293" fg:w="19"/><text x="97.8265%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (89 samples, 0.61%)</title><rect x="97.1600%" y="405" width="0.6076%" height="15" fill="rgb(226,26,14)" fg:x="14232" fg:w="89"/><text x="97.4100%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (53 samples, 0.36%)</title><rect x="97.4058%" y="389" width="0.3618%" height="15" fill="rgb(215,49,53)" fg:x="14268" fg:w="53"/><text x="97.6558%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (8 samples, 0.05%)</title><rect x="97.7130%" y="373" width="0.0546%" height="15" fill="rgb(245,162,40)" fg:x="14313" fg:w="8"/><text x="97.9630%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (143 samples, 0.98%)</title><rect x="96.9757%" y="437" width="0.9762%" height="15" fill="rgb(229,68,17)" fg:x="14205" fg:w="143"/><text x="97.2257%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (130 samples, 0.89%)</title><rect x="97.0644%" y="421" width="0.8875%" height="15" fill="rgb(213,182,10)" fg:x="14218" fg:w="130"/><text x="97.3144%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (27 samples, 0.18%)</title><rect x="97.7676%" y="405" width="0.1843%" height="15" fill="rgb(245,125,30)" fg:x="14321" fg:w="27"/><text x="98.0176%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="97.9929%" y="421" width="0.0137%" height="15" fill="rgb(232,202,2)" fg:x="14354" fg:w="2"/><text x="98.2429%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.05%)</title><rect x="98.0066%" y="421" width="0.0546%" height="15" fill="rgb(237,140,51)" fg:x="14356" fg:w="8"/><text x="98.2566%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.02%)</title><rect x="98.0680%" y="405" width="0.0205%" height="15" fill="rgb(236,157,25)" fg:x="14365" fg:w="3"/><text x="98.3180%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (2 samples, 0.01%)</title><rect x="98.3274%" y="389" width="0.0137%" height="15" fill="rgb(219,209,0)" fg:x="14403" fg:w="2"/><text x="98.5774%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (4 samples, 0.03%)</title><rect x="98.3411%" y="389" width="0.0273%" height="15" fill="rgb(240,116,54)" fg:x="14405" fg:w="4"/><text x="98.5911%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.06%)</title><rect x="98.4913%" y="373" width="0.0614%" height="15" fill="rgb(216,10,36)" fg:x="14427" fg:w="9"/><text x="98.7413%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (112 samples, 0.76%)</title><rect x="97.9519%" y="437" width="0.7646%" height="15" fill="rgb(222,72,44)" fg:x="14348" fg:w="112"/><text x="98.2019%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (96 samples, 0.66%)</title><rect x="98.0612%" y="421" width="0.6554%" height="15" fill="rgb(232,159,9)" fg:x="14364" fg:w="96"/><text x="98.3112%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (92 samples, 0.63%)</title><rect x="98.0885%" y="405" width="0.6281%" height="15" fill="rgb(210,39,32)" fg:x="14368" fg:w="92"/><text x="98.3385%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (50 samples, 0.34%)</title><rect x="98.3752%" y="389" width="0.3413%" height="15" fill="rgb(216,194,45)" fg:x="14410" fg:w="50"/><text x="98.6252%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (23 samples, 0.16%)</title><rect x="98.5595%" y="373" width="0.1570%" height="15" fill="rgb(218,18,35)" fg:x="14437" fg:w="23"/><text x="98.8095%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="98.7234%" y="437" width="0.0137%" height="15" fill="rgb(207,83,51)" fg:x="14461" fg:w="2"/><text x="98.9734%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (4 samples, 0.03%)</title><rect x="98.7370%" y="437" width="0.0273%" height="15" fill="rgb(225,63,43)" fg:x="14463" fg:w="4"/><text x="98.9870%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="98.7643%" y="437" width="0.0137%" height="15" fill="rgb(207,57,36)" fg:x="14467" fg:w="2"/><text x="99.0143%" y="447.50"></text></g><g><title>deno_head`deno_flash::run_server (6,095 samples, 41.61%)</title><rect x="57.2092%" y="453" width="41.6098%" height="15" fill="rgb(216,99,33)" fg:x="8380" fg:w="6095"/><text x="57.4592%" y="463.50">deno_head`deno_flash::run_server</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="98.7916%" y="437" width="0.0273%" height="15" fill="rgb(225,42,16)" fg:x="14471" fg:w="4"/><text x="99.0416%" y="447.50"></text></g><g><title>deno_head`http::header::name::HeaderName::from_bytes (2 samples, 0.01%)</title><rect x="98.8258%" y="453" width="0.0137%" height="15" fill="rgb(220,201,45)" fg:x="14476" fg:w="2"/><text x="99.0758%" y="463.50"></text></g><g><title>deno_head`tokio::park::thread::CachedParkThread::get_unpark (2 samples, 0.01%)</title><rect x="98.8394%" y="453" width="0.0137%" height="15" fill="rgb(225,33,4)" fg:x="14478" fg:w="2"/><text x="99.0894%" y="463.50"></text></g><g><title>deno_head`tokio::park::thread::drop_waker (2 samples, 0.01%)</title><rect x="98.8531%" y="453" width="0.0137%" height="15" fill="rgb(224,33,50)" fg:x="14480" fg:w="2"/><text x="99.1031%" y="463.50"></text></g><g><title>deno_head`tokio::runtime::enter::enter (3 samples, 0.02%)</title><rect x="98.8667%" y="453" width="0.0205%" height="15" fill="rgb(246,198,51)" fg:x="14482" fg:w="3"/><text x="99.1167%" y="463.50"></text></g><g><title>deno_head`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (3 samples, 0.02%)</title><rect x="98.8872%" y="453" width="0.0205%" height="15" fill="rgb(205,22,4)" fg:x="14485" fg:w="3"/><text x="99.1372%" y="463.50"></text></g><g><title>deno_head`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (2 samples, 0.01%)</title><rect x="98.9077%" y="453" width="0.0137%" height="15" fill="rgb(206,3,8)" fg:x="14488" fg:w="2"/><text x="99.1577%" y="463.50"></text></g><g><title>deno_head`tokio::sync::task::atomic_waker::AtomicWaker::wake (17 samples, 0.12%)</title><rect x="98.9214%" y="453" width="0.1161%" height="15" fill="rgb(251,23,15)" fg:x="14490" fg:w="17"/><text x="99.1714%" y="463.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.12%)</title><rect x="99.0374%" y="453" width="0.1229%" height="15" fill="rgb(252,88,28)" fg:x="14507" fg:w="18"/><text x="99.2874%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.03%)</title><rect x="99.1603%" y="453" width="0.0273%" height="15" fill="rgb(212,127,14)" fg:x="14525" fg:w="4"/><text x="99.4103%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="99.1876%" y="453" width="0.0410%" height="15" fill="rgb(247,145,37)" fg:x="14529" fg:w="6"/><text x="99.4376%" y="463.50"></text></g><g><title>deno_head`std::sys::unix::thread::Thread::new::thread_start (6,214 samples, 42.42%)</title><rect x="57.0180%" y="517" width="42.4222%" height="15" fill="rgb(209,117,53)" fg:x="8352" fg:w="6214"/><text x="57.2680%" y="527.50">deno_head`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>deno_head`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,214 samples, 42.42%)</title><rect x="57.0180%" y="501" width="42.4222%" height="15" fill="rgb(212,90,42)" fg:x="8352" fg:w="6214"/><text x="57.2680%" y="511.50">deno_head`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>deno_head`std::sys_common::backtrace::__rust_begin_short_backtrace (6,214 samples, 42.42%)</title><rect x="57.0180%" y="485" width="42.4222%" height="15" fill="rgb(218,164,37)" fg:x="8352" fg:w="6214"/><text x="57.2680%" y="495.50">deno_head`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno_head`tokio::runtime::task::raw::poll (6,214 samples, 42.42%)</title><rect x="57.0180%" y="469" width="42.4222%" height="15" fill="rgb(246,65,34)" fg:x="8352" fg:w="6214"/><text x="57.2680%" y="479.50">deno_head`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.20%)</title><rect x="99.2422%" y="453" width="0.1980%" height="15" fill="rgb(231,100,33)" fg:x="14537" fg:w="29"/><text x="99.4922%" y="463.50"></text></g><g><title>deno_head`v8::internal::compiler::PipelineImpl::AssembleCode (2 samples, 0.01%)</title><rect x="99.4470%" y="421" width="0.0137%" height="15" fill="rgb(228,126,14)" fg:x="14567" fg:w="2"/><text x="99.6970%" y="431.50"></text></g><g><title>deno_head`v8::internal::compiler::CodeGenerator::AssembleCode (2 samples, 0.01%)</title><rect x="99.4470%" y="405" width="0.0137%" height="15" fill="rgb(215,173,21)" fg:x="14567" fg:w="2"/><text x="99.6970%" y="415.50"></text></g><g><title>deno_head`v8::base::Optional&lt;v8::internal::compiler::ref_traits&lt;v8::internal::JSFunction&gt;::ref_type&gt; v8::internal::compiler::TryMakeRef&lt;v8::internal::JSFunction, void&gt;(v8::internal::compiler::JSHeapBroker*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::base::Flags (2 samples, 0.01%)</title><rect x="99.4607%" y="373" width="0.0137%" height="15" fill="rgb(210,6,40)" fg:x="14569" fg:w="2"/><text x="99.7107%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::JSHeapBroker::TryGetOrCreateData(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::base::Flags (2 samples, 0.01%)</title><rect x="99.4607%" y="357" width="0.0137%" height="15" fill="rgb(212,48,18)" fg:x="14569" fg:w="2"/><text x="99.7107%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::BytecodeGraphBuilder::VisitBytecodes (2 samples, 0.01%)</title><rect x="99.4812%" y="341" width="0.0137%" height="15" fill="rgb(230,214,11)" fg:x="14572" fg:w="2"/><text x="99.7312%" y="351.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (6 samples, 0.04%)</title><rect x="99.4607%" y="405" width="0.0410%" height="15" fill="rgb(254,105,39)" fg:x="14569" fg:w="6"/><text x="99.7107%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphBuilderPhase::Run (6 samples, 0.04%)</title><rect x="99.4607%" y="389" width="0.0410%" height="15" fill="rgb(245,158,5)" fg:x="14569" fg:w="6"/><text x="99.7107%" y="399.50"></text></g><g><title>deno_head`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, int, v8::internal::CodeKind, v8::base::Flags (4 samples, 0.03%)</title><rect x="99.4743%" y="373" width="0.0273%" height="15" fill="rgb(249,208,11)" fg:x="14571" fg:w="4"/><text x="99.7243%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::BytecodeGraphBuilder::CreateGraph (3 samples, 0.02%)</title><rect x="99.4812%" y="357" width="0.0205%" height="15" fill="rgb(210,39,28)" fg:x="14572" fg:w="3"/><text x="99.7312%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::PipelineImpl::CreateGraph (8 samples, 0.05%)</title><rect x="99.4607%" y="421" width="0.0546%" height="15" fill="rgb(211,56,53)" fg:x="14569" fg:w="8"/><text x="99.7107%" y="431.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (2 samples, 0.01%)</title><rect x="99.5016%" y="405" width="0.0137%" height="15" fill="rgb(226,201,30)" fg:x="14575" fg:w="2"/><text x="99.7516%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::InliningPhase::Run (2 samples, 0.01%)</title><rect x="99.5016%" y="389" width="0.0137%" height="15" fill="rgb(239,101,34)" fg:x="14575" fg:w="2"/><text x="99.7516%" y="399.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.01%)</title><rect x="99.5016%" y="373" width="0.0137%" height="15" fill="rgb(226,209,5)" fg:x="14575" fg:w="2"/><text x="99.7516%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.01%)</title><rect x="99.5016%" y="357" width="0.0137%" height="15" fill="rgb(250,105,47)" fg:x="14575" fg:w="2"/><text x="99.7516%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="99.5016%" y="341" width="0.0137%" height="15" fill="rgb(230,72,3)" fg:x="14575" fg:w="2"/><text x="99.7516%" y="351.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (4 samples, 0.03%)</title><rect x="99.5153%" y="405" width="0.0273%" height="15" fill="rgb(232,218,39)" fg:x="14577" fg:w="4"/><text x="99.7653%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (4 samples, 0.03%)</title><rect x="99.5153%" y="389" width="0.0273%" height="15" fill="rgb(248,166,6)" fg:x="14577" fg:w="4"/><text x="99.7653%" y="399.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (5 samples, 0.03%)</title><rect x="99.5426%" y="405" width="0.0341%" height="15" fill="rgb(247,89,20)" fg:x="14581" fg:w="5"/><text x="99.7926%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::EarlyOptimizationPhase::Run (5 samples, 0.03%)</title><rect x="99.5426%" y="389" width="0.0341%" height="15" fill="rgb(248,130,54)" fg:x="14581" fg:w="5"/><text x="99.7926%" y="399.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceNode (5 samples, 0.03%)</title><rect x="99.5426%" y="373" width="0.0341%" height="15" fill="rgb(234,196,4)" fg:x="14581" fg:w="5"/><text x="99.7926%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceTop (5 samples, 0.03%)</title><rect x="99.5426%" y="357" width="0.0341%" height="15" fill="rgb(250,143,31)" fg:x="14581" fg:w="5"/><text x="99.7926%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::Reduce (4 samples, 0.03%)</title><rect x="99.5494%" y="341" width="0.0273%" height="15" fill="rgb(211,110,34)" fg:x="14582" fg:w="4"/><text x="99.7994%" y="351.50"></text></g><g><title>deno_head`v8::internal::compiler::ValueNumberingReducer::Reduce (2 samples, 0.01%)</title><rect x="99.5631%" y="325" width="0.0137%" height="15" fill="rgb(215,124,48)" fg:x="14584" fg:w="2"/><text x="99.8131%" y="335.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.01%)</title><rect x="99.5767%" y="373" width="0.0137%" height="15" fill="rgb(216,46,13)" fg:x="14586" fg:w="2"/><text x="99.8267%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.01%)</title><rect x="99.5767%" y="357" width="0.0137%" height="15" fill="rgb(205,184,25)" fg:x="14586" fg:w="2"/><text x="99.8267%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::LinearizeEffectControl (2 samples, 0.01%)</title><rect x="99.5904%" y="373" width="0.0137%" height="15" fill="rgb(228,1,10)" fg:x="14588" fg:w="2"/><text x="99.8404%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::EffectControlLinearizer::Run (2 samples, 0.01%)</title><rect x="99.5904%" y="357" width="0.0137%" height="15" fill="rgb(213,116,27)" fg:x="14588" fg:w="2"/><text x="99.8404%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::EffectControlLinearizer::ProcessNode (2 samples, 0.01%)</title><rect x="99.5904%" y="341" width="0.0137%" height="15" fill="rgb(241,95,50)" fg:x="14588" fg:w="2"/><text x="99.8404%" y="351.50"></text></g><g><title>deno_head`v8::internal::compiler::EffectControlLinearizer::TryWireInStateEffect (2 samples, 0.01%)</title><rect x="99.5904%" y="325" width="0.0137%" height="15" fill="rgb(238,48,32)" fg:x="14588" fg:w="2"/><text x="99.8404%" y="335.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (5 samples, 0.03%)</title><rect x="99.5767%" y="405" width="0.0341%" height="15" fill="rgb(235,113,49)" fg:x="14586" fg:w="5"/><text x="99.8267%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::EffectControlLinearizationPhase::Run (5 samples, 0.03%)</title><rect x="99.5767%" y="389" width="0.0341%" height="15" fill="rgb(205,127,43)" fg:x="14586" fg:w="5"/><text x="99.8267%" y="399.50"></text></g><g><title>deno_head`v8::internal::compiler::EffectGraphReducer::ReduceFrom (4 samples, 0.03%)</title><rect x="99.6109%" y="373" width="0.0273%" height="15" fill="rgb(250,162,2)" fg:x="14591" fg:w="4"/><text x="99.8609%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::EscapeAnalysis::Reduce (3 samples, 0.02%)</title><rect x="99.6177%" y="357" width="0.0205%" height="15" fill="rgb(220,13,41)" fg:x="14592" fg:w="3"/><text x="99.8677%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::VariableTracker::Scope::~Scope (2 samples, 0.01%)</title><rect x="99.6245%" y="341" width="0.0137%" height="15" fill="rgb(249,221,25)" fg:x="14593" fg:w="2"/><text x="99.8745%" y="351.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (6 samples, 0.04%)</title><rect x="99.6109%" y="405" width="0.0410%" height="15" fill="rgb(215,208,19)" fg:x="14591" fg:w="6"/><text x="99.8609%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::EscapeAnalysisPhase::Run (6 samples, 0.04%)</title><rect x="99.6109%" y="389" width="0.0410%" height="15" fill="rgb(236,175,2)" fg:x="14591" fg:w="6"/><text x="99.8609%" y="399.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (5 samples, 0.03%)</title><rect x="99.6518%" y="405" width="0.0341%" height="15" fill="rgb(241,52,2)" fg:x="14597" fg:w="5"/><text x="99.9018%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::LateOptimizationPhase::Run (5 samples, 0.03%)</title><rect x="99.6518%" y="389" width="0.0341%" height="15" fill="rgb(248,140,14)" fg:x="14597" fg:w="5"/><text x="99.9018%" y="399.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceNode (5 samples, 0.03%)</title><rect x="99.6518%" y="373" width="0.0341%" height="15" fill="rgb(253,22,42)" fg:x="14597" fg:w="5"/><text x="99.9018%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceTop (5 samples, 0.03%)</title><rect x="99.6518%" y="357" width="0.0341%" height="15" fill="rgb(234,61,47)" fg:x="14597" fg:w="5"/><text x="99.9018%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="99.6723%" y="341" width="0.0137%" height="15" fill="rgb(208,226,15)" fg:x="14600" fg:w="2"/><text x="99.9223%" y="351.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (7 samples, 0.05%)</title><rect x="99.6860%" y="405" width="0.0478%" height="15" fill="rgb(217,221,4)" fg:x="14602" fg:w="7"/><text x="99.9360%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::LoadEliminationPhase::Run (7 samples, 0.05%)</title><rect x="99.6860%" y="389" width="0.0478%" height="15" fill="rgb(212,174,34)" fg:x="14602" fg:w="7"/><text x="99.9360%" y="399.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceNode (7 samples, 0.05%)</title><rect x="99.6860%" y="373" width="0.0478%" height="15" fill="rgb(253,83,4)" fg:x="14602" fg:w="7"/><text x="99.9360%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceTop (7 samples, 0.05%)</title><rect x="99.6860%" y="357" width="0.0478%" height="15" fill="rgb(250,195,49)" fg:x="14602" fg:w="7"/><text x="99.9360%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::Reduce (5 samples, 0.03%)</title><rect x="99.6996%" y="341" width="0.0341%" height="15" fill="rgb(241,192,25)" fg:x="14604" fg:w="5"/><text x="99.9496%" y="351.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoopPeelingPhase&gt; (2 samples, 0.01%)</title><rect x="99.7338%" y="405" width="0.0137%" height="15" fill="rgb(208,124,10)" fg:x="14609" fg:w="2"/><text x="99.9838%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::LoopPeelingPhase::Run (2 samples, 0.01%)</title><rect x="99.7338%" y="389" width="0.0137%" height="15" fill="rgb(222,33,0)" fg:x="14609" fg:w="2"/><text x="99.9838%" y="399.50"></text></g><g><title>deno_head`v8::internal::compiler::LoopFinder::BuildLoopTree (2 samples, 0.01%)</title><rect x="99.7338%" y="373" width="0.0137%" height="15" fill="rgb(234,209,28)" fg:x="14609" fg:w="2"/><text x="99.9838%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::RepresentationSelector::RunPropagatePhase (2 samples, 0.01%)</title><rect x="99.7542%" y="357" width="0.0137%" height="15" fill="rgb(224,11,23)" fg:x="14612" fg:w="2"/><text x="100.0042%" y="367.50"></text></g><g><title>deno_head`void v8::internal::compiler::RepresentationSelector::VisitNode&lt;(v8::internal::compiler::Phase)0&gt; (2 samples, 0.01%)</title><rect x="99.7542%" y="341" width="0.0137%" height="15" fill="rgb(232,99,1)" fg:x="14612" fg:w="2"/><text x="100.0042%" y="351.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (3 samples, 0.02%)</title><rect x="99.7542%" y="405" width="0.0205%" height="15" fill="rgb(237,95,45)" fg:x="14612" fg:w="3"/><text x="100.0042%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::SimplifiedLoweringPhase::Run (3 samples, 0.02%)</title><rect x="99.7542%" y="389" width="0.0205%" height="15" fill="rgb(208,109,11)" fg:x="14612" fg:w="3"/><text x="100.0042%" y="399.50"></text></g><g><title>deno_head`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (3 samples, 0.02%)</title><rect x="99.7542%" y="373" width="0.0205%" height="15" fill="rgb(216,190,48)" fg:x="14612" fg:w="3"/><text x="100.0042%" y="383.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TyperPhase, v8::internal::compiler::Typer*&gt; (4 samples, 0.03%)</title><rect x="99.7884%" y="405" width="0.0273%" height="15" fill="rgb(251,171,36)" fg:x="14617" fg:w="4"/><text x="100.0384%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::TyperPhase::Run (4 samples, 0.03%)</title><rect x="99.7884%" y="389" width="0.0273%" height="15" fill="rgb(230,62,22)" fg:x="14617" fg:w="4"/><text x="100.0384%" y="399.50"></text></g><g><title>deno_head`v8::internal::compiler::Typer::Run(v8::internal::ZoneVector (3 samples, 0.02%)</title><rect x="99.7952%" y="373" width="0.0205%" height="15" fill="rgb(225,114,35)" fg:x="14618" fg:w="3"/><text x="100.0452%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="99.7952%" y="357" width="0.0205%" height="15" fill="rgb(215,118,42)" fg:x="14618" fg:w="3"/><text x="100.0452%" y="367.50"></text></g><g><title>deno_head`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="99.7952%" y="341" width="0.0205%" height="15" fill="rgb(243,119,21)" fg:x="14618" fg:w="3"/><text x="100.0452%" y="351.50"></text></g><g><title>deno_head`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges (2 samples, 0.01%)</title><rect x="99.8566%" y="341" width="0.0137%" height="15" fill="rgb(252,177,53)" fg:x="14627" fg:w="2"/><text x="100.1066%" y="351.50"></text></g><g><title>deno_head`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator() (2 samples, 0.01%)</title><rect x="99.8566%" y="325" width="0.0137%" height="15" fill="rgb(237,209,29)" fg:x="14627" fg:w="2"/><text x="100.1066%" y="335.50"></text></g><g><title>deno_head`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (7 samples, 0.05%)</title><rect x="99.8362%" y="373" width="0.0478%" height="15" fill="rgb(212,65,23)" fg:x="14624" fg:w="7"/><text x="100.0862%" y="383.50"></text></g><g><title>deno_head`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (7 samples, 0.05%)</title><rect x="99.8362%" y="357" width="0.0478%" height="15" fill="rgb(230,222,46)" fg:x="14624" fg:w="7"/><text x="100.0862%" y="367.50"></text></g><g><title>deno_head`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (68 samples, 0.46%)</title><rect x="99.4470%" y="485" width="0.4642%" height="15" fill="rgb(215,135,32)" fg:x="14567" fg:w="68"/><text x="99.6970%" y="495.50"></text></g><g><title>deno_head`v8::internal::OptimizingCompileDispatcher::CompileNext (68 samples, 0.46%)</title><rect x="99.4470%" y="469" width="0.4642%" height="15" fill="rgb(246,101,22)" fg:x="14567" fg:w="68"/><text x="99.6970%" y="479.50"></text></g><g><title>deno_head`v8::internal::OptimizedCompilationJob::ExecuteJob (68 samples, 0.46%)</title><rect x="99.4470%" y="453" width="0.4642%" height="15" fill="rgb(206,107,13)" fg:x="14567" fg:w="68"/><text x="99.6970%" y="463.50"></text></g><g><title>deno_head`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (68 samples, 0.46%)</title><rect x="99.4470%" y="437" width="0.4642%" height="15" fill="rgb(250,100,44)" fg:x="14567" fg:w="68"/><text x="99.6970%" y="447.50"></text></g><g><title>deno_head`v8::internal::compiler::PipelineImpl::OptimizeGraph (58 samples, 0.40%)</title><rect x="99.5153%" y="421" width="0.3960%" height="15" fill="rgb(231,147,38)" fg:x="14577" fg:w="58"/><text x="99.7653%" y="431.50"></text></g><g><title>deno_head`v8::internal::compiler::PipelineImpl::SelectInstructions (14 samples, 0.10%)</title><rect x="99.8157%" y="405" width="0.0956%" height="15" fill="rgb(229,8,40)" fg:x="14621" fg:w="14"/><text x="100.0657%" y="415.50"></text></g><g><title>deno_head`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (12 samples, 0.08%)</title><rect x="99.8293%" y="389" width="0.0819%" height="15" fill="rgb(221,135,30)" fg:x="14623" fg:w="12"/><text x="100.0793%" y="399.50"></text></g><g><title>deno_head`v8::internal::ScavengerCollector::JobTask::Run (3 samples, 0.02%)</title><rect x="99.9113%" y="469" width="0.0205%" height="15" fill="rgb(249,193,18)" fg:x="14635" fg:w="3"/><text x="100.1613%" y="479.50"></text></g><g><title>deno_head`v8::internal::ScavengerCollector::JobTask::ProcessItems (3 samples, 0.02%)</title><rect x="99.9113%" y="453" width="0.0205%" height="15" fill="rgb(209,133,39)" fg:x="14635" fg:w="3"/><text x="100.1613%" y="463.50"></text></g><g><title>deno_head`v8::internal::Scavenger::Process (3 samples, 0.02%)</title><rect x="99.9113%" y="437" width="0.0205%" height="15" fill="rgb(232,100,14)" fg:x="14635" fg:w="3"/><text x="100.1613%" y="447.50"></text></g><g><title>deno_head`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (2 samples, 0.01%)</title><rect x="99.9181%" y="421" width="0.0137%" height="15" fill="rgb(224,185,1)" fg:x="14636" fg:w="2"/><text x="100.1681%" y="431.50"></text></g><g><title>deno_head`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.01%)</title><rect x="99.9181%" y="405" width="0.0137%" height="15" fill="rgb(223,139,8)" fg:x="14636" fg:w="2"/><text x="100.1681%" y="415.50"></text></g><g><title>deno_head`v8::platform::DefaultJobWorker::Run (4 samples, 0.03%)</title><rect x="99.9113%" y="485" width="0.0273%" height="15" fill="rgb(232,213,38)" fg:x="14635" fg:w="4"/><text x="100.1613%" y="495.50"></text></g><g><title>deno_head`v8::platform::DelayedTaskQueue::GetNext (8 samples, 0.05%)</title><rect x="99.9386%" y="485" width="0.0546%" height="15" fill="rgb(207,94,22)" fg:x="14639" fg:w="8"/><text x="100.1886%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (8 samples, 0.05%)</title><rect x="99.9386%" y="469" width="0.0546%" height="15" fill="rgb(219,183,54)" fg:x="14639" fg:w="8"/><text x="100.1886%" y="479.50"></text></g><g><title>all (14,648 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(216,185,54)" fg:x="0" fg:w="14648"/><text x="0.2500%" y="575.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (6,296 samples, 42.98%)</title><rect x="57.0180%" y="549" width="42.9820%" height="15" fill="rgb(254,217,39)" fg:x="8352" fg:w="6296"/><text x="57.2680%" y="559.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (6,296 samples, 42.98%)</title><rect x="57.0180%" y="533" width="42.9820%" height="15" fill="rgb(240,178,23)" fg:x="8352" fg:w="6296"/><text x="57.2680%" y="543.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>deno_head`v8::base::ThreadEntry (82 samples, 0.56%)</title><rect x="99.4402%" y="517" width="0.5598%" height="15" fill="rgb(218,11,47)" fg:x="14566" fg:w="82"/><text x="99.6902%" y="527.50"></text></g><g><title>deno_head`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (82 samples, 0.56%)</title><rect x="99.4402%" y="501" width="0.5598%" height="15" fill="rgb(218,51,51)" fg:x="14566" fg:w="82"/><text x="99.6902%" y="511.50"></text></g></svg></svg>