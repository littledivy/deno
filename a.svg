<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="12844"><g><title>http_bench_json_ops`futures_task::waker::wake_by_ref_arc_raw (3 samples, 0.02%)</title><rect x="0.0156%" y="469" width="0.0234%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="3"/><text x="0.2656%" y="479.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.06%)</title><rect x="0.3504%" y="453" width="0.0623%" height="15" fill="rgb(217,0,24)" fg:x="45" fg:w="8"/><text x="0.6004%" y="463.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="0.4126%" y="453" width="0.0234%" height="15" fill="rgb(221,193,54)" fg:x="53" fg:w="3"/><text x="0.6626%" y="463.50"></text></g><g><title>http_bench_json_ops`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="0.4360%" y="453" width="0.0234%" height="15" fill="rgb(248,212,6)" fg:x="56" fg:w="3"/><text x="0.6860%" y="463.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_core::runtime::ModEvaluate&gt;&gt; (2 samples, 0.02%)</title><rect x="0.4671%" y="453" width="0.0156%" height="15" fill="rgb(208,68,35)" fg:x="60" fg:w="2"/><text x="0.7171%" y="463.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (4 samples, 0.03%)</title><rect x="0.4905%" y="453" width="0.0311%" height="15" fill="rgb(232,128,0)" fg:x="63" fg:w="4"/><text x="0.7405%" y="463.50"></text></g><g><title>http_bench_json_ops`deno_core::ops::OpResult::to_v8 (5 samples, 0.04%)</title><rect x="0.5216%" y="453" width="0.0389%" height="15" fill="rgb(207,160,47)" fg:x="67" fg:w="5"/><text x="0.7716%" y="463.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::check_promise_exceptions (5 samples, 0.04%)</title><rect x="0.5684%" y="453" width="0.0389%" height="15" fill="rgb(228,23,34)" fg:x="73" fg:w="5"/><text x="0.8184%" y="463.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRealm::execute_script (2 samples, 0.02%)</title><rect x="0.6151%" y="437" width="0.0156%" height="15" fill="rgb(218,30,26)" fg:x="79" fg:w="2"/><text x="0.8651%" y="447.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::new (3 samples, 0.02%)</title><rect x="0.6151%" y="453" width="0.0234%" height="15" fill="rgb(220,122,19)" fg:x="79" fg:w="3"/><text x="0.8651%" y="463.50"></text></g><g><title>http_bench_json_ops`futures_task::waker::clone_arc_raw (3 samples, 0.02%)</title><rect x="3.6359%" y="373" width="0.0234%" height="15" fill="rgb(250,228,42)" fg:x="467" fg:w="3"/><text x="3.8859%" y="383.50"></text></g><g><title>http_bench_json_ops`polloi::Runtime::can (24 samples, 0.19%)</title><rect x="3.6593%" y="373" width="0.1869%" height="15" fill="rgb(240,193,28)" fg:x="470" fg:w="24"/><text x="3.9093%" y="383.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (69 samples, 0.54%)</title><rect x="3.3790%" y="389" width="0.5372%" height="15" fill="rgb(216,20,37)" fg:x="434" fg:w="69"/><text x="3.6290%" y="399.50"></text></g><g><title>http_bench_json_ops`polloi::Runtime::partial (9 samples, 0.07%)</title><rect x="3.8462%" y="373" width="0.0701%" height="15" fill="rgb(206,188,39)" fg:x="494" fg:w="9"/><text x="4.0962%" y="383.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;http_bench_json_ops::TcpStream::read::{{closure}}&gt;&gt; (2 samples, 0.02%)</title><rect x="3.9240%" y="389" width="0.0156%" height="15" fill="rgb(217,207,13)" fg:x="504" fg:w="2"/><text x="4.1740%" y="399.50"></text></g><g><title>http_bench_json_ops`polloi::Runtime::can (14 samples, 0.11%)</title><rect x="3.9396%" y="389" width="0.1090%" height="15" fill="rgb(231,73,38)" fg:x="506" fg:w="14"/><text x="4.1896%" y="399.50"></text></g><g><title>http_bench_json_ops`polloi::Runtime::partial (2 samples, 0.02%)</title><rect x="4.0486%" y="389" width="0.0156%" height="15" fill="rgb(225,20,46)" fg:x="520" fg:w="2"/><text x="4.2986%" y="399.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (3 samples, 0.02%)</title><rect x="4.0642%" y="389" width="0.0234%" height="15" fill="rgb(210,31,41)" fg:x="522" fg:w="3"/><text x="4.3142%" y="399.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,221 samples, 40.65%)</title><rect x="3.1454%" y="405" width="40.6493%" height="15" fill="rgb(221,200,47)" fg:x="404" fg:w="5221"/><text x="3.3954%" y="415.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>libsystem_kernel.dylib`__recvfrom (5,100 samples, 39.71%)</title><rect x="4.0875%" y="389" width="39.7073%" height="15" fill="rgb(226,26,5)" fg:x="525" fg:w="5100"/><text x="4.3375%" y="399.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="43.8337%" y="373" width="0.0156%" height="15" fill="rgb(249,33,26)" fg:x="5630" fg:w="2"/><text x="44.0837%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.19%)</title><rect x="43.8726%" y="357" width="0.1869%" height="15" fill="rgb(235,183,28)" fg:x="5635" fg:w="24"/><text x="44.1226%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.12%)</title><rect x="43.9349%" y="341" width="0.1246%" height="15" fill="rgb(221,5,38)" fg:x="5643" fg:w="16"/><text x="44.1849%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (36 samples, 0.28%)</title><rect x="43.7948%" y="389" width="0.2803%" height="15" fill="rgb(247,18,42)" fg:x="5625" fg:w="36"/><text x="44.0448%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.23%)</title><rect x="43.8493%" y="373" width="0.2258%" height="15" fill="rgb(241,131,45)" fg:x="5632" fg:w="29"/><text x="44.0993%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="44.0595%" y="357" width="0.0156%" height="15" fill="rgb(249,31,29)" fg:x="5659" fg:w="2"/><text x="44.3095%" y="367.50"></text></g><g><title>http_bench_json_ops`&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob (39 samples, 0.30%)</title><rect x="43.7948%" y="405" width="0.3036%" height="15" fill="rgb(225,111,53)" fg:x="5625" fg:w="39"/><text x="44.0448%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="44.0828%" y="389" width="0.0156%" height="15" fill="rgb(238,160,17)" fg:x="5662" fg:w="2"/><text x="44.3328%" y="399.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="44.0984%" y="405" width="0.0234%" height="15" fill="rgb(214,148,48)" fg:x="5664" fg:w="3"/><text x="44.3484%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.09%)</title><rect x="44.2931%" y="389" width="0.0856%" height="15" fill="rgb(232,36,49)" fg:x="5689" fg:w="11"/><text x="44.5431%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (30 samples, 0.23%)</title><rect x="44.1529%" y="405" width="0.2336%" height="15" fill="rgb(209,103,24)" fg:x="5671" fg:w="30"/><text x="44.4029%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="44.3865%" y="405" width="0.0156%" height="15" fill="rgb(229,88,8)" fg:x="5701" fg:w="2"/><text x="44.6365%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.09%)</title><rect x="44.4021%" y="405" width="0.0934%" height="15" fill="rgb(213,181,19)" fg:x="5703" fg:w="12"/><text x="44.6521%" y="415.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,426 samples, 42.25%)</title><rect x="2.2734%" y="421" width="42.2454%" height="15" fill="rgb(254,191,54)" fg:x="292" fg:w="5426"/><text x="2.5234%" y="431.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as co..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="44.4955%" y="405" width="0.0234%" height="15" fill="rgb(241,83,37)" fg:x="5715" fg:w="3"/><text x="44.7455%" y="415.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="44.5266%" y="421" width="0.0467%" height="15" fill="rgb(233,36,39)" fg:x="5719" fg:w="6"/><text x="44.7766%" y="431.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob::{{closure}}&gt;&gt; (5 samples, 0.04%)</title><rect x="44.5733%" y="421" width="0.0389%" height="15" fill="rgb(226,3,54)" fg:x="5725" fg:w="5"/><text x="44.8233%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="44.6123%" y="421" width="0.0234%" height="15" fill="rgb(245,192,40)" fg:x="5730" fg:w="3"/><text x="44.8623%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.04%)</title><rect x="44.6356%" y="421" width="0.0389%" height="15" fill="rgb(238,167,29)" fg:x="5733" fg:w="5"/><text x="44.8856%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="44.6746%" y="421" width="0.0234%" height="15" fill="rgb(232,182,51)" fg:x="5738" fg:w="3"/><text x="44.9246%" y="431.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,506 samples, 42.87%)</title><rect x="1.8608%" y="437" width="42.8683%" height="15" fill="rgb(231,60,39)" fg:x="239" fg:w="5506"/><text x="2.1108%" y="447.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as cor..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="44.6979%" y="421" width="0.0311%" height="15" fill="rgb(208,69,12)" fg:x="5741" fg:w="4"/><text x="44.9479%" y="431.50"></text></g><g><title>http_bench_json_ops`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="44.7291%" y="437" width="0.0467%" height="15" fill="rgb(235,93,37)" fg:x="5745" fg:w="6"/><text x="44.9791%" y="447.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (6 samples, 0.05%)</title><rect x="44.7758%" y="437" width="0.0467%" height="15" fill="rgb(213,116,39)" fg:x="5751" fg:w="6"/><text x="45.0258%" y="447.50"></text></g><g><title>http_bench_json_ops`alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.05%)</title><rect x="44.8303%" y="437" width="0.0467%" height="15" fill="rgb(222,207,29)" fg:x="5758" fg:w="6"/><text x="45.0803%" y="447.50"></text></g><g><title>http_bench_json_ops`core::hash::BuildHasher::hash_one (16 samples, 0.12%)</title><rect x="44.8770%" y="437" width="0.1246%" height="15" fill="rgb(206,96,30)" fg:x="5764" fg:w="16"/><text x="45.1270%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_read_fast_fn::{{closure}}&gt;&gt; (5 samples, 0.04%)</title><rect x="45.0093%" y="437" width="0.0389%" height="15" fill="rgb(218,138,4)" fg:x="5781" fg:w="5"/><text x="45.2593%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (5 samples, 0.04%)</title><rect x="45.0561%" y="437" width="0.0389%" height="15" fill="rgb(250,191,14)" fg:x="5787" fg:w="5"/><text x="45.3061%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.02%)</title><rect x="45.1495%" y="421" width="0.0234%" height="15" fill="rgb(239,60,40)" fg:x="5799" fg:w="3"/><text x="45.3995%" y="431.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (13 samples, 0.10%)</title><rect x="45.0950%" y="437" width="0.1012%" height="15" fill="rgb(206,27,48)" fg:x="5792" fg:w="13"/><text x="45.3450%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (3 samples, 0.02%)</title><rect x="45.1728%" y="421" width="0.0234%" height="15" fill="rgb(225,35,8)" fg:x="5802" fg:w="3"/><text x="45.4228%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (9 samples, 0.07%)</title><rect x="45.3130%" y="405" width="0.0701%" height="15" fill="rgb(250,213,24)" fg:x="5820" fg:w="9"/><text x="45.5630%" y="415.50"></text></g><g><title>http_bench_json_ops`deno_core::ops::OpResult::to_v8 (38 samples, 0.30%)</title><rect x="45.1962%" y="437" width="0.2959%" height="15" fill="rgb(247,123,22)" fg:x="5805" fg:w="38"/><text x="45.4462%" y="447.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (33 samples, 0.26%)</title><rect x="45.2351%" y="421" width="0.2569%" height="15" fill="rgb(231,138,38)" fg:x="5810" fg:w="33"/><text x="45.4851%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::Integer::NewFromUnsigned (14 samples, 0.11%)</title><rect x="45.3831%" y="405" width="0.1090%" height="15" fill="rgb(231,145,46)" fg:x="5829" fg:w="14"/><text x="45.6331%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (9 samples, 0.07%)</title><rect x="45.4220%" y="389" width="0.0701%" height="15" fill="rgb(251,118,11)" fg:x="5834" fg:w="9"/><text x="45.6720%" y="399.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::check_promise_exceptions (2 samples, 0.02%)</title><rect x="45.4998%" y="437" width="0.0156%" height="15" fill="rgb(217,147,25)" fg:x="5844" fg:w="2"/><text x="45.7498%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::Context::Enter (6 samples, 0.05%)</title><rect x="45.6088%" y="405" width="0.0467%" height="15" fill="rgb(247,81,37)" fg:x="5858" fg:w="6"/><text x="45.8588%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::CreateHandle (8 samples, 0.06%)</title><rect x="45.6556%" y="405" width="0.0623%" height="15" fill="rgb(209,12,38)" fg:x="5864" fg:w="8"/><text x="45.9056%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScope::Extend (7 samples, 0.05%)</title><rect x="45.6633%" y="389" width="0.0545%" height="15" fill="rgb(227,1,9)" fg:x="5865" fg:w="7"/><text x="45.9133%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::~HandleScope (31 samples, 0.24%)</title><rect x="45.7568%" y="373" width="0.2414%" height="15" fill="rgb(248,47,43)" fg:x="5877" fg:w="31"/><text x="46.0068%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScope::DeleteExtensions (24 samples, 0.19%)</title><rect x="45.8113%" y="357" width="0.1869%" height="15" fill="rgb(221,10,30)" fg:x="5884" fg:w="24"/><text x="46.0613%" y="367.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (35 samples, 0.27%)</title><rect x="45.7412%" y="389" width="0.2725%" height="15" fill="rgb(210,229,1)" fg:x="5875" fg:w="35"/><text x="45.9912%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScope::DeleteExtensions (2 samples, 0.02%)</title><rect x="45.9981%" y="373" width="0.0156%" height="15" fill="rgb(222,148,37)" fg:x="5908" fg:w="2"/><text x="46.2481%" y="383.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRealm::handle_scope (63 samples, 0.49%)</title><rect x="45.5466%" y="421" width="0.4905%" height="15" fill="rgb(234,67,33)" fg:x="5850" fg:w="63"/><text x="45.7966%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::scope::data::ScopeData::try_exit_scope (40 samples, 0.31%)</title><rect x="45.7256%" y="405" width="0.3114%" height="15" fill="rgb(247,98,35)" fg:x="5873" fg:w="40"/><text x="45.9756%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::Context::Exit (3 samples, 0.02%)</title><rect x="46.0137%" y="389" width="0.0234%" height="15" fill="rgb(247,138,52)" fg:x="5910" fg:w="3"/><text x="46.2637%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::Context::Enter (3 samples, 0.02%)</title><rect x="46.0371%" y="421" width="0.0234%" height="15" fill="rgb(213,79,30)" fg:x="5913" fg:w="3"/><text x="46.2871%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (2 samples, 0.02%)</title><rect x="46.0604%" y="421" width="0.0156%" height="15" fill="rgb(246,177,23)" fg:x="5916" fg:w="2"/><text x="46.3104%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::MoveGlobal (23 samples, 0.18%)</title><rect x="46.0760%" y="421" width="0.1791%" height="15" fill="rgb(230,62,27)" fg:x="5918" fg:w="23"/><text x="46.3260%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::scope::data::ScopeData::try_exit_scope (4 samples, 0.03%)</title><rect x="46.2628%" y="421" width="0.0311%" height="15" fill="rgb(216,154,8)" fg:x="5942" fg:w="4"/><text x="46.5128%" y="431.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::handle_scope (106 samples, 0.83%)</title><rect x="45.5154%" y="437" width="0.8253%" height="15" fill="rgb(244,35,45)" fg:x="5846" fg:w="106"/><text x="45.7654%" y="447.50"></text></g><g><title>http_bench_json_ops`v8__Global__New (6 samples, 0.05%)</title><rect x="46.2940%" y="421" width="0.0467%" height="15" fill="rgb(251,115,12)" fg:x="5946" fg:w="6"/><text x="46.5440%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (6 samples, 0.05%)</title><rect x="46.2940%" y="405" width="0.0467%" height="15" fill="rgb(240,54,50)" fg:x="5946" fg:w="6"/><text x="46.5440%" y="415.50"></text></g><g><title>http_bench_json_ops`smallvec::SmallVec&lt;A&gt;::push (11 samples, 0.09%)</title><rect x="46.3407%" y="437" width="0.0856%" height="15" fill="rgb(233,84,52)" fg:x="5952" fg:w="11"/><text x="46.5907%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::Context::Enter (3 samples, 0.02%)</title><rect x="46.4341%" y="437" width="0.0234%" height="15" fill="rgb(207,117,47)" fg:x="5964" fg:w="3"/><text x="46.6841%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.02%)</title><rect x="46.4575%" y="437" width="0.0156%" height="15" fill="rgb(249,43,39)" fg:x="5967" fg:w="2"/><text x="46.7075%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (7 samples, 0.05%)</title><rect x="46.5509%" y="421" width="0.0545%" height="15" fill="rgb(209,38,44)" fg:x="5979" fg:w="7"/><text x="46.8009%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.02%)</title><rect x="46.5898%" y="405" width="0.0156%" height="15" fill="rgb(236,212,23)" fg:x="5984" fg:w="2"/><text x="46.8398%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.02%)</title><rect x="46.6054%" y="421" width="0.0156%" height="15" fill="rgb(242,79,21)" fg:x="5986" fg:w="2"/><text x="46.8554%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (4 samples, 0.03%)</title><rect x="46.6210%" y="421" width="0.0311%" height="15" fill="rgb(211,96,35)" fg:x="5988" fg:w="4"/><text x="46.8710%" y="431.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntry (5 samples, 0.04%)</title><rect x="46.6521%" y="405" width="0.0389%" height="15" fill="rgb(253,215,40)" fg:x="5992" fg:w="5"/><text x="46.9021%" y="415.50"></text></g><g><title>0x11000cf20 (7 samples, 0.05%)</title><rect x="46.8001%" y="373" width="0.0545%" height="15" fill="rgb(211,81,21)" fg:x="6011" fg:w="7"/><text x="47.0501%" y="383.50"></text></g><g><title>0x11000cf28 (3 samples, 0.02%)</title><rect x="46.8546%" y="373" width="0.0234%" height="15" fill="rgb(208,190,38)" fg:x="6018" fg:w="3"/><text x="47.1046%" y="383.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsAny (4 samples, 0.03%)</title><rect x="46.8779%" y="373" width="0.0311%" height="15" fill="rgb(235,213,38)" fg:x="6021" fg:w="4"/><text x="47.1279%" y="383.50"></text></g><g><title>0x11000cf90 (6 samples, 0.05%)</title><rect x="47.0414%" y="357" width="0.0467%" height="15" fill="rgb(237,122,38)" fg:x="6042" fg:w="6"/><text x="47.2914%" y="367.50"></text></g><g><title>0x11000cfa8 (2 samples, 0.02%)</title><rect x="47.1037%" y="357" width="0.0156%" height="15" fill="rgb(244,218,35)" fg:x="6050" fg:w="2"/><text x="47.3537%" y="367.50"></text></g><g><title>0x11000cfc0 (2 samples, 0.02%)</title><rect x="47.1193%" y="357" width="0.0156%" height="15" fill="rgb(240,68,47)" fg:x="6052" fg:w="2"/><text x="47.3693%" y="367.50"></text></g><g><title>0x11000d008 (2 samples, 0.02%)</title><rect x="47.1582%" y="357" width="0.0156%" height="15" fill="rgb(210,16,53)" fg:x="6057" fg:w="2"/><text x="47.4082%" y="367.50"></text></g><g><title>0x11000d034 (2 samples, 0.02%)</title><rect x="47.1816%" y="357" width="0.0156%" height="15" fill="rgb(235,124,12)" fg:x="6060" fg:w="2"/><text x="47.4316%" y="367.50"></text></g><g><title>0x11000d068 (2 samples, 0.02%)</title><rect x="47.1971%" y="357" width="0.0156%" height="15" fill="rgb(224,169,11)" fg:x="6062" fg:w="2"/><text x="47.4471%" y="367.50"></text></g><g><title>0x11000d098 (2 samples, 0.02%)</title><rect x="47.2127%" y="357" width="0.0156%" height="15" fill="rgb(250,166,2)" fg:x="6064" fg:w="2"/><text x="47.4627%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_EnqueueMicrotask (19 samples, 0.15%)</title><rect x="47.3217%" y="309" width="0.1479%" height="15" fill="rgb(242,216,29)" fg:x="6078" fg:w="19"/><text x="47.5717%" y="319.50"></text></g><g><title>http_bench_json_ops`Builtins_PromiseCapabilityDefaultResolve (63 samples, 0.49%)</title><rect x="47.2361%" y="341" width="0.4905%" height="15" fill="rgb(230,116,27)" fg:x="6067" fg:w="63"/><text x="47.4861%" y="351.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (59 samples, 0.46%)</title><rect x="47.2672%" y="325" width="0.4594%" height="15" fill="rgb(228,99,48)" fg:x="6071" fg:w="59"/><text x="47.5172%" y="335.50"></text></g><g><title>http_bench_json_ops`Builtins_FulfillPromise (33 samples, 0.26%)</title><rect x="47.4696%" y="309" width="0.2569%" height="15" fill="rgb(253,11,6)" fg:x="6097" fg:w="33"/><text x="47.7196%" y="319.50"></text></g><g><title>0x11000d0a0 (67 samples, 0.52%)</title><rect x="47.2283%" y="357" width="0.5216%" height="15" fill="rgb(247,143,39)" fg:x="6066" fg:w="67"/><text x="47.4783%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (3 samples, 0.02%)</title><rect x="47.7266%" y="341" width="0.0234%" height="15" fill="rgb(236,97,10)" fg:x="6130" fg:w="3"/><text x="47.9766%" y="351.50"></text></g><g><title>0x11000d0b0 (8 samples, 0.06%)</title><rect x="47.7499%" y="357" width="0.0623%" height="15" fill="rgb(233,208,19)" fg:x="6133" fg:w="8"/><text x="47.9999%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (4 samples, 0.03%)</title><rect x="47.8122%" y="357" width="0.0311%" height="15" fill="rgb(216,164,2)" fg:x="6141" fg:w="4"/><text x="48.0622%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_Call_ReceiverIsNotNullOrUndefined (2 samples, 0.02%)</title><rect x="47.8434%" y="357" width="0.0156%" height="15" fill="rgb(220,129,5)" fg:x="6145" fg:w="2"/><text x="48.0934%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntry (147 samples, 1.14%)</title><rect x="46.7767%" y="389" width="1.1445%" height="15" fill="rgb(242,17,10)" fg:x="6008" fg:w="147"/><text x="47.0267%" y="399.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntryTrampoline (129 samples, 1.00%)</title><rect x="46.9168%" y="373" width="1.0044%" height="15" fill="rgb(242,107,0)" fg:x="6026" fg:w="129"/><text x="47.1668%" y="383.50"></text></g><g><title>http_bench_json_ops`Builtins_PromiseCapabilityDefaultResolve (8 samples, 0.06%)</title><rect x="47.8589%" y="357" width="0.0623%" height="15" fill="rgb(251,28,31)" fg:x="6147" fg:w="8"/><text x="48.1089%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (161 samples, 1.25%)</title><rect x="46.6911%" y="405" width="1.2535%" height="15" fill="rgb(233,223,10)" fg:x="5997" fg:w="161"/><text x="46.9411%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::SaveContext::SaveContext (3 samples, 0.02%)</title><rect x="47.9212%" y="389" width="0.0234%" height="15" fill="rgb(215,21,27)" fg:x="6155" fg:w="3"/><text x="48.1712%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtins::code_handle (5 samples, 0.04%)</title><rect x="47.9446%" y="405" width="0.0389%" height="15" fill="rgb(232,23,21)" fg:x="6158" fg:w="5"/><text x="48.1946%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScopeInfo::is_script_scope (5 samples, 0.04%)</title><rect x="47.9991%" y="405" width="0.0389%" height="15" fill="rgb(244,5,23)" fg:x="6165" fg:w="5"/><text x="48.2491%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (179 samples, 1.39%)</title><rect x="46.6521%" y="421" width="1.3936%" height="15" fill="rgb(226,81,46)" fg:x="5992" fg:w="179"/><text x="46.9021%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::InterruptsScope::InterruptsScope (7 samples, 0.05%)</title><rect x="48.0458%" y="421" width="0.0545%" height="15" fill="rgb(247,70,30)" fg:x="6171" fg:w="7"/><text x="48.2958%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::ClearKeptObjects (2 samples, 0.02%)</title><rect x="48.1081%" y="405" width="0.0156%" height="15" fill="rgb(212,68,19)" fg:x="6179" fg:w="2"/><text x="48.3581%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::Isolate::SuppressMicrotaskExecutionScope::~SuppressMicrotaskExecutionScope (2 samples, 0.02%)</title><rect x="48.1548%" y="389" width="0.0156%" height="15" fill="rgb(240,187,13)" fg:x="6185" fg:w="2"/><text x="48.4048%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (2 samples, 0.02%)</title><rect x="48.2949%" y="357" width="0.0156%" height="15" fill="rgb(223,113,26)" fg:x="6203" fg:w="2"/><text x="48.5449%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_JSRunMicrotasksEntry (3 samples, 0.02%)</title><rect x="48.3416%" y="341" width="0.0234%" height="15" fill="rgb(206,192,2)" fg:x="6209" fg:w="3"/><text x="48.5916%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::TryCatch (2 samples, 0.02%)</title><rect x="48.3650%" y="341" width="0.0156%" height="15" fill="rgb(241,108,4)" fg:x="6212" fg:w="2"/><text x="48.6150%" y="351.50"></text></g><g><title>0x1100123e0 (2 samples, 0.02%)</title><rect x="48.8633%" y="293" width="0.0156%" height="15" fill="rgb(247,173,49)" fg:x="6276" fg:w="2"/><text x="49.1133%" y="303.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure (4 samples, 0.03%)</title><rect x="48.8789%" y="293" width="0.0311%" height="15" fill="rgb(224,114,35)" fg:x="6278" fg:w="4"/><text x="49.1289%" y="303.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsNullOrUndefined (22 samples, 0.17%)</title><rect x="48.9100%" y="293" width="0.1713%" height="15" fill="rgb(245,159,27)" fg:x="6282" fg:w="22"/><text x="49.1600%" y="303.50"></text></g><g><title>0x110012408 (2 samples, 0.02%)</title><rect x="49.2214%" y="277" width="0.0156%" height="15" fill="rgb(245,172,44)" fg:x="6322" fg:w="2"/><text x="49.4714%" y="287.50"></text></g><g><title>0x110012418 (2 samples, 0.02%)</title><rect x="49.2370%" y="277" width="0.0156%" height="15" fill="rgb(236,23,11)" fg:x="6324" fg:w="2"/><text x="49.4870%" y="287.50"></text></g><g><title>0x110012430 (3 samples, 0.02%)</title><rect x="49.2526%" y="277" width="0.0234%" height="15" fill="rgb(205,117,38)" fg:x="6326" fg:w="3"/><text x="49.5026%" y="287.50"></text></g><g><title>0x11000c75c (3 samples, 0.02%)</title><rect x="49.2993%" y="245" width="0.0234%" height="15" fill="rgb(237,72,25)" fg:x="6332" fg:w="3"/><text x="49.5493%" y="255.50"></text></g><g><title>0x11000b0d8 (4 samples, 0.03%)</title><rect x="49.2993%" y="261" width="0.0311%" height="15" fill="rgb(244,70,9)" fg:x="6332" fg:w="4"/><text x="49.5493%" y="271.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (14 samples, 0.11%)</title><rect x="49.3382%" y="197" width="0.1090%" height="15" fill="rgb(217,125,39)" fg:x="6337" fg:w="14"/><text x="49.5882%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (14 samples, 0.11%)</title><rect x="49.3382%" y="181" width="0.1090%" height="15" fill="rgb(235,36,10)" fg:x="6337" fg:w="14"/><text x="49.5882%" y="191.50"></text></g><g><title>0x11000b284 (15 samples, 0.12%)</title><rect x="49.3382%" y="261" width="0.1168%" height="15" fill="rgb(251,123,47)" fg:x="6337" fg:w="15"/><text x="49.5882%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (15 samples, 0.12%)</title><rect x="49.3382%" y="245" width="0.1168%" height="15" fill="rgb(221,13,13)" fg:x="6337" fg:w="15"/><text x="49.5882%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtin_HandleApiCall (15 samples, 0.12%)</title><rect x="49.3382%" y="229" width="0.1168%" height="15" fill="rgb(238,131,9)" fg:x="6337" fg:w="15"/><text x="49.5882%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (15 samples, 0.12%)</title><rect x="49.3382%" y="213" width="0.1168%" height="15" fill="rgb(211,50,8)" fg:x="6337" fg:w="15"/><text x="49.5882%" y="223.50"></text></g><g><title>0x11000dcf8 (2 samples, 0.02%)</title><rect x="49.4550%" y="261" width="0.0156%" height="15" fill="rgb(245,182,24)" fg:x="6352" fg:w="2"/><text x="49.7050%" y="271.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write_fast_fn (2 samples, 0.02%)</title><rect x="49.4550%" y="245" width="0.0156%" height="15" fill="rgb(242,14,37)" fg:x="6352" fg:w="2"/><text x="49.7050%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.02%)</title><rect x="49.4550%" y="229" width="0.0156%" height="15" fill="rgb(246,228,12)" fg:x="6352" fg:w="2"/><text x="49.7050%" y="239.50"></text></g><g><title>0x1100101ec (4 samples, 0.03%)</title><rect x="49.4706%" y="261" width="0.0311%" height="15" fill="rgb(213,55,15)" fg:x="6354" fg:w="4"/><text x="49.7206%" y="271.50"></text></g><g><title>0x1100101fc (2 samples, 0.02%)</title><rect x="49.5017%" y="261" width="0.0156%" height="15" fill="rgb(209,9,3)" fg:x="6358" fg:w="2"/><text x="49.7517%" y="271.50"></text></g><g><title>0x110010374 (3 samples, 0.02%)</title><rect x="49.5251%" y="261" width="0.0234%" height="15" fill="rgb(230,59,30)" fg:x="6361" fg:w="3"/><text x="49.7751%" y="271.50"></text></g><g><title>0x1100103a8 (5 samples, 0.04%)</title><rect x="49.5484%" y="261" width="0.0389%" height="15" fill="rgb(209,121,21)" fg:x="6364" fg:w="5"/><text x="49.7984%" y="271.50"></text></g><g><title>0x1100103ac (2 samples, 0.02%)</title><rect x="49.5874%" y="261" width="0.0156%" height="15" fill="rgb(220,109,13)" fg:x="6369" fg:w="2"/><text x="49.8374%" y="271.50"></text></g><g><title>0x110010454 (7 samples, 0.05%)</title><rect x="49.6107%" y="261" width="0.0545%" height="15" fill="rgb(232,18,1)" fg:x="6372" fg:w="7"/><text x="49.8607%" y="271.50"></text></g><g><title>0x110010480 (3 samples, 0.02%)</title><rect x="49.6730%" y="261" width="0.0234%" height="15" fill="rgb(215,41,42)" fg:x="6380" fg:w="3"/><text x="49.9230%" y="271.50"></text></g><g><title>0x110010488 (12 samples, 0.09%)</title><rect x="49.6964%" y="261" width="0.0934%" height="15" fill="rgb(224,123,36)" fg:x="6383" fg:w="12"/><text x="49.9464%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (12 samples, 0.09%)</title><rect x="49.6964%" y="245" width="0.0934%" height="15" fill="rgb(240,125,3)" fg:x="6383" fg:w="12"/><text x="49.9464%" y="255.50"></text></g><g><title>0x110010498 (3 samples, 0.02%)</title><rect x="49.7898%" y="261" width="0.0234%" height="15" fill="rgb(205,98,50)" fg:x="6395" fg:w="3"/><text x="50.0398%" y="271.50"></text></g><g><title>0x1100104b0 (2 samples, 0.02%)</title><rect x="49.8131%" y="261" width="0.0156%" height="15" fill="rgb(205,185,37)" fg:x="6398" fg:w="2"/><text x="50.0631%" y="271.50"></text></g><g><title>0x1100104d4 (2 samples, 0.02%)</title><rect x="49.8287%" y="261" width="0.0156%" height="15" fill="rgb(238,207,15)" fg:x="6400" fg:w="2"/><text x="50.0787%" y="271.50"></text></g><g><title>0x110010508 (3 samples, 0.02%)</title><rect x="49.8443%" y="261" width="0.0234%" height="15" fill="rgb(213,199,42)" fg:x="6402" fg:w="3"/><text x="50.0943%" y="271.50"></text></g><g><title>0x110010518 (3 samples, 0.02%)</title><rect x="49.8676%" y="261" width="0.0234%" height="15" fill="rgb(235,201,11)" fg:x="6405" fg:w="3"/><text x="50.1176%" y="271.50"></text></g><g><title>0x110010524 (2 samples, 0.02%)</title><rect x="49.8910%" y="261" width="0.0156%" height="15" fill="rgb(207,46,11)" fg:x="6408" fg:w="2"/><text x="50.1410%" y="271.50"></text></g><g><title>0x1100105d0 (8 samples, 0.06%)</title><rect x="49.9299%" y="261" width="0.0623%" height="15" fill="rgb(241,35,35)" fg:x="6413" fg:w="8"/><text x="50.1799%" y="271.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$send (2 samples, 0.02%)</title><rect x="50.0545%" y="229" width="0.0156%" height="15" fill="rgb(243,32,47)" fg:x="6429" fg:w="2"/><text x="50.3045%" y="239.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write::call (76 samples, 0.59%)</title><rect x="50.0701%" y="229" width="0.5917%" height="15" fill="rgb(247,202,23)" fg:x="6431" fg:w="76"/><text x="50.3201%" y="239.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write_fast_fn (4,957 samples, 38.59%)</title><rect x="50.0156%" y="245" width="38.5939%" height="15" fill="rgb(219,102,11)" fg:x="6424" fg:w="4957"/><text x="50.2656%" y="255.50">http_bench_json_ops`http_bench_json_ops::op_try_write_fast_fn</text></g><g><title>libsystem_kernel.dylib`__sendto (4,872 samples, 37.93%)</title><rect x="50.6774%" y="229" width="37.9321%" height="15" fill="rgb(243,110,44)" fg:x="6509" fg:w="4872"/><text x="50.9274%" y="239.50">libsystem_kernel.dylib`__sendto</text></g><g><title>0x1100105d8 (4,962 samples, 38.63%)</title><rect x="50.0000%" y="261" width="38.6328%" height="15" fill="rgb(222,74,54)" fg:x="6422" fg:w="4962"/><text x="50.2500%" y="271.50">0x1100105d8</text></g><g><title>http_bench_json_ops`v8::External::Value (3 samples, 0.02%)</title><rect x="88.6095%" y="245" width="0.0234%" height="15" fill="rgb(216,99,12)" fg:x="11381" fg:w="3"/><text x="88.8595%" y="255.50"></text></g><g><title>0x11001063c (2 samples, 0.02%)</title><rect x="88.6406%" y="261" width="0.0156%" height="15" fill="rgb(226,22,26)" fg:x="11385" fg:w="2"/><text x="88.8906%" y="271.50"></text></g><g><title>0x11001072c (5 samples, 0.04%)</title><rect x="88.6873%" y="261" width="0.0389%" height="15" fill="rgb(217,163,10)" fg:x="11391" fg:w="5"/><text x="88.9373%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (5 samples, 0.04%)</title><rect x="88.6873%" y="245" width="0.0389%" height="15" fill="rgb(213,25,53)" fg:x="11391" fg:w="5"/><text x="88.9373%" y="255.50"></text></g><g><title>0x110010748 (2 samples, 0.02%)</title><rect x="88.7340%" y="261" width="0.0156%" height="15" fill="rgb(252,105,26)" fg:x="11397" fg:w="2"/><text x="88.9840%" y="271.50"></text></g><g><title>0x110010770 (8 samples, 0.06%)</title><rect x="88.7496%" y="261" width="0.0623%" height="15" fill="rgb(220,39,43)" fg:x="11399" fg:w="8"/><text x="88.9996%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (8 samples, 0.06%)</title><rect x="88.7496%" y="245" width="0.0623%" height="15" fill="rgb(229,68,48)" fg:x="11399" fg:w="8"/><text x="88.9996%" y="255.50"></text></g><g><title>0x1100108dc (2 samples, 0.02%)</title><rect x="88.8197%" y="261" width="0.0156%" height="15" fill="rgb(252,8,32)" fg:x="11408" fg:w="2"/><text x="89.0697%" y="271.50"></text></g><g><title>0x110010948 (2 samples, 0.02%)</title><rect x="88.8430%" y="261" width="0.0156%" height="15" fill="rgb(223,20,43)" fg:x="11411" fg:w="2"/><text x="89.0930%" y="271.50"></text></g><g><title>0x11001096c (2 samples, 0.02%)</title><rect x="88.8586%" y="261" width="0.0156%" height="15" fill="rgb(229,81,49)" fg:x="11413" fg:w="2"/><text x="89.1086%" y="271.50"></text></g><g><title>0x110010988 (2 samples, 0.02%)</title><rect x="88.8742%" y="261" width="0.0156%" height="15" fill="rgb(236,28,36)" fg:x="11415" fg:w="2"/><text x="89.1242%" y="271.50"></text></g><g><title>0x1100109ac (3 samples, 0.02%)</title><rect x="88.8898%" y="261" width="0.0234%" height="15" fill="rgb(249,185,26)" fg:x="11417" fg:w="3"/><text x="89.1398%" y="271.50"></text></g><g><title>0x1100109b4 (2 samples, 0.02%)</title><rect x="88.9131%" y="261" width="0.0156%" height="15" fill="rgb(249,174,33)" fg:x="11420" fg:w="2"/><text x="89.1631%" y="271.50"></text></g><g><title>0x110010a24 (6 samples, 0.05%)</title><rect x="88.9598%" y="261" width="0.0467%" height="15" fill="rgb(233,201,37)" fg:x="11426" fg:w="6"/><text x="89.2098%" y="271.50"></text></g><g><title>0x110010a2c (21 samples, 0.16%)</title><rect x="89.0065%" y="261" width="0.1635%" height="15" fill="rgb(221,78,26)" fg:x="11432" fg:w="21"/><text x="89.2565%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_PerformPromiseThen (21 samples, 0.16%)</title><rect x="89.0065%" y="245" width="0.1635%" height="15" fill="rgb(250,127,30)" fg:x="11432" fg:w="21"/><text x="89.2565%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.02%)</title><rect x="89.1545%" y="229" width="0.0156%" height="15" fill="rgb(230,49,44)" fg:x="11451" fg:w="2"/><text x="89.4045%" y="239.50"></text></g><g><title>0x110010b48 (8 samples, 0.06%)</title><rect x="89.1934%" y="261" width="0.0623%" height="15" fill="rgb(229,67,23)" fg:x="11456" fg:w="8"/><text x="89.4434%" y="271.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="89.2635%" y="245" width="0.0234%" height="15" fill="rgb(249,83,47)" fg:x="11465" fg:w="3"/><text x="89.5135%" y="255.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$malloc (6 samples, 0.05%)</title><rect x="89.3803%" y="229" width="0.0467%" height="15" fill="rgb(215,43,3)" fg:x="11480" fg:w="6"/><text x="89.6303%" y="239.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="89.4270%" y="229" width="0.0311%" height="15" fill="rgb(238,154,13)" fg:x="11486" fg:w="4"/><text x="89.6770%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="89.6761%" y="197" width="0.0156%" height="15" fill="rgb(219,56,2)" fg:x="11518" fg:w="2"/><text x="89.9261%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.19%)</title><rect x="89.6995%" y="181" width="0.1869%" height="15" fill="rgb(233,0,4)" fg:x="11521" fg:w="24"/><text x="89.9495%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.13%)</title><rect x="89.7540%" y="165" width="0.1324%" height="15" fill="rgb(235,30,7)" fg:x="11528" fg:w="17"/><text x="90.0040%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (42 samples, 0.33%)</title><rect x="89.5749%" y="213" width="0.3270%" height="15" fill="rgb(250,79,13)" fg:x="11505" fg:w="42"/><text x="89.8249%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.21%)</title><rect x="89.6917%" y="197" width="0.2102%" height="15" fill="rgb(211,146,34)" fg:x="11520" fg:w="27"/><text x="89.9417%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="89.8863%" y="181" width="0.0156%" height="15" fill="rgb(228,22,38)" fg:x="11545" fg:w="2"/><text x="90.1363%" y="191.50"></text></g><g><title>http_bench_json_ops`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (58 samples, 0.45%)</title><rect x="89.4581%" y="229" width="0.4516%" height="15" fill="rgb(235,168,5)" fg:x="11490" fg:w="58"/><text x="89.7081%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="90.0031%" y="213" width="0.0311%" height="15" fill="rgb(221,155,16)" fg:x="11560" fg:w="4"/><text x="90.2531%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (47 samples, 0.37%)</title><rect x="90.0654%" y="197" width="0.3659%" height="15" fill="rgb(215,215,53)" fg:x="11568" fg:w="47"/><text x="90.3154%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.26%)</title><rect x="90.1744%" y="181" width="0.2569%" height="15" fill="rgb(223,4,10)" fg:x="11582" fg:w="33"/><text x="90.4244%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (70 samples, 0.55%)</title><rect x="89.9097%" y="229" width="0.5450%" height="15" fill="rgb(234,103,6)" fg:x="11548" fg:w="70"/><text x="90.1597%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (54 samples, 0.42%)</title><rect x="90.0343%" y="213" width="0.4204%" height="15" fill="rgb(227,97,0)" fg:x="11564" fg:w="54"/><text x="90.2843%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="90.4313%" y="197" width="0.0234%" height="15" fill="rgb(234,150,53)" fg:x="11615" fg:w="3"/><text x="90.6813%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.03%)</title><rect x="90.4547%" y="229" width="0.0311%" height="15" fill="rgb(228,201,54)" fg:x="11618" fg:w="4"/><text x="90.7047%" y="239.50"></text></g><g><title>http_bench_json_ops`deno_core::ops_builtin::op_read_fast_fn (155 samples, 1.21%)</title><rect x="89.2868%" y="245" width="1.2068%" height="15" fill="rgb(222,22,37)" fg:x="11468" fg:w="155"/><text x="89.5368%" y="255.50"></text></g><g><title>http_bench_json_ops`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (5 samples, 0.04%)</title><rect x="90.4936%" y="245" width="0.0389%" height="15" fill="rgb(237,53,32)" fg:x="11623" fg:w="5"/><text x="90.7436%" y="255.50"></text></g><g><title>0x110010b50 (168 samples, 1.31%)</title><rect x="89.2557%" y="261" width="1.3080%" height="15" fill="rgb(233,25,53)" fg:x="11464" fg:w="168"/><text x="89.5057%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="90.5403%" y="245" width="0.0234%" height="15" fill="rgb(210,40,34)" fg:x="11629" fg:w="3"/><text x="90.7903%" y="255.50"></text></g><g><title>0x110010bdc (2 samples, 0.02%)</title><rect x="90.5793%" y="261" width="0.0156%" height="15" fill="rgb(241,220,44)" fg:x="11634" fg:w="2"/><text x="90.8293%" y="271.50"></text></g><g><title>0x110010c6c (5 samples, 0.04%)</title><rect x="90.6026%" y="261" width="0.0389%" height="15" fill="rgb(235,28,35)" fg:x="11637" fg:w="5"/><text x="90.8526%" y="271.50"></text></g><g><title>0x110010c7c (2 samples, 0.02%)</title><rect x="90.6415%" y="261" width="0.0156%" height="15" fill="rgb(210,56,17)" fg:x="11642" fg:w="2"/><text x="90.8915%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.02%)</title><rect x="90.9140%" y="85" width="0.0156%" height="15" fill="rgb(224,130,29)" fg:x="11677" fg:w="2"/><text x="91.1640%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.02%)</title><rect x="90.9140%" y="69" width="0.0156%" height="15" fill="rgb(235,212,8)" fg:x="11677" fg:w="2"/><text x="91.1640%" y="79.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobState::Join (5 samples, 0.04%)</title><rect x="90.9374%" y="69" width="0.0389%" height="15" fill="rgb(223,33,50)" fg:x="11680" fg:w="5"/><text x="91.1874%" y="79.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::JobTask::ProcessItems (5 samples, 0.04%)</title><rect x="90.9374%" y="53" width="0.0389%" height="15" fill="rgb(219,149,13)" fg:x="11680" fg:w="5"/><text x="91.1874%" y="63.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::ScavengePage (5 samples, 0.04%)</title><rect x="90.9374%" y="37" width="0.0389%" height="15" fill="rgb(250,156,29)" fg:x="11680" fg:w="5"/><text x="91.1874%" y="47.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::CollectGarbage (9 samples, 0.07%)</title><rect x="90.9140%" y="101" width="0.0701%" height="15" fill="rgb(216,193,19)" fg:x="11677" fg:w="9"/><text x="91.1640%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobHandle::Join (6 samples, 0.05%)</title><rect x="90.9374%" y="85" width="0.0467%" height="15" fill="rgb(216,135,14)" fg:x="11680" fg:w="6"/><text x="91.1874%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (12 samples, 0.09%)</title><rect x="90.8985%" y="181" width="0.0934%" height="15" fill="rgb(241,47,5)" fg:x="11675" fg:w="12"/><text x="91.1485%" y="191.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (12 samples, 0.09%)</title><rect x="90.8985%" y="165" width="0.0934%" height="15" fill="rgb(233,42,35)" fg:x="11675" fg:w="12"/><text x="91.1485%" y="175.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::CollectGarbage (12 samples, 0.09%)</title><rect x="90.8985%" y="149" width="0.0934%" height="15" fill="rgb(231,13,6)" fg:x="11675" fg:w="12"/><text x="91.1485%" y="159.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::PerformGarbageCollection (10 samples, 0.08%)</title><rect x="90.9140%" y="133" width="0.0779%" height="15" fill="rgb(207,181,40)" fg:x="11677" fg:w="10"/><text x="91.1640%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::Scavenge (10 samples, 0.08%)</title><rect x="90.9140%" y="117" width="0.0779%" height="15" fill="rgb(254,173,49)" fg:x="11677" fg:w="10"/><text x="91.1640%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::internal::Factory::NewFillerObject (14 samples, 0.11%)</title><rect x="90.8985%" y="197" width="0.1090%" height="15" fill="rgb(221,1,38)" fg:x="11675" fg:w="14"/><text x="91.1485%" y="207.50"></text></g><g><title>http_bench_json_ops`v8::internal::SemiSpaceNewSpace::EnsureAllocation (2 samples, 0.02%)</title><rect x="90.9919%" y="181" width="0.0156%" height="15" fill="rgb(206,124,46)" fg:x="11687" fg:w="2"/><text x="91.2419%" y="191.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (15 samples, 0.12%)</title><rect x="90.8985%" y="229" width="0.1168%" height="15" fill="rgb(249,21,11)" fg:x="11675" fg:w="15"/><text x="91.1485%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::Runtime_AllocateInYoungGeneration (15 samples, 0.12%)</title><rect x="90.8985%" y="213" width="0.1168%" height="15" fill="rgb(222,201,40)" fg:x="11675" fg:w="15"/><text x="91.1485%" y="223.50"></text></g><g><title>0x110010c94 (66 samples, 0.51%)</title><rect x="90.6649%" y="261" width="0.5139%" height="15" fill="rgb(235,61,29)" fg:x="11645" fg:w="66"/><text x="90.9149%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitCaught (66 samples, 0.51%)</title><rect x="90.6649%" y="245" width="0.5139%" height="15" fill="rgb(219,207,3)" fg:x="11645" fg:w="66"/><text x="90.9149%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_PerformPromiseThen (21 samples, 0.16%)</title><rect x="91.0153%" y="229" width="0.1635%" height="15" fill="rgb(222,56,46)" fg:x="11690" fg:w="21"/><text x="91.2653%" y="239.50"></text></g><g><title>0x110010d24 (3 samples, 0.02%)</title><rect x="91.2099%" y="261" width="0.0234%" height="15" fill="rgb(239,76,54)" fg:x="11715" fg:w="3"/><text x="91.4599%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (3 samples, 0.02%)</title><rect x="91.2644%" y="101" width="0.0234%" height="15" fill="rgb(231,124,27)" fg:x="11722" fg:w="3"/><text x="91.5144%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (2 samples, 0.02%)</title><rect x="91.2878%" y="101" width="0.0156%" height="15" fill="rgb(249,195,6)" fg:x="11725" fg:w="2"/><text x="91.5378%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::CompactionSpaceCollection::CompactionSpaceCollection (2 samples, 0.02%)</title><rect x="91.2878%" y="85" width="0.0156%" height="15" fill="rgb(237,174,47)" fg:x="11725" fg:w="2"/><text x="91.5378%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::FreeList::CreateFreeList (2 samples, 0.02%)</title><rect x="91.2878%" y="69" width="0.0156%" height="15" fill="rgb(206,201,31)" fg:x="11725" fg:w="2"/><text x="91.5378%" y="79.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobState::Join (3 samples, 0.02%)</title><rect x="91.3033%" y="85" width="0.0234%" height="15" fill="rgb(231,57,52)" fg:x="11727" fg:w="3"/><text x="91.5533%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::JobTask::ProcessItems (3 samples, 0.02%)</title><rect x="91.3033%" y="69" width="0.0234%" height="15" fill="rgb(248,177,22)" fg:x="11727" fg:w="3"/><text x="91.5533%" y="79.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::Process (3 samples, 0.02%)</title><rect x="91.3033%" y="53" width="0.0234%" height="15" fill="rgb(215,211,37)" fg:x="11727" fg:w="3"/><text x="91.5533%" y="63.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (11 samples, 0.09%)</title><rect x="91.2566%" y="197" width="0.0856%" height="15" fill="rgb(241,128,51)" fg:x="11721" fg:w="11"/><text x="91.5066%" y="207.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (11 samples, 0.09%)</title><rect x="91.2566%" y="181" width="0.0856%" height="15" fill="rgb(227,165,31)" fg:x="11721" fg:w="11"/><text x="91.5066%" y="191.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::CollectGarbage (11 samples, 0.09%)</title><rect x="91.2566%" y="165" width="0.0856%" height="15" fill="rgb(228,167,24)" fg:x="11721" fg:w="11"/><text x="91.5066%" y="175.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::PerformGarbageCollection (10 samples, 0.08%)</title><rect x="91.2644%" y="149" width="0.0779%" height="15" fill="rgb(228,143,12)" fg:x="11722" fg:w="10"/><text x="91.5144%" y="159.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::Scavenge (10 samples, 0.08%)</title><rect x="91.2644%" y="133" width="0.0779%" height="15" fill="rgb(249,149,8)" fg:x="11722" fg:w="10"/><text x="91.5144%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::CollectGarbage (10 samples, 0.08%)</title><rect x="91.2644%" y="117" width="0.0779%" height="15" fill="rgb(243,35,44)" fg:x="11722" fg:w="10"/><text x="91.5144%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobHandle::Join (5 samples, 0.04%)</title><rect x="91.3033%" y="101" width="0.0389%" height="15" fill="rgb(246,89,9)" fg:x="11727" fg:w="5"/><text x="91.5533%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobState::~DefaultJobState (2 samples, 0.02%)</title><rect x="91.3267%" y="85" width="0.0156%" height="15" fill="rgb(233,213,13)" fg:x="11730" fg:w="2"/><text x="91.5767%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::SemiSpaceNewSpace::EnsureAllocation (2 samples, 0.02%)</title><rect x="91.3500%" y="197" width="0.0156%" height="15" fill="rgb(233,141,41)" fg:x="11733" fg:w="2"/><text x="91.6000%" y="207.50"></text></g><g><title>0x110011048 (17 samples, 0.13%)</title><rect x="91.2410%" y="261" width="0.1324%" height="15" fill="rgb(239,167,4)" fg:x="11719" fg:w="17"/><text x="91.4910%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (17 samples, 0.13%)</title><rect x="91.2410%" y="245" width="0.1324%" height="15" fill="rgb(209,217,16)" fg:x="11719" fg:w="17"/><text x="91.4910%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::Runtime_AllocateInYoungGeneration (16 samples, 0.12%)</title><rect x="91.2488%" y="229" width="0.1246%" height="15" fill="rgb(219,88,35)" fg:x="11720" fg:w="16"/><text x="91.4988%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::Factory::NewFillerObject (16 samples, 0.12%)</title><rect x="91.2488%" y="213" width="0.1246%" height="15" fill="rgb(220,193,23)" fg:x="11720" fg:w="16"/><text x="91.4988%" y="223.50"></text></g><g><title>0x11001137c (2 samples, 0.02%)</title><rect x="91.3812%" y="261" width="0.0156%" height="15" fill="rgb(230,90,52)" fg:x="11737" fg:w="2"/><text x="91.6312%" y="271.50"></text></g><g><title>0x11001139c (37 samples, 0.29%)</title><rect x="91.3968%" y="261" width="0.2881%" height="15" fill="rgb(252,106,19)" fg:x="11739" fg:w="37"/><text x="91.6468%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_RecordWriteSaveFP (37 samples, 0.29%)</title><rect x="91.3968%" y="245" width="0.2881%" height="15" fill="rgb(206,74,20)" fg:x="11739" fg:w="37"/><text x="91.6468%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (14 samples, 0.11%)</title><rect x="91.6926%" y="261" width="0.1090%" height="15" fill="rgb(230,138,44)" fg:x="11777" fg:w="14"/><text x="91.9426%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadICTrampoline (6 samples, 0.05%)</title><rect x="91.8016%" y="261" width="0.0467%" height="15" fill="rgb(235,182,43)" fg:x="11791" fg:w="6"/><text x="92.0516%" y="271.50"></text></g><g><title>http_bench_json_ops`deno_core::ops_builtin::op_read_fast_fn (7 samples, 0.05%)</title><rect x="91.8483%" y="261" width="0.0545%" height="15" fill="rgb(242,16,51)" fg:x="11797" fg:w="7"/><text x="92.0983%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure (5,478 samples, 42.65%)</title><rect x="49.2759%" y="277" width="42.6503%" height="15" fill="rgb(248,9,4)" fg:x="6329" fg:w="5478"/><text x="49.5259%" y="287.50">http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write_fast_fn (3 samples, 0.02%)</title><rect x="91.9028%" y="261" width="0.0234%" height="15" fill="rgb(210,31,22)" fg:x="11804" fg:w="3"/><text x="92.1528%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_EnqueueMicrotask (2 samples, 0.02%)</title><rect x="91.9963%" y="261" width="0.0156%" height="15" fill="rgb(239,54,39)" fg:x="11816" fg:w="2"/><text x="92.2463%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (21 samples, 0.16%)</title><rect x="91.9418%" y="277" width="0.1635%" height="15" fill="rgb(230,99,41)" fg:x="11809" fg:w="21"/><text x="92.1918%" y="287.50"></text></g><g><title>http_bench_json_ops`Builtins_FulfillPromise (12 samples, 0.09%)</title><rect x="92.0118%" y="261" width="0.0934%" height="15" fill="rgb(253,106,12)" fg:x="11818" fg:w="12"/><text x="92.2618%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (5,624 samples, 43.79%)</title><rect x="48.3884%" y="341" width="43.7870%" height="15" fill="rgb(213,46,41)" fg:x="6215" fg:w="5624"/><text x="48.6384%" y="351.50">http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::inte..</text></g><g><title>http_bench_json_ops`Builtins_JSRunMicrotasksEntry (5,612 samples, 43.69%)</title><rect x="48.4818%" y="325" width="43.6936%" height="15" fill="rgb(215,133,35)" fg:x="6227" fg:w="5612"/><text x="48.7318%" y="335.50">http_bench_json_ops`Builtins_JSRunMicrotasksEntry</text></g><g><title>http_bench_json_ops`Builtins_RunMicrotasks (5,609 samples, 43.67%)</title><rect x="48.5051%" y="309" width="43.6702%" height="15" fill="rgb(213,28,5)" fg:x="6230" fg:w="5609"/><text x="48.7551%" y="319.50">http_bench_json_ops`Builtins_RunMicrotasks</text></g><g><title>http_bench_json_ops`Builtins_PromiseFulfillReactionJob (5,534 samples, 43.09%)</title><rect x="49.0891%" y="293" width="43.0863%" height="15" fill="rgb(215,77,49)" fg:x="6305" fg:w="5534"/><text x="49.3391%" y="303.50">http_bench_json_ops`Builtins_PromiseFulfillReactionJob</text></g><g><title>http_bench_json_ops`Builtins_ResumeGeneratorTrampoline (9 samples, 0.07%)</title><rect x="92.1053%" y="277" width="0.0701%" height="15" fill="rgb(248,100,22)" fg:x="11830" fg:w="9"/><text x="92.3553%" y="287.50"></text></g><g><title>http_bench_json_ops`v8::internal::Isolate::FireCallCompletedCallbackInternal (5,663 samples, 44.09%)</title><rect x="48.1003%" y="421" width="44.0906%" height="15" fill="rgb(208,67,9)" fg:x="6178" fg:w="5663"/><text x="48.3503%" y="431.50">http_bench_json_ops`v8::internal::Isolate::FireCallCompletedCallbackInte..</text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal (5,660 samples, 44.07%)</title><rect x="48.1236%" y="405" width="44.0673%" height="15" fill="rgb(219,133,21)" fg:x="6181" fg:w="5660"/><text x="48.3736%" y="415.50">http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInter..</text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (5,654 samples, 44.02%)</title><rect x="48.1704%" y="389" width="44.0206%" height="15" fill="rgb(246,46,29)" fg:x="6187" fg:w="5654"/><text x="48.4204%" y="399.50">http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>http_bench_json_ops`v8::internal::Execution::TryRunMicrotasks (5,645 samples, 43.95%)</title><rect x="48.2404%" y="373" width="43.9505%" height="15" fill="rgb(246,185,52)" fg:x="6196" fg:w="5645"/><text x="48.4904%" y="383.50">http_bench_json_ops`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (5,636 samples, 43.88%)</title><rect x="48.3105%" y="357" width="43.8804%" height="15" fill="rgb(252,136,11)" fg:x="6205" fg:w="5636"/><text x="48.5605%" y="367.50">http_bench_json_ops`v8::internal::(anonymous namespace)::InvokeWithTryCa..</text></g><g><title>http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (5,873 samples, 45.73%)</title><rect x="46.4731%" y="437" width="45.7256%" height="15" fill="rgb(219,138,53)" fg:x="5969" fg:w="5873"/><text x="46.7231%" y="447.50">http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8..</text></g><g><title>http_bench_json_ops`v8::Integer::New (4 samples, 0.03%)</title><rect x="92.2065%" y="437" width="0.0311%" height="15" fill="rgb(211,51,23)" fg:x="11843" fg:w="4"/><text x="92.4565%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::Isolate::HasPendingBackgroundTasks (2 samples, 0.02%)</title><rect x="92.2376%" y="437" width="0.0156%" height="15" fill="rgb(247,221,28)" fg:x="11847" fg:w="2"/><text x="92.4876%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (4 samples, 0.03%)</title><rect x="92.2532%" y="437" width="0.0311%" height="15" fill="rgb(251,222,45)" fg:x="11849" fg:w="4"/><text x="92.5032%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::base::Mutex::Lock (2 samples, 0.02%)</title><rect x="92.2843%" y="437" width="0.0156%" height="15" fill="rgb(217,162,53)" fg:x="11853" fg:w="2"/><text x="92.5343%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="92.2999%" y="437" width="0.0234%" height="15" fill="rgb(229,93,14)" fg:x="11855" fg:w="3"/><text x="92.5499%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Destroy (5 samples, 0.04%)</title><rect x="92.3233%" y="437" width="0.0389%" height="15" fill="rgb(209,67,49)" fg:x="11858" fg:w="5"/><text x="92.5733%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (3 samples, 0.02%)</title><rect x="92.3700%" y="437" width="0.0234%" height="15" fill="rgb(213,87,29)" fg:x="11864" fg:w="3"/><text x="92.6200%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::ClearKeptObjects (3 samples, 0.02%)</title><rect x="92.3933%" y="437" width="0.0234%" height="15" fill="rgb(205,151,52)" fg:x="11867" fg:w="3"/><text x="92.6433%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal (5 samples, 0.04%)</title><rect x="92.4245%" y="437" width="0.0389%" height="15" fill="rgb(253,215,39)" fg:x="11871" fg:w="5"/><text x="92.6745%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (3 samples, 0.02%)</title><rect x="92.4400%" y="421" width="0.0234%" height="15" fill="rgb(221,220,41)" fg:x="11873" fg:w="3"/><text x="92.6900%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (2 samples, 0.02%)</title><rect x="92.4634%" y="437" width="0.0156%" height="15" fill="rgb(218,133,21)" fg:x="11876" fg:w="2"/><text x="92.7134%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="92.4868%" y="421" width="0.0234%" height="15" fill="rgb(221,193,43)" fg:x="11879" fg:w="3"/><text x="92.7368%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::wasm::WasmEngine::HasRunningCompileJob (5 samples, 0.04%)</title><rect x="92.4868%" y="437" width="0.0389%" height="15" fill="rgb(240,128,52)" fg:x="11879" fg:w="5"/><text x="92.7368%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="92.5101%" y="421" width="0.0156%" height="15" fill="rgb(253,114,12)" fg:x="11882" fg:w="2"/><text x="92.7601%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::TryCatch (4 samples, 0.03%)</title><rect x="92.5413%" y="421" width="0.0311%" height="15" fill="rgb(215,223,47)" fg:x="11886" fg:w="4"/><text x="92.7913%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::scope::TryCatch&lt;P&gt;::new (6 samples, 0.05%)</title><rect x="92.5335%" y="437" width="0.0467%" height="15" fill="rgb(248,225,23)" fg:x="11885" fg:w="6"/><text x="92.7835%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (6 samples, 0.05%)</title><rect x="92.5880%" y="421" width="0.0467%" height="15" fill="rgb(250,108,0)" fg:x="11892" fg:w="6"/><text x="92.8380%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::Context::Exit (2 samples, 0.02%)</title><rect x="92.6347%" y="421" width="0.0156%" height="15" fill="rgb(228,208,7)" fg:x="11898" fg:w="2"/><text x="92.8847%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::scope::data::ScopeData::try_exit_scope (10 samples, 0.08%)</title><rect x="92.5802%" y="437" width="0.0779%" height="15" fill="rgb(244,45,10)" fg:x="11891" fg:w="10"/><text x="92.8302%" y="447.50"></text></g><g><title>http_bench_json_ops`v8__Global__New (4 samples, 0.03%)</title><rect x="92.6581%" y="437" width="0.0311%" height="15" fill="rgb(207,125,25)" fg:x="11901" fg:w="4"/><text x="92.9081%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="92.6658%" y="421" width="0.0234%" height="15" fill="rgb(210,195,18)" fg:x="11902" fg:w="3"/><text x="92.9158%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (49 samples, 0.38%)</title><rect x="92.6892%" y="437" width="0.3815%" height="15" fill="rgb(249,80,12)" fg:x="11905" fg:w="49"/><text x="92.9392%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.15%)</title><rect x="92.9228%" y="421" width="0.1479%" height="15" fill="rgb(221,65,9)" fg:x="11935" fg:w="19"/><text x="93.1728%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.05%)</title><rect x="93.0707%" y="437" width="0.0467%" height="15" fill="rgb(235,49,36)" fg:x="11954" fg:w="6"/><text x="93.3207%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.09%)</title><rect x="93.1174%" y="437" width="0.0934%" height="15" fill="rgb(225,32,20)" fg:x="11960" fg:w="12"/><text x="93.3674%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.04%)</title><rect x="93.2108%" y="437" width="0.0389%" height="15" fill="rgb(215,141,46)" fg:x="11972" fg:w="5"/><text x="93.4608%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.02%)</title><rect x="93.2498%" y="437" width="0.0156%" height="15" fill="rgb(250,160,47)" fg:x="11977" fg:w="2"/><text x="93.4998%" y="447.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::poll_event_loop (11,900 samples, 92.65%)</title><rect x="0.6384%" y="453" width="92.6503%" height="15" fill="rgb(216,222,40)" fg:x="82" fg:w="11900"/><text x="0.8884%" y="463.50">http_bench_json_ops`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="93.2653%" y="437" width="0.0234%" height="15" fill="rgb(234,217,39)" fg:x="11979" fg:w="3"/><text x="93.5153%" y="447.50"></text></g><g><title>http_bench_json_ops`futures_task::noop_waker::noop (4 samples, 0.03%)</title><rect x="93.2887%" y="453" width="0.0311%" height="15" fill="rgb(207,178,40)" fg:x="11982" fg:w="4"/><text x="93.5387%" y="463.50"></text></g><g><title>http_bench_json_ops`futures_task::waker::drop_arc_raw (3 samples, 0.02%)</title><rect x="93.3198%" y="453" width="0.0234%" height="15" fill="rgb(221,136,13)" fg:x="11986" fg:w="3"/><text x="93.5698%" y="463.50"></text></g><g><title>http_bench_json_ops`futures_task::waker::wake_by_ref_arc_raw (35 samples, 0.27%)</title><rect x="93.3432%" y="453" width="0.2725%" height="15" fill="rgb(249,199,10)" fg:x="11989" fg:w="35"/><text x="93.5932%" y="463.50"></text></g><g><title>http_bench_json_ops`polloi::dummy_waker::clone_waker (2 samples, 0.02%)</title><rect x="93.6157%" y="453" width="0.0156%" height="15" fill="rgb(249,222,13)" fg:x="12024" fg:w="2"/><text x="93.8657%" y="463.50"></text></g><g><title>http_bench_json_ops`smallvec::SmallVec&lt;A&gt;::push (4 samples, 0.03%)</title><rect x="93.6313%" y="453" width="0.0311%" height="15" fill="rgb(244,185,38)" fg:x="12026" fg:w="4"/><text x="93.8813%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (2 samples, 0.02%)</title><rect x="93.6624%" y="453" width="0.0156%" height="15" fill="rgb(236,202,9)" fg:x="12030" fg:w="2"/><text x="93.9124%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::CreateHandle (2 samples, 0.02%)</title><rect x="93.6780%" y="453" width="0.0156%" height="15" fill="rgb(250,229,37)" fg:x="12032" fg:w="2"/><text x="93.9280%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (2 samples, 0.02%)</title><rect x="93.6936%" y="453" width="0.0156%" height="15" fill="rgb(206,174,23)" fg:x="12034" fg:w="2"/><text x="93.9436%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::Isolate::PerformMicrotaskCheckpoint (2 samples, 0.02%)</title><rect x="93.7091%" y="453" width="0.0156%" height="15" fill="rgb(211,33,43)" fg:x="12036" fg:w="2"/><text x="93.9591%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Destroy (2 samples, 0.02%)</title><rect x="93.7247%" y="453" width="0.0156%" height="15" fill="rgb(245,58,50)" fg:x="12038" fg:w="2"/><text x="93.9747%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::internal::wasm::WasmEngine::HasRunningCompileJob (3 samples, 0.02%)</title><rect x="93.7481%" y="453" width="0.0234%" height="15" fill="rgb(244,68,36)" fg:x="12041" fg:w="3"/><text x="93.9981%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.05%)</title><rect x="93.7870%" y="453" width="0.0467%" height="15" fill="rgb(232,229,15)" fg:x="12046" fg:w="6"/><text x="94.0370%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.04%)</title><rect x="93.8337%" y="453" width="0.0389%" height="15" fill="rgb(254,30,23)" fg:x="12052" fg:w="5"/><text x="94.0837%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.05%)</title><rect x="93.8726%" y="453" width="0.0545%" height="15" fill="rgb(235,160,14)" fg:x="12057" fg:w="7"/><text x="94.1226%" y="463.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::main (12,065 samples, 93.93%)</title><rect x="0.0389%" y="469" width="93.9349%" height="15" fill="rgb(212,155,44)" fg:x="5" fg:w="12065"/><text x="0.2889%" y="479.50">http_bench_json_ops`http_bench_json_ops::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.05%)</title><rect x="93.9271%" y="453" width="0.0467%" height="15" fill="rgb(226,2,50)" fg:x="12064" fg:w="6"/><text x="94.1771%" y="463.50"></text></g><g><title>dyld`start (12,814 samples, 99.77%)</title><rect x="0.0000%" y="517" width="99.7664%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="12814"/><text x="0.2500%" y="527.50">dyld`start</text></g><g><title>http_bench_json_ops`main (12,814 samples, 99.77%)</title><rect x="0.0000%" y="501" width="99.7664%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="12814"/><text x="0.2500%" y="511.50">http_bench_json_ops`main</text></g><g><title>http_bench_json_ops`std::sys_common::backtrace::__rust_begin_short_backtrace (12,814 samples, 99.77%)</title><rect x="0.0000%" y="485" width="99.7664%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="12814"/><text x="0.2500%" y="495.50">http_bench_json_ops`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_kernel.dylib`kevent (744 samples, 5.79%)</title><rect x="93.9738%" y="469" width="5.7926%" height="15" fill="rgb(239,221,27)" fg:x="12070" fg:w="744"/><text x="94.2238%" y="479.50">libsyst..</text></g><g><title>http_bench_json_ops`v8::internal::compiler::CodeGenerator::AssembleArchInstruction (2 samples, 0.02%)</title><rect x="99.7820%" y="341" width="0.0156%" height="15" fill="rgb(222,198,25)" fg:x="12816" fg:w="2"/><text x="100.0320%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::AssembleCode (3 samples, 0.02%)</title><rect x="99.7820%" y="389" width="0.0234%" height="15" fill="rgb(211,99,13)" fg:x="12816" fg:w="3"/><text x="100.0320%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::CodeGenerator::AssembleCode (3 samples, 0.02%)</title><rect x="99.7820%" y="373" width="0.0234%" height="15" fill="rgb(232,111,31)" fg:x="12816" fg:w="3"/><text x="100.0320%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::CodeGenerator::AssembleInstruction (3 samples, 0.02%)</title><rect x="99.7820%" y="357" width="0.0234%" height="15" fill="rgb(245,82,37)" fg:x="12816" fg:w="3"/><text x="100.0320%" y="367.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (2 samples, 0.02%)</title><rect x="99.8054%" y="373" width="0.0156%" height="15" fill="rgb(227,149,46)" fg:x="12819" fg:w="2"/><text x="100.0554%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphBuilderPhase::Run (2 samples, 0.02%)</title><rect x="99.8054%" y="357" width="0.0156%" height="15" fill="rgb(218,36,50)" fg:x="12819" fg:w="2"/><text x="100.0554%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (2 samples, 0.02%)</title><rect x="99.8054%" y="341" width="0.0156%" height="15" fill="rgb(226,80,48)" fg:x="12819" fg:w="2"/><text x="100.0554%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::CreateGraph (4 samples, 0.03%)</title><rect x="99.8054%" y="389" width="0.0311%" height="15" fill="rgb(238,224,15)" fg:x="12819" fg:w="4"/><text x="100.0554%" y="399.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (2 samples, 0.02%)</title><rect x="99.8209%" y="373" width="0.0156%" height="15" fill="rgb(241,136,10)" fg:x="12821" fg:w="2"/><text x="100.0709%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::InliningPhase::Run (2 samples, 0.02%)</title><rect x="99.8209%" y="357" width="0.0156%" height="15" fill="rgb(208,32,45)" fg:x="12821" fg:w="2"/><text x="100.0709%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="99.8209%" y="341" width="0.0156%" height="15" fill="rgb(207,135,9)" fg:x="12821" fg:w="2"/><text x="100.0709%" y="351.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (2 samples, 0.02%)</title><rect x="99.8365%" y="373" width="0.0156%" height="15" fill="rgb(206,86,44)" fg:x="12823" fg:w="2"/><text x="100.0865%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EarlyOptimizationPhase::Run (2 samples, 0.02%)</title><rect x="99.8365%" y="357" width="0.0156%" height="15" fill="rgb(245,177,15)" fg:x="12823" fg:w="2"/><text x="100.0865%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="99.8365%" y="341" width="0.0156%" height="15" fill="rgb(206,64,50)" fg:x="12823" fg:w="2"/><text x="100.0865%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="99.8365%" y="325" width="0.0156%" height="15" fill="rgb(234,36,40)" fg:x="12823" fg:w="2"/><text x="100.0865%" y="335.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (3 samples, 0.02%)</title><rect x="99.8521%" y="373" width="0.0234%" height="15" fill="rgb(213,64,8)" fg:x="12825" fg:w="3"/><text x="100.1021%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EscapeAnalysisPhase::Run (3 samples, 0.02%)</title><rect x="99.8521%" y="357" width="0.0234%" height="15" fill="rgb(210,75,36)" fg:x="12825" fg:w="3"/><text x="100.1021%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EffectGraphReducer::ReduceFrom (3 samples, 0.02%)</title><rect x="99.8521%" y="341" width="0.0234%" height="15" fill="rgb(229,88,21)" fg:x="12825" fg:w="3"/><text x="100.1021%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EscapeAnalysis::Reduce (2 samples, 0.02%)</title><rect x="99.8599%" y="325" width="0.0156%" height="15" fill="rgb(252,204,47)" fg:x="12826" fg:w="2"/><text x="100.1099%" y="335.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (3 samples, 0.02%)</title><rect x="99.8832%" y="373" width="0.0234%" height="15" fill="rgb(208,77,27)" fg:x="12829" fg:w="3"/><text x="100.1332%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::LoadEliminationPhase::Run (3 samples, 0.02%)</title><rect x="99.8832%" y="357" width="0.0234%" height="15" fill="rgb(221,76,26)" fg:x="12829" fg:w="3"/><text x="100.1332%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="99.8832%" y="341" width="0.0234%" height="15" fill="rgb(225,139,18)" fg:x="12829" fg:w="3"/><text x="100.1332%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="99.8832%" y="325" width="0.0234%" height="15" fill="rgb(230,137,11)" fg:x="12829" fg:w="3"/><text x="100.1332%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::Reduce (3 samples, 0.02%)</title><rect x="99.8832%" y="309" width="0.0234%" height="15" fill="rgb(212,28,1)" fg:x="12829" fg:w="3"/><text x="100.1332%" y="319.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MemoryOptimizationPhase&gt; (2 samples, 0.02%)</title><rect x="99.9066%" y="373" width="0.0156%" height="15" fill="rgb(248,164,17)" fg:x="12832" fg:w="2"/><text x="100.1566%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::MemoryOptimizationPhase::Run (2 samples, 0.02%)</title><rect x="99.9066%" y="357" width="0.0156%" height="15" fill="rgb(222,171,42)" fg:x="12832" fg:w="2"/><text x="100.1566%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::MemoryOptimizer::Optimize (2 samples, 0.02%)</title><rect x="99.9066%" y="341" width="0.0156%" height="15" fill="rgb(243,84,45)" fg:x="12832" fg:w="2"/><text x="100.1566%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::MemoryOptimizer::VisitNode (2 samples, 0.02%)</title><rect x="99.9066%" y="325" width="0.0156%" height="15" fill="rgb(252,49,23)" fg:x="12832" fg:w="2"/><text x="100.1566%" y="335.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::StoreStoreEliminationPhase&gt; (2 samples, 0.02%)</title><rect x="99.9221%" y="373" width="0.0156%" height="15" fill="rgb(215,19,7)" fg:x="12834" fg:w="2"/><text x="100.1721%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::StoreStoreEliminationPhase::Run (2 samples, 0.02%)</title><rect x="99.9221%" y="357" width="0.0156%" height="15" fill="rgb(238,81,41)" fg:x="12834" fg:w="2"/><text x="100.1721%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::StoreStoreElimination::Run (2 samples, 0.02%)</title><rect x="99.9221%" y="341" width="0.0156%" height="15" fill="rgb(210,199,37)" fg:x="12834" fg:w="2"/><text x="100.1721%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::(anonymous namespace)::RedundantStoreFinder::VisitEffectfulNode (2 samples, 0.02%)</title><rect x="99.9221%" y="325" width="0.0156%" height="15" fill="rgb(244,192,49)" fg:x="12834" fg:w="2"/><text x="100.1721%" y="335.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InstructionSelectionPhase, v8::internal::compiler::Linkage*&amp;&gt; (2 samples, 0.02%)</title><rect x="99.9533%" y="357" width="0.0156%" height="15" fill="rgb(226,211,11)" fg:x="12838" fg:w="2"/><text x="100.2033%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::InstructionSelectionPhase::Run (2 samples, 0.02%)</title><rect x="99.9533%" y="341" width="0.0156%" height="15" fill="rgb(236,162,54)" fg:x="12838" fg:w="2"/><text x="100.2033%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::InstructionSelector::SelectInstructions (2 samples, 0.02%)</title><rect x="99.9533%" y="325" width="0.0156%" height="15" fill="rgb(220,229,9)" fg:x="12838" fg:w="2"/><text x="100.2033%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (27 samples, 0.21%)</title><rect x="99.7820%" y="453" width="0.2102%" height="15" fill="rgb(250,87,22)" fg:x="12816" fg:w="27"/><text x="100.0320%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizingCompileDispatcher::CompileNext (27 samples, 0.21%)</title><rect x="99.7820%" y="437" width="0.2102%" height="15" fill="rgb(239,43,17)" fg:x="12816" fg:w="27"/><text x="100.0320%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizedCompilationJob::ExecuteJob (27 samples, 0.21%)</title><rect x="99.7820%" y="421" width="0.2102%" height="15" fill="rgb(231,177,25)" fg:x="12816" fg:w="27"/><text x="100.0320%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (27 samples, 0.21%)</title><rect x="99.7820%" y="405" width="0.2102%" height="15" fill="rgb(219,179,1)" fg:x="12816" fg:w="27"/><text x="100.0320%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::OptimizeGraph (20 samples, 0.16%)</title><rect x="99.8365%" y="389" width="0.1557%" height="15" fill="rgb(238,219,53)" fg:x="12823" fg:w="20"/><text x="100.0865%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::SelectInstructions (5 samples, 0.04%)</title><rect x="99.9533%" y="373" width="0.0389%" height="15" fill="rgb(232,167,36)" fg:x="12838" fg:w="5"/><text x="100.2033%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (3 samples, 0.02%)</title><rect x="99.9689%" y="357" width="0.0234%" height="15" fill="rgb(244,19,51)" fg:x="12840" fg:w="3"/><text x="100.2189%" y="367.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (3 samples, 0.02%)</title><rect x="99.9689%" y="341" width="0.0234%" height="15" fill="rgb(224,6,22)" fg:x="12840" fg:w="3"/><text x="100.2189%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (3 samples, 0.02%)</title><rect x="99.9689%" y="325" width="0.0234%" height="15" fill="rgb(224,145,5)" fg:x="12840" fg:w="3"/><text x="100.2189%" y="335.50"></text></g><g><title>all (12,844 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="12844"/><text x="0.2500%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (30 samples, 0.23%)</title><rect x="99.7664%" y="517" width="0.2336%" height="15" fill="rgb(254,6,2)" fg:x="12814" fg:w="30"/><text x="100.0164%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (29 samples, 0.23%)</title><rect x="99.7742%" y="501" width="0.2258%" height="15" fill="rgb(208,96,46)" fg:x="12815" fg:w="29"/><text x="100.0242%" y="511.50"></text></g><g><title>http_bench_json_ops`v8::base::ThreadEntry (29 samples, 0.23%)</title><rect x="99.7742%" y="485" width="0.2258%" height="15" fill="rgb(239,3,39)" fg:x="12815" fg:w="29"/><text x="100.0242%" y="495.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (28 samples, 0.22%)</title><rect x="99.7820%" y="469" width="0.2180%" height="15" fill="rgb(233,210,1)" fg:x="12816" fg:w="28"/><text x="100.0320%" y="479.50"></text></g></svg></svg>