<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1205.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="4316"><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.0000%" y="949" width="0.0232%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.0000%" y="933" width="0.0232%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>deno`deno::proc_state::ProcState::prepare_module_load::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="917" width="0.0232%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>deno`deno::cache::parsed_source::ParsedSourceCache::as_analyzer (1 samples, 0.02%)</title><rect x="0.0000%" y="901" width="0.0232%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>deno`deno::cache::common::run_sqlite_pragma (1 samples, 0.02%)</title><rect x="0.0000%" y="885" width="0.0232%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>deno`rusqlite::Connection::execute_batch (1 samples, 0.02%)</title><rect x="0.0000%" y="869" width="0.0232%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>deno`rusqlite::Connection::prepare (1 samples, 0.02%)</title><rect x="0.0000%" y="853" width="0.0232%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50"></text></g><g><title>deno`rusqlite::inner_connection::InnerConnection::prepare (1 samples, 0.02%)</title><rect x="0.0000%" y="837" width="0.0232%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50"></text></g><g><title>deno`sqlite3LockAndPrepare (1 samples, 0.02%)</title><rect x="0.0000%" y="821" width="0.0232%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50"></text></g><g><title>deno`sqlite3Prepare (1 samples, 0.02%)</title><rect x="0.0000%" y="805" width="0.0232%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>deno`sqlite3RunParser (1 samples, 0.02%)</title><rect x="0.0000%" y="789" width="0.0232%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>deno`yy_reduce (1 samples, 0.02%)</title><rect x="0.0000%" y="773" width="0.0232%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>deno`sqlite3Pragma (1 samples, 0.02%)</title><rect x="0.0000%" y="757" width="0.0232%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>deno`sqlite3ReadSchema (1 samples, 0.02%)</title><rect x="0.0000%" y="741" width="0.0232%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>deno`sqlite3Init (1 samples, 0.02%)</title><rect x="0.0000%" y="725" width="0.0232%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>deno`sqlite3InitOne (1 samples, 0.02%)</title><rect x="0.0000%" y="709" width="0.0232%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>deno`sqlite3_exec (1 samples, 0.02%)</title><rect x="0.0000%" y="693" width="0.0232%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>deno`sqlite3InitCallback (1 samples, 0.02%)</title><rect x="0.0000%" y="677" width="0.0232%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>deno`sqlite3Prepare (1 samples, 0.02%)</title><rect x="0.0000%" y="661" width="0.0232%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>deno`sqlite3RunParser (1 samples, 0.02%)</title><rect x="0.0000%" y="645" width="0.0232%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (42 samples, 0.97%)</title><rect x="0.0463%" y="645" width="0.9731%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="42"/><text x="0.2963%" y="655.50"></text></g><g><title>deno`v8::String::WriteOneByte (42 samples, 0.97%)</title><rect x="0.0463%" y="629" width="0.9731%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="42"/><text x="0.2963%" y="639.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (42 samples, 0.97%)</title><rect x="0.0463%" y="613" width="0.9731%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="42"/><text x="0.2963%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.97%)</title><rect x="0.0463%" y="597" width="0.9731%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="42"/><text x="0.2963%" y="607.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (820 samples, 19.00%)</title><rect x="0.0232%" y="661" width="18.9991%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="820"/><text x="0.2732%" y="671.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R a..</text></g><g><title>deno`deno_web::forgiving_base64_decode (777 samples, 18.00%)</title><rect x="1.0195%" y="645" width="18.0028%" height="15" fill="rgb(249,31,29)" fg:x="44" fg:w="777"/><text x="1.2695%" y="655.50">deno`deno_web::forgiving_bas..</text></g><g><title>0x11004b410 (821 samples, 19.02%)</title><rect x="0.0232%" y="725" width="19.0222%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="821"/><text x="0.2732%" y="735.50">0x11004b410</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (821 samples, 19.02%)</title><rect x="0.0232%" y="709" width="19.0222%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="821"/><text x="0.2732%" y="719.50">deno`Builtins_CEntry_Return1_D..</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (821 samples, 19.02%)</title><rect x="0.0232%" y="693" width="19.0222%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="821"/><text x="0.2732%" y="703.50">deno`v8::internal::Builtin_Han..</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (821 samples, 19.02%)</title><rect x="0.0232%" y="677" width="19.0222%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="821"/><text x="0.2732%" y="687.50">deno`v8::internal::MaybeHandle..</text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (1 samples, 0.02%)</title><rect x="19.0222%" y="661" width="0.0232%" height="15" fill="rgb(209,103,24)" fg:x="821" fg:w="1"/><text x="19.2722%" y="671.50"></text></g><g><title>deno`v8::String::WriteOneByte (74 samples, 1.71%)</title><rect x="19.0454%" y="661" width="1.7146%" height="15" fill="rgb(229,88,8)" fg:x="822" fg:w="74"/><text x="19.2954%" y="671.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (74 samples, 1.71%)</title><rect x="19.0454%" y="645" width="1.7146%" height="15" fill="rgb(213,181,19)" fg:x="822" fg:w="74"/><text x="19.2954%" y="655.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (74 samples, 1.71%)</title><rect x="19.0454%" y="629" width="1.7146%" height="15" fill="rgb(254,191,54)" fg:x="822" fg:w="74"/><text x="19.2954%" y="639.50"></text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (75 samples, 1.74%)</title><rect x="19.0454%" y="677" width="1.7377%" height="15" fill="rgb(241,83,37)" fg:x="822" fg:w="75"/><text x="19.2954%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="20.7600%" y="661" width="0.0232%" height="15" fill="rgb(233,36,39)" fg:x="896" fg:w="1"/><text x="21.0100%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="20.7600%" y="645" width="0.0232%" height="15" fill="rgb(226,3,54)" fg:x="896" fg:w="1"/><text x="21.0100%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.02%)</title><rect x="20.7600%" y="629" width="0.0232%" height="15" fill="rgb(245,192,40)" fg:x="896" fg:w="1"/><text x="21.0100%" y="639.50"></text></g><g><title>0x11004bf10 (1,767 samples, 40.94%)</title><rect x="19.0454%" y="725" width="40.9407%" height="15" fill="rgb(238,167,29)" fg:x="822" fg:w="1767"/><text x="19.2954%" y="735.50">0x11004bf10</text></g><g><title>deno`Builtins_CallApiCallback (1,767 samples, 40.94%)</title><rect x="19.0454%" y="709" width="40.9407%" height="15" fill="rgb(232,182,51)" fg:x="822" fg:w="1767"/><text x="19.2954%" y="719.50">deno`Builtins_CallApiCallback</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1,767 samples, 40.94%)</title><rect x="19.0454%" y="693" width="40.9407%" height="15" fill="rgb(231,60,39)" fg:x="822" fg:w="1767"/><text x="19.2954%" y="703.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::..</text></g><g><title>deno`deno_web::forgiving_base64_decode (1,692 samples, 39.20%)</title><rect x="20.7831%" y="677" width="39.2030%" height="15" fill="rgb(208,69,12)" fg:x="897" fg:w="1692"/><text x="21.0331%" y="687.50">deno`deno_web::forgiving_base64_decode</text></g><g><title>0x11004b130 (2,589 samples, 59.99%)</title><rect x="0.0232%" y="741" width="59.9861%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="2589"/><text x="0.2732%" y="751.50">0x11004b130</text></g><g><title>deno`Builtins_LoadIC (1 samples, 0.02%)</title><rect x="59.9861%" y="725" width="0.0232%" height="15" fill="rgb(213,116,39)" fg:x="2589" fg:w="1"/><text x="60.2361%" y="735.50"></text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (36 samples, 0.83%)</title><rect x="60.0093%" y="693" width="0.8341%" height="15" fill="rgb(222,207,29)" fg:x="2590" fg:w="36"/><text x="60.2593%" y="703.50"></text></g><g><title>deno`v8::String::WriteOneByte (36 samples, 0.83%)</title><rect x="60.0093%" y="677" width="0.8341%" height="15" fill="rgb(206,96,30)" fg:x="2590" fg:w="36"/><text x="60.2593%" y="687.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (36 samples, 0.83%)</title><rect x="60.0093%" y="661" width="0.8341%" height="15" fill="rgb(218,138,4)" fg:x="2590" fg:w="36"/><text x="60.2593%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (36 samples, 0.83%)</title><rect x="60.0093%" y="645" width="0.8341%" height="15" fill="rgb(250,191,14)" fg:x="2590" fg:w="36"/><text x="60.2593%" y="655.50"></text></g><g><title>0x11004c160 (1,040 samples, 24.10%)</title><rect x="60.0093%" y="741" width="24.0964%" height="15" fill="rgb(239,60,40)" fg:x="2590" fg:w="1040"/><text x="60.2593%" y="751.50">0x11004c160</text></g><g><title>deno`Builtins_CallApiCallback (1,040 samples, 24.10%)</title><rect x="60.0093%" y="725" width="24.0964%" height="15" fill="rgb(206,27,48)" fg:x="2590" fg:w="1040"/><text x="60.2593%" y="735.50">deno`Builtins_CallApiCallback</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1,040 samples, 24.10%)</title><rect x="60.0093%" y="709" width="24.0964%" height="15" fill="rgb(225,35,8)" fg:x="2590" fg:w="1040"/><text x="60.2593%" y="719.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::su..</text></g><g><title>deno`deno_web::forgiving_base64_decode (1,004 samples, 23.26%)</title><rect x="60.8434%" y="693" width="23.2623%" height="15" fill="rgb(250,213,24)" fg:x="2626" fg:w="1004"/><text x="61.0934%" y="703.50">deno`deno_web::forgiving_base64_decode</text></g><g><title>0x11004a53c (3,630 samples, 84.11%)</title><rect x="0.0232%" y="757" width="84.1057%" height="15" fill="rgb(247,123,22)" fg:x="1" fg:w="3630"/><text x="0.2732%" y="767.50">0x11004a53c</text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (1 samples, 0.02%)</title><rect x="84.1057%" y="741" width="0.0232%" height="15" fill="rgb(231,138,38)" fg:x="3630" fg:w="1"/><text x="84.3557%" y="751.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (3,631 samples, 84.13%)</title><rect x="0.0232%" y="917" width="84.1288%" height="15" fill="rgb(231,145,46)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="927.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (3,631 samples, 84.13%)</title><rect x="0.0232%" y="901" width="84.1288%" height="15" fill="rgb(251,118,11)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="911.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (3,631 samples, 84.13%)</title><rect x="0.0232%" y="885" width="84.1288%" height="15" fill="rgb(217,147,25)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="895.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (3,631 samples, 84.13%)</title><rect x="0.0232%" y="869" width="84.1288%" height="15" fill="rgb(247,81,37)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="879.50">deno`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (3,631 samples, 84.13%)</title><rect x="0.0232%" y="853" width="84.1288%" height="15" fill="rgb(209,12,38)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="863.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (3,631 samples, 84.13%)</title><rect x="0.0232%" y="837" width="84.1288%" height="15" fill="rgb(227,1,9)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="847.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (3,631 samples, 84.13%)</title><rect x="0.0232%" y="821" width="84.1288%" height="15" fill="rgb(248,47,43)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="831.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (3,631 samples, 84.13%)</title><rect x="0.0232%" y="805" width="84.1288%" height="15" fill="rgb(221,10,30)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="815.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3,631 samples, 84.13%)</title><rect x="0.0232%" y="789" width="84.1288%" height="15" fill="rgb(210,229,1)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="799.50">deno`Builtins_InterpreterEntryTrampoline</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3,631 samples, 84.13%)</title><rect x="0.0232%" y="773" width="84.1288%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="3631"/><text x="0.2732%" y="783.50">deno`Builtins_InterpreterEntryTrampoline</text></g><g><title>0x11004a7b8 (1 samples, 0.02%)</title><rect x="84.1288%" y="757" width="0.0232%" height="15" fill="rgb(234,67,33)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="767.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.02%)</title><rect x="84.1288%" y="741" width="0.0232%" height="15" fill="rgb(247,98,35)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="751.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.02%)</title><rect x="84.1288%" y="725" width="0.0232%" height="15" fill="rgb(247,138,52)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="735.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.02%)</title><rect x="84.1288%" y="709" width="0.0232%" height="15" fill="rgb(213,79,30)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="719.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.02%)</title><rect x="84.1288%" y="693" width="0.0232%" height="15" fill="rgb(246,177,23)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="703.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (1 samples, 0.02%)</title><rect x="84.1288%" y="677" width="0.0232%" height="15" fill="rgb(230,62,27)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="687.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (1 samples, 0.02%)</title><rect x="84.1288%" y="661" width="0.0232%" height="15" fill="rgb(216,154,8)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="671.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.02%)</title><rect x="84.1288%" y="645" width="0.0232%" height="15" fill="rgb(244,35,45)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="655.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.02%)</title><rect x="84.1288%" y="629" width="0.0232%" height="15" fill="rgb(251,115,12)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="639.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.02%)</title><rect x="84.1288%" y="613" width="0.0232%" height="15" fill="rgb(240,54,50)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="623.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="84.1288%" y="597" width="0.0232%" height="15" fill="rgb(233,84,52)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="607.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="84.1288%" y="581" width="0.0232%" height="15" fill="rgb(207,117,47)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="591.50"></text></g><g><title>deno`Builtins_InvokeIntrinsicHandler (1 samples, 0.02%)</title><rect x="84.1288%" y="565" width="0.0232%" height="15" fill="rgb(249,43,39)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="575.50"></text></g><g><title>deno`Builtins_CopyDataProperties (1 samples, 0.02%)</title><rect x="84.1288%" y="549" width="0.0232%" height="15" fill="rgb(209,38,44)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="559.50"></text></g><g><title>deno`Builtins_CreateDataProperty (1 samples, 0.02%)</title><rect x="84.1288%" y="533" width="0.0232%" height="15" fill="rgb(236,212,23)" fg:x="3631" fg:w="1"/><text x="84.3788%" y="543.50"></text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (26 samples, 0.60%)</title><rect x="84.1520%" y="629" width="0.6024%" height="15" fill="rgb(242,79,21)" fg:x="3632" fg:w="26"/><text x="84.4020%" y="639.50"></text></g><g><title>deno`v8::String::WriteOneByte (26 samples, 0.60%)</title><rect x="84.1520%" y="613" width="0.6024%" height="15" fill="rgb(211,96,35)" fg:x="3632" fg:w="26"/><text x="84.4020%" y="623.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (26 samples, 0.60%)</title><rect x="84.1520%" y="597" width="0.6024%" height="15" fill="rgb(253,215,40)" fg:x="3632" fg:w="26"/><text x="84.4020%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.60%)</title><rect x="84.1520%" y="581" width="0.6024%" height="15" fill="rgb(211,81,21)" fg:x="3632" fg:w="26"/><text x="84.4020%" y="591.50"></text></g><g><title>0x11004a53c (634 samples, 14.69%)</title><rect x="84.1520%" y="741" width="14.6895%" height="15" fill="rgb(208,190,38)" fg:x="3632" fg:w="634"/><text x="84.4020%" y="751.50">0x11004a53c</text></g><g><title>0x11004b130 (634 samples, 14.69%)</title><rect x="84.1520%" y="725" width="14.6895%" height="15" fill="rgb(235,213,38)" fg:x="3632" fg:w="634"/><text x="84.4020%" y="735.50">0x11004b130</text></g><g><title>0x11004b410 (634 samples, 14.69%)</title><rect x="84.1520%" y="709" width="14.6895%" height="15" fill="rgb(237,122,38)" fg:x="3632" fg:w="634"/><text x="84.4020%" y="719.50">0x11004b410</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (634 samples, 14.69%)</title><rect x="84.1520%" y="693" width="14.6895%" height="15" fill="rgb(244,218,35)" fg:x="3632" fg:w="634"/><text x="84.4020%" y="703.50">deno`Builtins_CEntry_R..</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (634 samples, 14.69%)</title><rect x="84.1520%" y="677" width="14.6895%" height="15" fill="rgb(240,68,47)" fg:x="3632" fg:w="634"/><text x="84.4020%" y="687.50">deno`v8::internal::Bui..</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (634 samples, 14.69%)</title><rect x="84.1520%" y="661" width="14.6895%" height="15" fill="rgb(210,16,53)" fg:x="3632" fg:w="634"/><text x="84.4020%" y="671.50">deno`v8::internal::May..</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (634 samples, 14.69%)</title><rect x="84.1520%" y="645" width="14.6895%" height="15" fill="rgb(235,124,12)" fg:x="3632" fg:w="634"/><text x="84.4020%" y="655.50">deno`&lt;extern &quot;C&quot; fn(A0..</text></g><g><title>deno`deno_web::forgiving_base64_decode (608 samples, 14.09%)</title><rect x="84.7544%" y="629" width="14.0871%" height="15" fill="rgb(224,169,11)" fg:x="3658" fg:w="608"/><text x="85.0044%" y="639.50">deno`deno_web::forgiv..</text></g><g><title>0x11004b130 (1 samples, 0.02%)</title><rect x="98.8415%" y="725" width="0.0232%" height="15" fill="rgb(250,166,2)" fg:x="4266" fg:w="1"/><text x="99.0915%" y="735.50"></text></g><g><title>0x11004b410 (1 samples, 0.02%)</title><rect x="98.8415%" y="709" width="0.0232%" height="15" fill="rgb(242,216,29)" fg:x="4266" fg:w="1"/><text x="99.0915%" y="719.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.02%)</title><rect x="98.8415%" y="693" width="0.0232%" height="15" fill="rgb(230,116,27)" fg:x="4266" fg:w="1"/><text x="99.0915%" y="703.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.02%)</title><rect x="98.8415%" y="677" width="0.0232%" height="15" fill="rgb(228,99,48)" fg:x="4266" fg:w="1"/><text x="99.0915%" y="687.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.02%)</title><rect x="98.8415%" y="661" width="0.0232%" height="15" fill="rgb(253,11,6)" fg:x="4266" fg:w="1"/><text x="99.0915%" y="671.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.02%)</title><rect x="98.8415%" y="645" width="0.0232%" height="15" fill="rgb(247,143,39)" fg:x="4266" fg:w="1"/><text x="99.0915%" y="655.50"></text></g><g><title>deno`deno_web::forgiving_base64_decode (1 samples, 0.02%)</title><rect x="98.8415%" y="629" width="0.0232%" height="15" fill="rgb(236,97,10)" fg:x="4266" fg:w="1"/><text x="99.0915%" y="639.50"></text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (1 samples, 0.02%)</title><rect x="98.8647%" y="661" width="0.0232%" height="15" fill="rgb(233,208,19)" fg:x="4267" fg:w="1"/><text x="99.1147%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="98.8647%" y="645" width="0.0232%" height="15" fill="rgb(216,164,2)" fg:x="4267" fg:w="1"/><text x="99.1147%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.8647%" y="629" width="0.0232%" height="15" fill="rgb(220,129,5)" fg:x="4267" fg:w="1"/><text x="99.1147%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.8647%" y="613" width="0.0232%" height="15" fill="rgb(242,17,10)" fg:x="4267" fg:w="1"/><text x="99.1147%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.02%)</title><rect x="98.8647%" y="597" width="0.0232%" height="15" fill="rgb(242,107,0)" fg:x="4267" fg:w="1"/><text x="99.1147%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="98.8647%" y="581" width="0.0232%" height="15" fill="rgb(251,28,31)" fg:x="4267" fg:w="1"/><text x="99.1147%" y="591.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.05%)</title><rect x="98.8647%" y="725" width="0.0463%" height="15" fill="rgb(233,223,10)" fg:x="4267" fg:w="2"/><text x="99.1147%" y="735.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (2 samples, 0.05%)</title><rect x="98.8647%" y="709" width="0.0463%" height="15" fill="rgb(215,21,27)" fg:x="4267" fg:w="2"/><text x="99.1147%" y="719.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2 samples, 0.05%)</title><rect x="98.8647%" y="693" width="0.0463%" height="15" fill="rgb(232,23,21)" fg:x="4267" fg:w="2"/><text x="99.1147%" y="703.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.05%)</title><rect x="98.8647%" y="677" width="0.0463%" height="15" fill="rgb(244,5,23)" fg:x="4267" fg:w="2"/><text x="99.1147%" y="687.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.02%)</title><rect x="98.8879%" y="661" width="0.0232%" height="15" fill="rgb(226,81,46)" fg:x="4268" fg:w="1"/><text x="99.1379%" y="671.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::new_from_utf8 (1 samples, 0.02%)</title><rect x="98.8879%" y="645" width="0.0232%" height="15" fill="rgb(247,70,30)" fg:x="4268" fg:w="1"/><text x="99.1379%" y="655.50"></text></g><g><title>deno`v8::String::NewFromUtf8 (1 samples, 0.02%)</title><rect x="98.8879%" y="629" width="0.0232%" height="15" fill="rgb(212,68,19)" fg:x="4268" fg:w="1"/><text x="99.1379%" y="639.50"></text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (1 samples, 0.02%)</title><rect x="98.8879%" y="613" width="0.0232%" height="15" fill="rgb(240,187,13)" fg:x="4268" fg:w="1"/><text x="99.1379%" y="623.50"></text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (1 samples, 0.02%)</title><rect x="98.8879%" y="597" width="0.0232%" height="15" fill="rgb(223,113,26)" fg:x="4268" fg:w="1"/><text x="99.1379%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="98.8879%" y="581" width="0.0232%" height="15" fill="rgb(206,192,2)" fg:x="4268" fg:w="1"/><text x="99.1379%" y="591.50"></text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (1 samples, 0.02%)</title><rect x="98.9110%" y="629" width="0.0232%" height="15" fill="rgb(241,108,4)" fg:x="4269" fg:w="1"/><text x="99.1610%" y="639.50"></text></g><g><title>deno`v8::String::WriteOneByte (1 samples, 0.02%)</title><rect x="98.9110%" y="613" width="0.0232%" height="15" fill="rgb(247,173,49)" fg:x="4269" fg:w="1"/><text x="99.1610%" y="623.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (1 samples, 0.02%)</title><rect x="98.9110%" y="597" width="0.0232%" height="15" fill="rgb(224,114,35)" fg:x="4269" fg:w="1"/><text x="99.1610%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="98.9110%" y="581" width="0.0232%" height="15" fill="rgb(245,159,27)" fg:x="4269" fg:w="1"/><text x="99.1610%" y="591.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,307 samples, 99.79%)</title><rect x="0.0000%" y="997" width="99.7915%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="4307"/><text x="0.2500%" y="1007.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,307 samples, 99.79%)</title><rect x="0.0000%" y="981" width="99.7915%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="4307"/><text x="0.2500%" y="991.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,307 samples, 99.79%)</title><rect x="0.0000%" y="965" width="99.7915%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="4307"/><text x="0.2500%" y="975.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (4,306 samples, 99.77%)</title><rect x="0.0232%" y="949" width="99.7683%" height="15" fill="rgb(237,72,25)" fg:x="1" fg:w="4306"/><text x="0.2732%" y="959.50">deno`deno_core::runtime::JsRuntime::mod_evaluate</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (4,306 samples, 99.77%)</title><rect x="0.0232%" y="933" width="99.7683%" height="15" fill="rgb(244,70,9)" fg:x="1" fg:w="4306"/><text x="0.2732%" y="943.50">deno`v8::Module::Evaluate(v8::Local</text></g><g><title>deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle (675 samples, 15.64%)</title><rect x="84.1520%" y="917" width="15.6395%" height="15" fill="rgb(217,125,39)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="927.50">deno`v8::internal::Modul..</text></g><g><title>deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle (675 samples, 15.64%)</title><rect x="84.1520%" y="901" width="15.6395%" height="15" fill="rgb(235,36,10)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="911.50">deno`v8::internal::Sourc..</text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (675 samples, 15.64%)</title><rect x="84.1520%" y="885" width="15.6395%" height="15" fill="rgb(251,123,47)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="895.50">deno`v8::internal::Sourc..</text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (675 samples, 15.64%)</title><rect x="84.1520%" y="869" width="15.6395%" height="15" fill="rgb(221,13,13)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="879.50">deno`v8::internal::Sourc..</text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (675 samples, 15.64%)</title><rect x="84.1520%" y="853" width="15.6395%" height="15" fill="rgb(238,131,9)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="863.50">deno`v8::internal::Execu..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (675 samples, 15.64%)</title><rect x="84.1520%" y="837" width="15.6395%" height="15" fill="rgb(211,50,8)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="847.50">deno`v8::internal::(anon..</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (675 samples, 15.64%)</title><rect x="84.1520%" y="821" width="15.6395%" height="15" fill="rgb(245,182,24)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="831.50">deno`v8::internal::(anon..</text></g><g><title>deno`Builtins_JSEntry (675 samples, 15.64%)</title><rect x="84.1520%" y="805" width="15.6395%" height="15" fill="rgb(242,14,37)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="815.50">deno`Builtins_JSEntry</text></g><g><title>deno`Builtins_JSEntryTrampoline (675 samples, 15.64%)</title><rect x="84.1520%" y="789" width="15.6395%" height="15" fill="rgb(246,228,12)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="799.50">deno`Builtins_JSEntryTra..</text></g><g><title>deno`Builtins_GeneratorPrototypeNext (675 samples, 15.64%)</title><rect x="84.1520%" y="773" width="15.6395%" height="15" fill="rgb(213,55,15)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="783.50">deno`Builtins_GeneratorP..</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (675 samples, 15.64%)</title><rect x="84.1520%" y="757" width="15.6395%" height="15" fill="rgb(209,9,3)" fg:x="3632" fg:w="675"/><text x="84.4020%" y="767.50">deno`Builtins_Interprete..</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (41 samples, 0.95%)</title><rect x="98.8415%" y="741" width="0.9500%" height="15" fill="rgb(230,59,30)" fg:x="4266" fg:w="41"/><text x="99.0915%" y="751.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (38 samples, 0.88%)</title><rect x="98.9110%" y="725" width="0.8804%" height="15" fill="rgb(209,121,21)" fg:x="4269" fg:w="38"/><text x="99.1610%" y="735.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (38 samples, 0.88%)</title><rect x="98.9110%" y="709" width="0.8804%" height="15" fill="rgb(220,109,13)" fg:x="4269" fg:w="38"/><text x="99.1610%" y="719.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (38 samples, 0.88%)</title><rect x="98.9110%" y="693" width="0.8804%" height="15" fill="rgb(232,18,1)" fg:x="4269" fg:w="38"/><text x="99.1610%" y="703.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (38 samples, 0.88%)</title><rect x="98.9110%" y="677" width="0.8804%" height="15" fill="rgb(215,41,42)" fg:x="4269" fg:w="38"/><text x="99.1610%" y="687.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (38 samples, 0.88%)</title><rect x="98.9110%" y="661" width="0.8804%" height="15" fill="rgb(224,123,36)" fg:x="4269" fg:w="38"/><text x="99.1610%" y="671.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (38 samples, 0.88%)</title><rect x="98.9110%" y="645" width="0.8804%" height="15" fill="rgb(240,125,3)" fg:x="4269" fg:w="38"/><text x="99.1610%" y="655.50"></text></g><g><title>deno`deno_web::forgiving_base64_decode (37 samples, 0.86%)</title><rect x="98.9342%" y="629" width="0.8573%" height="15" fill="rgb(205,98,50)" fg:x="4270" fg:w="37"/><text x="99.1842%" y="639.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="853" width="0.0232%" height="15" fill="rgb(205,185,37)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="99.7915%" y="837" width="0.0232%" height="15" fill="rgb(238,207,15)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="821" width="0.0232%" height="15" fill="rgb(213,199,42)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="805" width="0.0232%" height="15" fill="rgb(235,201,11)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="789" width="0.0232%" height="15" fill="rgb(207,46,11)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="99.7915%" y="773" width="0.0232%" height="15" fill="rgb(241,35,35)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="757" width="0.0232%" height="15" fill="rgb(243,32,47)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="741" width="0.0232%" height="15" fill="rgb(247,202,23)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="751.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="725" width="0.0232%" height="15" fill="rgb(219,102,11)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="735.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="99.7915%" y="709" width="0.0232%" height="15" fill="rgb(243,110,44)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="719.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="693" width="0.0232%" height="15" fill="rgb(222,74,54)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="703.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="677" width="0.0232%" height="15" fill="rgb(216,99,12)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="687.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="661" width="0.0232%" height="15" fill="rgb(226,22,26)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="671.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="99.7915%" y="645" width="0.0232%" height="15" fill="rgb(217,163,10)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="655.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="629" width="0.0232%" height="15" fill="rgb(213,25,53)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="639.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="613" width="0.0232%" height="15" fill="rgb(252,105,26)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="623.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="597" width="0.0232%" height="15" fill="rgb(220,39,43)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="607.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="581" width="0.0232%" height="15" fill="rgb(229,68,48)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="591.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="565" width="0.0232%" height="15" fill="rgb(252,8,32)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="575.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="549" width="0.0232%" height="15" fill="rgb(223,20,43)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="559.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="533" width="0.0232%" height="15" fill="rgb(229,81,49)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="543.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="517" width="0.0232%" height="15" fill="rgb(236,28,36)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="527.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="501" width="0.0232%" height="15" fill="rgb(249,185,26)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="511.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="485" width="0.0232%" height="15" fill="rgb(249,174,33)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="495.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="469" width="0.0232%" height="15" fill="rgb(233,201,37)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="479.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="453" width="0.0232%" height="15" fill="rgb(221,78,26)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="463.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="437" width="0.0232%" height="15" fill="rgb(250,127,30)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="447.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="421" width="0.0232%" height="15" fill="rgb(230,49,44)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="431.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="405" width="0.0232%" height="15" fill="rgb(229,67,23)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="415.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="389" width="0.0232%" height="15" fill="rgb(249,83,47)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="399.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="373" width="0.0232%" height="15" fill="rgb(215,43,3)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="383.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="357" width="0.0232%" height="15" fill="rgb(238,154,13)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="367.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="341" width="0.0232%" height="15" fill="rgb(219,56,2)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="351.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="325" width="0.0232%" height="15" fill="rgb(233,0,4)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="335.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="309" width="0.0232%" height="15" fill="rgb(235,30,7)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="319.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="293" width="0.0232%" height="15" fill="rgb(250,79,13)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="303.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="277" width="0.0232%" height="15" fill="rgb(211,146,34)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="287.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="261" width="0.0232%" height="15" fill="rgb(228,22,38)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="271.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="245" width="0.0232%" height="15" fill="rgb(235,168,5)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="255.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="229" width="0.0232%" height="15" fill="rgb(221,155,16)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="239.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="213" width="0.0232%" height="15" fill="rgb(215,215,53)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="223.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="197" width="0.0232%" height="15" fill="rgb(223,4,10)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="207.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="181" width="0.0232%" height="15" fill="rgb(234,103,6)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="191.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="165" width="0.0232%" height="15" fill="rgb(227,97,0)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="175.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="149" width="0.0232%" height="15" fill="rgb(234,150,53)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="159.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="133" width="0.0232%" height="15" fill="rgb(228,201,54)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="143.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="117" width="0.0232%" height="15" fill="rgb(222,22,37)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="127.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="101" width="0.0232%" height="15" fill="rgb(237,53,32)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="111.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="85" width="0.0232%" height="15" fill="rgb(233,25,53)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="95.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="69" width="0.0232%" height="15" fill="rgb(210,40,34)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="79.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.7915%" y="53" width="0.0232%" height="15" fill="rgb(241,220,44)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="63.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadRepeatedObject&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.7915%" y="37" width="0.0232%" height="15" fill="rgb(235,28,35)" fg:x="4307" fg:w="1"/><text x="100.0415%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.05%)</title><rect x="99.7915%" y="965" width="0.0463%" height="15" fill="rgb(210,56,17)" fg:x="4307" fg:w="2"/><text x="100.0415%" y="975.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.05%)</title><rect x="99.7915%" y="949" width="0.0463%" height="15" fill="rgb(224,130,29)" fg:x="4307" fg:w="2"/><text x="100.0415%" y="959.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.05%)</title><rect x="99.7915%" y="933" width="0.0463%" height="15" fill="rgb(235,212,8)" fg:x="4307" fg:w="2"/><text x="100.0415%" y="943.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.05%)</title><rect x="99.7915%" y="917" width="0.0463%" height="15" fill="rgb(223,33,50)" fg:x="4307" fg:w="2"/><text x="100.0415%" y="927.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.05%)</title><rect x="99.7915%" y="901" width="0.0463%" height="15" fill="rgb(219,149,13)" fg:x="4307" fg:w="2"/><text x="100.0415%" y="911.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.05%)</title><rect x="99.7915%" y="885" width="0.0463%" height="15" fill="rgb(250,156,29)" fg:x="4307" fg:w="2"/><text x="100.0415%" y="895.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.05%)</title><rect x="99.7915%" y="869" width="0.0463%" height="15" fill="rgb(216,193,19)" fg:x="4307" fg:w="2"/><text x="100.0415%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.02%)</title><rect x="99.8146%" y="853" width="0.0232%" height="15" fill="rgb(216,135,14)" fg:x="4308" fg:w="1"/><text x="100.0646%" y="863.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.02%)</title><rect x="99.8146%" y="837" width="0.0232%" height="15" fill="rgb(241,47,5)" fg:x="4308" fg:w="1"/><text x="100.0646%" y="847.50"></text></g><g><title>deno`v8::internal::HashTable&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Rehash (1 samples, 0.02%)</title><rect x="99.8146%" y="821" width="0.0232%" height="15" fill="rgb(233,42,35)" fg:x="4308" fg:w="1"/><text x="100.0646%" y="831.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.09%)</title><rect x="99.7915%" y="981" width="0.0927%" height="15" fill="rgb(231,13,6)" fg:x="4307" fg:w="4"/><text x="100.0415%" y="991.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.05%)</title><rect x="99.8378%" y="965" width="0.0463%" height="15" fill="rgb(207,181,40)" fg:x="4309" fg:w="2"/><text x="100.0878%" y="975.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.05%)</title><rect x="99.8378%" y="949" width="0.0463%" height="15" fill="rgb(254,173,49)" fg:x="4309" fg:w="2"/><text x="100.0878%" y="959.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.05%)</title><rect x="99.8378%" y="933" width="0.0463%" height="15" fill="rgb(221,1,38)" fg:x="4309" fg:w="2"/><text x="100.0878%" y="943.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.05%)</title><rect x="99.8378%" y="917" width="0.0463%" height="15" fill="rgb(206,124,46)" fg:x="4309" fg:w="2"/><text x="100.0878%" y="927.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.05%)</title><rect x="99.8378%" y="901" width="0.0463%" height="15" fill="rgb(249,21,11)" fg:x="4309" fg:w="2"/><text x="100.0878%" y="911.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.02%)</title><rect x="99.8610%" y="885" width="0.0232%" height="15" fill="rgb(222,201,40)" fg:x="4310" fg:w="1"/><text x="100.1110%" y="895.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.02%)</title><rect x="99.8610%" y="869" width="0.0232%" height="15" fill="rgb(235,61,29)" fg:x="4310" fg:w="1"/><text x="100.1110%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.02%)</title><rect x="99.8610%" y="853" width="0.0232%" height="15" fill="rgb(219,207,3)" fg:x="4310" fg:w="1"/><text x="100.1110%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.02%)</title><rect x="99.8610%" y="837" width="0.0232%" height="15" fill="rgb(222,56,46)" fg:x="4310" fg:w="1"/><text x="100.1110%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.8610%" y="821" width="0.0232%" height="15" fill="rgb(239,76,54)" fg:x="4310" fg:w="1"/><text x="100.1110%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.8610%" y="805" width="0.0232%" height="15" fill="rgb(231,124,27)" fg:x="4310" fg:w="1"/><text x="100.1110%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="99.8610%" y="789" width="0.0232%" height="15" fill="rgb(249,195,6)" fg:x="4310" fg:w="1"/><text x="100.1110%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="99.8610%" y="773" width="0.0232%" height="15" fill="rgb(237,174,47)" fg:x="4310" fg:w="1"/><text x="100.1110%" y="783.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="99.8610%" y="757" width="0.0232%" height="15" fill="rgb(206,201,31)" fg:x="4310" fg:w="1"/><text x="100.1110%" y="767.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.02%)</title><rect x="99.8842%" y="981" width="0.0232%" height="15" fill="rgb(231,57,52)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="991.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.02%)</title><rect x="99.8842%" y="965" width="0.0232%" height="15" fill="rgb(248,177,22)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="975.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.02%)</title><rect x="99.8842%" y="949" width="0.0232%" height="15" fill="rgb(215,211,37)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="959.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.02%)</title><rect x="99.8842%" y="933" width="0.0232%" height="15" fill="rgb(241,128,51)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="943.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.02%)</title><rect x="99.8842%" y="917" width="0.0232%" height="15" fill="rgb(227,165,31)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="927.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.02%)</title><rect x="99.8842%" y="901" width="0.0232%" height="15" fill="rgb(228,167,24)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="911.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.02%)</title><rect x="99.8842%" y="885" width="0.0232%" height="15" fill="rgb(228,143,12)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="895.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.02%)</title><rect x="99.8842%" y="869" width="0.0232%" height="15" fill="rgb(249,149,8)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="99.8842%" y="853" width="0.0232%" height="15" fill="rgb(243,35,44)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="99.8842%" y="837" width="0.0232%" height="15" fill="rgb(246,89,9)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="847.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.02%)</title><rect x="99.8842%" y="821" width="0.0232%" height="15" fill="rgb(233,213,13)" fg:x="4311" fg:w="1"/><text x="100.1342%" y="831.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,313 samples, 99.93%)</title><rect x="0.0000%" y="1077" width="99.9305%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="4313"/><text x="0.2500%" y="1087.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::main::_{{closure}} (4,313 samples, 99.93%)</title><rect x="0.0000%" y="1061" width="99.9305%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="4313"/><text x="0.2500%" y="1071.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,313 samples, 99.93%)</title><rect x="0.0000%" y="1045" width="99.9305%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="4313"/><text x="0.2500%" y="1055.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (4,313 samples, 99.93%)</title><rect x="0.0000%" y="1029" width="99.9305%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="4313"/><text x="0.2500%" y="1039.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,313 samples, 99.93%)</title><rect x="0.0000%" y="1013" width="99.9305%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="4313"/><text x="0.2500%" y="1023.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (6 samples, 0.14%)</title><rect x="99.7915%" y="997" width="0.1390%" height="15" fill="rgb(230,90,52)" fg:x="4307" fg:w="6"/><text x="100.0415%" y="1007.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.02%)</title><rect x="99.9073%" y="981" width="0.0232%" height="15" fill="rgb(252,106,19)" fg:x="4312" fg:w="1"/><text x="100.1573%" y="991.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.02%)</title><rect x="99.9073%" y="965" width="0.0232%" height="15" fill="rgb(206,74,20)" fg:x="4312" fg:w="1"/><text x="100.1573%" y="975.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.02%)</title><rect x="99.9073%" y="949" width="0.0232%" height="15" fill="rgb(230,138,44)" fg:x="4312" fg:w="1"/><text x="100.1573%" y="959.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.02%)</title><rect x="99.9073%" y="933" width="0.0232%" height="15" fill="rgb(235,182,43)" fg:x="4312" fg:w="1"/><text x="100.1573%" y="943.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.02%)</title><rect x="99.9073%" y="917" width="0.0232%" height="15" fill="rgb(242,16,51)" fg:x="4312" fg:w="1"/><text x="100.1573%" y="927.50"></text></g><g><title>dyld`start (4,314 samples, 99.95%)</title><rect x="0.0000%" y="1157" width="99.9537%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="4314"/><text x="0.2500%" y="1167.50">dyld`start</text></g><g><title>deno`main (4,314 samples, 99.95%)</title><rect x="0.0000%" y="1141" width="99.9537%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="4314"/><text x="0.2500%" y="1151.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (4,314 samples, 99.95%)</title><rect x="0.0000%" y="1125" width="99.9537%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="4314"/><text x="0.2500%" y="1135.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (4,314 samples, 99.95%)</title><rect x="0.0000%" y="1109" width="99.9537%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="4314"/><text x="0.2500%" y="1119.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (4,314 samples, 99.95%)</title><rect x="0.0000%" y="1093" width="99.9537%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="4314"/><text x="0.2500%" y="1103.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::park (1 samples, 0.02%)</title><rect x="99.9305%" y="1077" width="0.0232%" height="15" fill="rgb(213,46,41)" fg:x="4313" fg:w="1"/><text x="100.1805%" y="1087.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (1 samples, 0.02%)</title><rect x="99.9305%" y="1061" width="0.0232%" height="15" fill="rgb(215,133,35)" fg:x="4313" fg:w="1"/><text x="100.1805%" y="1071.50"></text></g><g><title>deno`tokio::io::driver::Driver::turn (1 samples, 0.02%)</title><rect x="99.9305%" y="1045" width="0.0232%" height="15" fill="rgb(213,28,5)" fg:x="4313" fg:w="1"/><text x="100.1805%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.02%)</title><rect x="99.9305%" y="1029" width="0.0232%" height="15" fill="rgb(215,77,49)" fg:x="4313" fg:w="1"/><text x="100.1805%" y="1039.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (1 samples, 0.02%)</title><rect x="99.9537%" y="1013" width="0.0232%" height="15" fill="rgb(248,100,22)" fg:x="4314" fg:w="1"/><text x="100.2037%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::EarlyOptimizationPhase::Run (1 samples, 0.02%)</title><rect x="99.9537%" y="997" width="0.0232%" height="15" fill="rgb(208,67,9)" fg:x="4314" fg:w="1"/><text x="100.2037%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.02%)</title><rect x="99.9537%" y="981" width="0.0232%" height="15" fill="rgb(219,133,21)" fg:x="4314" fg:w="1"/><text x="100.2037%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.02%)</title><rect x="99.9537%" y="965" width="0.0232%" height="15" fill="rgb(246,46,29)" fg:x="4314" fg:w="1"/><text x="100.2037%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.02%)</title><rect x="99.9537%" y="949" width="0.0232%" height="15" fill="rgb(246,185,52)" fg:x="4314" fg:w="1"/><text x="100.2037%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::RedundancyElimination::TakeChecksFromFirstEffect (1 samples, 0.02%)</title><rect x="99.9537%" y="933" width="0.0232%" height="15" fill="rgb(252,136,11)" fg:x="4314" fg:w="1"/><text x="100.2037%" y="943.50"></text></g><g><title>deno`std::__1::vector&lt;v8::internal::compiler::RedundancyElimination::EffectPathChecks const*, v8::internal::ZoneAllocator&lt;v8::internal::compiler::RedundancyElimination::EffectPathChecks const*&gt; &gt;::__append (1 samples, 0.02%)</title><rect x="99.9537%" y="917" width="0.0232%" height="15" fill="rgb(219,138,53)" fg:x="4314" fg:w="1"/><text x="100.2037%" y="927.50"></text></g><g><title>all (4,316 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(211,51,23)" fg:x="0" fg:w="4316"/><text x="0.2500%" y="1183.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (2 samples, 0.05%)</title><rect x="99.9537%" y="1157" width="0.0463%" height="15" fill="rgb(247,221,28)" fg:x="4314" fg:w="2"/><text x="100.2037%" y="1167.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (2 samples, 0.05%)</title><rect x="99.9537%" y="1141" width="0.0463%" height="15" fill="rgb(251,222,45)" fg:x="4314" fg:w="2"/><text x="100.2037%" y="1151.50"></text></g><g><title>deno`v8::base::ThreadEntry (2 samples, 0.05%)</title><rect x="99.9537%" y="1125" width="0.0463%" height="15" fill="rgb(217,162,53)" fg:x="4314" fg:w="2"/><text x="100.2037%" y="1135.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (2 samples, 0.05%)</title><rect x="99.9537%" y="1109" width="0.0463%" height="15" fill="rgb(229,93,14)" fg:x="4314" fg:w="2"/><text x="100.2037%" y="1119.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (2 samples, 0.05%)</title><rect x="99.9537%" y="1093" width="0.0463%" height="15" fill="rgb(209,67,49)" fg:x="4314" fg:w="2"/><text x="100.2037%" y="1103.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (2 samples, 0.05%)</title><rect x="99.9537%" y="1077" width="0.0463%" height="15" fill="rgb(213,87,29)" fg:x="4314" fg:w="2"/><text x="100.2037%" y="1087.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (2 samples, 0.05%)</title><rect x="99.9537%" y="1061" width="0.0463%" height="15" fill="rgb(205,151,52)" fg:x="4314" fg:w="2"/><text x="100.2037%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (2 samples, 0.05%)</title><rect x="99.9537%" y="1045" width="0.0463%" height="15" fill="rgb(253,215,39)" fg:x="4314" fg:w="2"/><text x="100.2037%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (2 samples, 0.05%)</title><rect x="99.9537%" y="1029" width="0.0463%" height="15" fill="rgb(221,220,41)" fg:x="4314" fg:w="2"/><text x="100.2037%" y="1039.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (1 samples, 0.02%)</title><rect x="99.9768%" y="1013" width="0.0232%" height="15" fill="rgb(218,133,21)" fg:x="4315" fg:w="1"/><text x="100.2268%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (1 samples, 0.02%)</title><rect x="99.9768%" y="997" width="0.0232%" height="15" fill="rgb(221,193,43)" fg:x="4315" fg:w="1"/><text x="100.2268%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.02%)</title><rect x="99.9768%" y="981" width="0.0232%" height="15" fill="rgb(240,128,52)" fg:x="4315" fg:w="1"/><text x="100.2268%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.02%)</title><rect x="99.9768%" y="965" width="0.0232%" height="15" fill="rgb(253,114,12)" fg:x="4315" fg:w="1"/><text x="100.2268%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.02%)</title><rect x="99.9768%" y="949" width="0.0232%" height="15" fill="rgb(215,223,47)" fg:x="4315" fg:w="1"/><text x="100.2268%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (1 samples, 0.02%)</title><rect x="99.9768%" y="933" width="0.0232%" height="15" fill="rgb(248,225,23)" fg:x="4315" fg:w="1"/><text x="100.2268%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::HashCode (1 samples, 0.02%)</title><rect x="99.9768%" y="917" width="0.0232%" height="15" fill="rgb(250,108,0)" fg:x="4315" fg:w="1"/><text x="100.2268%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::Operator1&lt;v8::internal::compiler::FrameStateInfo, v8::internal::compiler::OpEqualTo&lt;v8::internal::compiler::FrameStateInfo&gt;, v8::internal::compiler::OpHash&lt;v8::internal::compiler::FrameStateInfo&gt; &gt;::HashCode (1 samples, 0.02%)</title><rect x="99.9768%" y="901" width="0.0232%" height="15" fill="rgb(228,208,7)" fg:x="4315" fg:w="1"/><text x="100.2268%" y="911.50"></text></g><g><title>deno`v8::base::hash_combine (1 samples, 0.02%)</title><rect x="99.9768%" y="885" width="0.0232%" height="15" fill="rgb(244,45,10)" fg:x="4315" fg:w="1"/><text x="100.2268%" y="895.50"></text></g></svg></svg>