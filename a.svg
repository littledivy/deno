<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1302" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1285.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1285.00"> </text><svg id="frames" x="10" width="1180" total_samples="8817"><g><title>deno`OUTLINED_FUNCTION_1468 (1 samples, 0.01%)</title><rect x="0.0000%" y="1173" width="0.0113%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50"></text></g><g><title>deno`OUTLINED_FUNCTION_15903 (1 samples, 0.01%)</title><rect x="0.0113%" y="1173" width="0.0113%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2613%" y="1183.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (2 samples, 0.02%)</title><rect x="0.0340%" y="1093" width="0.0227%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="2"/><text x="0.2840%" y="1103.50"></text></g><g><title>deno`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 0.03%)</title><rect x="0.0340%" y="1125" width="0.0340%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="3"/><text x="0.2840%" y="1135.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (3 samples, 0.03%)</title><rect x="0.0340%" y="1109" width="0.0340%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="3"/><text x="0.2840%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (1 samples, 0.01%)</title><rect x="0.0567%" y="1093" width="0.0113%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.3067%" y="1103.50"></text></g><g><title>deno`tokio::task::local::Shared::schedule (13 samples, 0.15%)</title><rect x="0.5557%" y="1077" width="0.1474%" height="15" fill="rgb(207,160,47)" fg:x="49" fg:w="13"/><text x="0.8057%" y="1087.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (11 samples, 0.12%)</title><rect x="0.5784%" y="1061" width="0.1248%" height="15" fill="rgb(228,23,34)" fg:x="51" fg:w="11"/><text x="0.8284%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`kevent (11 samples, 0.12%)</title><rect x="0.5784%" y="1045" width="0.1248%" height="15" fill="rgb(218,30,26)" fg:x="51" fg:w="11"/><text x="0.8284%" y="1055.50"></text></g><g><title>deno`tokio::runtime::task::waker::wake_by_val (30 samples, 0.34%)</title><rect x="0.4764%" y="1093" width="0.3403%" height="15" fill="rgb(220,122,19)" fg:x="42" fg:w="30"/><text x="0.7264%" y="1103.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.11%)</title><rect x="0.7032%" y="1077" width="0.1134%" height="15" fill="rgb(250,228,42)" fg:x="62" fg:w="10"/><text x="0.9532%" y="1087.50"></text></g><g><title>deno`tokio::runtime::io::scheduled_io::ScheduledIo::wake (48 samples, 0.54%)</title><rect x="0.2835%" y="1109" width="0.5444%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="48"/><text x="0.5335%" y="1119.50"></text></g><g><title>deno`tokio::task::local::Shared::schedule (1 samples, 0.01%)</title><rect x="0.8166%" y="1093" width="0.0113%" height="15" fill="rgb(216,20,37)" fg:x="72" fg:w="1"/><text x="1.0666%" y="1103.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (68 samples, 0.77%)</title><rect x="0.0681%" y="1125" width="0.7712%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="68"/><text x="0.3181%" y="1135.50"></text></g><g><title>deno`tokio::runtime::task::waker::wake_by_val (1 samples, 0.01%)</title><rect x="0.8279%" y="1109" width="0.0113%" height="15" fill="rgb(217,207,13)" fg:x="73" fg:w="1"/><text x="1.0779%" y="1119.50"></text></g><g><title>deno`tokio::runtime::io::scheduled_io::ScheduledIo::wake (7 samples, 0.08%)</title><rect x="0.8393%" y="1125" width="0.0794%" height="15" fill="rgb(231,73,38)" fg:x="74" fg:w="7"/><text x="1.0893%" y="1135.50"></text></g><g><title>deno`tokio::runtime::time::Driver::park_internal (364 samples, 4.13%)</title><rect x="0.0227%" y="1141" width="4.1284%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="364"/><text x="0.2727%" y="1151.50">deno..</text></g><g><title>libsystem_kernel.dylib`kevent (285 samples, 3.23%)</title><rect x="0.9187%" y="1125" width="3.2324%" height="15" fill="rgb(210,31,41)" fg:x="81" fg:w="285"/><text x="1.1687%" y="1135.50">lib..</text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Context::park (365 samples, 4.14%)</title><rect x="0.0227%" y="1157" width="4.1397%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="365"/><text x="0.2727%" y="1167.50">deno`..</text></g><g><title>deno`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.01%)</title><rect x="4.1511%" y="1141" width="0.0113%" height="15" fill="rgb(226,26,5)" fg:x="366" fg:w="1"/><text x="4.4011%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_14397 (1 samples, 0.01%)</title><rect x="4.1738%" y="1125" width="0.0113%" height="15" fill="rgb(249,33,26)" fg:x="368" fg:w="1"/><text x="4.4238%" y="1135.50"></text></g><g><title>deno`deno::args::flags::flags_from_vec (1 samples, 0.01%)</title><rect x="4.1851%" y="1125" width="0.0113%" height="15" fill="rgb(235,183,28)" fg:x="369" fg:w="1"/><text x="4.4351%" y="1135.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;clap::builder::command::Command&gt; (1 samples, 0.01%)</title><rect x="4.1851%" y="1109" width="0.0113%" height="15" fill="rgb(221,5,38)" fg:x="369" fg:w="1"/><text x="4.4351%" y="1119.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;clap::builder::command::Command&gt;&gt; (1 samples, 0.01%)</title><rect x="4.1851%" y="1093" width="0.0113%" height="15" fill="rgb(247,18,42)" fg:x="369" fg:w="1"/><text x="4.4351%" y="1103.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="4.1851%" y="1077" width="0.0113%" height="15" fill="rgb(241,131,45)" fg:x="369" fg:w="1"/><text x="4.4351%" y="1087.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;clap::builder::command::Command&gt; (1 samples, 0.01%)</title><rect x="4.1851%" y="1061" width="0.0113%" height="15" fill="rgb(249,31,29)" fg:x="369" fg:w="1"/><text x="4.4351%" y="1071.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;clap::mkeymap::MKeyMap&gt; (1 samples, 0.01%)</title><rect x="4.1851%" y="1045" width="0.0113%" height="15" fill="rgb(225,111,53)" fg:x="369" fg:w="1"/><text x="4.4351%" y="1055.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;clap::builder::arg::Arg&gt;&gt; (1 samples, 0.01%)</title><rect x="4.1851%" y="1029" width="0.0113%" height="15" fill="rgb(238,160,17)" fg:x="369" fg:w="1"/><text x="4.4351%" y="1039.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="4.1851%" y="1013" width="0.0113%" height="15" fill="rgb(214,148,48)" fg:x="369" fg:w="1"/><text x="4.4351%" y="1023.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;clap::builder::arg::Arg&gt; (1 samples, 0.01%)</title><rect x="4.1851%" y="997" width="0.0113%" height="15" fill="rgb(232,36,49)" fg:x="369" fg:w="1"/><text x="4.4351%" y="1007.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(core::option::Option&lt;clap::builder::styled_str::Style&gt;,alloc::string::String)&gt;&gt; (1 samples, 0.01%)</title><rect x="4.1851%" y="981" width="0.0113%" height="15" fill="rgb(209,103,24)" fg:x="369" fg:w="1"/><text x="4.4351%" y="991.50"></text></g><g><title>deno`OUTLINED_FUNCTION_4012 (1 samples, 0.01%)</title><rect x="4.1851%" y="965" width="0.0113%" height="15" fill="rgb(229,88,8)" fg:x="369" fg:w="1"/><text x="4.4351%" y="975.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="4.1851%" y="949" width="0.0113%" height="15" fill="rgb(213,181,19)" fg:x="369" fg:w="1"/><text x="4.4351%" y="959.50"></text></g><g><title>deno`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.01%)</title><rect x="4.2078%" y="981" width="0.0113%" height="15" fill="rgb(254,191,54)" fg:x="371" fg:w="1"/><text x="4.4578%" y="991.50"></text></g><g><title>deno`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.01%)</title><rect x="4.2078%" y="965" width="0.0113%" height="15" fill="rgb(241,83,37)" fg:x="371" fg:w="1"/><text x="4.4578%" y="975.50"></text></g><g><title>deno`&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.01%)</title><rect x="4.2078%" y="949" width="0.0113%" height="15" fill="rgb(233,36,39)" fg:x="371" fg:w="1"/><text x="4.4578%" y="959.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="4.2078%" y="933" width="0.0113%" height="15" fill="rgb(226,3,54)" fg:x="371" fg:w="1"/><text x="4.4578%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="4.2078%" y="917" width="0.0113%" height="15" fill="rgb(245,192,40)" fg:x="371" fg:w="1"/><text x="4.4578%" y="927.50"></text></g><g><title>deno`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.02%)</title><rect x="4.2078%" y="997" width="0.0227%" height="15" fill="rgb(238,167,29)" fg:x="371" fg:w="2"/><text x="4.4578%" y="1007.50"></text></g><g><title>deno`deno_semver::Version::parse_standard (1 samples, 0.01%)</title><rect x="4.2191%" y="981" width="0.0113%" height="15" fill="rgb(232,182,51)" fg:x="372" fg:w="1"/><text x="4.4691%" y="991.50"></text></g><g><title>deno`deno_semver::npm::parse_npm_version (1 samples, 0.01%)</title><rect x="4.2191%" y="965" width="0.0113%" height="15" fill="rgb(231,60,39)" fg:x="372" fg:w="1"/><text x="4.4691%" y="975.50"></text></g><g><title>deno`monch::maybe::_{{closure}} (1 samples, 0.01%)</title><rect x="4.2191%" y="949" width="0.0113%" height="15" fill="rgb(208,69,12)" fg:x="372" fg:w="1"/><text x="4.4691%" y="959.50"></text></g><g><title>deno`core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="4.2191%" y="933" width="0.0113%" height="15" fill="rgb(235,93,37)" fg:x="372" fg:w="1"/><text x="4.4691%" y="943.50"></text></g><g><title>deno`core::iter::traits::iterator::Iterator::collect (1 samples, 0.01%)</title><rect x="4.2191%" y="917" width="0.0113%" height="15" fill="rgb(213,116,39)" fg:x="372" fg:w="1"/><text x="4.4691%" y="927.50"></text></g><g><title>deno`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.03%)</title><rect x="4.2078%" y="1013" width="0.0340%" height="15" fill="rgb(222,207,29)" fg:x="371" fg:w="3"/><text x="4.4578%" y="1023.50"></text></g><g><title>deno`OUTLINED_FUNCTION_46 (1 samples, 0.01%)</title><rect x="4.2305%" y="997" width="0.0113%" height="15" fill="rgb(206,96,30)" fg:x="373" fg:w="1"/><text x="4.4805%" y="1007.50"></text></g><g><title>deno`OUTLINED_FUNCTION_16073 (1 samples, 0.01%)</title><rect x="4.2418%" y="1013" width="0.0113%" height="15" fill="rgb(218,138,4)" fg:x="374" fg:w="1"/><text x="4.4918%" y="1023.50"></text></g><g><title>deno`OUTLINED_FUNCTION_751 (1 samples, 0.01%)</title><rect x="4.2531%" y="1013" width="0.0113%" height="15" fill="rgb(250,191,14)" fg:x="375" fg:w="1"/><text x="4.5031%" y="1023.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="4.2645%" y="1013" width="0.0113%" height="15" fill="rgb(239,60,40)" fg:x="376" fg:w="1"/><text x="4.5145%" y="1023.50"></text></g><g><title>deno`alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="4.2645%" y="997" width="0.0113%" height="15" fill="rgb(206,27,48)" fg:x="376" fg:w="1"/><text x="4.5145%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="4.2645%" y="981" width="0.0113%" height="15" fill="rgb(225,35,8)" fg:x="376" fg:w="1"/><text x="4.5145%" y="991.50"></text></g><g><title>deno`deno::proc_state::ProcState::build::_{{closure}} (8 samples, 0.09%)</title><rect x="4.2078%" y="1093" width="0.0907%" height="15" fill="rgb(250,213,24)" fg:x="371" fg:w="8"/><text x="4.4578%" y="1103.50"></text></g><g><title>deno`deno::proc_state::ProcState::from_options::_{{closure}} (8 samples, 0.09%)</title><rect x="4.2078%" y="1077" width="0.0907%" height="15" fill="rgb(247,123,22)" fg:x="371" fg:w="8"/><text x="4.4578%" y="1087.50"></text></g><g><title>deno`deno::proc_state::ProcState::build_with_sender::_{{closure}} (8 samples, 0.09%)</title><rect x="4.2078%" y="1061" width="0.0907%" height="15" fill="rgb(231,138,38)" fg:x="371" fg:w="8"/><text x="4.4578%" y="1071.50"></text></g><g><title>deno`&lt;deno::npm::registry::NpmRegistry as deno_npm::registry::NpmRegistryApi&gt;::package_info::_{{closure}} (8 samples, 0.09%)</title><rect x="4.2078%" y="1045" width="0.0907%" height="15" fill="rgb(231,145,46)" fg:x="371" fg:w="8"/><text x="4.4578%" y="1055.50"></text></g><g><title>deno`deno::npm::registry::NpmRegistryApiInner::maybe_package_info::_{{closure}} (8 samples, 0.09%)</title><rect x="4.2078%" y="1029" width="0.0907%" height="15" fill="rgb(251,118,11)" fg:x="371" fg:w="8"/><text x="4.4578%" y="1039.50"></text></g><g><title>deno`std::fs::read_to_string (2 samples, 0.02%)</title><rect x="4.2758%" y="1013" width="0.0227%" height="15" fill="rgb(217,147,25)" fg:x="377" fg:w="2"/><text x="4.5258%" y="1023.50"></text></g><g><title>deno`std::fs::read_to_string::inner (2 samples, 0.02%)</title><rect x="4.2758%" y="997" width="0.0227%" height="15" fill="rgb(247,81,37)" fg:x="377" fg:w="2"/><text x="4.5258%" y="1007.50"></text></g><g><title>deno`std::io::default_read_to_string (2 samples, 0.02%)</title><rect x="4.2758%" y="981" width="0.0227%" height="15" fill="rgb(209,12,38)" fg:x="377" fg:w="2"/><text x="4.5258%" y="991.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.02%)</title><rect x="4.2758%" y="965" width="0.0227%" height="15" fill="rgb(227,1,9)" fg:x="377" fg:w="2"/><text x="4.5258%" y="975.50"></text></g><g><title>deno`deno::worker::CliMainWorker::evaluate_module_possibly_with_npm::_{{closure}} (1 samples, 0.01%)</title><rect x="4.2985%" y="1061" width="0.0113%" height="15" fill="rgb(248,47,43)" fg:x="379" fg:w="1"/><text x="4.5485%" y="1071.50"></text></g><g><title>deno`deno::worker::CliMainWorker::initialize_main_module_for_node (1 samples, 0.01%)</title><rect x="4.2985%" y="1045" width="0.0113%" height="15" fill="rgb(221,10,30)" fg:x="379" fg:w="1"/><text x="4.5485%" y="1055.50"></text></g><g><title>deno`deno_node::initialize_runtime (1 samples, 0.01%)</title><rect x="4.2985%" y="1029" width="0.0113%" height="15" fill="rgb(210,229,1)" fg:x="379" fg:w="1"/><text x="4.5485%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.01%)</title><rect x="4.2985%" y="1013" width="0.0113%" height="15" fill="rgb(222,148,37)" fg:x="379" fg:w="1"/><text x="4.5485%" y="1023.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.01%)</title><rect x="4.2985%" y="997" width="0.0113%" height="15" fill="rgb(234,67,33)" fg:x="379" fg:w="1"/><text x="4.5485%" y="1007.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.01%)</title><rect x="4.2985%" y="981" width="0.0113%" height="15" fill="rgb(247,98,35)" fg:x="379" fg:w="1"/><text x="4.5485%" y="991.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="4.2985%" y="965" width="0.0113%" height="15" fill="rgb(247,138,52)" fg:x="379" fg:w="1"/><text x="4.5485%" y="975.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.01%)</title><rect x="4.2985%" y="949" width="0.0113%" height="15" fill="rgb(213,79,30)" fg:x="379" fg:w="1"/><text x="4.5485%" y="959.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.01%)</title><rect x="4.2985%" y="933" width="0.0113%" height="15" fill="rgb(246,177,23)" fg:x="379" fg:w="1"/><text x="4.5485%" y="943.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.01%)</title><rect x="4.2985%" y="917" width="0.0113%" height="15" fill="rgb(230,62,27)" fg:x="379" fg:w="1"/><text x="4.5485%" y="927.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="4.2985%" y="901" width="0.0113%" height="15" fill="rgb(216,154,8)" fg:x="379" fg:w="1"/><text x="4.5485%" y="911.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="4.2985%" y="885" width="0.0113%" height="15" fill="rgb(244,35,45)" fg:x="379" fg:w="1"/><text x="4.5485%" y="895.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="4.2985%" y="869" width="0.0113%" height="15" fill="rgb(251,115,12)" fg:x="379" fg:w="1"/><text x="4.5485%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="4.2985%" y="853" width="0.0113%" height="15" fill="rgb(240,54,50)" fg:x="379" fg:w="1"/><text x="4.5485%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="4.2985%" y="837" width="0.0113%" height="15" fill="rgb(233,84,52)" fg:x="379" fg:w="1"/><text x="4.5485%" y="847.50"></text></g><g><title>deno`Builtins_GetNamedPropertyHandler (1 samples, 0.01%)</title><rect x="4.2985%" y="821" width="0.0113%" height="15" fill="rgb(207,117,47)" fg:x="379" fg:w="1"/><text x="4.5485%" y="831.50"></text></g><g><title>deno`Builtins_LoadIC_NoFeedback (1 samples, 0.01%)</title><rect x="4.2985%" y="805" width="0.0113%" height="15" fill="rgb(249,43,39)" fg:x="379" fg:w="1"/><text x="4.5485%" y="815.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.01%)</title><rect x="4.2985%" y="789" width="0.0113%" height="15" fill="rgb(209,38,44)" fg:x="379" fg:w="1"/><text x="4.5485%" y="799.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="4.2985%" y="773" width="0.0113%" height="15" fill="rgb(236,212,23)" fg:x="379" fg:w="1"/><text x="4.5485%" y="783.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.01%)</title><rect x="4.2985%" y="757" width="0.0113%" height="15" fill="rgb(242,79,21)" fg:x="379" fg:w="1"/><text x="4.5485%" y="767.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="4.2985%" y="741" width="0.0113%" height="15" fill="rgb(211,96,35)" fg:x="379" fg:w="1"/><text x="4.5485%" y="751.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="4.2985%" y="725" width="0.0113%" height="15" fill="rgb(253,215,40)" fg:x="379" fg:w="1"/><text x="4.5485%" y="735.50"></text></g><g><title>deno`v8::internal::ReusableUnoptimizedCompileState::~ReusableUnoptimizedCompileState (1 samples, 0.01%)</title><rect x="4.2985%" y="709" width="0.0113%" height="15" fill="rgb(211,81,21)" fg:x="379" fg:w="1"/><text x="4.5485%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="4.2985%" y="693" width="0.0113%" height="15" fill="rgb(208,190,38)" fg:x="379" fg:w="1"/><text x="4.5485%" y="703.50"></text></g><g><title>deno`&lt;deno_core::modules::RecursiveModuleLoad as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.02%)</title><rect x="4.3099%" y="1045" width="0.0227%" height="15" fill="rgb(235,213,38)" fg:x="380" fg:w="2"/><text x="4.5599%" y="1055.50"></text></g><g><title>deno`deno_core::modules::RecursiveModuleLoad::register_and_recurse::_{{closure}} (2 samples, 0.02%)</title><rect x="4.3099%" y="1029" width="0.0227%" height="15" fill="rgb(237,122,38)" fg:x="380" fg:w="2"/><text x="4.5599%" y="1039.50"></text></g><g><title>deno`&lt;deno::module_loader::CliModuleLoader as deno_core::modules::ModuleLoader&gt;::load (2 samples, 0.02%)</title><rect x="4.3099%" y="1013" width="0.0227%" height="15" fill="rgb(244,218,35)" fg:x="380" fg:w="2"/><text x="4.5599%" y="1023.50"></text></g><g><title>deno`deno::module_loader::CliModuleLoader::load_sync (2 samples, 0.02%)</title><rect x="4.3099%" y="997" width="0.0227%" height="15" fill="rgb(240,68,47)" fg:x="380" fg:w="2"/><text x="4.5599%" y="1007.50"></text></g><g><title>deno`deno::module_loader::CliModuleLoader::load_prepared_module (2 samples, 0.02%)</title><rect x="4.3099%" y="981" width="0.0227%" height="15" fill="rgb(210,16,53)" fg:x="380" fg:w="2"/><text x="4.5599%" y="991.50"></text></g><g><title>deno`deno::emit::emit_parsed_source (2 samples, 0.02%)</title><rect x="4.3099%" y="965" width="0.0227%" height="15" fill="rgb(235,124,12)" fg:x="380" fg:w="2"/><text x="4.5599%" y="975.50"></text></g><g><title>deno`deno::cache::emit::EmitCache::get_emit_code (2 samples, 0.02%)</title><rect x="4.3099%" y="949" width="0.0227%" height="15" fill="rgb(224,169,11)" fg:x="380" fg:w="2"/><text x="4.5599%" y="959.50"></text></g><g><title>deno`deno::cache::disk_cache::DiskCache::get (2 samples, 0.02%)</title><rect x="4.3099%" y="933" width="0.0227%" height="15" fill="rgb(250,166,2)" fg:x="380" fg:w="2"/><text x="4.5599%" y="943.50"></text></g><g><title>deno`std::fs::read (2 samples, 0.02%)</title><rect x="4.3099%" y="917" width="0.0227%" height="15" fill="rgb(242,216,29)" fg:x="380" fg:w="2"/><text x="4.5599%" y="927.50"></text></g><g><title>deno`std::fs::read::inner (2 samples, 0.02%)</title><rect x="4.3099%" y="901" width="0.0227%" height="15" fill="rgb(230,116,27)" fg:x="380" fg:w="2"/><text x="4.5599%" y="911.50"></text></g><g><title>deno`std::sys::unix::fs::File::open_c (2 samples, 0.02%)</title><rect x="4.3099%" y="885" width="0.0227%" height="15" fill="rgb(228,99,48)" fg:x="380" fg:w="2"/><text x="4.5599%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.02%)</title><rect x="4.3099%" y="869" width="0.0227%" height="15" fill="rgb(253,11,6)" fg:x="380" fg:w="2"/><text x="4.5599%" y="879.50"></text></g><g><title>deno`std::sys::unix::fs::remove_dir_impl::remove_dir_all (3 samples, 0.03%)</title><rect x="4.3325%" y="917" width="0.0340%" height="15" fill="rgb(247,143,39)" fg:x="382" fg:w="3"/><text x="4.5825%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (3 samples, 0.03%)</title><rect x="4.3325%" y="901" width="0.0340%" height="15" fill="rgb(236,97,10)" fg:x="382" fg:w="3"/><text x="4.5825%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`lstat (1 samples, 0.01%)</title><rect x="4.3666%" y="917" width="0.0113%" height="15" fill="rgb(233,208,19)" fg:x="385" fg:w="1"/><text x="4.6166%" y="927.50"></text></g><g><title>deno`deno::npm::resolvers::NpmPackageResolver::resolve_pending::_{{closure}} (9 samples, 0.10%)</title><rect x="4.3325%" y="981" width="0.1021%" height="15" fill="rgb(216,164,2)" fg:x="382" fg:w="9"/><text x="4.5825%" y="991.50"></text></g><g><title>deno`&lt;deno::npm::resolvers::local::LocalNpmPackageResolver as deno::npm::resolvers::common::NpmPackageFsResolver&gt;::cache_packages::_{{closure}} (9 samples, 0.10%)</title><rect x="4.3325%" y="965" width="0.1021%" height="15" fill="rgb(220,129,5)" fg:x="382" fg:w="9"/><text x="4.5825%" y="975.50"></text></g><g><title>deno`deno::npm::resolvers::local::sync_resolution_with_fs::_{{closure}} (9 samples, 0.10%)</title><rect x="4.3325%" y="949" width="0.1021%" height="15" fill="rgb(242,17,10)" fg:x="382" fg:w="9"/><text x="4.5825%" y="959.50"></text></g><g><title>deno`deno::npm::resolvers::local::symlink_package_dir (9 samples, 0.10%)</title><rect x="4.3325%" y="933" width="0.1021%" height="15" fill="rgb(242,107,0)" fg:x="382" fg:w="9"/><text x="4.5825%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`symlink (5 samples, 0.06%)</title><rect x="4.3779%" y="917" width="0.0567%" height="15" fill="rgb(251,28,31)" fg:x="386" fg:w="5"/><text x="4.6279%" y="927.50"></text></g><g><title>deno`&lt;deno::cache::parsed_source::ParsedSourceCacheModuleAnalyzer as deno_graph::analyzer::ModuleAnalyzer&gt;::analyze (1 samples, 0.01%)</title><rect x="4.4346%" y="949" width="0.0113%" height="15" fill="rgb(233,223,10)" fg:x="391" fg:w="1"/><text x="4.6846%" y="959.50"></text></g><g><title>deno`deno::cache::cache_db::CacheDB::execute (1 samples, 0.01%)</title><rect x="4.4346%" y="933" width="0.0113%" height="15" fill="rgb(215,21,27)" fg:x="391" fg:w="1"/><text x="4.6846%" y="943.50"></text></g><g><title>deno`rusqlite::statement::Statement::execute_with_bound_parameters (1 samples, 0.01%)</title><rect x="4.4346%" y="917" width="0.0113%" height="15" fill="rgb(232,23,21)" fg:x="391" fg:w="1"/><text x="4.6846%" y="927.50"></text></g><g><title>deno`rusqlite::raw_statement::RawStatement::step (1 samples, 0.01%)</title><rect x="4.4346%" y="901" width="0.0113%" height="15" fill="rgb(244,5,23)" fg:x="391" fg:w="1"/><text x="4.6846%" y="911.50"></text></g><g><title>deno`sqlite3_step (1 samples, 0.01%)</title><rect x="4.4346%" y="885" width="0.0113%" height="15" fill="rgb(226,81,46)" fg:x="391" fg:w="1"/><text x="4.6846%" y="895.50"></text></g><g><title>deno`sqlite3VdbeExec (1 samples, 0.01%)</title><rect x="4.4346%" y="869" width="0.0113%" height="15" fill="rgb(247,70,30)" fg:x="391" fg:w="1"/><text x="4.6846%" y="879.50"></text></g><g><title>deno`sqlite3VdbeHalt (1 samples, 0.01%)</title><rect x="4.4346%" y="853" width="0.0113%" height="15" fill="rgb(212,68,19)" fg:x="391" fg:w="1"/><text x="4.6846%" y="863.50"></text></g><g><title>deno`sqlite3BtreeCommitPhaseOne (1 samples, 0.01%)</title><rect x="4.4346%" y="837" width="0.0113%" height="15" fill="rgb(240,187,13)" fg:x="391" fg:w="1"/><text x="4.6846%" y="847.50"></text></g><g><title>deno`sqlite3PagerCommitPhaseOne (1 samples, 0.01%)</title><rect x="4.4346%" y="821" width="0.0113%" height="15" fill="rgb(223,113,26)" fg:x="391" fg:w="1"/><text x="4.6846%" y="831.50"></text></g><g><title>deno`syncJournal (1 samples, 0.01%)</title><rect x="4.4346%" y="805" width="0.0113%" height="15" fill="rgb(206,192,2)" fg:x="391" fg:w="1"/><text x="4.6846%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`fsync (1 samples, 0.01%)</title><rect x="4.4346%" y="789" width="0.0113%" height="15" fill="rgb(241,108,4)" fg:x="391" fg:w="1"/><text x="4.6846%" y="799.50"></text></g><g><title>deno`deno::worker::CliMainWorker::execute_main_module_possibly_with_npm::_{{closure}} (14 samples, 0.16%)</title><rect x="4.2985%" y="1077" width="0.1588%" height="15" fill="rgb(247,173,49)" fg:x="379" fg:w="14"/><text x="4.5485%" y="1087.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::preload_main_module::_{{closure}} (13 samples, 0.15%)</title><rect x="4.3099%" y="1061" width="0.1474%" height="15" fill="rgb(224,114,35)" fg:x="380" fg:w="13"/><text x="4.5599%" y="1071.50"></text></g><g><title>deno`deno_core::modules::RecursiveModuleLoad::prepare::_{{closure}} (11 samples, 0.12%)</title><rect x="4.3325%" y="1045" width="0.1248%" height="15" fill="rgb(245,159,27)" fg:x="382" fg:w="11"/><text x="4.5825%" y="1055.50"></text></g><g><title>deno`&lt;deno::module_loader::CliModuleLoader as deno_core::modules::ModuleLoader&gt;::prepare_load::_{{closure}} (11 samples, 0.12%)</title><rect x="4.3325%" y="1029" width="0.1248%" height="15" fill="rgb(245,172,44)" fg:x="382" fg:w="11"/><text x="4.5825%" y="1039.50"></text></g><g><title>deno`deno::proc_state::ProcState::prepare_module_load::_{{closure}} (11 samples, 0.12%)</title><rect x="4.3325%" y="1013" width="0.1248%" height="15" fill="rgb(236,23,11)" fg:x="382" fg:w="11"/><text x="4.5825%" y="1023.50"></text></g><g><title>deno`deno::graph_util::build_graph_with_npm_resolution::_{{closure}} (11 samples, 0.12%)</title><rect x="4.3325%" y="997" width="0.1248%" height="15" fill="rgb(205,117,38)" fg:x="382" fg:w="11"/><text x="4.5825%" y="1007.50"></text></g><g><title>deno`deno_graph::graph::ModuleGraph::build::_{{closure}} (2 samples, 0.02%)</title><rect x="4.4346%" y="981" width="0.0227%" height="15" fill="rgb(237,72,25)" fg:x="391" fg:w="2"/><text x="4.6846%" y="991.50"></text></g><g><title>deno`deno_graph::graph::Builder::fill::_{{closure}} (2 samples, 0.02%)</title><rect x="4.4346%" y="965" width="0.0227%" height="15" fill="rgb(244,70,9)" fg:x="391" fg:w="2"/><text x="4.6846%" y="975.50"></text></g><g><title>deno`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="4.4460%" y="949" width="0.0113%" height="15" fill="rgb(217,125,39)" fg:x="392" fg:w="1"/><text x="4.6960%" y="959.50"></text></g><g><title>deno`&lt;deno::cache::FetchCacher as deno_graph::source::Loader&gt;::load::_{{closure}} (1 samples, 0.01%)</title><rect x="4.4460%" y="933" width="0.0113%" height="15" fill="rgb(235,36,10)" fg:x="392" fg:w="1"/><text x="4.6960%" y="943.50"></text></g><g><title>deno`deno::file_fetcher::FileFetcher::fetch::_{{closure}} (1 samples, 0.01%)</title><rect x="4.4460%" y="917" width="0.0113%" height="15" fill="rgb(251,123,47)" fg:x="392" fg:w="1"/><text x="4.6960%" y="927.50"></text></g><g><title>deno`deno::file_fetcher::FileFetcher::fetch_with_accept::_{{closure}} (1 samples, 0.01%)</title><rect x="4.4460%" y="901" width="0.0113%" height="15" fill="rgb(221,13,13)" fg:x="392" fg:w="1"/><text x="4.6960%" y="911.50"></text></g><g><title>deno`&lt;deno::file_fetcher::File as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="4.4460%" y="885" width="0.0113%" height="15" fill="rgb(238,131,9)" fg:x="392" fg:w="1"/><text x="4.6960%" y="895.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="4.4460%" y="869" width="0.0113%" height="15" fill="rgb(211,50,8)" fg:x="392" fg:w="1"/><text x="4.6960%" y="879.50"></text></g><g><title>deno`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="4.4460%" y="853" width="0.0113%" height="15" fill="rgb(245,182,24)" fg:x="392" fg:w="1"/><text x="4.6960%" y="863.50"></text></g><g><title>deno`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="4.4460%" y="837" width="0.0113%" height="15" fill="rgb(242,14,37)" fg:x="392" fg:w="1"/><text x="4.6960%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="4.4460%" y="821" width="0.0113%" height="15" fill="rgb(246,228,12)" fg:x="392" fg:w="1"/><text x="4.6960%" y="831.50"></text></g><g><title>deno`core::ops::function::Fn::call (2 samples, 0.02%)</title><rect x="4.4573%" y="1061" width="0.0227%" height="15" fill="rgb(213,55,15)" fg:x="393" fg:w="2"/><text x="4.7073%" y="1071.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::check_promise_rejections (1 samples, 0.01%)</title><rect x="4.4800%" y="1061" width="0.0113%" height="15" fill="rgb(209,9,3)" fg:x="395" fg:w="1"/><text x="4.7300%" y="1071.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="4.5027%" y="1045" width="0.0113%" height="15" fill="rgb(230,59,30)" fg:x="397" fg:w="1"/><text x="4.7527%" y="1055.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="4.5140%" y="1045" width="0.0113%" height="15" fill="rgb(209,121,21)" fg:x="398" fg:w="1"/><text x="4.7640%" y="1055.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_core::runtime::ModEvaluate&gt;&gt; (1 samples, 0.01%)</title><rect x="4.5253%" y="1045" width="0.0113%" height="15" fill="rgb(220,109,13)" fg:x="399" fg:w="1"/><text x="4.7753%" y="1055.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (1 samples, 0.01%)</title><rect x="4.5367%" y="1045" width="0.0113%" height="15" fill="rgb(232,18,1)" fg:x="400" fg:w="1"/><text x="4.7867%" y="1055.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::handle::Weak&lt;v8::data::Context&gt;&gt; (1 samples, 0.01%)</title><rect x="4.5480%" y="1029" width="0.0113%" height="15" fill="rgb(215,41,42)" fg:x="401" fg:w="1"/><text x="4.7980%" y="1039.50"></text></g><g><title>deno`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (1 samples, 0.01%)</title><rect x="4.5480%" y="1013" width="0.0113%" height="15" fill="rgb(224,123,36)" fg:x="401" fg:w="1"/><text x="4.7980%" y="1023.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::check_promise_rejections (2 samples, 0.02%)</title><rect x="4.5480%" y="1045" width="0.0227%" height="15" fill="rgb(240,125,3)" fg:x="401" fg:w="2"/><text x="4.7980%" y="1055.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.01%)</title><rect x="4.5594%" y="1029" width="0.0113%" height="15" fill="rgb(205,98,50)" fg:x="402" fg:w="1"/><text x="4.8094%" y="1039.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="4.5821%" y="1029" width="0.0113%" height="15" fill="rgb(205,185,37)" fg:x="404" fg:w="1"/><text x="4.8321%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.01%)</title><rect x="4.5821%" y="1013" width="0.0113%" height="15" fill="rgb(238,207,15)" fg:x="404" fg:w="1"/><text x="4.8321%" y="1023.50"></text></g><g><title>deno`v8::handle::HandleHost::get_isolate (1 samples, 0.01%)</title><rect x="4.5934%" y="997" width="0.0113%" height="15" fill="rgb(213,199,42)" fg:x="405" fg:w="1"/><text x="4.8434%" y="1007.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (2 samples, 0.02%)</title><rect x="4.5934%" y="1029" width="0.0227%" height="15" fill="rgb(235,201,11)" fg:x="405" fg:w="2"/><text x="4.8434%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (2 samples, 0.02%)</title><rect x="4.5934%" y="1013" width="0.0227%" height="15" fill="rgb(207,46,11)" fg:x="405" fg:w="2"/><text x="4.8434%" y="1023.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.01%)</title><rect x="4.6047%" y="997" width="0.0113%" height="15" fill="rgb(241,35,35)" fg:x="406" fg:w="1"/><text x="4.8547%" y="1007.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (1 samples, 0.01%)</title><rect x="4.6614%" y="965" width="0.0113%" height="15" fill="rgb(243,32,47)" fg:x="411" fg:w="1"/><text x="4.9114%" y="975.50"></text></g><g><title>0x1500620c8 (1 samples, 0.01%)</title><rect x="4.6728%" y="949" width="0.0113%" height="15" fill="rgb(247,202,23)" fg:x="412" fg:w="1"/><text x="4.9228%" y="959.50"></text></g><g><title>deno`Builtins_CallApiCallback (1 samples, 0.01%)</title><rect x="4.6728%" y="933" width="0.0113%" height="15" fill="rgb(219,102,11)" fg:x="412" fg:w="1"/><text x="4.9228%" y="943.50"></text></g><g><title>deno`deno_core::ops_builtin_v8::op_run_microtasks::v8_fn_ptr (1 samples, 0.01%)</title><rect x="4.6728%" y="917" width="0.0113%" height="15" fill="rgb(243,110,44)" fg:x="412" fg:w="1"/><text x="4.9228%" y="927.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="4.6728%" y="901" width="0.0113%" height="15" fill="rgb(222,74,54)" fg:x="412" fg:w="1"/><text x="4.9228%" y="911.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.01%)</title><rect x="4.6955%" y="901" width="0.0113%" height="15" fill="rgb(216,99,12)" fg:x="414" fg:w="1"/><text x="4.9455%" y="911.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="4.6955%" y="885" width="0.0113%" height="15" fill="rgb(226,22,26)" fg:x="414" fg:w="1"/><text x="4.9455%" y="895.50"></text></g><g><title>deno`deno_core::ops_builtin_v8::op_run_microtasks::v8_fn_ptr (1 samples, 0.01%)</title><rect x="4.6955%" y="869" width="0.0113%" height="15" fill="rgb(217,163,10)" fg:x="414" fg:w="1"/><text x="4.9455%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3 samples, 0.03%)</title><rect x="4.6841%" y="949" width="0.0340%" height="15" fill="rgb(213,25,53)" fg:x="413" fg:w="3"/><text x="4.9341%" y="959.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="4.6955%" y="933" width="0.0227%" height="15" fill="rgb(252,105,26)" fg:x="414" fg:w="2"/><text x="4.9455%" y="943.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_BuiltinExit (2 samples, 0.02%)</title><rect x="4.6955%" y="917" width="0.0227%" height="15" fill="rgb(220,39,43)" fg:x="414" fg:w="2"/><text x="4.9455%" y="927.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="4.7068%" y="901" width="0.0113%" height="15" fill="rgb(229,68,48)" fg:x="415" fg:w="1"/><text x="4.9568%" y="911.50"></text></g><g><title>deno`Builtins_JSEntry (6 samples, 0.07%)</title><rect x="4.6614%" y="981" width="0.0681%" height="15" fill="rgb(252,8,32)" fg:x="411" fg:w="6"/><text x="4.9114%" y="991.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (5 samples, 0.06%)</title><rect x="4.6728%" y="965" width="0.0567%" height="15" fill="rgb(223,20,43)" fg:x="412" fg:w="5"/><text x="4.9228%" y="975.50"></text></g><g><title>deno`Builtins_TestGreaterThanHandler (1 samples, 0.01%)</title><rect x="4.7182%" y="949" width="0.0113%" height="15" fill="rgb(229,81,49)" fg:x="416" fg:w="1"/><text x="4.9682%" y="959.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (8 samples, 0.09%)</title><rect x="4.6501%" y="997" width="0.0907%" height="15" fill="rgb(236,28,36)" fg:x="410" fg:w="8"/><text x="4.9001%" y="1007.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (1 samples, 0.01%)</title><rect x="4.7295%" y="981" width="0.0113%" height="15" fill="rgb(249,185,26)" fg:x="417" fg:w="1"/><text x="4.9795%" y="991.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (12 samples, 0.14%)</title><rect x="4.6161%" y="1029" width="0.1361%" height="15" fill="rgb(249,174,33)" fg:x="407" fg:w="12"/><text x="4.8661%" y="1039.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (11 samples, 0.12%)</title><rect x="4.6274%" y="1013" width="0.1248%" height="15" fill="rgb(233,201,37)" fg:x="408" fg:w="11"/><text x="4.8774%" y="1023.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (1 samples, 0.01%)</title><rect x="4.7408%" y="997" width="0.0113%" height="15" fill="rgb(221,78,26)" fg:x="418" fg:w="1"/><text x="4.9908%" y="1007.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (1 samples, 0.01%)</title><rect x="4.7522%" y="1029" width="0.0113%" height="15" fill="rgb(250,127,30)" fg:x="419" fg:w="1"/><text x="5.0022%" y="1039.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (3 samples, 0.03%)</title><rect x="4.7635%" y="1029" width="0.0340%" height="15" fill="rgb(230,49,44)" fg:x="420" fg:w="3"/><text x="5.0135%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="4.7976%" y="1029" width="0.0113%" height="15" fill="rgb(229,67,23)" fg:x="423" fg:w="1"/><text x="5.0476%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::drain_macrotasks (22 samples, 0.25%)</title><rect x="4.5707%" y="1045" width="0.2495%" height="15" fill="rgb(249,83,47)" fg:x="403" fg:w="22"/><text x="4.8207%" y="1055.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="4.8089%" y="1029" width="0.0113%" height="15" fill="rgb(215,43,3)" fg:x="424" fg:w="1"/><text x="5.0589%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::evaluate_pending_module (1 samples, 0.01%)</title><rect x="4.8202%" y="1045" width="0.0113%" height="15" fill="rgb(238,154,13)" fg:x="425" fg:w="1"/><text x="5.0702%" y="1055.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_core::runtime::ModEvaluate&gt;&gt; (1 samples, 0.01%)</title><rect x="4.8202%" y="1029" width="0.0113%" height="15" fill="rgb(219,56,2)" fg:x="425" fg:w="1"/><text x="5.0702%" y="1039.50"></text></g><g><title>deno`v8::internal::wasm::GetWasmEngine (1 samples, 0.01%)</title><rect x="4.8316%" y="1013" width="0.0113%" height="15" fill="rgb(233,0,4)" fg:x="426" fg:w="1"/><text x="5.0816%" y="1023.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (2 samples, 0.02%)</title><rect x="4.8316%" y="1045" width="0.0227%" height="15" fill="rgb(235,30,7)" fg:x="426" fg:w="2"/><text x="5.0816%" y="1055.50"></text></g><g><title>deno`deno_core::runtime::EventLoopPendingState::new (2 samples, 0.02%)</title><rect x="4.8316%" y="1029" width="0.0227%" height="15" fill="rgb(250,79,13)" fg:x="426" fg:w="2"/><text x="5.0816%" y="1039.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.01%)</title><rect x="4.8429%" y="1013" width="0.0113%" height="15" fill="rgb(211,146,34)" fg:x="427" fg:w="1"/><text x="5.0929%" y="1023.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.01%)</title><rect x="4.8429%" y="997" width="0.0113%" height="15" fill="rgb(228,22,38)" fg:x="427" fg:w="1"/><text x="5.0929%" y="1007.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.02%)</title><rect x="4.8656%" y="1013" width="0.0227%" height="15" fill="rgb(235,168,5)" fg:x="429" fg:w="2"/><text x="5.1156%" y="1023.50"></text></g><g><title>deno`v8::Context::Exit (1 samples, 0.01%)</title><rect x="4.8769%" y="997" width="0.0113%" height="15" fill="rgb(221,155,16)" fg:x="430" fg:w="1"/><text x="5.1269%" y="1007.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::handle_scope (4 samples, 0.05%)</title><rect x="4.8543%" y="1029" width="0.0454%" height="15" fill="rgb(215,215,53)" fg:x="428" fg:w="4"/><text x="5.1043%" y="1039.50"></text></g><g><title>deno`v8::Context::Enter (1 samples, 0.01%)</title><rect x="4.8883%" y="1013" width="0.0113%" height="15" fill="rgb(223,4,10)" fg:x="431" fg:w="1"/><text x="5.1383%" y="1023.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (1 samples, 0.01%)</title><rect x="4.8883%" y="997" width="0.0113%" height="15" fill="rgb(234,103,6)" fg:x="431" fg:w="1"/><text x="5.1383%" y="1007.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (1 samples, 0.01%)</title><rect x="4.8996%" y="1029" width="0.0113%" height="15" fill="rgb(227,97,0)" fg:x="432" fg:w="1"/><text x="5.1496%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (6 samples, 0.07%)</title><rect x="4.8543%" y="1045" width="0.0681%" height="15" fill="rgb(234,150,53)" fg:x="428" fg:w="6"/><text x="5.1043%" y="1055.50"></text></g><g><title>deno`v8::handle::HandleHost::get_isolate (1 samples, 0.01%)</title><rect x="4.9110%" y="1029" width="0.0113%" height="15" fill="rgb(228,201,54)" fg:x="433" fg:w="1"/><text x="5.1610%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::handle_scope (1 samples, 0.01%)</title><rect x="4.9223%" y="1029" width="0.0113%" height="15" fill="rgb(222,22,37)" fg:x="434" fg:w="1"/><text x="5.1723%" y="1039.50"></text></g><g><title>0x1500a2e30 (1 samples, 0.01%)</title><rect x="4.9337%" y="805" width="0.0113%" height="15" fill="rgb(237,53,32)" fg:x="435" fg:w="1"/><text x="5.1837%" y="815.50"></text></g><g><title>0x150091708 (1 samples, 0.01%)</title><rect x="4.9337%" y="789" width="0.0113%" height="15" fill="rgb(233,25,53)" fg:x="435" fg:w="1"/><text x="5.1837%" y="799.50"></text></g><g><title>0x150091138 (1 samples, 0.01%)</title><rect x="4.9337%" y="773" width="0.0113%" height="15" fill="rgb(210,40,34)" fg:x="435" fg:w="1"/><text x="5.1837%" y="783.50"></text></g><g><title>deno`Builtins_ArrayFilter (1 samples, 0.01%)</title><rect x="4.9337%" y="757" width="0.0113%" height="15" fill="rgb(241,220,44)" fg:x="435" fg:w="1"/><text x="5.1837%" y="767.50"></text></g><g><title>0x150088e14 (1 samples, 0.01%)</title><rect x="4.9337%" y="741" width="0.0113%" height="15" fill="rgb(235,28,35)" fg:x="435" fg:w="1"/><text x="5.1837%" y="751.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (1 samples, 0.01%)</title><rect x="4.9337%" y="725" width="0.0113%" height="15" fill="rgb(210,56,17)" fg:x="435" fg:w="1"/><text x="5.1837%" y="735.50"></text></g><g><title>0x1500c8a68 (2 samples, 0.02%)</title><rect x="4.9337%" y="837" width="0.0227%" height="15" fill="rgb(224,130,29)" fg:x="435" fg:w="2"/><text x="5.1837%" y="847.50"></text></g><g><title>0x15009bd8c (2 samples, 0.02%)</title><rect x="4.9337%" y="821" width="0.0227%" height="15" fill="rgb(235,212,8)" fg:x="435" fg:w="2"/><text x="5.1837%" y="831.50"></text></g><g><title>0x1500a31d8 (1 samples, 0.01%)</title><rect x="4.9450%" y="805" width="0.0113%" height="15" fill="rgb(223,33,50)" fg:x="436" fg:w="1"/><text x="5.1950%" y="815.50"></text></g><g><title>0x150091708 (1 samples, 0.01%)</title><rect x="4.9450%" y="789" width="0.0113%" height="15" fill="rgb(219,149,13)" fg:x="436" fg:w="1"/><text x="5.1950%" y="799.50"></text></g><g><title>0x150091138 (1 samples, 0.01%)</title><rect x="4.9450%" y="773" width="0.0113%" height="15" fill="rgb(250,156,29)" fg:x="436" fg:w="1"/><text x="5.1950%" y="783.50"></text></g><g><title>deno`Builtins_ArrayFilter (1 samples, 0.01%)</title><rect x="4.9450%" y="757" width="0.0113%" height="15" fill="rgb(216,193,19)" fg:x="436" fg:w="1"/><text x="5.1950%" y="767.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="4.9450%" y="741" width="0.0113%" height="15" fill="rgb(216,135,14)" fg:x="436" fg:w="1"/><text x="5.1950%" y="751.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.01%)</title><rect x="4.9450%" y="725" width="0.0113%" height="15" fill="rgb(241,47,5)" fg:x="436" fg:w="1"/><text x="5.1950%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.01%)</title><rect x="4.9450%" y="709" width="0.0113%" height="15" fill="rgb(233,42,35)" fg:x="436" fg:w="1"/><text x="5.1950%" y="719.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.01%)</title><rect x="4.9450%" y="693" width="0.0113%" height="15" fill="rgb(231,13,6)" fg:x="436" fg:w="1"/><text x="5.1950%" y="703.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.01%)</title><rect x="4.9450%" y="677" width="0.0113%" height="15" fill="rgb(207,181,40)" fg:x="436" fg:w="1"/><text x="5.1950%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.01%)</title><rect x="4.9450%" y="661" width="0.0113%" height="15" fill="rgb(254,173,49)" fg:x="436" fg:w="1"/><text x="5.1950%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.01%)</title><rect x="4.9450%" y="645" width="0.0113%" height="15" fill="rgb(221,1,38)" fg:x="436" fg:w="1"/><text x="5.1950%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.01%)</title><rect x="4.9450%" y="629" width="0.0113%" height="15" fill="rgb(206,124,46)" fg:x="436" fg:w="1"/><text x="5.1950%" y="639.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.01%)</title><rect x="4.9450%" y="613" width="0.0113%" height="15" fill="rgb(249,21,11)" fg:x="436" fg:w="1"/><text x="5.1950%" y="623.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.01%)</title><rect x="4.9450%" y="597" width="0.0113%" height="15" fill="rgb(222,201,40)" fg:x="436" fg:w="1"/><text x="5.1950%" y="607.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (1 samples, 0.01%)</title><rect x="4.9450%" y="581" width="0.0113%" height="15" fill="rgb(235,61,29)" fg:x="436" fg:w="1"/><text x="5.1950%" y="591.50"></text></g><g><title>0x15009b070 (3 samples, 0.03%)</title><rect x="4.9337%" y="853" width="0.0340%" height="15" fill="rgb(219,207,3)" fg:x="435" fg:w="3"/><text x="5.1837%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="4.9563%" y="837" width="0.0113%" height="15" fill="rgb(222,56,46)" fg:x="437" fg:w="1"/><text x="5.2063%" y="847.50"></text></g><g><title>0x15009be58 (1 samples, 0.01%)</title><rect x="4.9563%" y="821" width="0.0113%" height="15" fill="rgb(239,76,54)" fg:x="437" fg:w="1"/><text x="5.2063%" y="831.50"></text></g><g><title>deno`Builtins_StoreIC (1 samples, 0.01%)</title><rect x="4.9563%" y="805" width="0.0113%" height="15" fill="rgb(231,124,27)" fg:x="437" fg:w="1"/><text x="5.2063%" y="815.50"></text></g><g><title>0x1500931a0 (1 samples, 0.01%)</title><rect x="4.9563%" y="789" width="0.0113%" height="15" fill="rgb(249,195,6)" fg:x="437" fg:w="1"/><text x="5.2063%" y="799.50"></text></g><g><title>0x1500991a8 (1 samples, 0.01%)</title><rect x="4.9563%" y="773" width="0.0113%" height="15" fill="rgb(237,174,47)" fg:x="437" fg:w="1"/><text x="5.2063%" y="783.50"></text></g><g><title>0x150091e64 (1 samples, 0.01%)</title><rect x="4.9563%" y="757" width="0.0113%" height="15" fill="rgb(206,201,31)" fg:x="437" fg:w="1"/><text x="5.2063%" y="767.50"></text></g><g><title>deno`Builtins_KeyedLoadICBaseline (1 samples, 0.01%)</title><rect x="4.9563%" y="741" width="0.0113%" height="15" fill="rgb(231,57,52)" fg:x="437" fg:w="1"/><text x="5.2063%" y="751.50"></text></g><g><title>0x1500acc3c (1 samples, 0.01%)</title><rect x="4.9677%" y="853" width="0.0113%" height="15" fill="rgb(248,177,22)" fg:x="438" fg:w="1"/><text x="5.2177%" y="863.50"></text></g><g><title>0x1500ac07c (1 samples, 0.01%)</title><rect x="4.9677%" y="837" width="0.0113%" height="15" fill="rgb(215,211,37)" fg:x="438" fg:w="1"/><text x="5.2177%" y="847.50"></text></g><g><title>0x150051c48 (1 samples, 0.01%)</title><rect x="4.9677%" y="821" width="0.0113%" height="15" fill="rgb(241,128,51)" fg:x="438" fg:w="1"/><text x="5.2177%" y="831.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="4.9677%" y="805" width="0.0113%" height="15" fill="rgb(227,165,31)" fg:x="438" fg:w="1"/><text x="5.2177%" y="815.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.01%)</title><rect x="4.9677%" y="789" width="0.0113%" height="15" fill="rgb(228,167,24)" fg:x="438" fg:w="1"/><text x="5.2177%" y="799.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="4.9677%" y="773" width="0.0113%" height="15" fill="rgb(228,143,12)" fg:x="438" fg:w="1"/><text x="5.2177%" y="783.50"></text></g><g><title>deno`deno_net::ops::op_net_accept_tcp::v8_fn_ptr (1 samples, 0.01%)</title><rect x="4.9677%" y="757" width="0.0113%" height="15" fill="rgb(249,149,8)" fg:x="438" fg:w="1"/><text x="5.2177%" y="767.50"></text></g><g><title>deno`&lt;T as serde_v8::serializable::Serializable&gt;::to_v8 (1 samples, 0.01%)</title><rect x="4.9677%" y="741" width="0.0113%" height="15" fill="rgb(243,35,44)" fg:x="438" fg:w="1"/><text x="5.2177%" y="751.50"></text></g><g><title>deno`&lt;serde_v8::ser::ArraySerializer as serde::ser::SerializeTuple&gt;::serialize_element (1 samples, 0.01%)</title><rect x="4.9677%" y="725" width="0.0113%" height="15" fill="rgb(246,89,9)" fg:x="438" fg:w="1"/><text x="5.2177%" y="735.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (1 samples, 0.01%)</title><rect x="4.9677%" y="709" width="0.0113%" height="15" fill="rgb(233,213,13)" fg:x="438" fg:w="1"/><text x="5.2177%" y="719.50"></text></g><g><title>deno`v8::Object::New(v8::Isolate*, v8::Local&lt;v8::Value&gt;, v8::Local&lt;v8::Name&gt;*, v8::Local (1 samples, 0.01%)</title><rect x="4.9677%" y="693" width="0.0113%" height="15" fill="rgb(233,141,41)" fg:x="438" fg:w="1"/><text x="5.2177%" y="703.50"></text></g><g><title>deno`v8::internal::Factory::NewSlowJSObjectWithPropertiesAndElements(v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="4.9677%" y="677" width="0.0113%" height="15" fill="rgb(239,167,4)" fg:x="438" fg:w="1"/><text x="5.2177%" y="687.50"></text></g><g><title>deno`v8::internal::Map::TransitionToPrototype(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="4.9677%" y="661" width="0.0113%" height="15" fill="rgb(209,217,16)" fg:x="438" fg:w="1"/><text x="5.2177%" y="671.50"></text></g><g><title>0x1500ad5ec (1 samples, 0.01%)</title><rect x="4.9790%" y="853" width="0.0113%" height="15" fill="rgb(219,88,35)" fg:x="439" fg:w="1"/><text x="5.2290%" y="863.50"></text></g><g><title>0x1500592f0 (1 samples, 0.01%)</title><rect x="4.9790%" y="837" width="0.0113%" height="15" fill="rgb(220,193,23)" fg:x="439" fg:w="1"/><text x="5.2290%" y="847.50"></text></g><g><title>deno`Builtins_LoadIC (1 samples, 0.01%)</title><rect x="4.9790%" y="821" width="0.0113%" height="15" fill="rgb(230,90,52)" fg:x="439" fg:w="1"/><text x="5.2290%" y="831.50"></text></g><g><title>0x1500ad780 (1 samples, 0.01%)</title><rect x="4.9904%" y="853" width="0.0113%" height="15" fill="rgb(252,106,19)" fg:x="440" fg:w="1"/><text x="5.2404%" y="863.50"></text></g><g><title>0x15009ae68 (1 samples, 0.01%)</title><rect x="4.9904%" y="837" width="0.0113%" height="15" fill="rgb(206,74,20)" fg:x="440" fg:w="1"/><text x="5.2404%" y="847.50"></text></g><g><title>0x150099d44 (1 samples, 0.01%)</title><rect x="4.9904%" y="821" width="0.0113%" height="15" fill="rgb(230,138,44)" fg:x="440" fg:w="1"/><text x="5.2404%" y="831.50"></text></g><g><title>0x150051c48 (1 samples, 0.01%)</title><rect x="4.9904%" y="805" width="0.0113%" height="15" fill="rgb(235,182,43)" fg:x="440" fg:w="1"/><text x="5.2404%" y="815.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="4.9904%" y="789" width="0.0113%" height="15" fill="rgb(242,16,51)" fg:x="440" fg:w="1"/><text x="5.2404%" y="799.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.01%)</title><rect x="4.9904%" y="773" width="0.0113%" height="15" fill="rgb(248,9,4)" fg:x="440" fg:w="1"/><text x="5.2404%" y="783.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="4.9904%" y="757" width="0.0113%" height="15" fill="rgb(210,31,22)" fg:x="440" fg:w="1"/><text x="5.2404%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="4.9904%" y="741" width="0.0113%" height="15" fill="rgb(239,54,39)" fg:x="440" fg:w="1"/><text x="5.2404%" y="751.50"></text></g><g><title>0x1500c8e3c (1 samples, 0.01%)</title><rect x="5.0017%" y="853" width="0.0113%" height="15" fill="rgb(230,99,41)" fg:x="441" fg:w="1"/><text x="5.2517%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="5.0017%" y="837" width="0.0113%" height="15" fill="rgb(253,106,12)" fg:x="441" fg:w="1"/><text x="5.2517%" y="847.50"></text></g><g><title>deno`Builtins_InvokeIntrinsicHandler (1 samples, 0.01%)</title><rect x="5.0017%" y="821" width="0.0113%" height="15" fill="rgb(213,46,41)" fg:x="441" fg:w="1"/><text x="5.2517%" y="831.50"></text></g><g><title>deno`Builtins_AsyncFunctionEnter (1 samples, 0.01%)</title><rect x="5.0017%" y="805" width="0.0113%" height="15" fill="rgb(215,133,35)" fg:x="441" fg:w="1"/><text x="5.2517%" y="815.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="5.0017%" y="789" width="0.0113%" height="15" fill="rgb(213,28,5)" fg:x="441" fg:w="1"/><text x="5.2517%" y="799.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.01%)</title><rect x="5.0017%" y="773" width="0.0113%" height="15" fill="rgb(215,77,49)" fg:x="441" fg:w="1"/><text x="5.2517%" y="783.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.01%)</title><rect x="5.0017%" y="757" width="0.0113%" height="15" fill="rgb(248,100,22)" fg:x="441" fg:w="1"/><text x="5.2517%" y="767.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.01%)</title><rect x="5.0017%" y="741" width="0.0113%" height="15" fill="rgb(208,67,9)" fg:x="441" fg:w="1"/><text x="5.2517%" y="751.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.01%)</title><rect x="5.0017%" y="725" width="0.0113%" height="15" fill="rgb(219,133,21)" fg:x="441" fg:w="1"/><text x="5.2517%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.01%)</title><rect x="5.0017%" y="709" width="0.0113%" height="15" fill="rgb(246,46,29)" fg:x="441" fg:w="1"/><text x="5.2517%" y="719.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.01%)</title><rect x="5.0017%" y="693" width="0.0113%" height="15" fill="rgb(246,185,52)" fg:x="441" fg:w="1"/><text x="5.2517%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.01%)</title><rect x="5.0017%" y="677" width="0.0113%" height="15" fill="rgb(252,136,11)" fg:x="441" fg:w="1"/><text x="5.2517%" y="687.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.01%)</title><rect x="5.0017%" y="661" width="0.0113%" height="15" fill="rgb(219,138,53)" fg:x="441" fg:w="1"/><text x="5.2517%" y="671.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.01%)</title><rect x="5.0017%" y="645" width="0.0113%" height="15" fill="rgb(211,51,23)" fg:x="441" fg:w="1"/><text x="5.2517%" y="655.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (1 samples, 0.01%)</title><rect x="5.0017%" y="629" width="0.0113%" height="15" fill="rgb(247,221,28)" fg:x="441" fg:w="1"/><text x="5.2517%" y="639.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (1 samples, 0.01%)</title><rect x="5.0017%" y="613" width="0.0113%" height="15" fill="rgb(251,222,45)" fg:x="441" fg:w="1"/><text x="5.2517%" y="623.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (1 samples, 0.01%)</title><rect x="5.0017%" y="597" width="0.0113%" height="15" fill="rgb(217,162,53)" fg:x="441" fg:w="1"/><text x="5.2517%" y="607.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.01%)</title><rect x="5.0017%" y="581" width="0.0113%" height="15" fill="rgb(229,93,14)" fg:x="441" fg:w="1"/><text x="5.2517%" y="591.50"></text></g><g><title>0x1500d5794 (1 samples, 0.01%)</title><rect x="5.0130%" y="853" width="0.0113%" height="15" fill="rgb(209,67,49)" fg:x="442" fg:w="1"/><text x="5.2630%" y="863.50"></text></g><g><title>0x1500c880c (1 samples, 0.01%)</title><rect x="5.0130%" y="837" width="0.0113%" height="15" fill="rgb(213,87,29)" fg:x="442" fg:w="1"/><text x="5.2630%" y="847.50"></text></g><g><title>0x1500de774 (1 samples, 0.01%)</title><rect x="5.0130%" y="821" width="0.0113%" height="15" fill="rgb(205,151,52)" fg:x="442" fg:w="1"/><text x="5.2630%" y="831.50"></text></g><g><title>0x1500b8e7c (1 samples, 0.01%)</title><rect x="5.0130%" y="805" width="0.0113%" height="15" fill="rgb(253,215,39)" fg:x="442" fg:w="1"/><text x="5.2630%" y="815.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNullOrUndefined (1 samples, 0.01%)</title><rect x="5.0244%" y="853" width="0.0113%" height="15" fill="rgb(221,220,41)" fg:x="443" fg:w="1"/><text x="5.2744%" y="863.50"></text></g><g><title>0x150059310 (1 samples, 0.01%)</title><rect x="5.0357%" y="837" width="0.0113%" height="15" fill="rgb(218,133,21)" fg:x="444" fg:w="1"/><text x="5.2857%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="5.0357%" y="821" width="0.0113%" height="15" fill="rgb(221,193,43)" fg:x="444" fg:w="1"/><text x="5.2857%" y="831.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.01%)</title><rect x="5.0357%" y="805" width="0.0113%" height="15" fill="rgb(240,128,52)" fg:x="444" fg:w="1"/><text x="5.2857%" y="815.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0357%" y="789" width="0.0113%" height="15" fill="rgb(253,114,12)" fg:x="444" fg:w="1"/><text x="5.2857%" y="799.50"></text></g><g><title>deno`deno_runtime::ops::http::op_http_start::v8_fn_ptr (1 samples, 0.01%)</title><rect x="5.0357%" y="773" width="0.0113%" height="15" fill="rgb(215,223,47)" fg:x="444" fg:w="1"/><text x="5.2857%" y="783.50"></text></g><g><title>deno`deno_runtime::ops::http::op_http_start::call (1 samples, 0.01%)</title><rect x="5.0357%" y="757" width="0.0113%" height="15" fill="rgb(248,225,23)" fg:x="444" fg:w="1"/><text x="5.2857%" y="767.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::take (1 samples, 0.01%)</title><rect x="5.0357%" y="741" width="0.0113%" height="15" fill="rgb(250,108,0)" fg:x="444" fg:w="1"/><text x="5.2857%" y="751.50"></text></g><g><title>deno`Builtins_ConstructHandler (1 samples, 0.01%)</title><rect x="5.0471%" y="837" width="0.0113%" height="15" fill="rgb(228,208,7)" fg:x="445" fg:w="1"/><text x="5.2971%" y="847.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (1 samples, 0.01%)</title><rect x="5.0471%" y="821" width="0.0113%" height="15" fill="rgb(244,45,10)" fg:x="445" fg:w="1"/><text x="5.2971%" y="831.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="5.0471%" y="805" width="0.0113%" height="15" fill="rgb(207,125,25)" fg:x="445" fg:w="1"/><text x="5.2971%" y="815.50"></text></g><g><title>deno`Builtins_ConstructWithSpreadHandler (1 samples, 0.01%)</title><rect x="5.0471%" y="789" width="0.0113%" height="15" fill="rgb(210,195,18)" fg:x="445" fg:w="1"/><text x="5.2971%" y="799.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (1 samples, 0.01%)</title><rect x="5.0471%" y="773" width="0.0113%" height="15" fill="rgb(249,80,12)" fg:x="445" fg:w="1"/><text x="5.2971%" y="783.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="5.0471%" y="757" width="0.0113%" height="15" fill="rgb(221,65,9)" fg:x="445" fg:w="1"/><text x="5.2971%" y="767.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="5.0471%" y="741" width="0.0113%" height="15" fill="rgb(235,49,36)" fg:x="445" fg:w="1"/><text x="5.2971%" y="751.50"></text></g><g><title>deno`Builtins_DefineKeyedOwnPropertyHandler (1 samples, 0.01%)</title><rect x="5.0471%" y="725" width="0.0113%" height="15" fill="rgb(225,32,20)" fg:x="445" fg:w="1"/><text x="5.2971%" y="735.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="5.0471%" y="709" width="0.0113%" height="15" fill="rgb(215,141,46)" fg:x="445" fg:w="1"/><text x="5.2971%" y="719.50"></text></g><g><title>deno`v8::internal::Runtime_DefineObjectOwnProperty (1 samples, 0.01%)</title><rect x="5.0471%" y="693" width="0.0113%" height="15" fill="rgb(250,160,47)" fg:x="445" fg:w="1"/><text x="5.2971%" y="703.50"></text></g><g><title>deno`v8::internal::Runtime::DefineObjectOwnProperty(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0471%" y="677" width="0.0113%" height="15" fill="rgb(216,222,40)" fg:x="445" fg:w="1"/><text x="5.2971%" y="687.50"></text></g><g><title>deno`v8::internal::Object::TransitionAndWriteDataProperty(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (1 samples, 0.01%)</title><rect x="5.0471%" y="661" width="0.0113%" height="15" fill="rgb(234,217,39)" fg:x="445" fg:w="1"/><text x="5.2971%" y="671.50"></text></g><g><title>deno`v8::internal::LookupIterator::WriteDataValue(v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0471%" y="645" width="0.0113%" height="15" fill="rgb(207,178,40)" fg:x="445" fg:w="1"/><text x="5.2971%" y="655.50"></text></g><g><title>deno`Builtins_CallRuntimeHandler (1 samples, 0.01%)</title><rect x="5.0584%" y="821" width="0.0113%" height="15" fill="rgb(221,136,13)" fg:x="446" fg:w="1"/><text x="5.3084%" y="831.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvInRegister_NoBuiltinExit (1 samples, 0.01%)</title><rect x="5.0584%" y="805" width="0.0113%" height="15" fill="rgb(249,199,10)" fg:x="446" fg:w="1"/><text x="5.3084%" y="815.50"></text></g><g><title>deno`v8::internal::Runtime_DefineAccessorPropertyUnchecked (1 samples, 0.01%)</title><rect x="5.0584%" y="789" width="0.0113%" height="15" fill="rgb(249,222,13)" fg:x="446" fg:w="1"/><text x="5.3084%" y="799.50"></text></g><g><title>deno`v8::internal::JSObject::DefineAccessor(v8::internal::Handle&lt;v8::internal::JSObject&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0584%" y="773" width="0.0113%" height="15" fill="rgb(244,185,38)" fg:x="446" fg:w="1"/><text x="5.3084%" y="783.50"></text></g><g><title>deno`v8::internal::JSObject::DefineAccessor(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0584%" y="757" width="0.0113%" height="15" fill="rgb(236,202,9)" fg:x="446" fg:w="1"/><text x="5.3084%" y="767.50"></text></g><g><title>deno`v8::internal::LookupIterator::TransitionToAccessorProperty(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0584%" y="741" width="0.0113%" height="15" fill="rgb(250,229,37)" fg:x="446" fg:w="1"/><text x="5.3084%" y="751.50"></text></g><g><title>deno`v8::internal::JSObject::MigrateToMap(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSObject&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0584%" y="725" width="0.0113%" height="15" fill="rgb(206,174,23)" fg:x="446" fg:w="1"/><text x="5.3084%" y="735.50"></text></g><g><title>deno`v8::internal::BaseNameDictionary&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Add(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::NameDictionary&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0584%" y="709" width="0.0113%" height="15" fill="rgb(211,33,43)" fg:x="446" fg:w="1"/><text x="5.3084%" y="719.50"></text></g><g><title>deno`v8::internal::Handle&lt;v8::internal::NameDictionary&gt; v8::internal::Dictionary&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Add&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::NameDictionary&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0584%" y="693" width="0.0113%" height="15" fill="rgb(245,58,50)" fg:x="446" fg:w="1"/><text x="5.3084%" y="703.50"></text></g><g><title>deno`Builtins_GetNamedPropertyHandler (1 samples, 0.01%)</title><rect x="5.0698%" y="821" width="0.0113%" height="15" fill="rgb(244,68,36)" fg:x="447" fg:w="1"/><text x="5.3198%" y="831.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.01%)</title><rect x="5.0811%" y="789" width="0.0113%" height="15" fill="rgb(232,229,15)" fg:x="448" fg:w="1"/><text x="5.3311%" y="799.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="5.0811%" y="773" width="0.0113%" height="15" fill="rgb(254,30,23)" fg:x="448" fg:w="1"/><text x="5.3311%" y="783.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.01%)</title><rect x="5.0811%" y="757" width="0.0113%" height="15" fill="rgb(235,160,14)" fg:x="448" fg:w="1"/><text x="5.3311%" y="767.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0811%" y="741" width="0.0113%" height="15" fill="rgb(212,155,44)" fg:x="448" fg:w="1"/><text x="5.3311%" y="751.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0811%" y="725" width="0.0113%" height="15" fill="rgb(226,2,50)" fg:x="448" fg:w="1"/><text x="5.3311%" y="735.50"></text></g><g><title>deno`bool v8::internal::(anonymous namespace)::IterativelyExecuteAndFinalizeUnoptimizedCompilationJobs&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::AccountingAllocator*, v8::internal::IsCompiledScope*, std::Cr::vector&lt;v8::internal::FinalizeUnoptimizedCompilationData, std::Cr::allocator&lt;v8::internal::FinalizeUnoptimizedCompilationData&gt; &gt;*, std::Cr::vector&lt;v8::internal::DeferredFinalizationJobData, std::Cr::allocator (1 samples, 0.01%)</title><rect x="5.0811%" y="709" width="0.0113%" height="15" fill="rgb(234,177,6)" fg:x="448" fg:w="1"/><text x="5.3311%" y="719.50"></text></g><g><title>deno`v8::internal::CompilationJob::Status v8::internal::(anonymous namespace)::FinalizeSingleUnoptimizedCompilationJob&lt;v8::internal::Isolate&gt;(v8::internal::UnoptimizedCompilationJob*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Isolate*, std::Cr::vector&lt;v8::internal::FinalizeUnoptimizedCompilationData, std::Cr::allocator (1 samples, 0.01%)</title><rect x="5.0811%" y="693" width="0.0113%" height="15" fill="rgb(217,24,9)" fg:x="448" fg:w="1"/><text x="5.3311%" y="703.50"></text></g><g><title>deno`v8::internal::interpreter::InterpreterCompilationJob::FinalizeJobImpl(v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0811%" y="677" width="0.0113%" height="15" fill="rgb(220,13,46)" fg:x="448" fg:w="1"/><text x="5.3311%" y="687.50"></text></g><g><title>deno`v8::internal::CompilationJob::Status v8::internal::interpreter::InterpreterCompilationJob::DoFinalizeJobImpl&lt;v8::internal::Isolate&gt;(v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0811%" y="661" width="0.0113%" height="15" fill="rgb(239,221,27)" fg:x="448" fg:w="1"/><text x="5.3311%" y="671.50"></text></g><g><title>deno`v8::internal::Handle&lt;v8::internal::BytecodeArray&gt; v8::internal::interpreter::BytecodeGenerator::FinalizeBytecode&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0811%" y="645" width="0.0113%" height="15" fill="rgb(222,198,25)" fg:x="448" fg:w="1"/><text x="5.3311%" y="655.50"></text></g><g><title>deno`void v8::internal::interpreter::BytecodeGenerator::AllocateDeferredConstants&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0811%" y="629" width="0.0113%" height="15" fill="rgb(211,99,13)" fg:x="448" fg:w="1"/><text x="5.3311%" y="639.50"></text></g><g><title>deno`void v8::internal::ObjectLiteralBoilerplateBuilder::BuildBoilerplateDescription&lt;v8::internal::Isolate&gt; (1 samples, 0.01%)</title><rect x="5.0811%" y="613" width="0.0113%" height="15" fill="rgb(232,111,31)" fg:x="448" fg:w="1"/><text x="5.3311%" y="623.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewFixedArrayWithFiller(v8::internal::Handle&lt;v8::internal::Map&gt;, int, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0811%" y="597" width="0.0113%" height="15" fill="rgb(245,82,37)" fg:x="448" fg:w="1"/><text x="5.3311%" y="607.50"></text></g><g><title>deno`Builtins_CreateObjectLiteralHandler (1 samples, 0.01%)</title><rect x="5.0924%" y="789" width="0.0113%" height="15" fill="rgb(227,149,46)" fg:x="449" fg:w="1"/><text x="5.3424%" y="799.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="5.0924%" y="773" width="0.0113%" height="15" fill="rgb(218,36,50)" fg:x="449" fg:w="1"/><text x="5.3424%" y="783.50"></text></g><g><title>deno`v8::internal::Runtime_CreateObjectLiteral (1 samples, 0.01%)</title><rect x="5.0924%" y="757" width="0.0113%" height="15" fill="rgb(226,80,48)" fg:x="449" fg:w="1"/><text x="5.3424%" y="767.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CreateObjectLiteral(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0924%" y="741" width="0.0113%" height="15" fill="rgb(238,224,15)" fg:x="449" fg:w="1"/><text x="5.3424%" y="751.50"></text></g><g><title>deno`v8::internal::JSObject::SetOwnPropertyIgnoreAttributes(v8::internal::Handle&lt;v8::internal::JSObject&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0924%" y="725" width="0.0113%" height="15" fill="rgb(241,136,10)" fg:x="449" fg:w="1"/><text x="5.3424%" y="735.50"></text></g><g><title>deno`v8::internal::JSObject::DefineOwnPropertyIgnoreAttributes(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (1 samples, 0.01%)</title><rect x="5.0924%" y="709" width="0.0113%" height="15" fill="rgb(208,32,45)" fg:x="449" fg:w="1"/><text x="5.3424%" y="719.50"></text></g><g><title>deno`v8::internal::Object::TransitionAndWriteDataProperty(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (1 samples, 0.01%)</title><rect x="5.0924%" y="693" width="0.0113%" height="15" fill="rgb(207,135,9)" fg:x="449" fg:w="1"/><text x="5.3424%" y="703.50"></text></g><g><title>deno`v8::internal::LookupIterator::PrepareTransitionToDataProperty(v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0924%" y="677" width="0.0113%" height="15" fill="rgb(206,86,44)" fg:x="449" fg:w="1"/><text x="5.3424%" y="687.50"></text></g><g><title>deno`v8::internal::Map::TransitionToDataProperty(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0924%" y="661" width="0.0113%" height="15" fill="rgb(245,177,15)" fg:x="449" fg:w="1"/><text x="5.3424%" y="671.50"></text></g><g><title>deno`v8::internal::Map::CopyWithField(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0924%" y="645" width="0.0113%" height="15" fill="rgb(206,64,50)" fg:x="449" fg:w="1"/><text x="5.3424%" y="655.50"></text></g><g><title>deno`v8::internal::Map::ShareDescriptor(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0924%" y="629" width="0.0113%" height="15" fill="rgb(234,36,40)" fg:x="449" fg:w="1"/><text x="5.3424%" y="639.50"></text></g><g><title>deno`v8::internal::Map::EnsureDescriptorSlack(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.0924%" y="613" width="0.0113%" height="15" fill="rgb(213,64,8)" fg:x="449" fg:w="1"/><text x="5.3424%" y="623.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewDescriptorArray (1 samples, 0.01%)</title><rect x="5.0924%" y="597" width="0.0113%" height="15" fill="rgb(210,75,36)" fg:x="449" fg:w="1"/><text x="5.3424%" y="607.50"></text></g><g><title>deno`Builtins_GetNamedPropertyHandler (1 samples, 0.01%)</title><rect x="5.1038%" y="789" width="0.0113%" height="15" fill="rgb(229,88,21)" fg:x="450" fg:w="1"/><text x="5.3538%" y="799.50"></text></g><g><title>deno`Builtins_LoadIC_NoFeedback (1 samples, 0.01%)</title><rect x="5.1038%" y="773" width="0.0113%" height="15" fill="rgb(252,204,47)" fg:x="450" fg:w="1"/><text x="5.3538%" y="783.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::resolve_async_ops (18 samples, 0.20%)</title><rect x="4.9223%" y="1045" width="0.2042%" height="15" fill="rgb(208,77,27)" fg:x="434" fg:w="18"/><text x="5.1723%" y="1055.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (17 samples, 0.19%)</title><rect x="4.9337%" y="1029" width="0.1928%" height="15" fill="rgb(221,76,26)" fg:x="435" fg:w="17"/><text x="5.1837%" y="1039.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (17 samples, 0.19%)</title><rect x="4.9337%" y="1013" width="0.1928%" height="15" fill="rgb(225,139,18)" fg:x="435" fg:w="17"/><text x="5.1837%" y="1023.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (17 samples, 0.19%)</title><rect x="4.9337%" y="997" width="0.1928%" height="15" fill="rgb(230,137,11)" fg:x="435" fg:w="17"/><text x="5.1837%" y="1007.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (17 samples, 0.19%)</title><rect x="4.9337%" y="981" width="0.1928%" height="15" fill="rgb(212,28,1)" fg:x="435" fg:w="17"/><text x="5.1837%" y="991.50"></text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (17 samples, 0.19%)</title><rect x="4.9337%" y="965" width="0.1928%" height="15" fill="rgb(248,164,17)" fg:x="435" fg:w="17"/><text x="5.1837%" y="975.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (17 samples, 0.19%)</title><rect x="4.9337%" y="949" width="0.1928%" height="15" fill="rgb(222,171,42)" fg:x="435" fg:w="17"/><text x="5.1837%" y="959.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (17 samples, 0.19%)</title><rect x="4.9337%" y="933" width="0.1928%" height="15" fill="rgb(243,84,45)" fg:x="435" fg:w="17"/><text x="5.1837%" y="943.50"></text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (17 samples, 0.19%)</title><rect x="4.9337%" y="917" width="0.1928%" height="15" fill="rgb(252,49,23)" fg:x="435" fg:w="17"/><text x="5.1837%" y="927.50"></text></g><g><title>deno`Builtins_RunMicrotasks (17 samples, 0.19%)</title><rect x="4.9337%" y="901" width="0.1928%" height="15" fill="rgb(215,19,7)" fg:x="435" fg:w="17"/><text x="5.1837%" y="911.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (17 samples, 0.19%)</title><rect x="4.9337%" y="885" width="0.1928%" height="15" fill="rgb(238,81,41)" fg:x="435" fg:w="17"/><text x="5.1837%" y="895.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (17 samples, 0.19%)</title><rect x="4.9337%" y="869" width="0.1928%" height="15" fill="rgb(210,199,37)" fg:x="435" fg:w="17"/><text x="5.1837%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (8 samples, 0.09%)</title><rect x="5.0357%" y="853" width="0.0907%" height="15" fill="rgb(244,192,49)" fg:x="444" fg:w="8"/><text x="5.2857%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (6 samples, 0.07%)</title><rect x="5.0584%" y="837" width="0.0681%" height="15" fill="rgb(226,211,11)" fg:x="446" fg:w="6"/><text x="5.3084%" y="847.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (4 samples, 0.05%)</title><rect x="5.0811%" y="821" width="0.0454%" height="15" fill="rgb(236,162,54)" fg:x="448" fg:w="4"/><text x="5.3311%" y="831.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (4 samples, 0.05%)</title><rect x="5.0811%" y="805" width="0.0454%" height="15" fill="rgb(220,229,9)" fg:x="448" fg:w="4"/><text x="5.3311%" y="815.50"></text></g><g><title>deno`Builtins_SetNamedPropertyHandler (1 samples, 0.01%)</title><rect x="5.1151%" y="789" width="0.0113%" height="15" fill="rgb(250,87,22)" fg:x="451" fg:w="1"/><text x="5.3651%" y="799.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="5.1151%" y="773" width="0.0113%" height="15" fill="rgb(239,43,17)" fg:x="451" fg:w="1"/><text x="5.3651%" y="783.50"></text></g><g><title>deno`v8::internal::Runtime_StoreIC_Miss (1 samples, 0.01%)</title><rect x="5.1151%" y="757" width="0.0113%" height="15" fill="rgb(231,177,25)" fg:x="451" fg:w="1"/><text x="5.3651%" y="767.50"></text></g><g><title>deno`v8::internal::StoreIC::Store(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.1151%" y="741" width="0.0113%" height="15" fill="rgb(219,179,1)" fg:x="451" fg:w="1"/><text x="5.3651%" y="751.50"></text></g><g><title>deno`v8::internal::LookupIterator::LookupIterator(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, unsigned long, v8::internal::Handle (1 samples, 0.01%)</title><rect x="5.1151%" y="725" width="0.0113%" height="15" fill="rgb(238,219,53)" fg:x="451" fg:w="1"/><text x="5.3651%" y="735.50"></text></g><g><title>deno`void v8::internal::LookupIterator::Start&lt;false&gt; (1 samples, 0.01%)</title><rect x="5.1151%" y="709" width="0.0113%" height="15" fill="rgb(232,167,36)" fg:x="451" fg:w="1"/><text x="5.3651%" y="719.50"></text></g><g><title>deno`v8::internal::LookupIterator::State v8::internal::LookupIterator::LookupInRegularHolder&lt;false&gt; (1 samples, 0.01%)</title><rect x="5.1151%" y="693" width="0.0113%" height="15" fill="rgb(244,19,51)" fg:x="451" fg:w="1"/><text x="5.3651%" y="703.50"></text></g><g><title>deno`deno_ffi::event_loop_middleware (2 samples, 0.02%)</title><rect x="5.1265%" y="1045" width="0.0227%" height="15" fill="rgb(224,6,22)" fg:x="452" fg:w="2"/><text x="5.3765%" y="1055.50"></text></g><g><title>deno`deno_napi::event_loop_middleware (3 samples, 0.03%)</title><rect x="5.1491%" y="1045" width="0.0340%" height="15" fill="rgb(224,145,5)" fg:x="454" fg:w="3"/><text x="5.3991%" y="1055.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (3 samples, 0.03%)</title><rect x="5.1491%" y="1029" width="0.0340%" height="15" fill="rgb(234,130,49)" fg:x="454" fg:w="3"/><text x="5.3991%" y="1039.50"></text></g><g><title>deno`futures_util::stream::stream::StreamExt::poll_next_unpin (2 samples, 0.02%)</title><rect x="5.1832%" y="1045" width="0.0227%" height="15" fill="rgb(254,6,2)" fg:x="457" fg:w="2"/><text x="5.4332%" y="1055.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.01%)</title><rect x="5.2059%" y="1029" width="0.0113%" height="15" fill="rgb(208,96,46)" fg:x="459" fg:w="1"/><text x="5.4559%" y="1039.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (5 samples, 0.06%)</title><rect x="5.2172%" y="933" width="0.0567%" height="15" fill="rgb(239,3,39)" fg:x="460" fg:w="5"/><text x="5.4672%" y="943.50"></text></g><g><title>deno`v8::internal::SerializerDeserializer::IterateSharedHeapObjectCache (1 samples, 0.01%)</title><rect x="5.2739%" y="933" width="0.0113%" height="15" fill="rgb(233,210,1)" fg:x="465" fg:w="1"/><text x="5.5239%" y="943.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (8 samples, 0.09%)</title><rect x="5.2172%" y="949" width="0.0907%" height="15" fill="rgb(244,137,37)" fg:x="460" fg:w="8"/><text x="5.4672%" y="959.50"></text></g><g><title>deno`v8::internal::SerializerDeserializer::IterateStartupObjectCache (2 samples, 0.02%)</title><rect x="5.2852%" y="933" width="0.0227%" height="15" fill="rgb(240,136,2)" fg:x="466" fg:w="2"/><text x="5.5352%" y="943.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (9 samples, 0.10%)</title><rect x="5.2172%" y="965" width="0.1021%" height="15" fill="rgb(239,18,37)" fg:x="460" fg:w="9"/><text x="5.4672%" y="975.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.01%)</title><rect x="5.3079%" y="949" width="0.0113%" height="15" fill="rgb(218,185,22)" fg:x="468" fg:w="1"/><text x="5.5579%" y="959.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (1 samples, 0.01%)</title><rect x="5.3079%" y="933" width="0.0113%" height="15" fill="rgb(225,218,4)" fg:x="468" fg:w="1"/><text x="5.5579%" y="943.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (1 samples, 0.01%)</title><rect x="5.3079%" y="917" width="0.0113%" height="15" fill="rgb(230,182,32)" fg:x="468" fg:w="1"/><text x="5.5579%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.01%)</title><rect x="5.3079%" y="901" width="0.0113%" height="15" fill="rgb(242,56,43)" fg:x="468" fg:w="1"/><text x="5.5579%" y="911.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (12 samples, 0.14%)</title><rect x="5.2059%" y="1045" width="0.1361%" height="15" fill="rgb(233,99,24)" fg:x="459" fg:w="12"/><text x="5.4559%" y="1055.50"></text></g><g><title>deno`v8::internal::ScavengeJob::Task::RunInternal (11 samples, 0.12%)</title><rect x="5.2172%" y="1029" width="0.1248%" height="15" fill="rgb(234,209,42)" fg:x="460" fg:w="11"/><text x="5.4672%" y="1039.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (11 samples, 0.12%)</title><rect x="5.2172%" y="1013" width="0.1248%" height="15" fill="rgb(227,7,12)" fg:x="460" fg:w="11"/><text x="5.4672%" y="1023.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (11 samples, 0.12%)</title><rect x="5.2172%" y="997" width="0.1248%" height="15" fill="rgb(245,203,43)" fg:x="460" fg:w="11"/><text x="5.4672%" y="1007.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (11 samples, 0.12%)</title><rect x="5.2172%" y="981" width="0.1248%" height="15" fill="rgb(238,205,33)" fg:x="460" fg:w="11"/><text x="5.4672%" y="991.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="5.3193%" y="965" width="0.0227%" height="15" fill="rgb(231,56,7)" fg:x="469" fg:w="2"/><text x="5.5693%" y="975.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::new (1 samples, 0.01%)</title><rect x="5.3420%" y="1045" width="0.0113%" height="15" fill="rgb(244,186,29)" fg:x="471" fg:w="1"/><text x="5.5920%" y="1055.50"></text></g><g><title>deno`&lt;T as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (1 samples, 0.01%)</title><rect x="5.3420%" y="1029" width="0.0113%" height="15" fill="rgb(234,111,31)" fg:x="471" fg:w="1"/><text x="5.5920%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="5.3533%" y="1045" width="0.0113%" height="15" fill="rgb(241,149,10)" fg:x="472" fg:w="1"/><text x="5.6033%" y="1055.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (78 samples, 0.88%)</title><rect x="4.4913%" y="1061" width="0.8847%" height="15" fill="rgb(249,206,44)" fg:x="396" fg:w="78"/><text x="4.7413%" y="1071.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="5.3646%" y="1045" width="0.0113%" height="15" fill="rgb(251,153,30)" fg:x="473" fg:w="1"/><text x="5.6146%" y="1055.50"></text></g><g><title>deno`v8__Platform__PumpMessageLoop (1 samples, 0.01%)</title><rect x="5.3760%" y="1061" width="0.0113%" height="15" fill="rgb(239,152,38)" fg:x="474" fg:w="1"/><text x="5.6260%" y="1071.50"></text></g><g><title>deno`deno::worker::CliMainWorker::run::_{{closure}} (97 samples, 1.10%)</title><rect x="4.2985%" y="1093" width="1.1001%" height="15" fill="rgb(249,139,47)" fg:x="379" fg:w="97"/><text x="4.5485%" y="1103.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::run_event_loop::_{{closure}} (83 samples, 0.94%)</title><rect x="4.4573%" y="1077" width="0.9414%" height="15" fill="rgb(244,64,35)" fg:x="393" fg:w="83"/><text x="4.7073%" y="1087.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="5.3873%" y="1061" width="0.0113%" height="15" fill="rgb(216,46,15)" fg:x="475" fg:w="1"/><text x="5.6373%" y="1071.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::DeserializeDeferredObjects (1 samples, 0.01%)</title><rect x="5.3987%" y="901" width="0.0113%" height="15" fill="rgb(250,74,19)" fg:x="476" fg:w="1"/><text x="5.6487%" y="911.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.3987%" y="885" width="0.0113%" height="15" fill="rgb(249,42,33)" fg:x="476" fg:w="1"/><text x="5.6487%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.3987%" y="869" width="0.0113%" height="15" fill="rgb(242,149,17)" fg:x="476" fg:w="1"/><text x="5.6487%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.3987%" y="853" width="0.0113%" height="15" fill="rgb(244,29,21)" fg:x="476" fg:w="1"/><text x="5.6487%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.3987%" y="837" width="0.0113%" height="15" fill="rgb(220,130,37)" fg:x="476" fg:w="1"/><text x="5.6487%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.3987%" y="821" width="0.0113%" height="15" fill="rgb(211,67,2)" fg:x="476" fg:w="1"/><text x="5.6487%" y="831.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.02%)</title><rect x="5.3987%" y="1013" width="0.0227%" height="15" fill="rgb(235,68,52)" fg:x="476" fg:w="2"/><text x="5.6487%" y="1023.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.02%)</title><rect x="5.3987%" y="997" width="0.0227%" height="15" fill="rgb(246,142,3)" fg:x="476" fg:w="2"/><text x="5.6487%" y="1007.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.02%)</title><rect x="5.3987%" y="981" width="0.0227%" height="15" fill="rgb(241,25,7)" fg:x="476" fg:w="2"/><text x="5.6487%" y="991.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.02%)</title><rect x="5.3987%" y="965" width="0.0227%" height="15" fill="rgb(242,119,39)" fg:x="476" fg:w="2"/><text x="5.6487%" y="975.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.02%)</title><rect x="5.3987%" y="949" width="0.0227%" height="15" fill="rgb(241,98,45)" fg:x="476" fg:w="2"/><text x="5.6487%" y="959.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.02%)</title><rect x="5.3987%" y="933" width="0.0227%" height="15" fill="rgb(254,28,30)" fg:x="476" fg:w="2"/><text x="5.6487%" y="943.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.02%)</title><rect x="5.3987%" y="917" width="0.0227%" height="15" fill="rgb(241,142,54)" fg:x="476" fg:w="2"/><text x="5.6487%" y="927.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="901" width="0.0113%" height="15" fill="rgb(222,85,15)" fg:x="477" fg:w="1"/><text x="5.6600%" y="911.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="5.4100%" y="885" width="0.0113%" height="15" fill="rgb(210,85,47)" fg:x="477" fg:w="1"/><text x="5.6600%" y="895.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="869" width="0.0113%" height="15" fill="rgb(224,206,25)" fg:x="477" fg:w="1"/><text x="5.6600%" y="879.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="853" width="0.0113%" height="15" fill="rgb(243,201,19)" fg:x="477" fg:w="1"/><text x="5.6600%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="837" width="0.0113%" height="15" fill="rgb(236,59,4)" fg:x="477" fg:w="1"/><text x="5.6600%" y="847.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="5.4100%" y="821" width="0.0113%" height="15" fill="rgb(254,179,45)" fg:x="477" fg:w="1"/><text x="5.6600%" y="831.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="805" width="0.0113%" height="15" fill="rgb(226,14,10)" fg:x="477" fg:w="1"/><text x="5.6600%" y="815.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="789" width="0.0113%" height="15" fill="rgb(244,27,41)" fg:x="477" fg:w="1"/><text x="5.6600%" y="799.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="773" width="0.0113%" height="15" fill="rgb(235,35,32)" fg:x="477" fg:w="1"/><text x="5.6600%" y="783.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="5.4100%" y="757" width="0.0113%" height="15" fill="rgb(218,68,31)" fg:x="477" fg:w="1"/><text x="5.6600%" y="767.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="741" width="0.0113%" height="15" fill="rgb(207,120,37)" fg:x="477" fg:w="1"/><text x="5.6600%" y="751.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="725" width="0.0113%" height="15" fill="rgb(227,98,0)" fg:x="477" fg:w="1"/><text x="5.6600%" y="735.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="709" width="0.0113%" height="15" fill="rgb(207,7,3)" fg:x="477" fg:w="1"/><text x="5.6600%" y="719.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="5.4100%" y="693" width="0.0113%" height="15" fill="rgb(206,98,19)" fg:x="477" fg:w="1"/><text x="5.6600%" y="703.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="677" width="0.0113%" height="15" fill="rgb(217,5,26)" fg:x="477" fg:w="1"/><text x="5.6600%" y="687.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="661" width="0.0113%" height="15" fill="rgb(235,190,38)" fg:x="477" fg:w="1"/><text x="5.6600%" y="671.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="645" width="0.0113%" height="15" fill="rgb(247,86,24)" fg:x="477" fg:w="1"/><text x="5.6600%" y="655.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="629" width="0.0113%" height="15" fill="rgb(205,101,16)" fg:x="477" fg:w="1"/><text x="5.6600%" y="639.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="613" width="0.0113%" height="15" fill="rgb(246,168,33)" fg:x="477" fg:w="1"/><text x="5.6600%" y="623.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="597" width="0.0113%" height="15" fill="rgb(231,114,1)" fg:x="477" fg:w="1"/><text x="5.6600%" y="607.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="581" width="0.0113%" height="15" fill="rgb(207,184,53)" fg:x="477" fg:w="1"/><text x="5.6600%" y="591.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="565" width="0.0113%" height="15" fill="rgb(224,95,51)" fg:x="477" fg:w="1"/><text x="5.6600%" y="575.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="549" width="0.0113%" height="15" fill="rgb(212,188,45)" fg:x="477" fg:w="1"/><text x="5.6600%" y="559.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="533" width="0.0113%" height="15" fill="rgb(223,154,38)" fg:x="477" fg:w="1"/><text x="5.6600%" y="543.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="517" width="0.0113%" height="15" fill="rgb(251,22,52)" fg:x="477" fg:w="1"/><text x="5.6600%" y="527.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="501" width="0.0113%" height="15" fill="rgb(229,209,22)" fg:x="477" fg:w="1"/><text x="5.6600%" y="511.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="485" width="0.0113%" height="15" fill="rgb(234,138,34)" fg:x="477" fg:w="1"/><text x="5.6600%" y="495.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="469" width="0.0113%" height="15" fill="rgb(212,95,11)" fg:x="477" fg:w="1"/><text x="5.6600%" y="479.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="453" width="0.0113%" height="15" fill="rgb(240,179,47)" fg:x="477" fg:w="1"/><text x="5.6600%" y="463.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="437" width="0.0113%" height="15" fill="rgb(240,163,11)" fg:x="477" fg:w="1"/><text x="5.6600%" y="447.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="421" width="0.0113%" height="15" fill="rgb(236,37,12)" fg:x="477" fg:w="1"/><text x="5.6600%" y="431.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="405" width="0.0113%" height="15" fill="rgb(232,164,16)" fg:x="477" fg:w="1"/><text x="5.6600%" y="415.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="389" width="0.0113%" height="15" fill="rgb(244,205,15)" fg:x="477" fg:w="1"/><text x="5.6600%" y="399.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="373" width="0.0113%" height="15" fill="rgb(223,117,47)" fg:x="477" fg:w="1"/><text x="5.6600%" y="383.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="357" width="0.0113%" height="15" fill="rgb(244,107,35)" fg:x="477" fg:w="1"/><text x="5.6600%" y="367.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="341" width="0.0113%" height="15" fill="rgb(205,140,8)" fg:x="477" fg:w="1"/><text x="5.6600%" y="351.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="325" width="0.0113%" height="15" fill="rgb(228,84,46)" fg:x="477" fg:w="1"/><text x="5.6600%" y="335.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="309" width="0.0113%" height="15" fill="rgb(254,188,9)" fg:x="477" fg:w="1"/><text x="5.6600%" y="319.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="293" width="0.0113%" height="15" fill="rgb(206,112,54)" fg:x="477" fg:w="1"/><text x="5.6600%" y="303.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="277" width="0.0113%" height="15" fill="rgb(216,84,49)" fg:x="477" fg:w="1"/><text x="5.6600%" y="287.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="261" width="0.0113%" height="15" fill="rgb(214,194,35)" fg:x="477" fg:w="1"/><text x="5.6600%" y="271.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="245" width="0.0113%" height="15" fill="rgb(249,28,3)" fg:x="477" fg:w="1"/><text x="5.6600%" y="255.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="229" width="0.0113%" height="15" fill="rgb(222,56,52)" fg:x="477" fg:w="1"/><text x="5.6600%" y="239.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="5.4100%" y="213" width="0.0113%" height="15" fill="rgb(245,217,50)" fg:x="477" fg:w="1"/><text x="5.6600%" y="223.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="5.4100%" y="197" width="0.0113%" height="15" fill="rgb(213,201,24)" fg:x="477" fg:w="1"/><text x="5.6600%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::AllocateRawOrFail (1 samples, 0.01%)</title><rect x="5.4100%" y="181" width="0.0113%" height="15" fill="rgb(248,116,28)" fg:x="477" fg:w="1"/><text x="5.6600%" y="191.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::RefillLabMain (1 samples, 0.01%)</title><rect x="5.4100%" y="165" width="0.0113%" height="15" fill="rgb(219,72,43)" fg:x="477" fg:w="1"/><text x="5.6600%" y="175.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::RawRefillLabMain (1 samples, 0.01%)</title><rect x="5.4100%" y="149" width="0.0113%" height="15" fill="rgb(209,138,14)" fg:x="477" fg:w="1"/><text x="5.6600%" y="159.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::TryExpand (1 samples, 0.01%)</title><rect x="5.4100%" y="133" width="0.0113%" height="15" fill="rgb(222,18,33)" fg:x="477" fg:w="1"/><text x="5.6600%" y="143.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::TryExpandImpl (1 samples, 0.01%)</title><rect x="5.4100%" y="117" width="0.0113%" height="15" fill="rgb(213,199,7)" fg:x="477" fg:w="1"/><text x="5.6600%" y="127.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (1 samples, 0.01%)</title><rect x="5.4100%" y="101" width="0.0113%" height="15" fill="rgb(250,110,10)" fg:x="477" fg:w="1"/><text x="5.6600%" y="111.50"></text></g><g><title>deno`v8::internal::Page::Page (1 samples, 0.01%)</title><rect x="5.4100%" y="85" width="0.0113%" height="15" fill="rgb(248,123,6)" fg:x="477" fg:w="1"/><text x="5.6600%" y="95.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (1 samples, 0.01%)</title><rect x="5.4100%" y="69" width="0.0113%" height="15" fill="rgb(206,91,31)" fg:x="477" fg:w="1"/><text x="5.6600%" y="79.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="5.4100%" y="53" width="0.0113%" height="15" fill="rgb(211,154,13)" fg:x="477" fg:w="1"/><text x="5.6600%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.01%)</title><rect x="5.4100%" y="37" width="0.0113%" height="15" fill="rgb(225,148,7)" fg:x="477" fg:w="1"/><text x="5.6600%" y="47.50"></text></g><g><title>deno`v8::internal::SharedHeapDeserializer::DeserializeIntoIsolate (1 samples, 0.01%)</title><rect x="5.4213%" y="933" width="0.0113%" height="15" fill="rgb(220,160,43)" fg:x="478" fg:w="1"/><text x="5.6713%" y="943.50"></text></g><g><title>deno`v8::internal::SharedHeapDeserializer::DeserializeStringTable (1 samples, 0.01%)</title><rect x="5.4213%" y="917" width="0.0113%" height="15" fill="rgb(213,52,39)" fg:x="478" fg:w="1"/><text x="5.6713%" y="927.50"></text></g><g><title>deno`v8::internal::Handle&lt;v8::internal::String&gt; v8::internal::StringTable::LookupKey&lt;v8::internal::StringTableInsertionKey, v8::internal::Isolate&gt; (1 samples, 0.01%)</title><rect x="5.4213%" y="901" width="0.0113%" height="15" fill="rgb(243,137,7)" fg:x="478" fg:w="1"/><text x="5.6713%" y="911.50"></text></g><g><title>deno`v8::internal::InternalIndex v8::internal::StringTable::Data::FindEntryOrInsertionEntry&lt;v8::internal::Isolate, v8::internal::StringTableInsertionKey&gt; (1 samples, 0.01%)</title><rect x="5.4213%" y="885" width="0.0113%" height="15" fill="rgb(230,79,13)" fg:x="478" fg:w="1"/><text x="5.6713%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadVariableRawData&lt;v8::internal::SlotAccessorForHeapObject&gt; (2 samples, 0.02%)</title><rect x="5.4327%" y="805" width="0.0227%" height="15" fill="rgb(247,105,23)" fg:x="479" fg:w="2"/><text x="5.6827%" y="815.50"></text></g><g><title>deno`v8::Isolate::New (4 samples, 0.05%)</title><rect x="5.4213%" y="1013" width="0.0454%" height="15" fill="rgb(223,179,41)" fg:x="478" fg:w="4"/><text x="5.6713%" y="1023.50"></text></g><g><title>deno`v8::Isolate::Initialize (4 samples, 0.05%)</title><rect x="5.4213%" y="997" width="0.0454%" height="15" fill="rgb(218,9,34)" fg:x="478" fg:w="4"/><text x="5.6713%" y="1007.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (4 samples, 0.05%)</title><rect x="5.4213%" y="981" width="0.0454%" height="15" fill="rgb(222,106,8)" fg:x="478" fg:w="4"/><text x="5.6713%" y="991.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (4 samples, 0.05%)</title><rect x="5.4213%" y="965" width="0.0454%" height="15" fill="rgb(211,220,0)" fg:x="478" fg:w="4"/><text x="5.6713%" y="975.50"></text></g><g><title>deno`v8::internal::Isolate::Init (4 samples, 0.05%)</title><rect x="5.4213%" y="949" width="0.0454%" height="15" fill="rgb(229,52,16)" fg:x="478" fg:w="4"/><text x="5.6713%" y="959.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (3 samples, 0.03%)</title><rect x="5.4327%" y="933" width="0.0340%" height="15" fill="rgb(212,155,18)" fg:x="479" fg:w="3"/><text x="5.6827%" y="943.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (3 samples, 0.03%)</title><rect x="5.4327%" y="917" width="0.0340%" height="15" fill="rgb(242,21,14)" fg:x="479" fg:w="3"/><text x="5.6827%" y="927.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (3 samples, 0.03%)</title><rect x="5.4327%" y="901" width="0.0340%" height="15" fill="rgb(222,19,48)" fg:x="479" fg:w="3"/><text x="5.6827%" y="911.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (3 samples, 0.03%)</title><rect x="5.4327%" y="885" width="0.0340%" height="15" fill="rgb(232,45,27)" fg:x="479" fg:w="3"/><text x="5.6827%" y="895.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (3 samples, 0.03%)</title><rect x="5.4327%" y="869" width="0.0340%" height="15" fill="rgb(249,103,42)" fg:x="479" fg:w="3"/><text x="5.6827%" y="879.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (3 samples, 0.03%)</title><rect x="5.4327%" y="853" width="0.0340%" height="15" fill="rgb(246,81,33)" fg:x="479" fg:w="3"/><text x="5.6827%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (3 samples, 0.03%)</title><rect x="5.4327%" y="837" width="0.0340%" height="15" fill="rgb(252,33,42)" fg:x="479" fg:w="3"/><text x="5.6827%" y="847.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (3 samples, 0.03%)</title><rect x="5.4327%" y="821" width="0.0340%" height="15" fill="rgb(209,212,41)" fg:x="479" fg:w="3"/><text x="5.6827%" y="831.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.01%)</title><rect x="5.4554%" y="805" width="0.0113%" height="15" fill="rgb(207,154,6)" fg:x="481" fg:w="1"/><text x="5.7054%" y="815.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (7 samples, 0.08%)</title><rect x="5.3987%" y="1061" width="0.0794%" height="15" fill="rgb(223,64,47)" fg:x="476" fg:w="7"/><text x="5.6487%" y="1071.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::from_options (7 samples, 0.08%)</title><rect x="5.3987%" y="1045" width="0.0794%" height="15" fill="rgb(211,161,38)" fg:x="476" fg:w="7"/><text x="5.6487%" y="1055.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (7 samples, 0.08%)</title><rect x="5.3987%" y="1029" width="0.0794%" height="15" fill="rgb(219,138,40)" fg:x="476" fg:w="7"/><text x="5.6487%" y="1039.50"></text></g><g><title>deno`v8::Value::ToBoolean (1 samples, 0.01%)</title><rect x="5.4667%" y="1013" width="0.0113%" height="15" fill="rgb(241,228,46)" fg:x="482" fg:w="1"/><text x="5.7167%" y="1023.50"></text></g><g><title>deno`deno::main::_{{closure}} (116 samples, 1.32%)</title><rect x="4.1738%" y="1141" width="1.3156%" height="15" fill="rgb(223,209,38)" fg:x="368" fg:w="116"/><text x="4.4238%" y="1151.50"></text></g><g><title>deno`deno::run_subcommand::_{{closure}} (114 samples, 1.29%)</title><rect x="4.1964%" y="1125" width="1.2930%" height="15" fill="rgb(236,164,45)" fg:x="370" fg:w="114"/><text x="4.4464%" y="1135.50"></text></g><g><title>deno`deno::tools::run::run_script::_{{closure}} (114 samples, 1.29%)</title><rect x="4.1964%" y="1109" width="1.2930%" height="15" fill="rgb(231,15,5)" fg:x="370" fg:w="114"/><text x="4.4464%" y="1119.50"></text></g><g><title>deno`deno::worker::create_main_worker::_{{closure}} (8 samples, 0.09%)</title><rect x="5.3987%" y="1093" width="0.0907%" height="15" fill="rgb(252,35,15)" fg:x="476" fg:w="8"/><text x="5.6487%" y="1103.50"></text></g><g><title>deno`deno::worker::create_main_worker_internal::_{{closure}} (8 samples, 0.09%)</title><rect x="5.3987%" y="1077" width="0.0907%" height="15" fill="rgb(248,181,18)" fg:x="476" fg:w="8"/><text x="5.6487%" y="1087.50"></text></g><g><title>deno`v8::icu::get_language_tag (1 samples, 0.01%)</title><rect x="5.4781%" y="1061" width="0.0113%" height="15" fill="rgb(233,39,42)" fg:x="483" fg:w="1"/><text x="5.7281%" y="1071.50"></text></g><g><title>deno`icu_get_default_locale (1 samples, 0.01%)</title><rect x="5.4781%" y="1045" width="0.0113%" height="15" fill="rgb(238,110,33)" fg:x="483" fg:w="1"/><text x="5.7281%" y="1055.50"></text></g><g><title>deno`icu_72::Locale::getDefault (1 samples, 0.01%)</title><rect x="5.4781%" y="1029" width="0.0113%" height="15" fill="rgb(233,195,10)" fg:x="483" fg:w="1"/><text x="5.7281%" y="1039.50"></text></g><g><title>deno`ulocimp_canonicalize_72 (1 samples, 0.01%)</title><rect x="5.4781%" y="1013" width="0.0113%" height="15" fill="rgb(254,105,3)" fg:x="483" fg:w="1"/><text x="5.7281%" y="1023.50"></text></g><g><title>deno`deno_websocket::server::op_server_ws_next_event::call::_{{closure}} (2 samples, 0.02%)</title><rect x="5.5688%" y="1125" width="0.0227%" height="15" fill="rgb(221,225,9)" fg:x="491" fg:w="2"/><text x="5.8188%" y="1135.50"></text></g><g><title>deno`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (2 samples, 0.02%)</title><rect x="5.6709%" y="1093" width="0.0227%" height="15" fill="rgb(224,227,45)" fg:x="500" fg:w="2"/><text x="5.9209%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`writev (2 samples, 0.02%)</title><rect x="5.6709%" y="1077" width="0.0227%" height="15" fill="rgb(229,198,43)" fg:x="500" fg:w="2"/><text x="5.9209%" y="1087.50"></text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3 samples, 0.03%)</title><rect x="5.6709%" y="1109" width="0.0340%" height="15" fill="rgb(206,209,35)" fg:x="500" fg:w="3"/><text x="5.9209%" y="1119.50"></text></g><g><title>deno`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.01%)</title><rect x="5.6935%" y="1093" width="0.0113%" height="15" fill="rgb(245,195,53)" fg:x="502" fg:w="1"/><text x="5.9435%" y="1103.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.01%)</title><rect x="5.6935%" y="1077" width="0.0113%" height="15" fill="rgb(240,92,26)" fg:x="502" fg:w="1"/><text x="5.9435%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1 samples, 0.01%)</title><rect x="5.6935%" y="1061" width="0.0113%" height="15" fill="rgb(207,40,23)" fg:x="502" fg:w="1"/><text x="5.9435%" y="1071.50"></text></g><g><title>deno`&lt;deno_core::async_cell::internal::AsyncBorrowFutureImpl&lt;T,M&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="5.7049%" y="1109" width="0.0227%" height="15" fill="rgb(223,111,35)" fg:x="503" fg:w="2"/><text x="5.9549%" y="1119.50"></text></g><g><title>deno`&lt;hyper::upgrade::Upgraded as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.02%)</title><rect x="5.7276%" y="1109" width="0.0227%" height="15" fill="rgb(229,147,28)" fg:x="505" fg:w="2"/><text x="5.9776%" y="1119.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowFutureImpl&lt;tokio::process::Child,deno_core::async_cell::internal::Exclusive&gt;&gt; (1 samples, 0.01%)</title><rect x="5.7503%" y="1109" width="0.0113%" height="15" fill="rgb(211,29,28)" fg:x="507" fg:w="1"/><text x="6.0003%" y="1119.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;fastwebsockets::WebSocket&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn deno_websocket::Upgraded&gt;&gt;&gt;::read_frame::{{closure}}&gt; (2 samples, 0.02%)</title><rect x="5.7616%" y="1109" width="0.0227%" height="15" fill="rgb(228,72,33)" fg:x="508" fg:w="2"/><text x="6.0116%" y="1119.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (1 samples, 0.01%)</title><rect x="5.7843%" y="1109" width="0.0113%" height="15" fill="rgb(205,214,31)" fg:x="510" fg:w="1"/><text x="6.0343%" y="1119.50"></text></g><g><title>deno`deno_core::async_cell::RcRef&lt;deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::borrow_mut (3 samples, 0.03%)</title><rect x="5.7956%" y="1109" width="0.0340%" height="15" fill="rgb(224,111,15)" fg:x="511" fg:w="3"/><text x="6.0456%" y="1119.50"></text></g><g><title>deno`deno_websocket::server::event::JsCb::call (1 samples, 0.01%)</title><rect x="5.8296%" y="1109" width="0.0113%" height="15" fill="rgb(253,21,26)" fg:x="514" fg:w="1"/><text x="6.0796%" y="1119.50"></text></g><g><title>deno`&lt;deno_core::async_cell::internal::AsyncBorrowFutureImpl&lt;T,M&gt; as core::future::future::Future&gt;::poll (3 samples, 0.03%)</title><rect x="6.5555%" y="1093" width="0.0340%" height="15" fill="rgb(245,139,43)" fg:x="578" fg:w="3"/><text x="6.8055%" y="1103.50"></text></g><g><title>deno`deno_core::async_cell::internal::BorrowCount::remove (1 samples, 0.01%)</title><rect x="6.5782%" y="1077" width="0.0113%" height="15" fill="rgb(252,170,7)" fg:x="580" fg:w="1"/><text x="6.8282%" y="1087.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6 (1 samples, 0.01%)</title><rect x="6.6349%" y="1077" width="0.0113%" height="15" fill="rgb(231,118,14)" fg:x="585" fg:w="1"/><text x="6.8849%" y="1087.50"></text></g><g><title>deno`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="7.0205%" y="1061" width="0.0227%" height="15" fill="rgb(238,83,0)" fg:x="619" fg:w="2"/><text x="7.2705%" y="1071.50"></text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (26 samples, 0.29%)</title><rect x="7.0432%" y="1061" width="0.2949%" height="15" fill="rgb(221,39,39)" fg:x="621" fg:w="26"/><text x="7.2932%" y="1071.50"></text></g><g><title>deno`tokio::runtime::task::waker::clone_waker (3 samples, 0.03%)</title><rect x="7.3041%" y="1045" width="0.0340%" height="15" fill="rgb(222,119,46)" fg:x="644" fg:w="3"/><text x="7.5541%" y="1055.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.18%)</title><rect x="7.3381%" y="1061" width="0.1815%" height="15" fill="rgb(222,165,49)" fg:x="647" fg:w="16"/><text x="7.5881%" y="1071.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (2 samples, 0.02%)</title><rect x="7.5196%" y="1061" width="0.0227%" height="15" fill="rgb(219,113,52)" fg:x="663" fg:w="2"/><text x="7.7696%" y="1071.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (3,586 samples, 40.67%)</title><rect x="6.6463%" y="1077" width="40.6714%" height="15" fill="rgb(214,7,15)" fg:x="586" fg:w="3586"/><text x="6.8963%" y="1087.50">deno`tokio::net::tcp::stream::TcpStream::poll_read_priv</text></g><g><title>libsystem_kernel.dylib`__recvfrom (3,507 samples, 39.78%)</title><rect x="7.5422%" y="1061" width="39.7754%" height="15" fill="rgb(235,32,4)" fg:x="665" fg:w="3507"/><text x="7.7922%" y="1071.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>deno`&lt;hyper::upgrade::Upgraded as tokio::io::async_read::AsyncRead&gt;::poll_read (3,596 samples, 40.78%)</title><rect x="6.5895%" y="1093" width="40.7848%" height="15" fill="rgb(238,90,54)" fg:x="581" fg:w="3596"/><text x="6.8395%" y="1103.50">deno`&lt;hyper::upgrade::Upgraded as tokio::io::async_read::AsyncRead&gt;..</text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (5 samples, 0.06%)</title><rect x="47.3177%" y="1077" width="0.0567%" height="15" fill="rgb(213,208,19)" fg:x="4172" fg:w="5"/><text x="47.5677%" y="1087.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (3 samples, 0.03%)</title><rect x="47.3744%" y="1093" width="0.0340%" height="15" fill="rgb(233,156,4)" fg:x="4177" fg:w="3"/><text x="47.6244%" y="1103.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowFutureImpl&lt;tokio::process::Child,deno_core::async_cell::internal::Exclusive&gt;&gt; (1 samples, 0.01%)</title><rect x="47.4084%" y="1093" width="0.0113%" height="15" fill="rgb(207,194,5)" fg:x="4180" fg:w="1"/><text x="47.6584%" y="1103.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowImpl&lt;tokio::process::Child,deno_core::async_cell::internal::Exclusive&gt;&gt; (5 samples, 0.06%)</title><rect x="47.4198%" y="1093" width="0.0567%" height="15" fill="rgb(206,111,30)" fg:x="4181" fg:w="5"/><text x="47.6698%" y="1103.50"></text></g><g><title>deno`deno_core::async_cell::internal::BorrowCount::remove (1 samples, 0.01%)</title><rect x="47.4651%" y="1077" width="0.0113%" height="15" fill="rgb(243,70,54)" fg:x="4185" fg:w="1"/><text x="47.7151%" y="1087.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::io::BufMutViewInner&gt; (1 samples, 0.01%)</title><rect x="47.4765%" y="1093" width="0.0113%" height="15" fill="rgb(242,28,8)" fg:x="4186" fg:w="1"/><text x="47.7265%" y="1103.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;fastwebsockets::WebSocket&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn deno_websocket::Upgraded&gt;&gt;&gt;::read_frame::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="47.4878%" y="1093" width="0.0113%" height="15" fill="rgb(219,106,18)" fg:x="4187" fg:w="1"/><text x="47.7378%" y="1103.50"></text></g><g><title>deno`deno_core::async_cell::RcRef&lt;deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::borrow_mut (12 samples, 0.14%)</title><rect x="47.4991%" y="1093" width="0.1361%" height="15" fill="rgb(244,222,10)" fg:x="4188" fg:w="12"/><text x="47.7491%" y="1103.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (7 samples, 0.08%)</title><rect x="47.5559%" y="1077" width="0.0794%" height="15" fill="rgb(236,179,52)" fg:x="4193" fg:w="7"/><text x="47.8059%" y="1087.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (5 samples, 0.06%)</title><rect x="47.6353%" y="1093" width="0.0567%" height="15" fill="rgb(213,23,39)" fg:x="4200" fg:w="5"/><text x="47.8853%" y="1103.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (9 samples, 0.10%)</title><rect x="47.7714%" y="1077" width="0.1021%" height="15" fill="rgb(238,48,10)" fg:x="4212" fg:w="9"/><text x="48.0214%" y="1087.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (5 samples, 0.06%)</title><rect x="47.8734%" y="1077" width="0.0567%" height="15" fill="rgb(251,196,23)" fg:x="4221" fg:w="5"/><text x="48.1234%" y="1087.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (2 samples, 0.02%)</title><rect x="47.9301%" y="1077" width="0.0227%" height="15" fill="rgb(250,152,24)" fg:x="4226" fg:w="2"/><text x="48.1801%" y="1087.50"></text></g><g><title>deno`&lt;serde_v8::ser::ArraySerializer as serde::ser::SerializeSeq&gt;::end (2 samples, 0.02%)</title><rect x="48.1003%" y="1061" width="0.0227%" height="15" fill="rgb(209,150,17)" fg:x="4241" fg:w="2"/><text x="48.3503%" y="1071.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (1 samples, 0.01%)</title><rect x="48.3611%" y="1013" width="0.0113%" height="15" fill="rgb(234,202,34)" fg:x="4264" fg:w="1"/><text x="48.6111%" y="1023.50"></text></g><g><title>deno`v8::internal::Factory::NewJSArrayWithElements(v8::internal::Handle (6 samples, 0.07%)</title><rect x="48.3725%" y="1013" width="0.0681%" height="15" fill="rgb(253,148,53)" fg:x="4265" fg:w="6"/><text x="48.6225%" y="1023.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (2 samples, 0.02%)</title><rect x="48.4859%" y="997" width="0.0227%" height="15" fill="rgb(218,129,16)" fg:x="4275" fg:w="2"/><text x="48.7359%" y="1007.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (6 samples, 0.07%)</title><rect x="48.5086%" y="997" width="0.0681%" height="15" fill="rgb(216,85,19)" fg:x="4277" fg:w="6"/><text x="48.7586%" y="1007.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (1 samples, 0.01%)</title><rect x="48.5766%" y="997" width="0.0113%" height="15" fill="rgb(235,228,7)" fg:x="4283" fg:w="1"/><text x="48.8266%" y="1007.50"></text></g><g><title>deno`v8::internal::Factory::NewJSArrayWithUnverifiedElements(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle (14 samples, 0.16%)</title><rect x="48.4405%" y="1013" width="0.1588%" height="15" fill="rgb(245,175,0)" fg:x="4271" fg:w="14"/><text x="48.6905%" y="1023.50"></text></g><g><title>deno`v8::internal::ReadOnlyRoots::one_pointer_filler_map_word (1 samples, 0.01%)</title><rect x="48.5880%" y="997" width="0.0113%" height="15" fill="rgb(208,168,36)" fg:x="4284" fg:w="1"/><text x="48.8380%" y="1007.50"></text></g><g><title>deno`v8::Array::New(v8::Isolate*, v8::Local (48 samples, 0.54%)</title><rect x="48.1797%" y="1029" width="0.5444%" height="15" fill="rgb(246,171,24)" fg:x="4248" fg:w="48"/><text x="48.4297%" y="1039.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewFixedArrayWithFiller(v8::internal::Handle&lt;v8::internal::Map&gt;, int, v8::internal::Handle (11 samples, 0.12%)</title><rect x="48.5993%" y="1013" width="0.1248%" height="15" fill="rgb(215,142,24)" fg:x="4285" fg:w="11"/><text x="48.8493%" y="1023.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (5 samples, 0.06%)</title><rect x="48.6673%" y="997" width="0.0567%" height="15" fill="rgb(250,187,7)" fg:x="4291" fg:w="5"/><text x="48.9173%" y="1007.50"></text></g><g><title>deno`v8::internal::Factory::NewJSArrayWithUnverifiedElements(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="48.7241%" y="1029" width="0.0113%" height="15" fill="rgb(228,66,33)" fg:x="4296" fg:w="1"/><text x="48.9741%" y="1039.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewFixedArray (1 samples, 0.01%)</title><rect x="48.7354%" y="1029" width="0.0113%" height="15" fill="rgb(234,215,21)" fg:x="4297" fg:w="1"/><text x="48.9854%" y="1039.50"></text></g><g><title>deno`&lt;serde_v8::ser::ArraySerializer as serde::ser::SerializeSeq&gt;::end (57 samples, 0.65%)</title><rect x="48.1343%" y="1045" width="0.6465%" height="15" fill="rgb(222,191,20)" fg:x="4244" fg:w="57"/><text x="48.3843%" y="1055.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewFixedArrayWithFiller(v8::internal::Handle&lt;v8::internal::Map&gt;, int, v8::internal::Handle (3 samples, 0.03%)</title><rect x="48.7467%" y="1029" width="0.0340%" height="15" fill="rgb(245,79,54)" fg:x="4298" fg:w="3"/><text x="48.9967%" y="1039.50"></text></g><g><title>deno`v8::Array::New(v8::Isolate*, v8::Local (1 samples, 0.01%)</title><rect x="48.7808%" y="1045" width="0.0113%" height="15" fill="rgb(240,10,37)" fg:x="4301" fg:w="1"/><text x="49.0308%" y="1055.50"></text></g><g><title>deno`&lt;serde_v8::ser::ArraySerializer as serde::ser::SerializeTuple&gt;::end (64 samples, 0.73%)</title><rect x="48.1229%" y="1061" width="0.7259%" height="15" fill="rgb(214,192,32)" fg:x="4243" fg:w="64"/><text x="48.3729%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.06%)</title><rect x="48.7921%" y="1045" width="0.0567%" height="15" fill="rgb(209,36,54)" fg:x="4302" fg:w="5"/><text x="49.0421%" y="1055.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (8 samples, 0.09%)</title><rect x="48.8488%" y="1061" width="0.0907%" height="15" fill="rgb(220,10,11)" fg:x="4307" fg:w="8"/><text x="49.0988%" y="1071.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_tuple (2 samples, 0.02%)</title><rect x="48.9395%" y="1061" width="0.0227%" height="15" fill="rgb(221,106,17)" fg:x="4315" fg:w="2"/><text x="49.1895%" y="1071.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (6 samples, 0.07%)</title><rect x="48.9622%" y="1061" width="0.0681%" height="15" fill="rgb(251,142,44)" fg:x="4317" fg:w="6"/><text x="49.2122%" y="1071.50"></text></g><g><title>deno`v8::Integer::NewFromUnsigned (2 samples, 0.02%)</title><rect x="49.0076%" y="1045" width="0.0227%" height="15" fill="rgb(238,13,15)" fg:x="4321" fg:w="2"/><text x="49.2576%" y="1055.50"></text></g><g><title>deno`v8::Integer::New (1 samples, 0.01%)</title><rect x="49.0189%" y="1029" width="0.0113%" height="15" fill="rgb(208,107,27)" fg:x="4322" fg:w="1"/><text x="49.2689%" y="1039.50"></text></g><g><title>deno`operator new(unsigned long) (2 samples, 0.02%)</title><rect x="49.1437%" y="1045" width="0.0227%" height="15" fill="rgb(205,136,37)" fg:x="4333" fg:w="2"/><text x="49.3937%" y="1055.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="49.1891%" y="1029" width="0.0113%" height="15" fill="rgb(250,205,27)" fg:x="4337" fg:w="1"/><text x="49.4391%" y="1039.50"></text></g><g><title>deno`operator new(unsigned long) (2 samples, 0.02%)</title><rect x="49.2004%" y="1029" width="0.0227%" height="15" fill="rgb(210,80,43)" fg:x="4338" fg:w="2"/><text x="49.4504%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.02%)</title><rect x="49.2004%" y="1013" width="0.0227%" height="15" fill="rgb(247,160,36)" fg:x="4338" fg:w="2"/><text x="49.4504%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="49.2118%" y="997" width="0.0113%" height="15" fill="rgb(234,13,49)" fg:x="4339" fg:w="1"/><text x="49.4618%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="49.2231%" y="1029" width="0.0227%" height="15" fill="rgb(234,122,0)" fg:x="4340" fg:w="2"/><text x="49.4731%" y="1039.50"></text></g><g><title>deno`std__shared_ptr__v8__BackingStore__CONVERT__std__unique_ptr (17 samples, 0.19%)</title><rect x="49.1664%" y="1045" width="0.1928%" height="15" fill="rgb(207,146,38)" fg:x="4335" fg:w="17"/><text x="49.4164%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.11%)</title><rect x="49.2458%" y="1029" width="0.1134%" height="15" fill="rgb(207,177,25)" fg:x="4342" fg:w="10"/><text x="49.4958%" y="1039.50"></text></g><g><title>deno`std__shared_ptr__v8__BackingStore__reset (2 samples, 0.02%)</title><rect x="49.3592%" y="1045" width="0.0227%" height="15" fill="rgb(211,178,42)" fg:x="4352" fg:w="2"/><text x="49.6092%" y="1055.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (1 samples, 0.01%)</title><rect x="49.4159%" y="1029" width="0.0113%" height="15" fill="rgb(230,69,54)" fg:x="4357" fg:w="1"/><text x="49.6659%" y="1039.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (2 samples, 0.02%)</title><rect x="49.4272%" y="1029" width="0.0227%" height="15" fill="rgb(214,135,41)" fg:x="4358" fg:w="2"/><text x="49.6772%" y="1039.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (1 samples, 0.01%)</title><rect x="49.4499%" y="1029" width="0.0113%" height="15" fill="rgb(237,67,25)" fg:x="4360" fg:w="1"/><text x="49.6999%" y="1039.50"></text></g><g><title>deno`v8::Isolate::AdjustAmountOfExternalAllocatedMemory (4 samples, 0.05%)</title><rect x="49.5520%" y="1013" width="0.0454%" height="15" fill="rgb(222,189,50)" fg:x="4369" fg:w="4"/><text x="49.8020%" y="1023.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (3 samples, 0.03%)</title><rect x="49.5974%" y="1013" width="0.0340%" height="15" fill="rgb(245,148,34)" fg:x="4373" fg:w="3"/><text x="49.8474%" y="1023.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (9 samples, 0.10%)</title><rect x="49.6994%" y="997" width="0.1021%" height="15" fill="rgb(222,29,6)" fg:x="4382" fg:w="9"/><text x="49.9494%" y="1007.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (30 samples, 0.34%)</title><rect x="49.6314%" y="1013" width="0.3403%" height="15" fill="rgb(221,189,43)" fg:x="4376" fg:w="30"/><text x="49.8814%" y="1023.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (15 samples, 0.17%)</title><rect x="49.8015%" y="997" width="0.1701%" height="15" fill="rgb(207,36,27)" fg:x="4391" fg:w="15"/><text x="50.0515%" y="1007.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (12 samples, 0.14%)</title><rect x="49.9716%" y="1013" width="0.1361%" height="15" fill="rgb(217,90,24)" fg:x="4406" fg:w="12"/><text x="50.2216%" y="1023.50"></text></g><g><title>deno`v8::Isolate::AdjustAmountOfExternalAllocatedMemory (2 samples, 0.02%)</title><rect x="50.2552%" y="997" width="0.0227%" height="15" fill="rgb(224,66,35)" fg:x="4431" fg:w="2"/><text x="50.5052%" y="1007.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::Append (5 samples, 0.06%)</title><rect x="50.2779%" y="997" width="0.0567%" height="15" fill="rgb(221,13,50)" fg:x="4433" fg:w="5"/><text x="50.5279%" y="1007.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.01%)</title><rect x="50.4480%" y="949" width="0.0113%" height="15" fill="rgb(236,68,49)" fg:x="4448" fg:w="1"/><text x="50.6980%" y="959.50"></text></g><g><title>deno`v8::internal::ExternalPointerTable::Grow (5 samples, 0.06%)</title><rect x="50.4253%" y="965" width="0.0567%" height="15" fill="rgb(229,146,28)" fg:x="4446" fg:w="5"/><text x="50.6753%" y="975.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="50.4593%" y="949" width="0.0227%" height="15" fill="rgb(225,31,38)" fg:x="4449" fg:w="2"/><text x="50.7093%" y="959.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (4 samples, 0.05%)</title><rect x="50.4820%" y="965" width="0.0454%" height="15" fill="rgb(250,208,3)" fg:x="4451" fg:w="4"/><text x="50.7320%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.05%)</title><rect x="50.4820%" y="949" width="0.0454%" height="15" fill="rgb(246,54,23)" fg:x="4451" fg:w="4"/><text x="50.7320%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.07%)</title><rect x="50.5274%" y="965" width="0.0681%" height="15" fill="rgb(243,76,11)" fg:x="4455" fg:w="6"/><text x="50.7774%" y="975.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (26 samples, 0.29%)</title><rect x="50.3913%" y="981" width="0.2949%" height="15" fill="rgb(245,21,50)" fg:x="4443" fg:w="26"/><text x="50.6413%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.09%)</title><rect x="50.5954%" y="965" width="0.0907%" height="15" fill="rgb(228,9,43)" fg:x="4461" fg:w="8"/><text x="50.8454%" y="975.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Attach(std::Cr::shared_ptr (32 samples, 0.36%)</title><rect x="50.3346%" y="997" width="0.3629%" height="15" fill="rgb(208,100,47)" fg:x="4438" fg:w="32"/><text x="50.5846%" y="1007.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (1 samples, 0.01%)</title><rect x="50.6862%" y="981" width="0.0113%" height="15" fill="rgb(232,26,8)" fg:x="4469" fg:w="1"/><text x="50.9362%" y="991.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Setup(v8::internal::SharedFlag, v8::internal::ResizableFlag, std::Cr::shared_ptr (53 samples, 0.60%)</title><rect x="50.1077%" y="1013" width="0.6011%" height="15" fill="rgb(216,166,38)" fg:x="4418" fg:w="53"/><text x="50.3577%" y="1023.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (1 samples, 0.01%)</title><rect x="50.6975%" y="997" width="0.0113%" height="15" fill="rgb(251,202,51)" fg:x="4470" fg:w="1"/><text x="50.9475%" y="1007.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (3 samples, 0.03%)</title><rect x="50.7089%" y="1013" width="0.0340%" height="15" fill="rgb(254,216,34)" fg:x="4471" fg:w="3"/><text x="50.9589%" y="1023.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (3 samples, 0.03%)</title><rect x="50.7429%" y="1013" width="0.0340%" height="15" fill="rgb(251,32,27)" fg:x="4474" fg:w="3"/><text x="50.9929%" y="1023.50"></text></g><g><title>deno`v8::ArrayBuffer::New(v8::Isolate*, std::Cr::shared_ptr (124 samples, 1.41%)</title><rect x="49.3819%" y="1045" width="1.4064%" height="15" fill="rgb(208,127,28)" fg:x="4354" fg:w="124"/><text x="49.6319%" y="1055.50"></text></g><g><title>deno`v8::internal::Factory::NewJSArrayBuffer(std::Cr::shared_ptr (117 samples, 1.33%)</title><rect x="49.4613%" y="1029" width="1.3270%" height="15" fill="rgb(224,137,22)" fg:x="4361" fg:w="117"/><text x="49.7113%" y="1039.50"></text></g><g><title>deno`v8::internal::ReadOnlyRoots::one_pointer_filler_map_word (1 samples, 0.01%)</title><rect x="50.7769%" y="1013" width="0.0113%" height="15" fill="rgb(254,70,32)" fg:x="4477" fg:w="1"/><text x="51.0269%" y="1023.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="50.8109%" y="1029" width="0.0113%" height="15" fill="rgb(229,75,37)" fg:x="4480" fg:w="1"/><text x="51.0609%" y="1039.50"></text></g><g><title>deno`operator new(unsigned long) (10 samples, 0.11%)</title><rect x="50.8223%" y="1029" width="0.1134%" height="15" fill="rgb(252,64,23)" fg:x="4481" fg:w="10"/><text x="51.0723%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (10 samples, 0.11%)</title><rect x="50.8223%" y="1013" width="0.1134%" height="15" fill="rgb(232,162,48)" fg:x="4481" fg:w="10"/><text x="51.0723%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.05%)</title><rect x="50.8903%" y="997" width="0.0454%" height="15" fill="rgb(246,160,12)" fg:x="4487" fg:w="4"/><text x="51.1403%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="50.9357%" y="1029" width="0.0340%" height="15" fill="rgb(247,166,0)" fg:x="4491" fg:w="3"/><text x="51.1857%" y="1039.50"></text></g><g><title>deno`v8::internal::BackingStore::WrapAllocation(void*, unsigned long, void (*) (19 samples, 0.22%)</title><rect x="50.7882%" y="1045" width="0.2155%" height="15" fill="rgb(249,219,21)" fg:x="4478" fg:w="19"/><text x="51.0382%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="50.9697%" y="1029" width="0.0340%" height="15" fill="rgb(205,209,3)" fg:x="4494" fg:w="3"/><text x="51.2197%" y="1039.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (176 samples, 2.00%)</title><rect x="49.0303%" y="1061" width="1.9961%" height="15" fill="rgb(243,44,1)" fg:x="4323" fg:w="176"/><text x="49.2803%" y="1071.50">d..</text></g><g><title>deno`v8::internal::Factory::NewJSArrayBuffer(std::Cr::shared_ptr (2 samples, 0.02%)</title><rect x="51.0037%" y="1045" width="0.0227%" height="15" fill="rgb(206,159,16)" fg:x="4497" fg:w="2"/><text x="51.2537%" y="1055.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="51.0264%" y="1061" width="0.0113%" height="15" fill="rgb(244,77,30)" fg:x="4499" fg:w="1"/><text x="51.2764%" y="1071.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="51.0378%" y="1061" width="0.0113%" height="15" fill="rgb(218,69,12)" fg:x="4500" fg:w="1"/><text x="51.2878%" y="1071.50"></text></g><g><title>deno`std__shared_ptr__v8__BackingStore__get (1 samples, 0.01%)</title><rect x="51.0491%" y="1061" width="0.0113%" height="15" fill="rgb(212,87,7)" fg:x="4501" fg:w="1"/><text x="51.2991%" y="1071.50"></text></g><g><title>deno`std__shared_ptr__v8__BackingStore__reset (1 samples, 0.01%)</title><rect x="51.0605%" y="1061" width="0.0113%" height="15" fill="rgb(245,114,25)" fg:x="4502" fg:w="1"/><text x="51.3105%" y="1071.50"></text></g><g><title>deno`v8::ArrayBuffer::New(v8::Isolate*, std::Cr::shared_ptr (3 samples, 0.03%)</title><rect x="51.0718%" y="1061" width="0.0340%" height="15" fill="rgb(210,61,42)" fg:x="4503" fg:w="3"/><text x="51.3218%" y="1071.50"></text></g><g><title>deno`v8::Integer::NewFromUnsigned (3 samples, 0.03%)</title><rect x="51.1058%" y="1061" width="0.0340%" height="15" fill="rgb(211,52,33)" fg:x="4506" fg:w="3"/><text x="51.3558%" y="1071.50"></text></g><g><title>deno`v8::internal::BackingStore::WrapAllocation(void*, unsigned long, void (*) (1 samples, 0.01%)</title><rect x="51.1398%" y="1061" width="0.0113%" height="15" fill="rgb(234,58,33)" fg:x="4509" fg:w="1"/><text x="51.3898%" y="1071.50"></text></g><g><title>deno`v8__ArrayBuffer__New__with_backing_store (1 samples, 0.01%)</title><rect x="51.1512%" y="1061" width="0.0113%" height="15" fill="rgb(220,115,36)" fg:x="4510" fg:w="1"/><text x="51.4012%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.07%)</title><rect x="51.1625%" y="1061" width="0.0681%" height="15" fill="rgb(243,153,54)" fg:x="4511" fg:w="6"/><text x="51.4125%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.08%)</title><rect x="51.2306%" y="1061" width="0.0794%" height="15" fill="rgb(251,47,18)" fg:x="4517" fg:w="7"/><text x="51.4806%" y="1071.50"></text></g><g><title>deno`serde::ser::impls::_&lt;impl serde::ser::Serialize for (T0,T1)&gt;::serialize (306 samples, 3.47%)</title><rect x="47.9528%" y="1077" width="3.4706%" height="15" fill="rgb(242,102,42)" fg:x="4228" fg:w="306"/><text x="48.2028%" y="1087.50">den..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.11%)</title><rect x="51.3100%" y="1061" width="0.1134%" height="15" fill="rgb(234,31,38)" fg:x="4524" fg:w="10"/><text x="51.5600%" y="1071.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (1 samples, 0.01%)</title><rect x="51.6842%" y="1061" width="0.0113%" height="15" fill="rgb(221,117,51)" fg:x="4557" fg:w="1"/><text x="51.9342%" y="1071.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.02%)</title><rect x="51.6956%" y="1061" width="0.0227%" height="15" fill="rgb(212,20,18)" fg:x="4558" fg:w="2"/><text x="51.9456%" y="1071.50"></text></g><g><title>deno`Builtins_JSEntry (4 samples, 0.05%)</title><rect x="51.7523%" y="1045" width="0.0454%" height="15" fill="rgb(245,133,36)" fg:x="4563" fg:w="4"/><text x="52.0023%" y="1055.50"></text></g><g><title>0x150061a20 (9 samples, 0.10%)</title><rect x="52.0358%" y="1013" width="0.1021%" height="15" fill="rgb(212,6,19)" fg:x="4588" fg:w="9"/><text x="52.2858%" y="1023.50"></text></g><g><title>0x150061a28 (1 samples, 0.01%)</title><rect x="52.1379%" y="1013" width="0.0113%" height="15" fill="rgb(218,1,36)" fg:x="4597" fg:w="1"/><text x="52.3879%" y="1023.50"></text></g><g><title>0x150061a38 (4 samples, 0.05%)</title><rect x="52.1493%" y="1013" width="0.0454%" height="15" fill="rgb(246,84,54)" fg:x="4598" fg:w="4"/><text x="52.3993%" y="1023.50"></text></g><g><title>0x150061cc8 (1 samples, 0.01%)</title><rect x="52.1946%" y="1013" width="0.0113%" height="15" fill="rgb(242,110,6)" fg:x="4602" fg:w="1"/><text x="52.4446%" y="1023.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (6 samples, 0.07%)</title><rect x="52.2060%" y="1013" width="0.0681%" height="15" fill="rgb(214,47,5)" fg:x="4603" fg:w="6"/><text x="52.4560%" y="1023.50"></text></g><g><title>0x150061a50 (1 samples, 0.01%)</title><rect x="52.3080%" y="997" width="0.0113%" height="15" fill="rgb(218,159,25)" fg:x="4612" fg:w="1"/><text x="52.5580%" y="1007.50"></text></g><g><title>0x150061a54 (1 samples, 0.01%)</title><rect x="52.3194%" y="997" width="0.0113%" height="15" fill="rgb(215,211,28)" fg:x="4613" fg:w="1"/><text x="52.5694%" y="1007.50"></text></g><g><title>0x150061a80 (1 samples, 0.01%)</title><rect x="52.3307%" y="997" width="0.0113%" height="15" fill="rgb(238,59,32)" fg:x="4614" fg:w="1"/><text x="52.5807%" y="1007.50"></text></g><g><title>0x150061aa0 (1 samples, 0.01%)</title><rect x="52.3421%" y="997" width="0.0113%" height="15" fill="rgb(226,82,3)" fg:x="4615" fg:w="1"/><text x="52.5921%" y="1007.50"></text></g><g><title>0x150061abc (1 samples, 0.01%)</title><rect x="52.3534%" y="997" width="0.0113%" height="15" fill="rgb(240,164,32)" fg:x="4616" fg:w="1"/><text x="52.6034%" y="1007.50"></text></g><g><title>0x150061aec (1 samples, 0.01%)</title><rect x="52.3647%" y="997" width="0.0113%" height="15" fill="rgb(232,46,7)" fg:x="4617" fg:w="1"/><text x="52.6147%" y="1007.50"></text></g><g><title>0x150061b04 (2 samples, 0.02%)</title><rect x="52.3761%" y="997" width="0.0227%" height="15" fill="rgb(229,129,53)" fg:x="4618" fg:w="2"/><text x="52.6261%" y="1007.50"></text></g><g><title>0x150061b2c (2 samples, 0.02%)</title><rect x="52.3988%" y="997" width="0.0227%" height="15" fill="rgb(234,188,29)" fg:x="4620" fg:w="2"/><text x="52.6488%" y="1007.50"></text></g><g><title>0x150061b44 (2 samples, 0.02%)</title><rect x="52.4215%" y="997" width="0.0227%" height="15" fill="rgb(246,141,4)" fg:x="4622" fg:w="2"/><text x="52.6715%" y="1007.50"></text></g><g><title>0x150061b4c (4 samples, 0.05%)</title><rect x="52.4441%" y="997" width="0.0454%" height="15" fill="rgb(229,23,39)" fg:x="4624" fg:w="4"/><text x="52.6941%" y="1007.50"></text></g><g><title>deno`Builtins_LoadIC (4 samples, 0.05%)</title><rect x="52.4441%" y="981" width="0.0454%" height="15" fill="rgb(206,12,3)" fg:x="4624" fg:w="4"/><text x="52.6941%" y="991.50"></text></g><g><title>0x150061b5c (2 samples, 0.02%)</title><rect x="52.4895%" y="997" width="0.0227%" height="15" fill="rgb(252,226,20)" fg:x="4628" fg:w="2"/><text x="52.7395%" y="1007.50"></text></g><g><title>0x150061b68 (1 samples, 0.01%)</title><rect x="52.5122%" y="997" width="0.0113%" height="15" fill="rgb(216,123,35)" fg:x="4630" fg:w="1"/><text x="52.7622%" y="1007.50"></text></g><g><title>0x150061cb8 (1 samples, 0.01%)</title><rect x="52.5235%" y="997" width="0.0113%" height="15" fill="rgb(212,68,40)" fg:x="4631" fg:w="1"/><text x="52.7735%" y="1007.50"></text></g><g><title>0x150061d48 (1 samples, 0.01%)</title><rect x="52.5349%" y="997" width="0.0113%" height="15" fill="rgb(254,125,32)" fg:x="4632" fg:w="1"/><text x="52.7849%" y="1007.50"></text></g><g><title>0x150061d7c (1 samples, 0.01%)</title><rect x="52.5462%" y="997" width="0.0113%" height="15" fill="rgb(253,97,22)" fg:x="4633" fg:w="1"/><text x="52.7962%" y="1007.50"></text></g><g><title>deno`deno_websocket::server::op_server_ws_try_write_binary::call (1 samples, 0.01%)</title><rect x="52.6143%" y="965" width="0.0113%" height="15" fill="rgb(241,101,14)" fg:x="4639" fg:w="1"/><text x="52.8643%" y="975.50"></text></g><g><title>deno`&lt;deno_http::UpgradedStream as deno_websocket::Upgraded&gt;::try_write (3 samples, 0.03%)</title><rect x="53.0339%" y="949" width="0.0340%" height="15" fill="rgb(238,103,29)" fg:x="4676" fg:w="3"/><text x="53.2839%" y="959.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_bool (1 samples, 0.01%)</title><rect x="53.0679%" y="949" width="0.0113%" height="15" fill="rgb(233,195,47)" fg:x="4679" fg:w="1"/><text x="53.3179%" y="959.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::isolate::Isolate&gt;&gt;::as_mut (1 samples, 0.01%)</title><rect x="53.0679%" y="933" width="0.0113%" height="15" fill="rgb(246,218,30)" fg:x="4679" fg:w="1"/><text x="53.3179%" y="943.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::isolate::Isolate&gt;&gt;::as_mut (1 samples, 0.01%)</title><rect x="53.0793%" y="949" width="0.0113%" height="15" fill="rgb(219,145,47)" fg:x="4680" fg:w="1"/><text x="53.3293%" y="959.50"></text></g><g><title>deno`DYLD-STUB$$free (3 samples, 0.03%)</title><rect x="53.0906%" y="949" width="0.0340%" height="15" fill="rgb(243,12,26)" fg:x="4681" fg:w="3"/><text x="53.3406%" y="959.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="53.1246%" y="949" width="0.0113%" height="15" fill="rgb(214,87,16)" fg:x="4684" fg:w="1"/><text x="53.3746%" y="959.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (5 samples, 0.06%)</title><rect x="53.1360%" y="949" width="0.0567%" height="15" fill="rgb(208,99,42)" fg:x="4685" fg:w="5"/><text x="53.3860%" y="959.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6 (2 samples, 0.02%)</title><rect x="53.8959%" y="917" width="0.0227%" height="15" fill="rgb(253,99,2)" fg:x="4752" fg:w="2"/><text x="54.1459%" y="927.50"></text></g><g><title>deno`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (6 samples, 0.07%)</title><rect x="53.9753%" y="901" width="0.0681%" height="15" fill="rgb(220,168,23)" fg:x="4759" fg:w="6"/><text x="54.2253%" y="911.50"></text></g><g><title>deno`&lt;deno_http::UpgradedStream as deno_websocket::Upgraded&gt;::try_write (3,690 samples, 41.85%)</title><rect x="53.8959%" y="933" width="41.8510%" height="15" fill="rgb(242,38,24)" fg:x="4752" fg:w="3690"/><text x="54.1459%" y="943.50">deno`&lt;deno_http::UpgradedStream as deno_websocket::Upgraded&gt;::try_wr..</text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (3,688 samples, 41.83%)</title><rect x="53.9186%" y="917" width="41.8283%" height="15" fill="rgb(225,182,9)" fg:x="4754" fg:w="3688"/><text x="54.1686%" y="927.50">deno`tokio::net::tcp::stream::TcpStream::try_write</text></g><g><title>libsystem_kernel.dylib`__sendto (3,677 samples, 41.70%)</title><rect x="54.0433%" y="901" width="41.7035%" height="15" fill="rgb(243,178,37)" fg:x="4765" fg:w="3677"/><text x="54.2933%" y="911.50">libsystem_kernel.dylib`__sendto</text></g><g><title>deno`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="95.7469%" y="933" width="0.0113%" height="15" fill="rgb(232,139,19)" fg:x="8442" fg:w="1"/><text x="95.9969%" y="943.50"></text></g><g><title>deno`deno_core::async_cell::internal::BorrowCount::remove (3 samples, 0.03%)</title><rect x="95.7695%" y="917" width="0.0340%" height="15" fill="rgb(225,201,24)" fg:x="8444" fg:w="3"/><text x="96.0195%" y="927.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowImpl&lt;tokio::process::Child,deno_core::async_cell::internal::Exclusive&gt;&gt; (8 samples, 0.09%)</title><rect x="95.7582%" y="933" width="0.0907%" height="15" fill="rgb(221,47,46)" fg:x="8443" fg:w="8"/><text x="96.0082%" y="943.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (4 samples, 0.05%)</title><rect x="95.8036%" y="917" width="0.0454%" height="15" fill="rgb(249,23,13)" fg:x="8447" fg:w="4"/><text x="96.0536%" y="927.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (2 samples, 0.02%)</title><rect x="95.8489%" y="933" width="0.0227%" height="15" fill="rgb(219,9,5)" fg:x="8451" fg:w="2"/><text x="96.0989%" y="943.50"></text></g><g><title>deno`fastwebsockets::frame::Frame::fmt_head (2 samples, 0.02%)</title><rect x="95.8716%" y="933" width="0.0227%" height="15" fill="rgb(254,171,16)" fg:x="8453" fg:w="2"/><text x="96.1216%" y="943.50"></text></g><g><title>deno`fastwebsockets::frame::Frame::write (5 samples, 0.06%)</title><rect x="95.8943%" y="933" width="0.0567%" height="15" fill="rgb(230,171,20)" fg:x="8455" fg:w="5"/><text x="96.1443%" y="943.50"></text></g><g><title>deno`fastwebsockets::frame::Frame::fmt_head (1 samples, 0.01%)</title><rect x="95.9397%" y="917" width="0.0113%" height="15" fill="rgb(210,71,41)" fg:x="8459" fg:w="1"/><text x="96.1897%" y="927.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (1 samples, 0.01%)</title><rect x="95.9510%" y="933" width="0.0113%" height="15" fill="rgb(206,173,20)" fg:x="8460" fg:w="1"/><text x="96.2010%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="95.9623%" y="933" width="0.0113%" height="15" fill="rgb(233,88,34)" fg:x="8461" fg:w="1"/><text x="96.2123%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="95.9737%" y="933" width="0.0340%" height="15" fill="rgb(223,209,46)" fg:x="8462" fg:w="3"/><text x="96.2237%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.06%)</title><rect x="96.0077%" y="933" width="0.0567%" height="15" fill="rgb(250,43,18)" fg:x="8465" fg:w="5"/><text x="96.2577%" y="943.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.01%)</title><rect x="96.0644%" y="933" width="0.0113%" height="15" fill="rgb(208,13,10)" fg:x="8470" fg:w="1"/><text x="96.3144%" y="943.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.10%)</title><rect x="96.0758%" y="933" width="0.1021%" height="15" fill="rgb(212,200,36)" fg:x="8471" fg:w="9"/><text x="96.3258%" y="943.50"></text></g><g><title>deno`deno_websocket::server::op_server_ws_try_write_binary::call (3,791 samples, 43.00%)</title><rect x="53.1927%" y="949" width="42.9965%" height="15" fill="rgb(225,90,30)" fg:x="4690" fg:w="3791"/><text x="53.4427%" y="959.50">deno`deno_websocket::server::op_server_ws_try_write_binary::call</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="96.1778%" y="933" width="0.0113%" height="15" fill="rgb(236,182,39)" fg:x="8480" fg:w="1"/><text x="96.4278%" y="943.50"></text></g><g><title>deno`fastwebsockets::frame::Frame::write (1 samples, 0.01%)</title><rect x="96.1892%" y="949" width="0.0113%" height="15" fill="rgb(212,144,35)" fg:x="8481" fg:w="1"/><text x="96.4392%" y="959.50"></text></g><g><title>deno`serde_v8::de::from_v8 (1 samples, 0.01%)</title><rect x="96.2005%" y="949" width="0.0113%" height="15" fill="rgb(228,63,44)" fg:x="8482" fg:w="1"/><text x="96.4505%" y="959.50"></text></g><g><title>deno`v8::Number::Value (2 samples, 0.02%)</title><rect x="96.2119%" y="949" width="0.0227%" height="15" fill="rgb(228,109,6)" fg:x="8483" fg:w="2"/><text x="96.4619%" y="959.50"></text></g><g><title>deno`v8::Value::IsNumber (2 samples, 0.02%)</title><rect x="96.2345%" y="949" width="0.0227%" height="15" fill="rgb(238,117,24)" fg:x="8485" fg:w="2"/><text x="96.4845%" y="959.50"></text></g><g><title>deno`v8__Boolean__New (2 samples, 0.02%)</title><rect x="96.2572%" y="949" width="0.0227%" height="15" fill="rgb(242,26,26)" fg:x="8487" fg:w="2"/><text x="96.5072%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.05%)</title><rect x="96.2799%" y="949" width="0.0454%" height="15" fill="rgb(221,92,48)" fg:x="8489" fg:w="4"/><text x="96.5299%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="96.3253%" y="949" width="0.0113%" height="15" fill="rgb(209,209,32)" fg:x="8493" fg:w="1"/><text x="96.5753%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.09%)</title><rect x="96.3366%" y="949" width="0.0907%" height="15" fill="rgb(221,70,22)" fg:x="8494" fg:w="8"/><text x="96.5866%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.12%)</title><rect x="96.4274%" y="949" width="0.1248%" height="15" fill="rgb(248,145,5)" fg:x="8502" fg:w="11"/><text x="96.6774%" y="959.50"></text></g><g><title>deno`deno_websocket::server::op_server_ws_try_write_binary::v8_fn_ptr (3,876 samples, 43.96%)</title><rect x="52.6256%" y="965" width="43.9605%" height="15" fill="rgb(226,116,26)" fg:x="4640" fg:w="3876"/><text x="52.8756%" y="975.50">deno`deno_websocket::server::op_server_ws_try_write_binary::v8_fn_ptr</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="96.5521%" y="949" width="0.0340%" height="15" fill="rgb(244,5,17)" fg:x="8513" fg:w="3"/><text x="96.8021%" y="959.50"></text></g><g><title>deno`serde_v8::de::from_v8 (5 samples, 0.06%)</title><rect x="96.5861%" y="965" width="0.0567%" height="15" fill="rgb(252,159,33)" fg:x="8516" fg:w="5"/><text x="96.8361%" y="975.50"></text></g><g><title>deno`v8::ArrayBuffer::ByteLength (2 samples, 0.02%)</title><rect x="96.6428%" y="965" width="0.0227%" height="15" fill="rgb(206,71,0)" fg:x="8521" fg:w="2"/><text x="96.8928%" y="975.50"></text></g><g><title>deno`v8::Value::IsArrayBuffer (4 samples, 0.05%)</title><rect x="96.6655%" y="965" width="0.0454%" height="15" fill="rgb(233,118,54)" fg:x="8523" fg:w="4"/><text x="96.9155%" y="975.50"></text></g><g><title>deno`Builtins_CallApiCallback (3,898 samples, 44.21%)</title><rect x="52.5576%" y="981" width="44.2100%" height="15" fill="rgb(234,83,48)" fg:x="4634" fg:w="3898"/><text x="52.8076%" y="991.50">deno`Builtins_CallApiCallback</text></g><g><title>deno`v8::scope::CallbackScope::new (5 samples, 0.06%)</title><rect x="96.7109%" y="965" width="0.0567%" height="15" fill="rgb(228,3,54)" fg:x="8527" fg:w="5"/><text x="96.9609%" y="975.50"></text></g><g><title>0x150061d84 (3,901 samples, 44.24%)</title><rect x="52.5576%" y="997" width="44.2441%" height="15" fill="rgb(226,155,13)" fg:x="4634" fg:w="3901"/><text x="52.8076%" y="1007.50">0x150061d84</text></g><g><title>deno`deno_websocket::server::op_server_ws_try_write_binary::v8_fn_ptr (3 samples, 0.03%)</title><rect x="96.7676%" y="981" width="0.0340%" height="15" fill="rgb(241,28,37)" fg:x="8532" fg:w="3"/><text x="97.0176%" y="991.50"></text></g><g><title>0x1500d6900 (9 samples, 0.10%)</title><rect x="96.8016%" y="997" width="0.1021%" height="15" fill="rgb(233,93,10)" fg:x="8535" fg:w="9"/><text x="97.0516%" y="1007.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_BuiltinExit (9 samples, 0.10%)</title><rect x="96.8016%" y="981" width="0.1021%" height="15" fill="rgb(225,113,19)" fg:x="8535" fg:w="9"/><text x="97.0516%" y="991.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (9 samples, 0.10%)</title><rect x="96.8016%" y="965" width="0.1021%" height="15" fill="rgb(241,2,18)" fg:x="8535" fg:w="9"/><text x="97.0516%" y="975.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (9 samples, 0.10%)</title><rect x="96.8016%" y="949" width="0.1021%" height="15" fill="rgb(228,207,21)" fg:x="8535" fg:w="9"/><text x="97.0516%" y="959.50"></text></g><g><title>deno`deno_websocket::server::op_server_ws_try_write_binary::v8_fn_ptr (9 samples, 0.10%)</title><rect x="96.8016%" y="933" width="0.1021%" height="15" fill="rgb(213,211,35)" fg:x="8535" fg:w="9"/><text x="97.0516%" y="943.50"></text></g><g><title>deno`deno_websocket::server::op_server_ws_try_write_binary::call (9 samples, 0.10%)</title><rect x="96.8016%" y="917" width="0.1021%" height="15" fill="rgb(209,83,10)" fg:x="8535" fg:w="9"/><text x="97.0516%" y="927.50"></text></g><g><title>deno`&lt;deno_http::UpgradedStream as deno_websocket::Upgraded&gt;::try_write (9 samples, 0.10%)</title><rect x="96.8016%" y="901" width="0.1021%" height="15" fill="rgb(209,164,1)" fg:x="8535" fg:w="9"/><text x="97.0516%" y="911.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (9 samples, 0.10%)</title><rect x="96.8016%" y="885" width="0.1021%" height="15" fill="rgb(213,184,43)" fg:x="8535" fg:w="9"/><text x="97.0516%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (9 samples, 0.10%)</title><rect x="96.8016%" y="869" width="0.1021%" height="15" fill="rgb(231,61,34)" fg:x="8535" fg:w="9"/><text x="97.0516%" y="879.50"></text></g><g><title>deno`Builtins_CallApiCallback (3 samples, 0.03%)</title><rect x="96.9037%" y="997" width="0.0340%" height="15" fill="rgb(235,75,3)" fg:x="8544" fg:w="3"/><text x="97.1537%" y="1007.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="96.9377%" y="997" width="0.0113%" height="15" fill="rgb(220,106,47)" fg:x="8547" fg:w="1"/><text x="97.1877%" y="1007.50"></text></g><g><title>deno`Builtins_CEntry_Return1_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="96.9377%" y="981" width="0.0113%" height="15" fill="rgb(210,196,33)" fg:x="8547" fg:w="1"/><text x="97.1877%" y="991.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.01%)</title><rect x="96.9377%" y="965" width="0.0113%" height="15" fill="rgb(229,154,42)" fg:x="8547" fg:w="1"/><text x="97.1877%" y="975.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="96.9377%" y="949" width="0.0113%" height="15" fill="rgb(228,114,26)" fg:x="8547" fg:w="1"/><text x="97.1877%" y="959.50"></text></g><g><title>deno`deno_websocket::server::op_server_ws_try_write_binary::v8_fn_ptr (1 samples, 0.01%)</title><rect x="96.9377%" y="933" width="0.0113%" height="15" fill="rgb(208,144,1)" fg:x="8547" fg:w="1"/><text x="97.1877%" y="943.50"></text></g><g><title>deno`deno_websocket::server::op_server_ws_try_write_binary::call (1 samples, 0.01%)</title><rect x="96.9377%" y="917" width="0.0113%" height="15" fill="rgb(239,112,37)" fg:x="8547" fg:w="1"/><text x="97.1877%" y="927.50"></text></g><g><title>deno`&lt;deno_http::UpgradedStream as deno_websocket::Upgraded&gt;::try_write (1 samples, 0.01%)</title><rect x="96.9377%" y="901" width="0.0113%" height="15" fill="rgb(210,96,50)" fg:x="8547" fg:w="1"/><text x="97.1877%" y="911.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (1 samples, 0.01%)</title><rect x="96.9377%" y="885" width="0.0113%" height="15" fill="rgb(222,178,2)" fg:x="8547" fg:w="1"/><text x="97.1877%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1 samples, 0.01%)</title><rect x="96.9377%" y="869" width="0.0113%" height="15" fill="rgb(226,74,18)" fg:x="8547" fg:w="1"/><text x="97.1877%" y="879.50"></text></g><g><title>deno`Builtins_LoadIC (6 samples, 0.07%)</title><rect x="96.9491%" y="997" width="0.0681%" height="15" fill="rgb(225,67,54)" fg:x="8548" fg:w="6"/><text x="97.1991%" y="1007.50"></text></g><g><title>deno`Builtins_JSEntry (3,974 samples, 45.07%)</title><rect x="52.0132%" y="1029" width="45.0720%" height="15" fill="rgb(251,92,32)" fg:x="4586" fg:w="3974"/><text x="52.2632%" y="1039.50">deno`Builtins_JSEntry</text></g><g><title>deno`Builtins_JSEntryTrampoline (3,951 samples, 44.81%)</title><rect x="52.2740%" y="1013" width="44.8112%" height="15" fill="rgb(228,149,22)" fg:x="4609" fg:w="3951"/><text x="52.5240%" y="1023.50">deno`Builtins_JSEntryTrampoline</text></g><g><title>deno`Builtins_LoadICTrampoline (6 samples, 0.07%)</title><rect x="97.0171%" y="997" width="0.0681%" height="15" fill="rgb(243,54,13)" fg:x="8554" fg:w="6"/><text x="97.2671%" y="1007.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (3,998 samples, 45.34%)</title><rect x="51.7977%" y="1045" width="45.3442%" height="15" fill="rgb(243,180,28)" fg:x="4567" fg:w="3998"/><text x="52.0477%" y="1055.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v..</text></g><g><title>deno`v8::internal::SaveContext::SaveContext (5 samples, 0.06%)</title><rect x="97.0852%" y="1029" width="0.0567%" height="15" fill="rgb(208,167,24)" fg:x="8560" fg:w="5"/><text x="97.3352%" y="1039.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (1 samples, 0.01%)</title><rect x="97.1419%" y="1045" width="0.0113%" height="15" fill="rgb(245,73,45)" fg:x="8565" fg:w="1"/><text x="97.3919%" y="1055.50"></text></g><g><title>deno`v8::internal::DumpOnJavascriptExecution::IsAllowed (3 samples, 0.03%)</title><rect x="97.1532%" y="1045" width="0.0340%" height="15" fill="rgb(237,203,48)" fg:x="8566" fg:w="3"/><text x="97.4032%" y="1055.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (2 samples, 0.02%)</title><rect x="97.1873%" y="1045" width="0.0227%" height="15" fill="rgb(211,197,16)" fg:x="8569" fg:w="2"/><text x="97.4373%" y="1055.50"></text></g><g><title>deno`v8::internal::SaveContext::~SaveContext (1 samples, 0.01%)</title><rect x="97.2099%" y="1045" width="0.0113%" height="15" fill="rgb(243,99,51)" fg:x="8571" fg:w="1"/><text x="97.4599%" y="1055.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (2 samples, 0.02%)</title><rect x="97.2213%" y="1045" width="0.0227%" height="15" fill="rgb(215,123,29)" fg:x="8572" fg:w="2"/><text x="97.4713%" y="1055.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (4,016 samples, 45.55%)</title><rect x="51.7183%" y="1061" width="45.5484%" height="15" fill="rgb(239,186,37)" fg:x="4560" fg:w="4016"/><text x="51.9683%" y="1071.50">deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Ha..</text></g><g><title>deno`v8::internal::ThrowOnJavascriptExecution::IsAllowed (2 samples, 0.02%)</title><rect x="97.2440%" y="1045" width="0.0227%" height="15" fill="rgb(252,136,39)" fg:x="8574" fg:w="2"/><text x="97.4940%" y="1055.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (3 samples, 0.03%)</title><rect x="97.3007%" y="1045" width="0.0340%" height="15" fill="rgb(223,213,32)" fg:x="8579" fg:w="3"/><text x="97.5507%" y="1055.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (6 samples, 0.07%)</title><rect x="97.3347%" y="1045" width="0.0681%" height="15" fill="rgb(233,115,5)" fg:x="8582" fg:w="6"/><text x="97.5847%" y="1055.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (1 samples, 0.01%)</title><rect x="97.3914%" y="1029" width="0.0113%" height="15" fill="rgb(207,226,44)" fg:x="8587" fg:w="1"/><text x="97.6414%" y="1039.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (14 samples, 0.16%)</title><rect x="97.2666%" y="1061" width="0.1588%" height="15" fill="rgb(208,126,0)" fg:x="8576" fg:w="14"/><text x="97.5166%" y="1071.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.02%)</title><rect x="97.4027%" y="1045" width="0.0227%" height="15" fill="rgb(244,66,21)" fg:x="8588" fg:w="2"/><text x="97.6527%" y="1055.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (4,057 samples, 46.01%)</title><rect x="51.4234%" y="1077" width="46.0134%" height="15" fill="rgb(222,97,12)" fg:x="4534" fg:w="4057"/><text x="51.6734%" y="1087.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, ..</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (1 samples, 0.01%)</title><rect x="97.4254%" y="1061" width="0.0113%" height="15" fill="rgb(219,213,19)" fg:x="8590" fg:w="1"/><text x="97.6754%" y="1071.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (7 samples, 0.08%)</title><rect x="97.4368%" y="1077" width="0.0794%" height="15" fill="rgb(252,169,30)" fg:x="8591" fg:w="7"/><text x="97.6868%" y="1087.50"></text></g><g><title>deno`deno_websocket::server::event::JsCb::call (4,394 samples, 49.84%)</title><rect x="47.6920%" y="1093" width="49.8355%" height="15" fill="rgb(206,32,51)" fg:x="4205" fg:w="4394"/><text x="47.9420%" y="1103.50">deno`deno_websocket::server::event::JsCb::call</text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (1 samples, 0.01%)</title><rect x="97.5162%" y="1077" width="0.0113%" height="15" fill="rgb(250,172,42)" fg:x="8598" fg:w="1"/><text x="97.7662%" y="1087.50"></text></g><g><title>deno`serde::ser::impls::_&lt;impl serde::ser::Serialize for (T0,T1)&gt;::serialize (1 samples, 0.01%)</title><rect x="97.5275%" y="1093" width="0.0113%" height="15" fill="rgb(209,34,43)" fg:x="8599" fg:w="1"/><text x="97.7775%" y="1103.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (4 samples, 0.05%)</title><rect x="97.5388%" y="1093" width="0.0454%" height="15" fill="rgb(223,11,35)" fg:x="8600" fg:w="4"/><text x="97.7888%" y="1103.50"></text></g><g><title>deno`v8__Context__GetIsolate (1 samples, 0.01%)</title><rect x="97.5842%" y="1093" width="0.0113%" height="15" fill="rgb(251,219,26)" fg:x="8604" fg:w="1"/><text x="97.8342%" y="1103.50"></text></g><g><title>deno`deno_websocket::server::op_server_ws_next_event::call::_{{closure}} (8,091 samples, 91.77%)</title><rect x="5.8410%" y="1109" width="91.7659%" height="15" fill="rgb(231,119,3)" fg:x="515" fg:w="8091"/><text x="6.0910%" y="1119.50">deno`deno_websocket::server::op_server_ws_next_event::call::_{{closure}}</text></g><g><title>deno`v8__Undefined (1 samples, 0.01%)</title><rect x="97.5956%" y="1093" width="0.0113%" height="15" fill="rgb(216,97,11)" fg:x="8605" fg:w="1"/><text x="97.8456%" y="1103.50"></text></g><g><title>deno`end_unmask (1 samples, 0.01%)</title><rect x="97.6069%" y="1109" width="0.0113%" height="15" fill="rgb(223,59,9)" fg:x="8606" fg:w="1"/><text x="97.8569%" y="1119.50"></text></g><g><title>deno`fallback (18 samples, 0.20%)</title><rect x="97.6182%" y="1109" width="0.2042%" height="15" fill="rgb(233,93,31)" fg:x="8607" fg:w="18"/><text x="97.8682%" y="1119.50"></text></g><g><title>deno`tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.01%)</title><rect x="97.8224%" y="1109" width="0.0113%" height="15" fill="rgb(239,81,33)" fg:x="8625" fg:w="1"/><text x="98.0724%" y="1119.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_idle (1 samples, 0.01%)</title><rect x="97.8337%" y="1109" width="0.0113%" height="15" fill="rgb(213,120,34)" fg:x="8626" fg:w="1"/><text x="98.0837%" y="1119.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_running (6 samples, 0.07%)</title><rect x="97.8451%" y="1109" width="0.0681%" height="15" fill="rgb(243,49,53)" fg:x="8627" fg:w="6"/><text x="98.0951%" y="1119.50"></text></g><g><title>deno`unmask (1 samples, 0.01%)</title><rect x="97.9131%" y="1109" width="0.0113%" height="15" fill="rgb(247,216,33)" fg:x="8633" fg:w="1"/><text x="98.1631%" y="1119.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.11%)</title><rect x="97.9245%" y="1109" width="0.1134%" height="15" fill="rgb(226,26,14)" fg:x="8634" fg:w="10"/><text x="98.1745%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.07%)</title><rect x="98.0379%" y="1109" width="0.0681%" height="15" fill="rgb(215,49,53)" fg:x="8644" fg:w="6"/><text x="98.2879%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.10%)</title><rect x="98.1059%" y="1109" width="0.1021%" height="15" fill="rgb(245,162,40)" fg:x="8650" fg:w="9"/><text x="98.3559%" y="1119.50"></text></g><g><title>deno`tokio::task::local::LocalSet::tick (8,179 samples, 92.76%)</title><rect x="5.4894%" y="1141" width="92.7640%" height="15" fill="rgb(229,68,17)" fg:x="484" fg:w="8179"/><text x="5.7394%" y="1151.50">deno`tokio::task::local::LocalSet::tick</text></g><g><title>deno`tokio::runtime::task::raw::poll (8,170 samples, 92.66%)</title><rect x="5.5915%" y="1125" width="92.6619%" height="15" fill="rgb(213,182,10)" fg:x="493" fg:w="8170"/><text x="5.8415%" y="1135.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.05%)</title><rect x="98.2080%" y="1109" width="0.0454%" height="15" fill="rgb(245,125,30)" fg:x="8659" fg:w="4"/><text x="98.4580%" y="1119.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.08%)</title><rect x="98.2534%" y="1141" width="0.0794%" height="15" fill="rgb(232,202,2)" fg:x="8663" fg:w="7"/><text x="98.5034%" y="1151.50"></text></g><g><title>deno`tokio::task::local::LocalSet::run_until::_{{closure}} (8,314 samples, 94.30%)</title><rect x="4.1624%" y="1157" width="94.2951%" height="15" fill="rgb(237,140,51)" fg:x="367" fg:w="8314"/><text x="4.4124%" y="1167.50">deno`tokio::task::local::LocalSet::run_until::_{{closure}}</text></g><g><title>libsystem_kernel.dylib`kevent (11 samples, 0.12%)</title><rect x="98.3328%" y="1141" width="0.1248%" height="15" fill="rgb(236,157,25)" fg:x="8670" fg:w="11"/><text x="98.5828%" y="1151.50"></text></g><g><title>dyld`start (8,685 samples, 98.50%)</title><rect x="0.0000%" y="1237" width="98.5029%" height="15" fill="rgb(219,209,0)" fg:x="0" fg:w="8685"/><text x="0.2500%" y="1247.50">dyld`start</text></g><g><title>deno`main (8,685 samples, 98.50%)</title><rect x="0.0000%" y="1221" width="98.5029%" height="15" fill="rgb(240,116,54)" fg:x="0" fg:w="8685"/><text x="0.2500%" y="1231.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (8,685 samples, 98.50%)</title><rect x="0.0000%" y="1205" width="98.5029%" height="15" fill="rgb(216,10,36)" fg:x="0" fg:w="8685"/><text x="0.2500%" y="1215.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (8,685 samples, 98.50%)</title><rect x="0.0000%" y="1189" width="98.5029%" height="15" fill="rgb(222,72,44)" fg:x="0" fg:w="8685"/><text x="0.2500%" y="1199.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (8,683 samples, 98.48%)</title><rect x="0.0227%" y="1173" width="98.4802%" height="15" fill="rgb(232,159,9)" fg:x="2" fg:w="8683"/><text x="0.2727%" y="1183.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.05%)</title><rect x="98.4575%" y="1157" width="0.0454%" height="15" fill="rgb(210,39,32)" fg:x="8681" fg:w="4"/><text x="98.7075%" y="1167.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.01%)</title><rect x="98.5029%" y="1205" width="0.0113%" height="15" fill="rgb(216,194,45)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1215.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.01%)</title><rect x="98.5029%" y="1189" width="0.0113%" height="15" fill="rgb(218,18,35)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1199.50"></text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.01%)</title><rect x="98.5029%" y="1173" width="0.0113%" height="15" fill="rgb(207,83,51)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1183.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (1 samples, 0.01%)</title><rect x="98.5029%" y="1157" width="0.0113%" height="15" fill="rgb(225,63,43)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1167.50"></text></g><g><title>deno`deno::cache::cache_db::CacheDB::initialize (1 samples, 0.01%)</title><rect x="98.5029%" y="1141" width="0.0113%" height="15" fill="rgb(207,57,36)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1151.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.01%)</title><rect x="98.5029%" y="1125" width="0.0113%" height="15" fill="rgb(216,99,33)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1135.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.01%)</title><rect x="98.5029%" y="1109" width="0.0113%" height="15" fill="rgb(225,42,16)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1119.50"></text></g><g><title>deno`deno::cache::cache_db::CacheDB::open_connection_and_init (1 samples, 0.01%)</title><rect x="98.5029%" y="1093" width="0.0113%" height="15" fill="rgb(220,201,45)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1103.50"></text></g><g><title>deno`rusqlite::Connection::execute_batch (1 samples, 0.01%)</title><rect x="98.5029%" y="1077" width="0.0113%" height="15" fill="rgb(225,33,4)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1087.50"></text></g><g><title>deno`rusqlite::raw_statement::RawStatement::step (1 samples, 0.01%)</title><rect x="98.5029%" y="1061" width="0.0113%" height="15" fill="rgb(224,33,50)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1071.50"></text></g><g><title>deno`sqlite3_step (1 samples, 0.01%)</title><rect x="98.5029%" y="1045" width="0.0113%" height="15" fill="rgb(246,198,51)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1055.50"></text></g><g><title>deno`sqlite3VdbeExec (1 samples, 0.01%)</title><rect x="98.5029%" y="1029" width="0.0113%" height="15" fill="rgb(205,22,4)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1039.50"></text></g><g><title>deno`sqlite3BtreeBeginTrans (1 samples, 0.01%)</title><rect x="98.5029%" y="1013" width="0.0113%" height="15" fill="rgb(206,3,8)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1023.50"></text></g><g><title>deno`sqlite3PagerSharedLock (1 samples, 0.01%)</title><rect x="98.5029%" y="997" width="0.0113%" height="15" fill="rgb(251,23,15)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="1007.50"></text></g><g><title>deno`pagerLockDb (1 samples, 0.01%)</title><rect x="98.5029%" y="981" width="0.0113%" height="15" fill="rgb(252,88,28)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="991.50"></text></g><g><title>deno`unixLock (1 samples, 0.01%)</title><rect x="98.5029%" y="965" width="0.0113%" height="15" fill="rgb(212,127,14)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="975.50"></text></g><g><title>deno`unixFileLock (1 samples, 0.01%)</title><rect x="98.5029%" y="949" width="0.0113%" height="15" fill="rgb(247,145,37)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="959.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (1 samples, 0.01%)</title><rect x="98.5029%" y="933" width="0.0113%" height="15" fill="rgb(209,117,53)" fg:x="8685" fg:w="1"/><text x="98.7529%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (1 samples, 0.01%)</title><rect x="98.5142%" y="1109" width="0.0113%" height="15" fill="rgb(212,90,42)" fg:x="8686" fg:w="1"/><text x="98.7642%" y="1119.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (1 samples, 0.01%)</title><rect x="98.5142%" y="1093" width="0.0113%" height="15" fill="rgb(218,164,37)" fg:x="8686" fg:w="1"/><text x="98.7642%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceGraph (1 samples, 0.01%)</title><rect x="98.5142%" y="1077" width="0.0113%" height="15" fill="rgb(246,65,34)" fg:x="8686" fg:w="1"/><text x="98.7642%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (1 samples, 0.01%)</title><rect x="98.5256%" y="1093" width="0.0113%" height="15" fill="rgb(231,100,33)" fg:x="8687" fg:w="1"/><text x="98.7756%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (1 samples, 0.01%)</title><rect x="98.5256%" y="1077" width="0.0113%" height="15" fill="rgb(228,126,14)" fg:x="8687" fg:w="1"/><text x="98.7756%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (1 samples, 0.01%)</title><rect x="98.5256%" y="1061" width="0.0113%" height="15" fill="rgb(215,173,21)" fg:x="8687" fg:w="1"/><text x="98.7756%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (1 samples, 0.01%)</title><rect x="98.5256%" y="1045" width="0.0113%" height="15" fill="rgb(210,6,40)" fg:x="8687" fg:w="1"/><text x="98.7756%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (1 samples, 0.01%)</title><rect x="98.5256%" y="1029" width="0.0113%" height="15" fill="rgb(212,48,18)" fg:x="8687" fg:w="1"/><text x="98.7756%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::GetCommonDominator (1 samples, 0.01%)</title><rect x="98.5256%" y="1013" width="0.0113%" height="15" fill="rgb(230,214,11)" fg:x="8687" fg:w="1"/><text x="98.7756%" y="1023.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (3 samples, 0.03%)</title><rect x="98.5142%" y="1173" width="0.0340%" height="15" fill="rgb(254,105,39)" fg:x="8686" fg:w="3"/><text x="98.7642%" y="1183.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (3 samples, 0.03%)</title><rect x="98.5142%" y="1157" width="0.0340%" height="15" fill="rgb(245,158,5)" fg:x="8686" fg:w="3"/><text x="98.7642%" y="1167.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (3 samples, 0.03%)</title><rect x="98.5142%" y="1141" width="0.0340%" height="15" fill="rgb(249,208,11)" fg:x="8686" fg:w="3"/><text x="98.7642%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (3 samples, 0.03%)</title><rect x="98.5142%" y="1125" width="0.0340%" height="15" fill="rgb(210,39,28)" fg:x="8686" fg:w="3"/><text x="98.7642%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (2 samples, 0.02%)</title><rect x="98.5256%" y="1109" width="0.0227%" height="15" fill="rgb(211,56,53)" fg:x="8687" fg:w="2"/><text x="98.7756%" y="1119.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (1 samples, 0.01%)</title><rect x="98.5369%" y="1093" width="0.0113%" height="15" fill="rgb(226,201,30)" fg:x="8688" fg:w="1"/><text x="98.7869%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (1 samples, 0.01%)</title><rect x="98.5369%" y="1077" width="0.0113%" height="15" fill="rgb(239,101,34)" fg:x="8688" fg:w="1"/><text x="98.7869%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="98.5369%" y="1061" width="0.0113%" height="15" fill="rgb(226,209,5)" fg:x="8688" fg:w="1"/><text x="98.7869%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.01%)</title><rect x="98.5369%" y="1045" width="0.0113%" height="15" fill="rgb(250,105,47)" fg:x="8688" fg:w="1"/><text x="98.7869%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.01%)</title><rect x="98.5369%" y="1029" width="0.0113%" height="15" fill="rgb(230,72,3)" fg:x="8688" fg:w="1"/><text x="98.7869%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::DeadCodeElimination::ReduceEffectNode (1 samples, 0.01%)</title><rect x="98.5369%" y="1013" width="0.0113%" height="15" fill="rgb(232,218,39)" fg:x="8688" fg:w="1"/><text x="98.7869%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasFrameStateInput (1 samples, 0.01%)</title><rect x="98.5369%" y="997" width="0.0113%" height="15" fill="rgb(248,166,6)" fg:x="8688" fg:w="1"/><text x="98.7869%" y="1007.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::PreVisitSingleBytecode (1 samples, 0.01%)</title><rect x="98.5596%" y="1109" width="0.0113%" height="15" fill="rgb(247,89,20)" fg:x="8690" fg:w="1"/><text x="98.8096%" y="1119.50"></text></g><g><title>deno`v8::platform::DefaultJobWorker::Run (3 samples, 0.03%)</title><rect x="98.5483%" y="1173" width="0.0340%" height="15" fill="rgb(248,130,54)" fg:x="8689" fg:w="3"/><text x="98.7983%" y="1183.50"></text></g><g><title>deno`v8::internal::baseline::ConcurrentBaselineCompiler::JobDispatcher::Run (3 samples, 0.03%)</title><rect x="98.5483%" y="1157" width="0.0340%" height="15" fill="rgb(234,196,4)" fg:x="8689" fg:w="3"/><text x="98.7983%" y="1167.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompilerTask::Compile (3 samples, 0.03%)</title><rect x="98.5483%" y="1141" width="0.0340%" height="15" fill="rgb(250,143,31)" fg:x="8689" fg:w="3"/><text x="98.7983%" y="1151.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::GenerateCode (3 samples, 0.03%)</title><rect x="98.5483%" y="1125" width="0.0340%" height="15" fill="rgb(211,110,34)" fg:x="8689" fg:w="3"/><text x="98.7983%" y="1135.50"></text></g><g><title>deno`v8::internal::baseline::BytecodeOffsetTableBuilder::AddPosition (1 samples, 0.01%)</title><rect x="98.5709%" y="1109" width="0.0113%" height="15" fill="rgb(215,124,48)" fg:x="8691" fg:w="1"/><text x="98.8209%" y="1119.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (3 samples, 0.03%)</title><rect x="98.5823%" y="1173" width="0.0340%" height="15" fill="rgb(216,46,13)" fg:x="8692" fg:w="3"/><text x="98.8323%" y="1183.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.03%)</title><rect x="98.5823%" y="1157" width="0.0340%" height="15" fill="rgb(205,184,25)" fg:x="8692" fg:w="3"/><text x="98.8323%" y="1167.50"></text></g><g><title>deno`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="98.6163%" y="1157" width="0.0227%" height="15" fill="rgb(228,1,10)" fg:x="8695" fg:w="2"/><text x="98.8663%" y="1167.50"></text></g><g><title>deno`v8::internal::GlobalBackingStoreRegistry::Unregister (4 samples, 0.05%)</title><rect x="98.7070%" y="1109" width="0.0454%" height="15" fill="rgb(213,116,27)" fg:x="8703" fg:w="4"/><text x="98.9570%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.02%)</title><rect x="98.7524%" y="1109" width="0.0227%" height="15" fill="rgb(241,95,50)" fg:x="8707" fg:w="2"/><text x="99.0024%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.09%)</title><rect x="98.7751%" y="1109" width="0.0907%" height="15" fill="rgb(238,48,32)" fg:x="8709" fg:w="8"/><text x="99.0251%" y="1119.50"></text></g><g><title>deno`v8::internal::BackingStore::~BackingStore (21 samples, 0.24%)</title><rect x="98.6844%" y="1125" width="0.2382%" height="15" fill="rgb(235,113,49)" fg:x="8701" fg:w="21"/><text x="98.9344%" y="1135.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.06%)</title><rect x="98.8658%" y="1109" width="0.0567%" height="15" fill="rgb(205,127,43)" fg:x="8717" fg:w="5"/><text x="99.1158%" y="1119.50"></text></g><g><title>deno`v8::internal::GlobalBackingStoreRegistry::Unregister (1 samples, 0.01%)</title><rect x="98.9225%" y="1125" width="0.0113%" height="15" fill="rgb(250,162,2)" fg:x="8722" fg:w="1"/><text x="99.1725%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="98.9339%" y="1125" width="0.0227%" height="15" fill="rgb(220,13,41)" fg:x="8723" fg:w="2"/><text x="99.1839%" y="1135.50"></text></g><g><title>deno`std::Cr::__shared_ptr_pointer&lt;v8::BackingStore*, std::Cr::shared_ptr&lt;v8::BackingStore&gt;::__shared_ptr_default_delete&lt;v8::BackingStore, v8::BackingStore&gt;, std::Cr::allocator&lt;v8::BackingStore&gt; &gt;::__on_zero_shared (33 samples, 0.37%)</title><rect x="98.6730%" y="1141" width="0.3743%" height="15" fill="rgb(249,221,25)" fg:x="8700" fg:w="33"/><text x="98.9230%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.09%)</title><rect x="98.9566%" y="1125" width="0.0907%" height="15" fill="rgb(215,208,19)" fg:x="8725" fg:w="8"/><text x="99.2066%" y="1135.50"></text></g><g><title>deno`v8::internal::BackingStore::~BackingStore (3 samples, 0.03%)</title><rect x="99.0473%" y="1141" width="0.0340%" height="15" fill="rgb(236,175,2)" fg:x="8733" fg:w="3"/><text x="99.2973%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.05%)</title><rect x="99.0813%" y="1141" width="0.0454%" height="15" fill="rgb(241,52,2)" fg:x="8736" fg:w="4"/><text x="99.3313%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (25 samples, 0.28%)</title><rect x="99.1267%" y="1141" width="0.2835%" height="15" fill="rgb(248,140,14)" fg:x="8740" fg:w="25"/><text x="99.3767%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$os_unfair_lock_assert_owner (1 samples, 0.01%)</title><rect x="99.4102%" y="1125" width="0.0113%" height="15" fill="rgb(253,22,42)" fg:x="8765" fg:w="1"/><text x="99.6602%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (19 samples, 0.22%)</title><rect x="99.4102%" y="1141" width="0.2155%" height="15" fill="rgb(234,61,47)" fg:x="8765" fg:w="19"/><text x="99.6602%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (18 samples, 0.20%)</title><rect x="99.4216%" y="1125" width="0.2042%" height="15" fill="rgb(208,226,15)" fg:x="8766" fg:w="18"/><text x="99.6716%" y="1135.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.20%)</title><rect x="99.4216%" y="1109" width="0.2042%" height="15" fill="rgb(217,221,4)" fg:x="8766" fg:w="18"/><text x="99.6716%" y="1119.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.01%)</title><rect x="99.6257%" y="1141" width="0.0113%" height="15" fill="rgb(212,174,34)" fg:x="8784" fg:w="1"/><text x="99.8757%" y="1151.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::SweepingJob::SweepYoung (94 samples, 1.07%)</title><rect x="98.6390%" y="1157" width="1.0661%" height="15" fill="rgb(253,83,4)" fg:x="8697" fg:w="94"/><text x="98.8890%" y="1167.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.07%)</title><rect x="99.6371%" y="1141" width="0.0681%" height="15" fill="rgb(250,195,49)" fg:x="8785" fg:w="6"/><text x="99.8871%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="99.7051%" y="1157" width="0.0340%" height="15" fill="rgb(241,192,25)" fg:x="8791" fg:w="3"/><text x="99.9551%" y="1167.50"></text></g><g><title>deno`v8::base::ThreadEntry (130 samples, 1.47%)</title><rect x="98.5142%" y="1205" width="1.4744%" height="15" fill="rgb(208,124,10)" fg:x="8686" fg:w="130"/><text x="98.7642%" y="1215.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (130 samples, 1.47%)</title><rect x="98.5142%" y="1189" width="1.4744%" height="15" fill="rgb(222,33,0)" fg:x="8686" fg:w="130"/><text x="98.7642%" y="1199.50"></text></g><g><title>deno`void std::Cr::__function::__policy_invoker&lt;void ()&gt;::__call_impl&lt;std::Cr::__function::__default_alloc_func&lt;v8::internal::ArrayBufferSweeper::RequestSweep(v8::internal::ArrayBufferSweeper::SweepingType)::$_0, void ()&gt; &gt; (121 samples, 1.37%)</title><rect x="98.6163%" y="1173" width="1.3723%" height="15" fill="rgb(234,209,28)" fg:x="8695" fg:w="121"/><text x="98.8663%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.25%)</title><rect x="99.7391%" y="1157" width="0.2495%" height="15" fill="rgb(224,11,23)" fg:x="8794" fg:w="22"/><text x="99.9891%" y="1167.50"></text></g><g><title>all (8,817 samples, 100%)</title><rect x="0.0000%" y="1253" width="100.0000%" height="15" fill="rgb(232,99,1)" fg:x="0" fg:w="8817"/><text x="0.2500%" y="1263.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (132 samples, 1.50%)</title><rect x="98.5029%" y="1237" width="1.4971%" height="15" fill="rgb(237,95,45)" fg:x="8685" fg:w="132"/><text x="98.7529%" y="1247.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (132 samples, 1.50%)</title><rect x="98.5029%" y="1221" width="1.4971%" height="15" fill="rgb(208,109,11)" fg:x="8685" fg:w="132"/><text x="98.7529%" y="1231.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.01%)</title><rect x="99.9887%" y="1205" width="0.0113%" height="15" fill="rgb(216,190,48)" fg:x="8816" fg:w="1"/><text x="100.2387%" y="1215.50"></text></g></svg></svg>