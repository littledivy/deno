<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1366" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1349.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1349.00"> </text><svg id="frames" x="10" width="1180" total_samples="9317"><g><title>deno`OUTLINED_FUNCTION_11476 (1 samples, 0.01%)</title><rect x="0.0000%" y="1237" width="0.0107%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11850 (2 samples, 0.02%)</title><rect x="0.0107%" y="1237" width="0.0215%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2607%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18327 (1 samples, 0.01%)</title><rect x="0.0322%" y="1237" width="0.0107%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.2822%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_26227 (2 samples, 0.02%)</title><rect x="0.0429%" y="1237" width="0.0215%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="2"/><text x="0.2929%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36048 (1 samples, 0.01%)</title><rect x="0.0644%" y="1237" width="0.0107%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="0.3144%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_447 (3 samples, 0.03%)</title><rect x="0.0751%" y="1237" width="0.0322%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="3"/><text x="0.3251%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_4771 (1 samples, 0.01%)</title><rect x="0.1073%" y="1237" width="0.0107%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="1"/><text x="0.3573%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6351 (1 samples, 0.01%)</title><rect x="0.1181%" y="1237" width="0.0107%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="1"/><text x="0.3681%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_909 (1 samples, 0.01%)</title><rect x="0.1288%" y="1237" width="0.0107%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="1"/><text x="0.3788%" y="1247.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.02%)</title><rect x="0.1395%" y="1237" width="0.0215%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="2"/><text x="0.3895%" y="1247.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.02%)</title><rect x="0.1610%" y="1237" width="0.0215%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="2"/><text x="0.4110%" y="1247.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::current_thread::Core&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="0.1825%" y="1237" width="0.0215%" height="15" fill="rgb(240,193,28)" fg:x="17" fg:w="2"/><text x="0.4325%" y="1247.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.02%)</title><rect x="0.2039%" y="1237" width="0.0215%" height="15" fill="rgb(216,20,37)" fg:x="19" fg:w="2"/><text x="0.4539%" y="1247.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn deno::tools::bench::BenchReporter+core::marker::Send&gt;&gt; (1 samples, 0.01%)</title><rect x="0.3757%" y="1061" width="0.0107%" height="15" fill="rgb(206,188,39)" fg:x="35" fg:w="1"/><text x="0.6257%" y="1071.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno::cache::parsed_source::ParsedSourceCacheModuleAnalyzer&gt; (1 samples, 0.01%)</title><rect x="0.3757%" y="1045" width="0.0107%" height="15" fill="rgb(217,207,13)" fg:x="35" fg:w="1"/><text x="0.6257%" y="1055.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;rusqlite::Connection&gt; (1 samples, 0.01%)</title><rect x="0.3757%" y="1029" width="0.0107%" height="15" fill="rgb(231,73,38)" fg:x="35" fg:w="1"/><text x="0.6257%" y="1039.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;rusqlite::inner_connection::InnerConnection&gt;&gt; (1 samples, 0.01%)</title><rect x="0.3757%" y="1013" width="0.0107%" height="15" fill="rgb(225,20,46)" fg:x="35" fg:w="1"/><text x="0.6257%" y="1023.50"></text></g><g><title>deno`rusqlite::inner_connection::InnerConnection::close (1 samples, 0.01%)</title><rect x="0.3757%" y="997" width="0.0107%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="1"/><text x="0.6257%" y="1007.50"></text></g><g><title>deno`sqlite3Close (1 samples, 0.01%)</title><rect x="0.3757%" y="981" width="0.0107%" height="15" fill="rgb(221,200,47)" fg:x="35" fg:w="1"/><text x="0.6257%" y="991.50"></text></g><g><title>deno`sqlite3LeaveMutexAndCloseZombie (1 samples, 0.01%)</title><rect x="0.3757%" y="965" width="0.0107%" height="15" fill="rgb(226,26,5)" fg:x="35" fg:w="1"/><text x="0.6257%" y="975.50"></text></g><g><title>deno`sqlite3BtreeClose (1 samples, 0.01%)</title><rect x="0.3757%" y="949" width="0.0107%" height="15" fill="rgb(249,33,26)" fg:x="35" fg:w="1"/><text x="0.6257%" y="959.50"></text></g><g><title>deno`sqlite3PagerClose (1 samples, 0.01%)</title><rect x="0.3757%" y="933" width="0.0107%" height="15" fill="rgb(235,183,28)" fg:x="35" fg:w="1"/><text x="0.6257%" y="943.50"></text></g><g><title>deno`sqlite3WalClose (1 samples, 0.01%)</title><rect x="0.3757%" y="917" width="0.0107%" height="15" fill="rgb(221,5,38)" fg:x="35" fg:w="1"/><text x="0.6257%" y="927.50"></text></g><g><title>deno`unixShmUnmap (1 samples, 0.01%)</title><rect x="0.3757%" y="901" width="0.0107%" height="15" fill="rgb(247,18,42)" fg:x="35" fg:w="1"/><text x="0.6257%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.01%)</title><rect x="0.3757%" y="885" width="0.0107%" height="15" fill="rgb(241,131,45)" fg:x="35" fg:w="1"/><text x="0.6257%" y="895.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="0.3757%" y="1125" width="0.0215%" height="15" fill="rgb(249,31,29)" fg:x="35" fg:w="2"/><text x="0.6257%" y="1135.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="0.3757%" y="1109" width="0.0215%" height="15" fill="rgb(225,111,53)" fg:x="35" fg:w="2"/><text x="0.6257%" y="1119.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="0.3757%" y="1093" width="0.0215%" height="15" fill="rgb(238,160,17)" fg:x="35" fg:w="2"/><text x="0.6257%" y="1103.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="0.3757%" y="1077" width="0.0215%" height="15" fill="rgb(214,148,48)" fg:x="35" fg:w="2"/><text x="0.6257%" y="1087.50"></text></g><g><title>deno`deno::cache::parsed_source::ParsedSourceCache::as_analyzer (1 samples, 0.01%)</title><rect x="0.3864%" y="1061" width="0.0107%" height="15" fill="rgb(232,36,49)" fg:x="36" fg:w="1"/><text x="0.6364%" y="1071.50"></text></g><g><title>deno`rusqlite::Connection::open (1 samples, 0.01%)</title><rect x="0.3864%" y="1045" width="0.0107%" height="15" fill="rgb(209,103,24)" fg:x="36" fg:w="1"/><text x="0.6364%" y="1055.50"></text></g><g><title>deno`rusqlite::inner_connection::InnerConnection::open_with_flags (1 samples, 0.01%)</title><rect x="0.3864%" y="1029" width="0.0107%" height="15" fill="rgb(229,88,8)" fg:x="36" fg:w="1"/><text x="0.6364%" y="1039.50"></text></g><g><title>deno`openDatabase (1 samples, 0.01%)</title><rect x="0.3864%" y="1013" width="0.0107%" height="15" fill="rgb(213,181,19)" fg:x="36" fg:w="1"/><text x="0.6364%" y="1023.50"></text></g><g><title>deno`sqlite3BtreeOpen (1 samples, 0.01%)</title><rect x="0.3864%" y="997" width="0.0107%" height="15" fill="rgb(254,191,54)" fg:x="36" fg:w="1"/><text x="0.6364%" y="1007.50"></text></g><g><title>deno`pcache1Alloc (1 samples, 0.01%)</title><rect x="0.3864%" y="981" width="0.0107%" height="15" fill="rgb(241,83,37)" fg:x="36" fg:w="1"/><text x="0.6364%" y="991.50"></text></g><g><title>deno`deno::js::deno_isolate_init (1 samples, 0.01%)</title><rect x="0.3971%" y="1125" width="0.0107%" height="15" fill="rgb(233,36,39)" fg:x="37" fg:w="1"/><text x="0.6471%" y="1135.50"></text></g><g><title>deno`&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="0.3971%" y="1109" width="0.0107%" height="15" fill="rgb(226,3,54)" fg:x="37" fg:w="1"/><text x="0.6471%" y="1119.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.01%)</title><rect x="0.3971%" y="1093" width="0.0107%" height="15" fill="rgb(245,192,40)" fg:x="37" fg:w="1"/><text x="0.6471%" y="1103.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.01%)</title><rect x="0.3971%" y="1077" width="0.0107%" height="15" fill="rgb(238,167,29)" fg:x="37" fg:w="1"/><text x="0.6471%" y="1087.50"></text></g><g><title>deno`deno::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.01%)</title><rect x="0.3971%" y="1061" width="0.0107%" height="15" fill="rgb(232,182,51)" fg:x="37" fg:w="1"/><text x="0.6471%" y="1071.50"></text></g><g><title>deno`lzzzz::lz4::block::decompress (1 samples, 0.01%)</title><rect x="0.3971%" y="1045" width="0.0107%" height="15" fill="rgb(231,60,39)" fg:x="37" fg:w="1"/><text x="0.6471%" y="1055.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.01%)</title><rect x="0.3971%" y="1029" width="0.0107%" height="15" fill="rgb(208,69,12)" fg:x="37" fg:w="1"/><text x="0.6471%" y="1039.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (1 samples, 0.01%)</title><rect x="0.4079%" y="1045" width="0.0107%" height="15" fill="rgb(235,93,37)" fg:x="38" fg:w="1"/><text x="0.6579%" y="1055.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.4079%" y="1029" width="0.0107%" height="15" fill="rgb(213,116,39)" fg:x="38" fg:w="1"/><text x="0.6579%" y="1039.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.4079%" y="1013" width="0.0107%" height="15" fill="rgb(222,207,29)" fg:x="38" fg:w="1"/><text x="0.6579%" y="1023.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.4079%" y="997" width="0.0107%" height="15" fill="rgb(206,96,30)" fg:x="38" fg:w="1"/><text x="0.6579%" y="1007.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="981" width="0.0107%" height="15" fill="rgb(218,138,4)" fg:x="38" fg:w="1"/><text x="0.6579%" y="991.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.4079%" y="965" width="0.0107%" height="15" fill="rgb(250,191,14)" fg:x="38" fg:w="1"/><text x="0.6579%" y="975.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="949" width="0.0107%" height="15" fill="rgb(239,60,40)" fg:x="38" fg:w="1"/><text x="0.6579%" y="959.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="933" width="0.0107%" height="15" fill="rgb(206,27,48)" fg:x="38" fg:w="1"/><text x="0.6579%" y="943.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="917" width="0.0107%" height="15" fill="rgb(225,35,8)" fg:x="38" fg:w="1"/><text x="0.6579%" y="927.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.4079%" y="901" width="0.0107%" height="15" fill="rgb(250,213,24)" fg:x="38" fg:w="1"/><text x="0.6579%" y="911.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="885" width="0.0107%" height="15" fill="rgb(247,123,22)" fg:x="38" fg:w="1"/><text x="0.6579%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="869" width="0.0107%" height="15" fill="rgb(231,138,38)" fg:x="38" fg:w="1"/><text x="0.6579%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="853" width="0.0107%" height="15" fill="rgb(231,145,46)" fg:x="38" fg:w="1"/><text x="0.6579%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.4079%" y="837" width="0.0107%" height="15" fill="rgb(251,118,11)" fg:x="38" fg:w="1"/><text x="0.6579%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="821" width="0.0107%" height="15" fill="rgb(217,147,25)" fg:x="38" fg:w="1"/><text x="0.6579%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="805" width="0.0107%" height="15" fill="rgb(247,81,37)" fg:x="38" fg:w="1"/><text x="0.6579%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="789" width="0.0107%" height="15" fill="rgb(209,12,38)" fg:x="38" fg:w="1"/><text x="0.6579%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.4079%" y="773" width="0.0107%" height="15" fill="rgb(227,1,9)" fg:x="38" fg:w="1"/><text x="0.6579%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="757" width="0.0107%" height="15" fill="rgb(248,47,43)" fg:x="38" fg:w="1"/><text x="0.6579%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="741" width="0.0107%" height="15" fill="rgb(221,10,30)" fg:x="38" fg:w="1"/><text x="0.6579%" y="751.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="725" width="0.0107%" height="15" fill="rgb(210,229,1)" fg:x="38" fg:w="1"/><text x="0.6579%" y="735.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="709" width="0.0107%" height="15" fill="rgb(222,148,37)" fg:x="38" fg:w="1"/><text x="0.6579%" y="719.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="693" width="0.0107%" height="15" fill="rgb(234,67,33)" fg:x="38" fg:w="1"/><text x="0.6579%" y="703.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="677" width="0.0107%" height="15" fill="rgb(247,98,35)" fg:x="38" fg:w="1"/><text x="0.6579%" y="687.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="661" width="0.0107%" height="15" fill="rgb(247,138,52)" fg:x="38" fg:w="1"/><text x="0.6579%" y="671.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="645" width="0.0107%" height="15" fill="rgb(213,79,30)" fg:x="38" fg:w="1"/><text x="0.6579%" y="655.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="629" width="0.0107%" height="15" fill="rgb(246,177,23)" fg:x="38" fg:w="1"/><text x="0.6579%" y="639.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="613" width="0.0107%" height="15" fill="rgb(230,62,27)" fg:x="38" fg:w="1"/><text x="0.6579%" y="623.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="597" width="0.0107%" height="15" fill="rgb(216,154,8)" fg:x="38" fg:w="1"/><text x="0.6579%" y="607.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="581" width="0.0107%" height="15" fill="rgb(244,35,45)" fg:x="38" fg:w="1"/><text x="0.6579%" y="591.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="565" width="0.0107%" height="15" fill="rgb(251,115,12)" fg:x="38" fg:w="1"/><text x="0.6579%" y="575.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="549" width="0.0107%" height="15" fill="rgb(240,54,50)" fg:x="38" fg:w="1"/><text x="0.6579%" y="559.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="533" width="0.0107%" height="15" fill="rgb(233,84,52)" fg:x="38" fg:w="1"/><text x="0.6579%" y="543.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="517" width="0.0107%" height="15" fill="rgb(207,117,47)" fg:x="38" fg:w="1"/><text x="0.6579%" y="527.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="501" width="0.0107%" height="15" fill="rgb(249,43,39)" fg:x="38" fg:w="1"/><text x="0.6579%" y="511.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="485" width="0.0107%" height="15" fill="rgb(209,38,44)" fg:x="38" fg:w="1"/><text x="0.6579%" y="495.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="469" width="0.0107%" height="15" fill="rgb(236,212,23)" fg:x="38" fg:w="1"/><text x="0.6579%" y="479.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="453" width="0.0107%" height="15" fill="rgb(242,79,21)" fg:x="38" fg:w="1"/><text x="0.6579%" y="463.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="437" width="0.0107%" height="15" fill="rgb(211,96,35)" fg:x="38" fg:w="1"/><text x="0.6579%" y="447.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="421" width="0.0107%" height="15" fill="rgb(253,215,40)" fg:x="38" fg:w="1"/><text x="0.6579%" y="431.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="405" width="0.0107%" height="15" fill="rgb(211,81,21)" fg:x="38" fg:w="1"/><text x="0.6579%" y="415.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="389" width="0.0107%" height="15" fill="rgb(208,190,38)" fg:x="38" fg:w="1"/><text x="0.6579%" y="399.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="373" width="0.0107%" height="15" fill="rgb(235,213,38)" fg:x="38" fg:w="1"/><text x="0.6579%" y="383.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="357" width="0.0107%" height="15" fill="rgb(237,122,38)" fg:x="38" fg:w="1"/><text x="0.6579%" y="367.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="341" width="0.0107%" height="15" fill="rgb(244,218,35)" fg:x="38" fg:w="1"/><text x="0.6579%" y="351.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="325" width="0.0107%" height="15" fill="rgb(240,68,47)" fg:x="38" fg:w="1"/><text x="0.6579%" y="335.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="309" width="0.0107%" height="15" fill="rgb(210,16,53)" fg:x="38" fg:w="1"/><text x="0.6579%" y="319.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="293" width="0.0107%" height="15" fill="rgb(235,124,12)" fg:x="38" fg:w="1"/><text x="0.6579%" y="303.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="277" width="0.0107%" height="15" fill="rgb(224,169,11)" fg:x="38" fg:w="1"/><text x="0.6579%" y="287.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="261" width="0.0107%" height="15" fill="rgb(250,166,2)" fg:x="38" fg:w="1"/><text x="0.6579%" y="271.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="245" width="0.0107%" height="15" fill="rgb(242,216,29)" fg:x="38" fg:w="1"/><text x="0.6579%" y="255.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="229" width="0.0107%" height="15" fill="rgb(230,116,27)" fg:x="38" fg:w="1"/><text x="0.6579%" y="239.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="213" width="0.0107%" height="15" fill="rgb(228,99,48)" fg:x="38" fg:w="1"/><text x="0.6579%" y="223.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="197" width="0.0107%" height="15" fill="rgb(253,11,6)" fg:x="38" fg:w="1"/><text x="0.6579%" y="207.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="181" width="0.0107%" height="15" fill="rgb(247,143,39)" fg:x="38" fg:w="1"/><text x="0.6579%" y="191.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="165" width="0.0107%" height="15" fill="rgb(236,97,10)" fg:x="38" fg:w="1"/><text x="0.6579%" y="175.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="149" width="0.0107%" height="15" fill="rgb(233,208,19)" fg:x="38" fg:w="1"/><text x="0.6579%" y="159.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="133" width="0.0107%" height="15" fill="rgb(216,164,2)" fg:x="38" fg:w="1"/><text x="0.6579%" y="143.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="117" width="0.0107%" height="15" fill="rgb(220,129,5)" fg:x="38" fg:w="1"/><text x="0.6579%" y="127.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="101" width="0.0107%" height="15" fill="rgb(242,17,10)" fg:x="38" fg:w="1"/><text x="0.6579%" y="111.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="85" width="0.0107%" height="15" fill="rgb(242,107,0)" fg:x="38" fg:w="1"/><text x="0.6579%" y="95.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="69" width="0.0107%" height="15" fill="rgb(251,28,31)" fg:x="38" fg:w="1"/><text x="0.6579%" y="79.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4079%" y="53" width="0.0107%" height="15" fill="rgb(233,223,10)" fg:x="38" fg:w="1"/><text x="0.6579%" y="63.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4079%" y="37" width="0.0107%" height="15" fill="rgb(215,21,27)" fg:x="38" fg:w="1"/><text x="0.6579%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.02%)</title><rect x="0.4079%" y="1093" width="0.0215%" height="15" fill="rgb(232,23,21)" fg:x="38" fg:w="2"/><text x="0.6579%" y="1103.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.02%)</title><rect x="0.4079%" y="1077" width="0.0215%" height="15" fill="rgb(244,5,23)" fg:x="38" fg:w="2"/><text x="0.6579%" y="1087.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.02%)</title><rect x="0.4079%" y="1061" width="0.0215%" height="15" fill="rgb(226,81,46)" fg:x="38" fg:w="2"/><text x="0.6579%" y="1071.50"></text></g><g><title>deno`v8::internal::Genesis::InstallSpecialObjects(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.4186%" y="1045" width="0.0107%" height="15" fill="rgb(247,70,30)" fg:x="39" fg:w="1"/><text x="0.6686%" y="1055.50"></text></g><g><title>deno`v8::internal::WasmJs::Install (1 samples, 0.01%)</title><rect x="0.4186%" y="1029" width="0.0107%" height="15" fill="rgb(212,68,19)" fg:x="39" fg:w="1"/><text x="0.6686%" y="1039.50"></text></g><g><title>deno`v8::internal::InstallFunc(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSObject&gt;, char const*, void (*)(v8::FunctionCallbackInfo (1 samples, 0.01%)</title><rect x="0.4186%" y="1013" width="0.0107%" height="15" fill="rgb(240,187,13)" fg:x="39" fg:w="1"/><text x="0.6686%" y="1023.50"></text></g><g><title>deno`v8::internal::ApiNatives::InstantiateFunction(v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.4186%" y="997" width="0.0107%" height="15" fill="rgb(223,113,26)" fg:x="39" fg:w="1"/><text x="0.6686%" y="1007.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InstantiateFunction(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::NativeContext&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.4186%" y="981" width="0.0107%" height="15" fill="rgb(206,192,2)" fg:x="39" fg:w="1"/><text x="0.6686%" y="991.50"></text></g><g><title>deno`v8::internal::FixedArray::SetAndGrow(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::FixedArray&gt;, int, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.4186%" y="965" width="0.0107%" height="15" fill="rgb(241,108,4)" fg:x="39" fg:w="1"/><text x="0.6686%" y="975.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.01%)</title><rect x="0.4293%" y="1013" width="0.0107%" height="15" fill="rgb(247,173,49)" fg:x="40" fg:w="1"/><text x="0.6793%" y="1023.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.01%)</title><rect x="0.4293%" y="997" width="0.0107%" height="15" fill="rgb(224,114,35)" fg:x="40" fg:w="1"/><text x="0.6793%" y="1007.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.01%)</title><rect x="0.4293%" y="981" width="0.0107%" height="15" fill="rgb(245,159,27)" fg:x="40" fg:w="1"/><text x="0.6793%" y="991.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.01%)</title><rect x="0.4293%" y="965" width="0.0107%" height="15" fill="rgb(245,172,44)" fg:x="40" fg:w="1"/><text x="0.6793%" y="975.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4293%" y="949" width="0.0107%" height="15" fill="rgb(236,23,11)" fg:x="40" fg:w="1"/><text x="0.6793%" y="959.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.4293%" y="933" width="0.0107%" height="15" fill="rgb(205,117,38)" fg:x="40" fg:w="1"/><text x="0.6793%" y="943.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.4293%" y="917" width="0.0107%" height="15" fill="rgb(237,72,25)" fg:x="40" fg:w="1"/><text x="0.6793%" y="927.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.04%)</title><rect x="0.4079%" y="1109" width="0.0429%" height="15" fill="rgb(244,70,9)" fg:x="38" fg:w="4"/><text x="0.6579%" y="1119.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.02%)</title><rect x="0.4293%" y="1093" width="0.0215%" height="15" fill="rgb(217,125,39)" fg:x="40" fg:w="2"/><text x="0.6793%" y="1103.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.02%)</title><rect x="0.4293%" y="1077" width="0.0215%" height="15" fill="rgb(235,36,10)" fg:x="40" fg:w="2"/><text x="0.6793%" y="1087.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.02%)</title><rect x="0.4293%" y="1061" width="0.0215%" height="15" fill="rgb(251,123,47)" fg:x="40" fg:w="2"/><text x="0.6793%" y="1071.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.02%)</title><rect x="0.4293%" y="1045" width="0.0215%" height="15" fill="rgb(221,13,13)" fg:x="40" fg:w="2"/><text x="0.6793%" y="1055.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.02%)</title><rect x="0.4293%" y="1029" width="0.0215%" height="15" fill="rgb(238,131,9)" fg:x="40" fg:w="2"/><text x="0.6793%" y="1039.50"></text></g><g><title>deno`v8::internal::trap_handler::GetThreadInWasmThreadLocalAddress (1 samples, 0.01%)</title><rect x="0.4401%" y="1013" width="0.0107%" height="15" fill="rgb(211,50,8)" fg:x="41" fg:w="1"/><text x="0.6901%" y="1023.50"></text></g><g><title>deno`bool v8::internal::(anonymous namespace)::IterativelyExecuteAndFinalizeUnoptimizedCompilationJobs&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::AccountingAllocator*, v8::internal::IsCompiledScope*, std::__1::vector&lt;v8::internal::FinalizeUnoptimizedCompilationData, std::__1::allocator&lt;v8::internal::FinalizeUnoptimizedCompilationData&gt; &gt;*, std::__1::vector&lt;v8::internal::DeferredFinalizationJobData, std::__1::allocator (1 samples, 0.01%)</title><rect x="0.4508%" y="789" width="0.0107%" height="15" fill="rgb(245,182,24)" fg:x="42" fg:w="1"/><text x="0.7008%" y="799.50"></text></g><g><title>deno`void v8::internal::DeclarationScope::AllocateScopeInfos&lt;v8::internal::Isolate&gt; (1 samples, 0.01%)</title><rect x="0.4508%" y="773" width="0.0107%" height="15" fill="rgb(242,14,37)" fg:x="42" fg:w="1"/><text x="0.7008%" y="783.50"></text></g><g><title>deno`void v8::internal::Scope::AllocateScopeInfosRecursively&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.4508%" y="757" width="0.0107%" height="15" fill="rgb(246,228,12)" fg:x="42" fg:w="1"/><text x="0.7008%" y="767.50"></text></g><g><title>deno`void v8::internal::Scope::AllocateScopeInfosRecursively&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.4508%" y="741" width="0.0107%" height="15" fill="rgb(213,55,15)" fg:x="42" fg:w="1"/><text x="0.7008%" y="751.50"></text></g><g><title>deno`v8::internal::Handle&lt;v8::internal::ScopeInfo&gt; v8::internal::ScopeInfo::Create&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Zone*, v8::internal::Scope*, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.4508%" y="725" width="0.0107%" height="15" fill="rgb(209,9,3)" fg:x="42" fg:w="1"/><text x="0.7008%" y="735.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.10%)</title><rect x="0.3757%" y="1189" width="0.0966%" height="15" fill="rgb(230,59,30)" fg:x="35" fg:w="9"/><text x="0.6257%" y="1199.50"></text></g><g><title>deno`deno::run_command::_{{closure}} (9 samples, 0.10%)</title><rect x="0.3757%" y="1173" width="0.0966%" height="15" fill="rgb(209,121,21)" fg:x="35" fg:w="9"/><text x="0.6257%" y="1183.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.10%)</title><rect x="0.3757%" y="1157" width="0.0966%" height="15" fill="rgb(220,109,13)" fg:x="35" fg:w="9"/><text x="0.6257%" y="1167.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.10%)</title><rect x="0.3757%" y="1141" width="0.0966%" height="15" fill="rgb(232,18,1)" fg:x="35" fg:w="9"/><text x="0.6257%" y="1151.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (6 samples, 0.06%)</title><rect x="0.4079%" y="1125" width="0.0644%" height="15" fill="rgb(215,41,42)" fg:x="38" fg:w="6"/><text x="0.6579%" y="1135.50"></text></g><g><title>deno`deno_runtime::web_worker::WebWorker::execute_script (2 samples, 0.02%)</title><rect x="0.4508%" y="1109" width="0.0215%" height="15" fill="rgb(224,123,36)" fg:x="42" fg:w="2"/><text x="0.7008%" y="1119.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (2 samples, 0.02%)</title><rect x="0.4508%" y="1093" width="0.0215%" height="15" fill="rgb(240,125,3)" fg:x="42" fg:w="2"/><text x="0.7008%" y="1103.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (2 samples, 0.02%)</title><rect x="0.4508%" y="1077" width="0.0215%" height="15" fill="rgb(205,98,50)" fg:x="42" fg:w="2"/><text x="0.7008%" y="1087.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (2 samples, 0.02%)</title><rect x="0.4508%" y="1061" width="0.0215%" height="15" fill="rgb(205,185,37)" fg:x="42" fg:w="2"/><text x="0.7008%" y="1071.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (2 samples, 0.02%)</title><rect x="0.4508%" y="1045" width="0.0215%" height="15" fill="rgb(238,207,15)" fg:x="42" fg:w="2"/><text x="0.7008%" y="1055.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.02%)</title><rect x="0.4508%" y="1029" width="0.0215%" height="15" fill="rgb(213,199,42)" fg:x="42" fg:w="2"/><text x="0.7008%" y="1039.50"></text></g><g><title>deno`Builtins_JSEntry (2 samples, 0.02%)</title><rect x="0.4508%" y="1013" width="0.0215%" height="15" fill="rgb(235,201,11)" fg:x="42" fg:w="2"/><text x="0.7008%" y="1023.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (2 samples, 0.02%)</title><rect x="0.4508%" y="997" width="0.0215%" height="15" fill="rgb(207,46,11)" fg:x="42" fg:w="2"/><text x="0.7008%" y="1007.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="0.4508%" y="981" width="0.0215%" height="15" fill="rgb(241,35,35)" fg:x="42" fg:w="2"/><text x="0.7008%" y="991.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="0.4508%" y="965" width="0.0215%" height="15" fill="rgb(243,32,47)" fg:x="42" fg:w="2"/><text x="0.7008%" y="975.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="0.4508%" y="949" width="0.0215%" height="15" fill="rgb(247,202,23)" fg:x="42" fg:w="2"/><text x="0.7008%" y="959.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="0.4508%" y="933" width="0.0215%" height="15" fill="rgb(219,102,11)" fg:x="42" fg:w="2"/><text x="0.7008%" y="943.50"></text></g><g><title>deno`Builtins_ConstructHandler (2 samples, 0.02%)</title><rect x="0.4508%" y="917" width="0.0215%" height="15" fill="rgb(243,110,44)" fg:x="42" fg:w="2"/><text x="0.7008%" y="927.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (2 samples, 0.02%)</title><rect x="0.4508%" y="901" width="0.0215%" height="15" fill="rgb(222,74,54)" fg:x="42" fg:w="2"/><text x="0.7008%" y="911.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.02%)</title><rect x="0.4508%" y="885" width="0.0215%" height="15" fill="rgb(216,99,12)" fg:x="42" fg:w="2"/><text x="0.7008%" y="895.50"></text></g><g><title>deno`v8::internal::Builtin_FunctionConstructor (2 samples, 0.02%)</title><rect x="0.4508%" y="869" width="0.0215%" height="15" fill="rgb(226,22,26)" fg:x="42" fg:w="2"/><text x="0.7008%" y="879.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CreateDynamicFunction (2 samples, 0.02%)</title><rect x="0.4508%" y="853" width="0.0215%" height="15" fill="rgb(217,163,10)" fg:x="42" fg:w="2"/><text x="0.7008%" y="863.50"></text></g><g><title>deno`v8::internal::Compiler::GetFunctionFromValidatedString(v8::internal::Handle&lt;v8::internal::Context&gt;, v8::internal::MaybeHandle (2 samples, 0.02%)</title><rect x="0.4508%" y="837" width="0.0215%" height="15" fill="rgb(213,25,53)" fg:x="42" fg:w="2"/><text x="0.7008%" y="847.50"></text></g><g><title>deno`v8::internal::Compiler::GetFunctionFromEval(v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle (2 samples, 0.02%)</title><rect x="0.4508%" y="821" width="0.0215%" height="15" fill="rgb(252,105,26)" fg:x="42" fg:w="2"/><text x="0.7008%" y="831.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CompileToplevel(v8::internal::ParseInfo*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::MaybeHandle (2 samples, 0.02%)</title><rect x="0.4508%" y="805" width="0.0215%" height="15" fill="rgb(220,39,43)" fg:x="42" fg:w="2"/><text x="0.7008%" y="815.50"></text></g><g><title>deno`v8::internal::parsing::ParseProgram(v8::internal::ParseInfo*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.4615%" y="789" width="0.0107%" height="15" fill="rgb(229,68,48)" fg:x="43" fg:w="1"/><text x="0.7115%" y="799.50"></text></g><g><title>deno`v8::internal::Parser::~Parser (1 samples, 0.01%)</title><rect x="0.4615%" y="773" width="0.0107%" height="15" fill="rgb(252,8,32)" fg:x="43" fg:w="1"/><text x="0.7115%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="0.4615%" y="757" width="0.0107%" height="15" fill="rgb(223,20,43)" fg:x="43" fg:w="1"/><text x="0.7115%" y="767.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.11%)</title><rect x="0.3757%" y="1221" width="0.1073%" height="15" fill="rgb(229,81,49)" fg:x="35" fg:w="10"/><text x="0.6257%" y="1231.50"></text></g><g><title>deno`deno::main::_{{closure}} (10 samples, 0.11%)</title><rect x="0.3757%" y="1205" width="0.1073%" height="15" fill="rgb(236,28,36)" fg:x="35" fg:w="10"/><text x="0.6257%" y="1215.50"></text></g><g><title>deno`deno::args::flags::flags_from_vec (1 samples, 0.01%)</title><rect x="0.4723%" y="1189" width="0.0107%" height="15" fill="rgb(249,185,26)" fg:x="44" fg:w="1"/><text x="0.7223%" y="1199.50"></text></g><g><title>deno`deno::args::flags::clap_root (1 samples, 0.01%)</title><rect x="0.4723%" y="1173" width="0.0107%" height="15" fill="rgb(249,174,33)" fg:x="44" fg:w="1"/><text x="0.7223%" y="1183.50"></text></g><g><title>deno`clap::build::app_settings::AppFlags::unset (1 samples, 0.01%)</title><rect x="0.4723%" y="1157" width="0.0107%" height="15" fill="rgb(233,201,37)" fg:x="44" fg:w="1"/><text x="0.7223%" y="1167.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="0.4830%" y="1221" width="0.0107%" height="15" fill="rgb(221,78,26)" fg:x="45" fg:w="1"/><text x="0.7330%" y="1231.50"></text></g><g><title>deno`DYLD-STUB$$mach_absolute_time (1 samples, 0.01%)</title><rect x="0.5474%" y="1205" width="0.0107%" height="15" fill="rgb(250,127,30)" fg:x="51" fg:w="1"/><text x="0.7974%" y="1215.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (2 samples, 0.02%)</title><rect x="0.5581%" y="1205" width="0.0215%" height="15" fill="rgb(230,49,44)" fg:x="52" fg:w="2"/><text x="0.8081%" y="1215.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (1 samples, 0.01%)</title><rect x="0.5796%" y="1205" width="0.0107%" height="15" fill="rgb(229,67,23)" fg:x="54" fg:w="1"/><text x="0.8296%" y="1215.50"></text></g><g><title>deno`std::time::Instant::checked_duration_since (1 samples, 0.01%)</title><rect x="0.6225%" y="1189" width="0.0107%" height="15" fill="rgb(249,83,47)" fg:x="58" fg:w="1"/><text x="0.8725%" y="1199.50"></text></g><g><title>deno`tokio::process::imp::GlobalOrphanQueue::reap_orphans (3 samples, 0.03%)</title><rect x="0.6333%" y="1189" width="0.0322%" height="15" fill="rgb(215,43,3)" fg:x="59" fg:w="3"/><text x="0.8833%" y="1199.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule (1 samples, 0.01%)</title><rect x="1.3094%" y="1141" width="0.0107%" height="15" fill="rgb(238,154,13)" fg:x="122" fg:w="1"/><text x="1.5594%" y="1151.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule::_{{closure}} (1 samples, 0.01%)</title><rect x="1.3202%" y="1141" width="0.0107%" height="15" fill="rgb(219,56,2)" fg:x="123" fg:w="1"/><text x="1.5702%" y="1151.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule (5 samples, 0.05%)</title><rect x="1.3309%" y="1141" width="0.0537%" height="15" fill="rgb(233,0,4)" fg:x="124" fg:w="5"/><text x="1.5809%" y="1151.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule::_{{closure}} (5 samples, 0.05%)</title><rect x="1.3309%" y="1125" width="0.0537%" height="15" fill="rgb(235,30,7)" fg:x="124" fg:w="5"/><text x="1.5809%" y="1135.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_dec (4 samples, 0.04%)</title><rect x="1.3846%" y="1141" width="0.0429%" height="15" fill="rgb(250,79,13)" fg:x="129" fg:w="4"/><text x="1.6346%" y="1151.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_notified_by_val (3 samples, 0.03%)</title><rect x="1.4275%" y="1141" width="0.0322%" height="15" fill="rgb(211,146,34)" fg:x="133" fg:w="3"/><text x="1.6775%" y="1151.50"></text></g><g><title>deno`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (52 samples, 0.56%)</title><rect x="0.9230%" y="1173" width="0.5581%" height="15" fill="rgb(228,22,38)" fg:x="86" fg:w="52"/><text x="1.1730%" y="1183.50"></text></g><g><title>deno`tokio::runtime::task::waker::wake_by_val (16 samples, 0.17%)</title><rect x="1.3094%" y="1157" width="0.1717%" height="15" fill="rgb(235,168,5)" fg:x="122" fg:w="16"/><text x="1.5594%" y="1167.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.02%)</title><rect x="1.4597%" y="1141" width="0.0215%" height="15" fill="rgb(221,155,16)" fg:x="136" fg:w="2"/><text x="1.7097%" y="1151.50"></text></g><g><title>deno`tokio::runtime::task::waker::wake_by_val (5 samples, 0.05%)</title><rect x="1.4812%" y="1173" width="0.0537%" height="15" fill="rgb(215,215,53)" fg:x="138" fg:w="5"/><text x="1.7312%" y="1183.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (721 samples, 7.74%)</title><rect x="0.6655%" y="1189" width="7.7385%" height="15" fill="rgb(223,4,10)" fg:x="62" fg:w="721"/><text x="0.9155%" y="1199.50">deno`tokio:..</text></g><g><title>libsystem_kernel.dylib`kevent (640 samples, 6.87%)</title><rect x="1.5348%" y="1173" width="6.8692%" height="15" fill="rgb(234,103,6)" fg:x="143" fg:w="640"/><text x="1.7848%" y="1183.50">libsystem..</text></g><g><title>deno`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (3 samples, 0.03%)</title><rect x="8.4040%" y="1189" width="0.0322%" height="15" fill="rgb(227,97,0)" fg:x="783" fg:w="3"/><text x="8.6540%" y="1199.50"></text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.01%)</title><rect x="8.4362%" y="1173" width="0.0107%" height="15" fill="rgb(234,150,53)" fg:x="786" fg:w="1"/><text x="8.6862%" y="1183.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (3 samples, 0.03%)</title><rect x="8.4362%" y="1189" width="0.0322%" height="15" fill="rgb(228,201,54)" fg:x="786" fg:w="3"/><text x="8.6862%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.02%)</title><rect x="8.4469%" y="1173" width="0.0215%" height="15" fill="rgb(222,22,37)" fg:x="787" fg:w="2"/><text x="8.6969%" y="1183.50"></text></g><g><title>deno`tokio::signal::unix::driver::noop (1 samples, 0.01%)</title><rect x="8.4684%" y="1189" width="0.0107%" height="15" fill="rgb(237,53,32)" fg:x="789" fg:w="1"/><text x="8.7184%" y="1199.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (10 samples, 0.11%)</title><rect x="8.4791%" y="1189" width="0.1073%" height="15" fill="rgb(233,25,53)" fg:x="790" fg:w="10"/><text x="8.7291%" y="1199.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (8 samples, 0.09%)</title><rect x="8.5006%" y="1173" width="0.0859%" height="15" fill="rgb(210,40,34)" fg:x="792" fg:w="8"/><text x="8.7506%" y="1183.50"></text></g><g><title> 32]&gt; (8 samples, 0.09%)</title><rect x="8.5006%" y="1157" width="0.0859%" height="15" fill="rgb(241,220,44)" fg:x="792" fg:w="8"/><text x="8.7506%" y="1167.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (746 samples, 8.01%)</title><rect x="0.5903%" y="1205" width="8.0069%" height="15" fill="rgb(235,28,35)" fg:x="55" fg:w="746"/><text x="0.8403%" y="1215.50">deno`tokio:..</text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.01%)</title><rect x="8.5865%" y="1189" width="0.0107%" height="15" fill="rgb(210,56,17)" fg:x="800" fg:w="1"/><text x="8.8365%" y="1199.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.01%)</title><rect x="8.5972%" y="1205" width="0.0107%" height="15" fill="rgb(224,130,29)" fg:x="801" fg:w="1"/><text x="8.8472%" y="1215.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Context::park (772 samples, 8.29%)</title><rect x="0.4937%" y="1221" width="8.2859%" height="15" fill="rgb(235,212,8)" fg:x="46" fg:w="772"/><text x="0.7437%" y="1231.50">deno`tokio::..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (16 samples, 0.17%)</title><rect x="8.6079%" y="1205" width="0.1717%" height="15" fill="rgb(223,33,50)" fg:x="802" fg:w="16"/><text x="8.8579%" y="1215.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Spawner::pop (3 samples, 0.03%)</title><rect x="8.7797%" y="1221" width="0.0322%" height="15" fill="rgb(219,149,13)" fg:x="818" fg:w="3"/><text x="9.0297%" y="1231.50"></text></g><g><title>deno`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::assert_owner (1 samples, 0.01%)</title><rect x="8.8118%" y="1221" width="0.0107%" height="15" fill="rgb(250,156,29)" fg:x="821" fg:w="1"/><text x="9.0618%" y="1231.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (1 samples, 0.01%)</title><rect x="8.8548%" y="1205" width="0.0107%" height="15" fill="rgb(216,193,19)" fg:x="825" fg:w="1"/><text x="9.1048%" y="1215.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="8.8655%" y="1205" width="0.0107%" height="15" fill="rgb(216,135,14)" fg:x="826" fg:w="1"/><text x="9.1155%" y="1215.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (2 samples, 0.02%)</title><rect x="8.8762%" y="1205" width="0.0215%" height="15" fill="rgb(241,47,5)" fg:x="827" fg:w="2"/><text x="9.1262%" y="1215.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::add_rc_dyn (4 samples, 0.04%)</title><rect x="8.8977%" y="1205" width="0.0429%" height="15" fill="rgb(233,42,35)" fg:x="829" fg:w="4"/><text x="9.1477%" y="1215.50"></text></g><g><title>deno`httparse::Request::parse (3 samples, 0.03%)</title><rect x="8.9406%" y="1205" width="0.0322%" height="15" fill="rgb(231,13,6)" fg:x="833" fg:w="3"/><text x="9.1906%" y="1215.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.01%)</title><rect x="8.9728%" y="1205" width="0.0107%" height="15" fill="rgb(207,181,40)" fg:x="836" fg:w="1"/><text x="9.2228%" y="1215.50"></text></g><g><title>deno`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.01%)</title><rect x="9.7027%" y="1189" width="0.0107%" height="15" fill="rgb(254,173,49)" fg:x="904" fg:w="1"/><text x="9.9527%" y="1199.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="9.7134%" y="1189" width="0.0215%" height="15" fill="rgb(221,1,38)" fg:x="905" fg:w="2"/><text x="9.9634%" y="1199.50"></text></g><g><title>deno`v8::Context::Exit (3 samples, 0.03%)</title><rect x="9.8637%" y="1157" width="0.0322%" height="15" fill="rgb(206,124,46)" fg:x="919" fg:w="3"/><text x="10.1137%" y="1167.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (13 samples, 0.14%)</title><rect x="9.8959%" y="1157" width="0.1395%" height="15" fill="rgb(249,21,11)" fg:x="922" fg:w="13"/><text x="10.1459%" y="1167.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (9 samples, 0.10%)</title><rect x="9.9388%" y="1141" width="0.0966%" height="15" fill="rgb(222,201,40)" fg:x="926" fg:w="9"/><text x="10.1888%" y="1151.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (24 samples, 0.26%)</title><rect x="9.8315%" y="1173" width="0.2576%" height="15" fill="rgb(235,61,29)" fg:x="916" fg:w="24"/><text x="10.0815%" y="1183.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (5 samples, 0.05%)</title><rect x="10.0354%" y="1157" width="0.0537%" height="15" fill="rgb(219,207,3)" fg:x="935" fg:w="5"/><text x="10.2854%" y="1167.50"></text></g><g><title>deno`v8::Context::Exit (11 samples, 0.12%)</title><rect x="10.0891%" y="1173" width="0.1181%" height="15" fill="rgb(222,56,46)" fg:x="940" fg:w="11"/><text x="10.3391%" y="1183.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (46 samples, 0.49%)</title><rect x="9.7349%" y="1189" width="0.4937%" height="15" fill="rgb(239,76,54)" fg:x="907" fg:w="46"/><text x="9.9849%" y="1199.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (2 samples, 0.02%)</title><rect x="10.2071%" y="1173" width="0.0215%" height="15" fill="rgb(231,124,27)" fg:x="951" fg:w="2"/><text x="10.4571%" y="1183.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (7 samples, 0.08%)</title><rect x="10.2286%" y="1189" width="0.0751%" height="15" fill="rgb(249,195,6)" fg:x="953" fg:w="7"/><text x="10.4786%" y="1199.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (1 samples, 0.01%)</title><rect x="10.3037%" y="1189" width="0.0107%" height="15" fill="rgb(237,174,47)" fg:x="960" fg:w="1"/><text x="10.5537%" y="1199.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::add_rc_dyn (12 samples, 0.13%)</title><rect x="10.3145%" y="1189" width="0.1288%" height="15" fill="rgb(206,201,31)" fg:x="961" fg:w="12"/><text x="10.5645%" y="1199.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (37 samples, 0.40%)</title><rect x="10.4647%" y="1173" width="0.3971%" height="15" fill="rgb(231,57,52)" fg:x="975" fg:w="37"/><text x="10.7147%" y="1183.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (24 samples, 0.26%)</title><rect x="10.6043%" y="1157" width="0.2576%" height="15" fill="rgb(248,177,22)" fg:x="988" fg:w="24"/><text x="10.8543%" y="1167.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (2 samples, 0.02%)</title><rect x="10.8619%" y="1173" width="0.0215%" height="15" fill="rgb(215,211,37)" fg:x="1012" fg:w="2"/><text x="11.1119%" y="1183.50"></text></g><g><title>deno`httparse::Request::parse (43 samples, 0.46%)</title><rect x="10.4433%" y="1189" width="0.4615%" height="15" fill="rgb(241,128,51)" fg:x="973" fg:w="43"/><text x="10.6933%" y="1199.50"></text></g><g><title>deno`httparse::parse_version (2 samples, 0.02%)</title><rect x="10.8833%" y="1173" width="0.0215%" height="15" fill="rgb(227,165,31)" fg:x="1014" fg:w="2"/><text x="11.1333%" y="1183.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (4 samples, 0.04%)</title><rect x="10.9048%" y="1189" width="0.0429%" height="15" fill="rgb(228,167,24)" fg:x="1016" fg:w="4"/><text x="11.1548%" y="1199.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.01%)</title><rect x="11.1087%" y="1173" width="0.0107%" height="15" fill="rgb(228,143,12)" fg:x="1035" fg:w="1"/><text x="11.3587%" y="1183.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_inc (1 samples, 0.01%)</title><rect x="11.3341%" y="1157" width="0.0107%" height="15" fill="rgb(249,149,8)" fg:x="1056" fg:w="1"/><text x="11.5841%" y="1167.50"></text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (40 samples, 0.43%)</title><rect x="11.1195%" y="1173" width="0.4293%" height="15" fill="rgb(243,35,44)" fg:x="1036" fg:w="40"/><text x="11.3695%" y="1183.50"></text></g><g><title>deno`tokio::runtime::task::waker::clone_waker (19 samples, 0.20%)</title><rect x="11.3449%" y="1157" width="0.2039%" height="15" fill="rgb(246,89,9)" fg:x="1057" fg:w="19"/><text x="11.5949%" y="1167.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_inc (2 samples, 0.02%)</title><rect x="11.5273%" y="1141" width="0.0215%" height="15" fill="rgb(233,213,13)" fg:x="1074" fg:w="2"/><text x="11.7773%" y="1151.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.27%)</title><rect x="11.5488%" y="1173" width="0.2683%" height="15" fill="rgb(233,141,41)" fg:x="1076" fg:w="25"/><text x="11.7988%" y="1183.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (3 samples, 0.03%)</title><rect x="11.8171%" y="1173" width="0.0322%" height="15" fill="rgb(239,167,4)" fg:x="1101" fg:w="3"/><text x="12.0671%" y="1183.50"></text></g><g><title>libsystem_c.dylib`recv (2 samples, 0.02%)</title><rect x="11.8493%" y="1173" width="0.0215%" height="15" fill="rgb(209,217,16)" fg:x="1104" fg:w="2"/><text x="12.0993%" y="1183.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (3,749 samples, 40.24%)</title><rect x="10.9477%" y="1189" width="40.2383%" height="15" fill="rgb(219,88,35)" fg:x="1020" fg:w="3749"/><text x="11.1977%" y="1199.50">deno`tokio::net::tcp::stream::TcpStream::poll_read_priv</text></g><g><title>libsystem_kernel.dylib`__recvfrom (3,663 samples, 39.32%)</title><rect x="11.8708%" y="1173" width="39.3152%" height="15" fill="rgb(220,193,23)" fg:x="1106" fg:w="3663"/><text x="12.1208%" y="1183.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.01%)</title><rect x="51.1860%" y="1189" width="0.0107%" height="15" fill="rgb(230,90,52)" fg:x="4769" fg:w="1"/><text x="51.4360%" y="1199.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (4 samples, 0.04%)</title><rect x="51.1967%" y="1189" width="0.0429%" height="15" fill="rgb(252,106,19)" fg:x="4770" fg:w="4"/><text x="51.4467%" y="1199.50"></text></g><g><title>deno`v8::Context::Enter (6 samples, 0.06%)</title><rect x="51.2397%" y="1189" width="0.0644%" height="15" fill="rgb(206,74,20)" fg:x="4774" fg:w="6"/><text x="51.4897%" y="1199.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (2 samples, 0.02%)</title><rect x="51.2826%" y="1173" width="0.0215%" height="15" fill="rgb(230,138,44)" fg:x="4778" fg:w="2"/><text x="51.5326%" y="1183.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (1 samples, 0.01%)</title><rect x="51.3041%" y="1189" width="0.0107%" height="15" fill="rgb(235,182,43)" fg:x="4780" fg:w="1"/><text x="51.5541%" y="1199.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (11 samples, 0.12%)</title><rect x="51.6261%" y="1173" width="0.1181%" height="15" fill="rgb(242,16,51)" fg:x="4810" fg:w="11"/><text x="51.8761%" y="1183.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (3 samples, 0.03%)</title><rect x="51.7119%" y="1157" width="0.0322%" height="15" fill="rgb(248,9,4)" fg:x="4818" fg:w="3"/><text x="51.9619%" y="1167.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (3 samples, 0.03%)</title><rect x="51.7441%" y="1173" width="0.0322%" height="15" fill="rgb(210,31,22)" fg:x="4821" fg:w="3"/><text x="51.9941%" y="1183.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (4 samples, 0.04%)</title><rect x="51.7763%" y="1173" width="0.0429%" height="15" fill="rgb(239,54,39)" fg:x="4824" fg:w="4"/><text x="52.0263%" y="1183.50"></text></g><g><title>deno`Builtins_JSEntry (10 samples, 0.11%)</title><rect x="51.8729%" y="1157" width="0.1073%" height="15" fill="rgb(230,99,41)" fg:x="4833" fg:w="10"/><text x="52.1229%" y="1167.50"></text></g><g><title>0x110011de8 (3 samples, 0.03%)</title><rect x="52.2164%" y="1125" width="0.0322%" height="15" fill="rgb(253,106,12)" fg:x="4865" fg:w="3"/><text x="52.4664%" y="1135.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (4 samples, 0.04%)</title><rect x="52.2486%" y="1125" width="0.0429%" height="15" fill="rgb(213,46,41)" fg:x="4868" fg:w="4"/><text x="52.4986%" y="1135.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (2 samples, 0.02%)</title><rect x="52.2915%" y="1125" width="0.0215%" height="15" fill="rgb(215,133,35)" fg:x="4872" fg:w="2"/><text x="52.5415%" y="1135.50"></text></g><g><title>0x11000cce4 (1 samples, 0.01%)</title><rect x="52.3881%" y="1109" width="0.0107%" height="15" fill="rgb(213,28,5)" fg:x="4881" fg:w="1"/><text x="52.6381%" y="1119.50"></text></g><g><title>0x11000b144 (1 samples, 0.01%)</title><rect x="52.3881%" y="1093" width="0.0107%" height="15" fill="rgb(215,77,49)" fg:x="4881" fg:w="1"/><text x="52.6381%" y="1103.50"></text></g><g><title>0x11000bb54 (1 samples, 0.01%)</title><rect x="52.3881%" y="1077" width="0.0107%" height="15" fill="rgb(248,100,22)" fg:x="4881" fg:w="1"/><text x="52.6381%" y="1087.50"></text></g><g><title>deno`Builtins_ObjectCreate (1 samples, 0.01%)</title><rect x="52.3881%" y="1061" width="0.0107%" height="15" fill="rgb(208,67,9)" fg:x="4881" fg:w="1"/><text x="52.6381%" y="1071.50"></text></g><g><title>deno`Builtins_FastNewObject (1 samples, 0.01%)</title><rect x="52.3988%" y="1077" width="0.0107%" height="15" fill="rgb(219,133,21)" fg:x="4882" fg:w="1"/><text x="52.6488%" y="1087.50"></text></g><g><title>0x11000cd14 (2 samples, 0.02%)</title><rect x="52.3988%" y="1109" width="0.0215%" height="15" fill="rgb(246,46,29)" fg:x="4882" fg:w="2"/><text x="52.6488%" y="1119.50"></text></g><g><title>0x11000ca60 (2 samples, 0.02%)</title><rect x="52.3988%" y="1093" width="0.0215%" height="15" fill="rgb(246,185,52)" fg:x="4882" fg:w="2"/><text x="52.6488%" y="1103.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (1 samples, 0.01%)</title><rect x="52.4096%" y="1077" width="0.0107%" height="15" fill="rgb(252,136,11)" fg:x="4883" fg:w="1"/><text x="52.6596%" y="1087.50"></text></g><g><title>0x11000c804 (1 samples, 0.01%)</title><rect x="52.4096%" y="1061" width="0.0107%" height="15" fill="rgb(219,138,53)" fg:x="4883" fg:w="1"/><text x="52.6596%" y="1071.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_PolymorphicName (1 samples, 0.01%)</title><rect x="52.4096%" y="1045" width="0.0107%" height="15" fill="rgb(211,51,23)" fg:x="4883" fg:w="1"/><text x="52.6596%" y="1055.50"></text></g><g><title>0x11000d35c (3 samples, 0.03%)</title><rect x="52.4203%" y="1093" width="0.0322%" height="15" fill="rgb(247,221,28)" fg:x="4884" fg:w="3"/><text x="52.6703%" y="1103.50"></text></g><g><title>0x11000d55c (3 samples, 0.03%)</title><rect x="52.4203%" y="1077" width="0.0322%" height="15" fill="rgb(251,222,45)" fg:x="4884" fg:w="3"/><text x="52.6703%" y="1087.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (3 samples, 0.03%)</title><rect x="52.4203%" y="1061" width="0.0322%" height="15" fill="rgb(217,162,53)" fg:x="4884" fg:w="3"/><text x="52.6703%" y="1071.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.03%)</title><rect x="52.4203%" y="1045" width="0.0322%" height="15" fill="rgb(229,93,14)" fg:x="4884" fg:w="3"/><text x="52.6703%" y="1055.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (3 samples, 0.03%)</title><rect x="52.4203%" y="1029" width="0.0322%" height="15" fill="rgb(209,67,49)" fg:x="4884" fg:w="3"/><text x="52.6703%" y="1039.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.03%)</title><rect x="52.4203%" y="1013" width="0.0322%" height="15" fill="rgb(213,87,29)" fg:x="4884" fg:w="3"/><text x="52.6703%" y="1023.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write_str::call (3 samples, 0.03%)</title><rect x="52.4203%" y="997" width="0.0322%" height="15" fill="rgb(205,151,52)" fg:x="4884" fg:w="3"/><text x="52.6703%" y="1007.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (3 samples, 0.03%)</title><rect x="52.4203%" y="981" width="0.0322%" height="15" fill="rgb(253,215,39)" fg:x="4884" fg:w="3"/><text x="52.6703%" y="991.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (3 samples, 0.03%)</title><rect x="52.4203%" y="965" width="0.0322%" height="15" fill="rgb(221,220,41)" fg:x="4884" fg:w="3"/><text x="52.6703%" y="975.50"></text></g><g><title>deno`DYLD-STUB$$send (1 samples, 0.01%)</title><rect x="52.4525%" y="1029" width="0.0107%" height="15" fill="rgb(218,133,21)" fg:x="4887" fg:w="1"/><text x="52.7025%" y="1039.50"></text></g><g><title>0x11000cd54 (5 samples, 0.05%)</title><rect x="52.4203%" y="1109" width="0.0537%" height="15" fill="rgb(221,193,43)" fg:x="4884" fg:w="5"/><text x="52.6703%" y="1119.50"></text></g><g><title>0x110010d50 (2 samples, 0.02%)</title><rect x="52.4525%" y="1093" width="0.0215%" height="15" fill="rgb(240,128,52)" fg:x="4887" fg:w="2"/><text x="52.7025%" y="1103.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write_str_fast_fn (2 samples, 0.02%)</title><rect x="52.4525%" y="1077" width="0.0215%" height="15" fill="rgb(253,114,12)" fg:x="4887" fg:w="2"/><text x="52.7025%" y="1087.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write_str::call (2 samples, 0.02%)</title><rect x="52.4525%" y="1061" width="0.0215%" height="15" fill="rgb(215,223,47)" fg:x="4887" fg:w="2"/><text x="52.7025%" y="1071.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (2 samples, 0.02%)</title><rect x="52.4525%" y="1045" width="0.0215%" height="15" fill="rgb(248,225,23)" fg:x="4887" fg:w="2"/><text x="52.7025%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1 samples, 0.01%)</title><rect x="52.4632%" y="1029" width="0.0107%" height="15" fill="rgb(250,108,0)" fg:x="4888" fg:w="1"/><text x="52.7132%" y="1039.50"></text></g><g><title>0x110011e10 (1 samples, 0.01%)</title><rect x="52.4740%" y="1109" width="0.0107%" height="15" fill="rgb(228,208,7)" fg:x="4889" fg:w="1"/><text x="52.7240%" y="1119.50"></text></g><g><title>0x110011e2c (2 samples, 0.02%)</title><rect x="52.4847%" y="1109" width="0.0215%" height="15" fill="rgb(244,45,10)" fg:x="4890" fg:w="2"/><text x="52.7347%" y="1119.50"></text></g><g><title>0x110011e7c (1 samples, 0.01%)</title><rect x="52.5062%" y="1109" width="0.0107%" height="15" fill="rgb(207,125,25)" fg:x="4892" fg:w="1"/><text x="52.7562%" y="1119.50"></text></g><g><title>0x110011e98 (1 samples, 0.01%)</title><rect x="52.5169%" y="1109" width="0.0107%" height="15" fill="rgb(210,195,18)" fg:x="4893" fg:w="1"/><text x="52.7669%" y="1119.50"></text></g><g><title>0x110011eac (1 samples, 0.01%)</title><rect x="52.5276%" y="1109" width="0.0107%" height="15" fill="rgb(249,80,12)" fg:x="4894" fg:w="1"/><text x="52.7776%" y="1119.50"></text></g><g><title>0x110011eb4 (4 samples, 0.04%)</title><rect x="52.5384%" y="1109" width="0.0429%" height="15" fill="rgb(221,65,9)" fg:x="4895" fg:w="4"/><text x="52.7884%" y="1119.50"></text></g><g><title>0x110011f10 (1 samples, 0.01%)</title><rect x="52.5813%" y="1109" width="0.0107%" height="15" fill="rgb(235,49,36)" fg:x="4899" fg:w="1"/><text x="52.8313%" y="1119.50"></text></g><g><title>0x110011f40 (2 samples, 0.02%)</title><rect x="52.5920%" y="1109" width="0.0215%" height="15" fill="rgb(225,32,20)" fg:x="4900" fg:w="2"/><text x="52.8420%" y="1119.50"></text></g><g><title>0x110011f54 (1 samples, 0.01%)</title><rect x="52.6135%" y="1109" width="0.0107%" height="15" fill="rgb(215,141,46)" fg:x="4902" fg:w="1"/><text x="52.8635%" y="1119.50"></text></g><g><title>0x110011fa8 (1 samples, 0.01%)</title><rect x="52.6242%" y="1109" width="0.0107%" height="15" fill="rgb(250,160,47)" fg:x="4903" fg:w="1"/><text x="52.8742%" y="1119.50"></text></g><g><title>0x110011fbc (1 samples, 0.01%)</title><rect x="52.6350%" y="1109" width="0.0107%" height="15" fill="rgb(216,222,40)" fg:x="4904" fg:w="1"/><text x="52.8850%" y="1119.50"></text></g><g><title>0x110011fec (1 samples, 0.01%)</title><rect x="52.6457%" y="1109" width="0.0107%" height="15" fill="rgb(234,217,39)" fg:x="4905" fg:w="1"/><text x="52.8957%" y="1119.50"></text></g><g><title>0x110011ff0 (1 samples, 0.01%)</title><rect x="52.6564%" y="1109" width="0.0107%" height="15" fill="rgb(207,178,40)" fg:x="4906" fg:w="1"/><text x="52.9064%" y="1119.50"></text></g><g><title>0x110012000 (1 samples, 0.01%)</title><rect x="52.6672%" y="1109" width="0.0107%" height="15" fill="rgb(221,136,13)" fg:x="4907" fg:w="1"/><text x="52.9172%" y="1119.50"></text></g><g><title>0x110012008 (13 samples, 0.14%)</title><rect x="52.6779%" y="1109" width="0.1395%" height="15" fill="rgb(249,199,10)" fg:x="4908" fg:w="13"/><text x="52.9279%" y="1119.50"></text></g><g><title>deno`Builtins_LoadIC (13 samples, 0.14%)</title><rect x="52.6779%" y="1093" width="0.1395%" height="15" fill="rgb(249,222,13)" fg:x="4908" fg:w="13"/><text x="52.9279%" y="1103.50"></text></g><g><title>0x11001200c (12 samples, 0.13%)</title><rect x="52.8174%" y="1109" width="0.1288%" height="15" fill="rgb(244,185,38)" fg:x="4921" fg:w="12"/><text x="53.0674%" y="1119.50"></text></g><g><title>0x110012014 (2 samples, 0.02%)</title><rect x="52.9462%" y="1109" width="0.0215%" height="15" fill="rgb(236,202,9)" fg:x="4933" fg:w="2"/><text x="53.1962%" y="1119.50"></text></g><g><title>0x110012058 (3 samples, 0.03%)</title><rect x="52.9677%" y="1109" width="0.0322%" height="15" fill="rgb(250,229,37)" fg:x="4935" fg:w="3"/><text x="53.2177%" y="1119.50"></text></g><g><title>0x110012080 (1 samples, 0.01%)</title><rect x="52.9999%" y="1109" width="0.0107%" height="15" fill="rgb(206,174,23)" fg:x="4938" fg:w="1"/><text x="53.2499%" y="1119.50"></text></g><g><title>0x110012098 (3 samples, 0.03%)</title><rect x="53.0106%" y="1109" width="0.0322%" height="15" fill="rgb(211,33,43)" fg:x="4939" fg:w="3"/><text x="53.2606%" y="1119.50"></text></g><g><title>0x11001328c (1 samples, 0.01%)</title><rect x="53.0428%" y="1093" width="0.0107%" height="15" fill="rgb(245,58,50)" fg:x="4942" fg:w="1"/><text x="53.2928%" y="1103.50"></text></g><g><title>0x110013290 (1 samples, 0.01%)</title><rect x="53.0536%" y="1093" width="0.0107%" height="15" fill="rgb(244,68,36)" fg:x="4943" fg:w="1"/><text x="53.3036%" y="1103.50"></text></g><g><title>0x1100132a8 (15 samples, 0.16%)</title><rect x="53.0643%" y="1093" width="0.1610%" height="15" fill="rgb(232,229,15)" fg:x="4944" fg:w="15"/><text x="53.3143%" y="1103.50"></text></g><g><title>0x1100132c0 (1 samples, 0.01%)</title><rect x="53.2253%" y="1093" width="0.0107%" height="15" fill="rgb(254,30,23)" fg:x="4959" fg:w="1"/><text x="53.4753%" y="1103.50"></text></g><g><title>0x1100132c8 (13 samples, 0.14%)</title><rect x="53.2360%" y="1093" width="0.1395%" height="15" fill="rgb(235,160,14)" fg:x="4960" fg:w="13"/><text x="53.4860%" y="1103.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (13 samples, 0.14%)</title><rect x="53.2360%" y="1077" width="0.1395%" height="15" fill="rgb(212,155,44)" fg:x="4960" fg:w="13"/><text x="53.4860%" y="1087.50"></text></g><g><title>0x1100132f8 (1 samples, 0.01%)</title><rect x="53.3756%" y="1093" width="0.0107%" height="15" fill="rgb(226,2,50)" fg:x="4973" fg:w="1"/><text x="53.6256%" y="1103.50"></text></g><g><title>0x110013300 (8 samples, 0.09%)</title><rect x="53.3863%" y="1093" width="0.0859%" height="15" fill="rgb(234,177,6)" fg:x="4974" fg:w="8"/><text x="53.6363%" y="1103.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (6 samples, 0.06%)</title><rect x="53.4077%" y="1077" width="0.0644%" height="15" fill="rgb(217,24,9)" fg:x="4976" fg:w="6"/><text x="53.6577%" y="1087.50"></text></g><g><title>0x110013338 (6 samples, 0.06%)</title><rect x="53.4721%" y="1093" width="0.0644%" height="15" fill="rgb(220,13,46)" fg:x="4982" fg:w="6"/><text x="53.7221%" y="1103.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (6 samples, 0.06%)</title><rect x="53.4721%" y="1077" width="0.0644%" height="15" fill="rgb(239,221,27)" fg:x="4982" fg:w="6"/><text x="53.7221%" y="1087.50"></text></g><g><title>0x110013368 (1 samples, 0.01%)</title><rect x="53.5365%" y="1093" width="0.0107%" height="15" fill="rgb(222,198,25)" fg:x="4988" fg:w="1"/><text x="53.7865%" y="1103.50"></text></g><g><title>0x110013370 (6 samples, 0.06%)</title><rect x="53.5473%" y="1093" width="0.0644%" height="15" fill="rgb(211,99,13)" fg:x="4989" fg:w="6"/><text x="53.7973%" y="1103.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (6 samples, 0.06%)</title><rect x="53.5473%" y="1077" width="0.0644%" height="15" fill="rgb(232,111,31)" fg:x="4989" fg:w="6"/><text x="53.7973%" y="1087.50"></text></g><g><title>0x11001337c (1 samples, 0.01%)</title><rect x="53.6117%" y="1093" width="0.0107%" height="15" fill="rgb(245,82,37)" fg:x="4995" fg:w="1"/><text x="53.8617%" y="1103.50"></text></g><g><title>0x1100133bc (1 samples, 0.01%)</title><rect x="53.6224%" y="1093" width="0.0107%" height="15" fill="rgb(227,149,46)" fg:x="4996" fg:w="1"/><text x="53.8724%" y="1103.50"></text></g><g><title>0x1100133dc (4 samples, 0.04%)</title><rect x="53.6331%" y="1093" width="0.0429%" height="15" fill="rgb(218,36,50)" fg:x="4997" fg:w="4"/><text x="53.8831%" y="1103.50"></text></g><g><title>deno`Builtins_LoadIC (4 samples, 0.04%)</title><rect x="53.6331%" y="1077" width="0.0429%" height="15" fill="rgb(226,80,48)" fg:x="4997" fg:w="4"/><text x="53.8831%" y="1087.50"></text></g><g><title>0x110013454 (1 samples, 0.01%)</title><rect x="53.6761%" y="1093" width="0.0107%" height="15" fill="rgb(238,224,15)" fg:x="5001" fg:w="1"/><text x="53.9261%" y="1103.50"></text></g><g><title>0x1100134a8 (1 samples, 0.01%)</title><rect x="53.6868%" y="1093" width="0.0107%" height="15" fill="rgb(241,136,10)" fg:x="5002" fg:w="1"/><text x="53.9368%" y="1103.50"></text></g><g><title>deno`Builtins_LoadIC (5 samples, 0.05%)</title><rect x="53.6975%" y="1093" width="0.0537%" height="15" fill="rgb(208,32,45)" fg:x="5003" fg:w="5"/><text x="53.9475%" y="1103.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (2 samples, 0.02%)</title><rect x="53.7512%" y="1093" width="0.0215%" height="15" fill="rgb(207,135,9)" fg:x="5008" fg:w="2"/><text x="54.0012%" y="1103.50"></text></g><g><title>0x1100120a0 (70 samples, 0.75%)</title><rect x="53.0428%" y="1109" width="0.7513%" height="15" fill="rgb(206,86,44)" fg:x="4942" fg:w="70"/><text x="53.2928%" y="1119.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (2 samples, 0.02%)</title><rect x="53.7727%" y="1093" width="0.0215%" height="15" fill="rgb(245,177,15)" fg:x="5010" fg:w="2"/><text x="54.0227%" y="1103.50"></text></g><g><title>0x1100120b8 (3 samples, 0.03%)</title><rect x="53.7941%" y="1109" width="0.0322%" height="15" fill="rgb(206,64,50)" fg:x="5012" fg:w="3"/><text x="54.0441%" y="1119.50"></text></g><g><title>0x1100120c0 (4 samples, 0.04%)</title><rect x="53.8263%" y="1109" width="0.0429%" height="15" fill="rgb(234,36,40)" fg:x="5015" fg:w="4"/><text x="54.0763%" y="1119.50"></text></g><g><title>deno`Builtins_LoadIC (4 samples, 0.04%)</title><rect x="53.8263%" y="1093" width="0.0429%" height="15" fill="rgb(213,64,8)" fg:x="5015" fg:w="4"/><text x="54.0763%" y="1103.50"></text></g><g><title>0x1100120cc (1 samples, 0.01%)</title><rect x="53.8693%" y="1109" width="0.0107%" height="15" fill="rgb(210,75,36)" fg:x="5019" fg:w="1"/><text x="54.1193%" y="1119.50"></text></g><g><title>0x1100120d4 (1 samples, 0.01%)</title><rect x="53.8800%" y="1109" width="0.0107%" height="15" fill="rgb(229,88,21)" fg:x="5020" fg:w="1"/><text x="54.1300%" y="1119.50"></text></g><g><title>0x110012104 (1 samples, 0.01%)</title><rect x="53.8907%" y="1109" width="0.0107%" height="15" fill="rgb(252,204,47)" fg:x="5021" fg:w="1"/><text x="54.1407%" y="1119.50"></text></g><g><title>0x110012110 (3 samples, 0.03%)</title><rect x="53.9015%" y="1109" width="0.0322%" height="15" fill="rgb(208,77,27)" fg:x="5022" fg:w="3"/><text x="54.1515%" y="1119.50"></text></g><g><title>0x110012148 (3 samples, 0.03%)</title><rect x="53.9337%" y="1109" width="0.0322%" height="15" fill="rgb(221,76,26)" fg:x="5025" fg:w="3"/><text x="54.1837%" y="1119.50"></text></g><g><title>0x11001406c (2 samples, 0.02%)</title><rect x="53.9659%" y="1093" width="0.0215%" height="15" fill="rgb(225,139,18)" fg:x="5028" fg:w="2"/><text x="54.2159%" y="1103.50"></text></g><g><title>0x1100140dc (2 samples, 0.02%)</title><rect x="53.9873%" y="1093" width="0.0215%" height="15" fill="rgb(230,137,11)" fg:x="5030" fg:w="2"/><text x="54.2373%" y="1103.50"></text></g><g><title>0x110014130 (2 samples, 0.02%)</title><rect x="54.0088%" y="1093" width="0.0215%" height="15" fill="rgb(212,28,1)" fg:x="5032" fg:w="2"/><text x="54.2588%" y="1103.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.01%)</title><rect x="54.0303%" y="1045" width="0.0107%" height="15" fill="rgb(248,164,17)" fg:x="5034" fg:w="1"/><text x="54.2803%" y="1055.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.01%)</title><rect x="54.0303%" y="1029" width="0.0107%" height="15" fill="rgb(222,171,42)" fg:x="5034" fg:w="1"/><text x="54.2803%" y="1039.50"></text></g><g><title>deno`v8::internal::AllocationCounter::AdvanceAllocationObservers (1 samples, 0.01%)</title><rect x="54.0303%" y="1013" width="0.0107%" height="15" fill="rgb(243,84,45)" fg:x="5034" fg:w="1"/><text x="54.2803%" y="1023.50"></text></g><g><title>0x110014194 (2 samples, 0.02%)</title><rect x="54.0303%" y="1093" width="0.0215%" height="15" fill="rgb(252,49,23)" fg:x="5034" fg:w="2"/><text x="54.2803%" y="1103.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.02%)</title><rect x="54.0303%" y="1077" width="0.0215%" height="15" fill="rgb(215,19,7)" fg:x="5034" fg:w="2"/><text x="54.2803%" y="1087.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.02%)</title><rect x="54.0303%" y="1061" width="0.0215%" height="15" fill="rgb(238,81,41)" fg:x="5034" fg:w="2"/><text x="54.2803%" y="1071.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.01%)</title><rect x="54.0410%" y="1045" width="0.0107%" height="15" fill="rgb(210,199,37)" fg:x="5035" fg:w="1"/><text x="54.2910%" y="1055.50"></text></g><g><title>0x110012150 (9 samples, 0.10%)</title><rect x="53.9659%" y="1109" width="0.0966%" height="15" fill="rgb(244,192,49)" fg:x="5028" fg:w="9"/><text x="54.2159%" y="1119.50"></text></g><g><title>deno`Builtins_ReturnHandler (1 samples, 0.01%)</title><rect x="54.0517%" y="1093" width="0.0107%" height="15" fill="rgb(226,211,11)" fg:x="5036" fg:w="1"/><text x="54.3017%" y="1103.50"></text></g><g><title>0x110012194 (1 samples, 0.01%)</title><rect x="54.0625%" y="1109" width="0.0107%" height="15" fill="rgb(236,162,54)" fg:x="5037" fg:w="1"/><text x="54.3125%" y="1119.50"></text></g><g><title>0x1100121a0 (1 samples, 0.01%)</title><rect x="54.0732%" y="1109" width="0.0107%" height="15" fill="rgb(220,229,9)" fg:x="5038" fg:w="1"/><text x="54.3232%" y="1119.50"></text></g><g><title>0x110012210 (1 samples, 0.01%)</title><rect x="54.0839%" y="1109" width="0.0107%" height="15" fill="rgb(250,87,22)" fg:x="5039" fg:w="1"/><text x="54.3339%" y="1119.50"></text></g><g><title>0x110012254 (1 samples, 0.01%)</title><rect x="54.0947%" y="1109" width="0.0107%" height="15" fill="rgb(239,43,17)" fg:x="5040" fg:w="1"/><text x="54.3447%" y="1119.50"></text></g><g><title>0x110012260 (2 samples, 0.02%)</title><rect x="54.1054%" y="1109" width="0.0215%" height="15" fill="rgb(231,177,25)" fg:x="5041" fg:w="2"/><text x="54.3554%" y="1119.50"></text></g><g><title>0x1100122ac (1 samples, 0.01%)</title><rect x="54.1269%" y="1109" width="0.0107%" height="15" fill="rgb(219,179,1)" fg:x="5043" fg:w="1"/><text x="54.3769%" y="1119.50"></text></g><g><title>0x1100122b8 (1 samples, 0.01%)</title><rect x="54.1376%" y="1109" width="0.0107%" height="15" fill="rgb(238,219,53)" fg:x="5044" fg:w="1"/><text x="54.3876%" y="1119.50"></text></g><g><title>0x1100122d8 (4 samples, 0.04%)</title><rect x="54.1483%" y="1109" width="0.0429%" height="15" fill="rgb(232,167,36)" fg:x="5045" fg:w="4"/><text x="54.3983%" y="1119.50"></text></g><g><title>0x1100122e8 (1 samples, 0.01%)</title><rect x="54.1913%" y="1109" width="0.0107%" height="15" fill="rgb(244,19,51)" fg:x="5049" fg:w="1"/><text x="54.4413%" y="1119.50"></text></g><g><title>0x110012320 (1 samples, 0.01%)</title><rect x="54.2020%" y="1109" width="0.0107%" height="15" fill="rgb(224,6,22)" fg:x="5050" fg:w="1"/><text x="54.4520%" y="1119.50"></text></g><g><title>0x1100136b0 (1 samples, 0.01%)</title><rect x="54.2127%" y="1093" width="0.0107%" height="15" fill="rgb(224,145,5)" fg:x="5051" fg:w="1"/><text x="54.4627%" y="1103.50"></text></g><g><title>0x1100136bc (18 samples, 0.19%)</title><rect x="54.2235%" y="1093" width="0.1932%" height="15" fill="rgb(234,130,49)" fg:x="5052" fg:w="18"/><text x="54.4735%" y="1103.50"></text></g><g><title>0x1100136d4 (1 samples, 0.01%)</title><rect x="54.4167%" y="1093" width="0.0107%" height="15" fill="rgb(254,6,2)" fg:x="5070" fg:w="1"/><text x="54.6667%" y="1103.50"></text></g><g><title>0x1100136e8 (1 samples, 0.01%)</title><rect x="54.4274%" y="1093" width="0.0107%" height="15" fill="rgb(208,96,46)" fg:x="5071" fg:w="1"/><text x="54.6774%" y="1103.50"></text></g><g><title>0x1100136f8 (1 samples, 0.01%)</title><rect x="54.4381%" y="1093" width="0.0107%" height="15" fill="rgb(239,3,39)" fg:x="5072" fg:w="1"/><text x="54.6881%" y="1103.50"></text></g><g><title>0x110013720 (3 samples, 0.03%)</title><rect x="54.4489%" y="1093" width="0.0322%" height="15" fill="rgb(233,210,1)" fg:x="5073" fg:w="3"/><text x="54.6989%" y="1103.50"></text></g><g><title>0x110013758 (1 samples, 0.01%)</title><rect x="54.4811%" y="1093" width="0.0107%" height="15" fill="rgb(244,137,37)" fg:x="5076" fg:w="1"/><text x="54.7311%" y="1103.50"></text></g><g><title>0x110013760 (1 samples, 0.01%)</title><rect x="54.4918%" y="1093" width="0.0107%" height="15" fill="rgb(240,136,2)" fg:x="5077" fg:w="1"/><text x="54.7418%" y="1103.50"></text></g><g><title>0x11001376c (3 samples, 0.03%)</title><rect x="54.5025%" y="1093" width="0.0322%" height="15" fill="rgb(239,18,37)" fg:x="5078" fg:w="3"/><text x="54.7525%" y="1103.50"></text></g><g><title>0x110013770 (1 samples, 0.01%)</title><rect x="54.5347%" y="1093" width="0.0107%" height="15" fill="rgb(218,185,22)" fg:x="5081" fg:w="1"/><text x="54.7847%" y="1103.50"></text></g><g><title>0x110013784 (6 samples, 0.06%)</title><rect x="54.5455%" y="1093" width="0.0644%" height="15" fill="rgb(225,218,4)" fg:x="5082" fg:w="6"/><text x="54.7955%" y="1103.50"></text></g><g><title>0x1100137c0 (8 samples, 0.09%)</title><rect x="54.6099%" y="1093" width="0.0859%" height="15" fill="rgb(230,182,32)" fg:x="5088" fg:w="8"/><text x="54.8599%" y="1103.50"></text></g><g><title>0x110012328 (46 samples, 0.49%)</title><rect x="54.2127%" y="1109" width="0.4937%" height="15" fill="rgb(242,56,43)" fg:x="5051" fg:w="46"/><text x="54.4627%" y="1119.50"></text></g><g><title>deno`Builtins_SameValueNumbersOnly (1 samples, 0.01%)</title><rect x="54.6957%" y="1093" width="0.0107%" height="15" fill="rgb(233,99,24)" fg:x="5096" fg:w="1"/><text x="54.9457%" y="1103.50"></text></g><g><title>0x110012b08 (1 samples, 0.01%)</title><rect x="54.7065%" y="1093" width="0.0107%" height="15" fill="rgb(234,209,42)" fg:x="5097" fg:w="1"/><text x="54.9565%" y="1103.50"></text></g><g><title>0x110012b74 (2 samples, 0.02%)</title><rect x="54.7172%" y="1093" width="0.0215%" height="15" fill="rgb(227,7,12)" fg:x="5098" fg:w="2"/><text x="54.9672%" y="1103.50"></text></g><g><title>0x110012b9c (2 samples, 0.02%)</title><rect x="54.7386%" y="1093" width="0.0215%" height="15" fill="rgb(245,203,43)" fg:x="5100" fg:w="2"/><text x="54.9886%" y="1103.50"></text></g><g><title>0x110012bbc (1 samples, 0.01%)</title><rect x="54.7601%" y="1093" width="0.0107%" height="15" fill="rgb(238,205,33)" fg:x="5102" fg:w="1"/><text x="55.0101%" y="1103.50"></text></g><g><title>0x110012bc8 (2 samples, 0.02%)</title><rect x="54.7708%" y="1093" width="0.0215%" height="15" fill="rgb(231,56,7)" fg:x="5103" fg:w="2"/><text x="55.0208%" y="1103.50"></text></g><g><title>0x110012be8 (1 samples, 0.01%)</title><rect x="54.7923%" y="1093" width="0.0107%" height="15" fill="rgb(244,186,29)" fg:x="5105" fg:w="1"/><text x="55.0423%" y="1103.50"></text></g><g><title>0x110012c0c (1 samples, 0.01%)</title><rect x="54.8030%" y="1093" width="0.0107%" height="15" fill="rgb(234,111,31)" fg:x="5106" fg:w="1"/><text x="55.0530%" y="1103.50"></text></g><g><title>0x110012c48 (1 samples, 0.01%)</title><rect x="54.8138%" y="1093" width="0.0107%" height="15" fill="rgb(241,149,10)" fg:x="5107" fg:w="1"/><text x="55.0638%" y="1103.50"></text></g><g><title>0x110012c54 (1 samples, 0.01%)</title><rect x="54.8245%" y="1093" width="0.0107%" height="15" fill="rgb(249,206,44)" fg:x="5108" fg:w="1"/><text x="55.0745%" y="1103.50"></text></g><g><title>0x110012c60 (1 samples, 0.01%)</title><rect x="54.8352%" y="1093" width="0.0107%" height="15" fill="rgb(251,153,30)" fg:x="5109" fg:w="1"/><text x="55.0852%" y="1103.50"></text></g><g><title>0x110012c88 (2 samples, 0.02%)</title><rect x="54.8460%" y="1093" width="0.0215%" height="15" fill="rgb(239,152,38)" fg:x="5110" fg:w="2"/><text x="55.0960%" y="1103.50"></text></g><g><title>0x110012ca8 (1 samples, 0.01%)</title><rect x="54.8674%" y="1093" width="0.0107%" height="15" fill="rgb(249,139,47)" fg:x="5112" fg:w="1"/><text x="55.1174%" y="1103.50"></text></g><g><title>0x110012cf0 (1 samples, 0.01%)</title><rect x="54.8782%" y="1093" width="0.0107%" height="15" fill="rgb(244,64,35)" fg:x="5113" fg:w="1"/><text x="55.1282%" y="1103.50"></text></g><g><title>0x110012d20 (1 samples, 0.01%)</title><rect x="54.8889%" y="1093" width="0.0107%" height="15" fill="rgb(216,46,15)" fg:x="5114" fg:w="1"/><text x="55.1389%" y="1103.50"></text></g><g><title>0x110012d58 (1 samples, 0.01%)</title><rect x="54.8996%" y="1093" width="0.0107%" height="15" fill="rgb(250,74,19)" fg:x="5115" fg:w="1"/><text x="55.1496%" y="1103.50"></text></g><g><title>0x110012e68 (1 samples, 0.01%)</title><rect x="54.9104%" y="1093" width="0.0107%" height="15" fill="rgb(249,42,33)" fg:x="5116" fg:w="1"/><text x="55.1604%" y="1103.50"></text></g><g><title>deno`v8::internal::GCTracer::RecordGCPhasesHistograms (1 samples, 0.01%)</title><rect x="54.9211%" y="965" width="0.0107%" height="15" fill="rgb(242,149,17)" fg:x="5117" fg:w="1"/><text x="55.1711%" y="975.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (1 samples, 0.01%)</title><rect x="54.9318%" y="917" width="0.0107%" height="15" fill="rgb(244,29,21)" fg:x="5118" fg:w="1"/><text x="55.1818%" y="927.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.01%)</title><rect x="54.9318%" y="901" width="0.0107%" height="15" fill="rgb(220,130,37)" fg:x="5118" fg:w="1"/><text x="55.1818%" y="911.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.01%)</title><rect x="54.9318%" y="885" width="0.0107%" height="15" fill="rgb(211,67,2)" fg:x="5118" fg:w="1"/><text x="55.1818%" y="895.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="54.9318%" y="869" width="0.0107%" height="15" fill="rgb(235,68,52)" fg:x="5118" fg:w="1"/><text x="55.1818%" y="879.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (2 samples, 0.02%)</title><rect x="54.9318%" y="965" width="0.0215%" height="15" fill="rgb(246,142,3)" fg:x="5118" fg:w="2"/><text x="55.1818%" y="975.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (2 samples, 0.02%)</title><rect x="54.9318%" y="949" width="0.0215%" height="15" fill="rgb(241,25,7)" fg:x="5118" fg:w="2"/><text x="55.1818%" y="959.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (2 samples, 0.02%)</title><rect x="54.9318%" y="933" width="0.0215%" height="15" fill="rgb(242,119,39)" fg:x="5118" fg:w="2"/><text x="55.1818%" y="943.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="54.9426%" y="917" width="0.0107%" height="15" fill="rgb(241,98,45)" fg:x="5119" fg:w="1"/><text x="55.1926%" y="927.50"></text></g><g><title>deno`v8::internal::Heap::CompleteSweepingYoung (1 samples, 0.01%)</title><rect x="54.9533%" y="949" width="0.0107%" height="15" fill="rgb(254,28,30)" fg:x="5120" fg:w="1"/><text x="55.2033%" y="959.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.01%)</title><rect x="54.9533%" y="933" width="0.0107%" height="15" fill="rgb(241,142,54)" fg:x="5120" fg:w="1"/><text x="55.2033%" y="943.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.01%)</title><rect x="54.9640%" y="917" width="0.0107%" height="15" fill="rgb(222,85,15)" fg:x="5121" fg:w="1"/><text x="55.2140%" y="927.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="54.9748%" y="917" width="0.0107%" height="15" fill="rgb(210,85,47)" fg:x="5122" fg:w="1"/><text x="55.2248%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="54.9748%" y="901" width="0.0107%" height="15" fill="rgb(224,206,25)" fg:x="5122" fg:w="1"/><text x="55.2248%" y="911.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (8 samples, 0.09%)</title><rect x="54.9855%" y="901" width="0.0859%" height="15" fill="rgb(243,201,19)" fg:x="5123" fg:w="8"/><text x="55.2355%" y="911.50"></text></g><g><title>deno`v8::internal::EntryFrame::Iterate (1 samples, 0.01%)</title><rect x="55.0714%" y="901" width="0.0107%" height="15" fill="rgb(236,59,4)" fg:x="5131" fg:w="1"/><text x="55.3214%" y="911.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::FullHeapObjectSlot&gt; (1 samples, 0.01%)</title><rect x="55.0821%" y="869" width="0.0107%" height="15" fill="rgb(254,179,45)" fg:x="5132" fg:w="1"/><text x="55.3321%" y="879.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (1 samples, 0.01%)</title><rect x="55.0821%" y="853" width="0.0107%" height="15" fill="rgb(226,14,10)" fg:x="5132" fg:w="1"/><text x="55.3321%" y="863.50"></text></g><g><title>deno`v8::internal::LocalAllocationBuffer::CloseAndMakeIterable (1 samples, 0.01%)</title><rect x="55.0821%" y="837" width="0.0107%" height="15" fill="rgb(244,27,41)" fg:x="5132" fg:w="1"/><text x="55.3321%" y="847.50"></text></g><g><title>deno`v8::internal::Isolate::Iterate (2 samples, 0.02%)</title><rect x="55.0821%" y="901" width="0.0215%" height="15" fill="rgb(235,35,32)" fg:x="5132" fg:w="2"/><text x="55.3321%" y="911.50"></text></g><g><title>deno`v8::internal::TypedFrame::Iterate (2 samples, 0.02%)</title><rect x="55.0821%" y="885" width="0.0215%" height="15" fill="rgb(218,68,31)" fg:x="5132" fg:w="2"/><text x="55.3321%" y="895.50"></text></g><g><title>deno`v8::internal::OffHeapStackSlots (1 samples, 0.01%)</title><rect x="55.0928%" y="869" width="0.0107%" height="15" fill="rgb(207,120,37)" fg:x="5133" fg:w="1"/><text x="55.3428%" y="879.50"></text></g><g><title>deno`std::__1::__shared_weak_count::lock (1 samples, 0.01%)</title><rect x="55.0928%" y="853" width="0.0107%" height="15" fill="rgb(227,98,0)" fg:x="5133" fg:w="1"/><text x="55.3428%" y="863.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (14 samples, 0.15%)</title><rect x="54.9855%" y="917" width="0.1503%" height="15" fill="rgb(207,7,3)" fg:x="5123" fg:w="14"/><text x="55.2355%" y="927.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (3 samples, 0.03%)</title><rect x="55.1036%" y="901" width="0.0322%" height="15" fill="rgb(206,98,19)" fg:x="5134" fg:w="3"/><text x="55.3536%" y="911.50"></text></g><g><title>deno`v8::internal::LocalAllocationBuffer::LocalAllocationBuffer (1 samples, 0.01%)</title><rect x="55.1358%" y="917" width="0.0107%" height="15" fill="rgb(217,5,26)" fg:x="5137" fg:w="1"/><text x="55.3858%" y="927.50"></text></g><g><title>deno`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, v8::internal::Object::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt; &gt; &gt;::__rehash (1 samples, 0.01%)</title><rect x="55.1465%" y="901" width="0.0107%" height="15" fill="rgb(235,190,38)" fg:x="5138" fg:w="1"/><text x="55.3965%" y="911.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="55.1572%" y="869" width="0.0107%" height="15" fill="rgb(247,86,24)" fg:x="5139" fg:w="1"/><text x="55.4072%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="55.1572%" y="853" width="0.0107%" height="15" fill="rgb(205,101,16)" fg:x="5139" fg:w="1"/><text x="55.4072%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="55.1572%" y="837" width="0.0107%" height="15" fill="rgb(246,168,33)" fg:x="5139" fg:w="1"/><text x="55.4072%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="55.1572%" y="821" width="0.0107%" height="15" fill="rgb(231,114,1)" fg:x="5139" fg:w="1"/><text x="55.4072%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="55.1572%" y="805" width="0.0107%" height="15" fill="rgb(207,184,53)" fg:x="5139" fg:w="1"/><text x="55.4072%" y="815.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (3 samples, 0.03%)</title><rect x="55.1465%" y="917" width="0.0322%" height="15" fill="rgb(224,95,51)" fg:x="5138" fg:w="3"/><text x="55.3965%" y="927.50"></text></g><g><title>deno`v8::internal::CompactionSpaceCollection::CompactionSpaceCollection (2 samples, 0.02%)</title><rect x="55.1572%" y="901" width="0.0215%" height="15" fill="rgb(212,188,45)" fg:x="5139" fg:w="2"/><text x="55.4072%" y="911.50"></text></g><g><title>deno`v8::internal::FreeList::CreateFreeList (2 samples, 0.02%)</title><rect x="55.1572%" y="885" width="0.0215%" height="15" fill="rgb(223,154,38)" fg:x="5139" fg:w="2"/><text x="55.4072%" y="895.50"></text></g><g><title>deno`v8::internal::FreeListManyCached::FreeListManyCached (1 samples, 0.01%)</title><rect x="55.1680%" y="869" width="0.0107%" height="15" fill="rgb(251,22,52)" fg:x="5140" fg:w="1"/><text x="55.4180%" y="879.50"></text></g><g><title>deno`v8::internal::PagedSpace::~PagedSpace (1 samples, 0.01%)</title><rect x="55.1787%" y="901" width="0.0107%" height="15" fill="rgb(229,209,22)" fg:x="5141" fg:w="1"/><text x="55.4287%" y="911.50"></text></g><g><title>deno`v8::internal::Scavenger::~Scavenger (2 samples, 0.02%)</title><rect x="55.1787%" y="917" width="0.0215%" height="15" fill="rgb(234,138,34)" fg:x="5141" fg:w="2"/><text x="55.4287%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="55.1894%" y="901" width="0.0107%" height="15" fill="rgb(212,95,11)" fg:x="5142" fg:w="1"/><text x="55.4394%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.01%)</title><rect x="55.1894%" y="885" width="0.0107%" height="15" fill="rgb(240,179,47)" fg:x="5142" fg:w="1"/><text x="55.4394%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.03%)</title><rect x="55.2002%" y="869" width="0.0322%" height="15" fill="rgb(240,163,11)" fg:x="5143" fg:w="3"/><text x="55.4502%" y="879.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (4 samples, 0.04%)</title><rect x="55.2002%" y="917" width="0.0429%" height="15" fill="rgb(236,37,12)" fg:x="5143" fg:w="4"/><text x="55.4502%" y="927.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (4 samples, 0.04%)</title><rect x="55.2002%" y="901" width="0.0429%" height="15" fill="rgb(232,164,16)" fg:x="5143" fg:w="4"/><text x="55.4502%" y="911.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (4 samples, 0.04%)</title><rect x="55.2002%" y="885" width="0.0429%" height="15" fill="rgb(244,205,15)" fg:x="5143" fg:w="4"/><text x="55.4502%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.01%)</title><rect x="55.2324%" y="869" width="0.0107%" height="15" fill="rgb(223,117,47)" fg:x="5146" fg:w="1"/><text x="55.4824%" y="879.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (27 samples, 0.29%)</title><rect x="54.9640%" y="933" width="0.2898%" height="15" fill="rgb(244,107,35)" fg:x="5121" fg:w="27"/><text x="55.2140%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.01%)</title><rect x="55.2431%" y="917" width="0.0107%" height="15" fill="rgb(205,140,8)" fg:x="5147" fg:w="1"/><text x="55.4931%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="55.2538%" y="933" width="0.0107%" height="15" fill="rgb(228,84,46)" fg:x="5148" fg:w="1"/><text x="55.5038%" y="943.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (30 samples, 0.32%)</title><rect x="54.9640%" y="949" width="0.3220%" height="15" fill="rgb(254,188,9)" fg:x="5121" fg:w="30"/><text x="55.2140%" y="959.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="55.2646%" y="933" width="0.0215%" height="15" fill="rgb(206,112,54)" fg:x="5149" fg:w="2"/><text x="55.5146%" y="943.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (32 samples, 0.34%)</title><rect x="54.9533%" y="965" width="0.3435%" height="15" fill="rgb(216,84,49)" fg:x="5120" fg:w="32"/><text x="55.2033%" y="975.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.01%)</title><rect x="55.2860%" y="949" width="0.0107%" height="15" fill="rgb(214,194,35)" fg:x="5151" fg:w="1"/><text x="55.5360%" y="959.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (36 samples, 0.39%)</title><rect x="54.9211%" y="981" width="0.3864%" height="15" fill="rgb(249,28,3)" fg:x="5117" fg:w="36"/><text x="55.1711%" y="991.50"></text></g><g><title>deno`v8::internal::Heap::SelectGarbageCollector (1 samples, 0.01%)</title><rect x="55.2968%" y="965" width="0.0107%" height="15" fill="rgb(222,56,52)" fg:x="5152" fg:w="1"/><text x="55.5468%" y="975.50"></text></g><g><title>deno`v8::internal::Heap::CanPromoteYoungAndExpandOldGeneration (1 samples, 0.01%)</title><rect x="55.2968%" y="949" width="0.0107%" height="15" fill="rgb(245,217,50)" fg:x="5152" fg:w="1"/><text x="55.5468%" y="959.50"></text></g><g><title>0x110012e70 (37 samples, 0.40%)</title><rect x="54.9211%" y="1093" width="0.3971%" height="15" fill="rgb(213,201,24)" fg:x="5117" fg:w="37"/><text x="55.1711%" y="1103.50"></text></g><g><title>deno`Builtins_GrowFastSmiOrObjectElements (37 samples, 0.40%)</title><rect x="54.9211%" y="1077" width="0.3971%" height="15" fill="rgb(248,116,28)" fg:x="5117" fg:w="37"/><text x="55.1711%" y="1087.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (37 samples, 0.40%)</title><rect x="54.9211%" y="1061" width="0.3971%" height="15" fill="rgb(219,72,43)" fg:x="5117" fg:w="37"/><text x="55.1711%" y="1071.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (37 samples, 0.40%)</title><rect x="54.9211%" y="1045" width="0.3971%" height="15" fill="rgb(209,138,14)" fg:x="5117" fg:w="37"/><text x="55.1711%" y="1055.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (37 samples, 0.40%)</title><rect x="54.9211%" y="1029" width="0.3971%" height="15" fill="rgb(222,18,33)" fg:x="5117" fg:w="37"/><text x="55.1711%" y="1039.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (37 samples, 0.40%)</title><rect x="54.9211%" y="1013" width="0.3971%" height="15" fill="rgb(213,199,7)" fg:x="5117" fg:w="37"/><text x="55.1711%" y="1023.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (37 samples, 0.40%)</title><rect x="54.9211%" y="997" width="0.3971%" height="15" fill="rgb(250,110,10)" fg:x="5117" fg:w="37"/><text x="55.1711%" y="1007.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionPrologue (1 samples, 0.01%)</title><rect x="55.3075%" y="981" width="0.0107%" height="15" fill="rgb(248,123,6)" fg:x="5153" fg:w="1"/><text x="55.5575%" y="991.50"></text></g><g><title>0x110012e7c (1 samples, 0.01%)</title><rect x="55.3182%" y="1093" width="0.0107%" height="15" fill="rgb(206,91,31)" fg:x="5154" fg:w="1"/><text x="55.5682%" y="1103.50"></text></g><g><title>0x110012e80 (1 samples, 0.01%)</title><rect x="55.3290%" y="1093" width="0.0107%" height="15" fill="rgb(211,154,13)" fg:x="5155" fg:w="1"/><text x="55.5790%" y="1103.50"></text></g><g><title>deno`Builtins_GrowFastSmiOrObjectElements (19 samples, 0.20%)</title><rect x="55.3397%" y="1093" width="0.2039%" height="15" fill="rgb(225,148,7)" fg:x="5156" fg:w="19"/><text x="55.5897%" y="1103.50"></text></g><g><title>0x110012368 (80 samples, 0.86%)</title><rect x="54.7065%" y="1109" width="0.8586%" height="15" fill="rgb(220,160,43)" fg:x="5097" fg:w="80"/><text x="54.9565%" y="1119.50"></text></g><g><title>deno`Builtins_SameValueNumbersOnly (2 samples, 0.02%)</title><rect x="55.5436%" y="1093" width="0.0215%" height="15" fill="rgb(213,52,39)" fg:x="5175" fg:w="2"/><text x="55.7936%" y="1103.50"></text></g><g><title>0x1100123c0 (2 samples, 0.02%)</title><rect x="55.5651%" y="1109" width="0.0215%" height="15" fill="rgb(243,137,7)" fg:x="5177" fg:w="2"/><text x="55.8151%" y="1119.50"></text></g><g><title>0x1100123e4 (1 samples, 0.01%)</title><rect x="55.5866%" y="1109" width="0.0107%" height="15" fill="rgb(230,79,13)" fg:x="5179" fg:w="1"/><text x="55.8366%" y="1119.50"></text></g><g><title>0x11001242c (1 samples, 0.01%)</title><rect x="55.5973%" y="1109" width="0.0107%" height="15" fill="rgb(247,105,23)" fg:x="5180" fg:w="1"/><text x="55.8473%" y="1119.50"></text></g><g><title>0x110012460 (1 samples, 0.01%)</title><rect x="55.6080%" y="1109" width="0.0107%" height="15" fill="rgb(223,179,41)" fg:x="5181" fg:w="1"/><text x="55.8580%" y="1119.50"></text></g><g><title>0x110012468 (5 samples, 0.05%)</title><rect x="55.6188%" y="1109" width="0.0537%" height="15" fill="rgb(218,9,34)" fg:x="5182" fg:w="5"/><text x="55.8688%" y="1119.50"></text></g><g><title>deno`Builtins_LoadIC (5 samples, 0.05%)</title><rect x="55.6188%" y="1093" width="0.0537%" height="15" fill="rgb(222,106,8)" fg:x="5182" fg:w="5"/><text x="55.8688%" y="1103.50"></text></g><g><title>0x110012480 (1 samples, 0.01%)</title><rect x="55.6724%" y="1109" width="0.0107%" height="15" fill="rgb(211,220,0)" fg:x="5187" fg:w="1"/><text x="55.9224%" y="1119.50"></text></g><g><title>0x110012490 (2 samples, 0.02%)</title><rect x="55.6832%" y="1109" width="0.0215%" height="15" fill="rgb(229,52,16)" fg:x="5188" fg:w="2"/><text x="55.9332%" y="1119.50"></text></g><g><title>0x1100124dc (1 samples, 0.01%)</title><rect x="55.7046%" y="1109" width="0.0107%" height="15" fill="rgb(212,155,18)" fg:x="5190" fg:w="1"/><text x="55.9546%" y="1119.50"></text></g><g><title>0x110012514 (6 samples, 0.06%)</title><rect x="55.7154%" y="1109" width="0.0644%" height="15" fill="rgb(242,21,14)" fg:x="5191" fg:w="6"/><text x="55.9654%" y="1119.50"></text></g><g><title>deno`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="55.7798%" y="1093" width="0.0215%" height="15" fill="rgb(222,19,48)" fg:x="5197" fg:w="2"/><text x="56.0298%" y="1103.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::take (1 samples, 0.01%)</title><rect x="55.8227%" y="1077" width="0.0107%" height="15" fill="rgb(232,45,27)" fg:x="5201" fg:w="1"/><text x="56.0727%" y="1087.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="55.8871%" y="1061" width="0.0107%" height="15" fill="rgb(249,103,42)" fg:x="5207" fg:w="1"/><text x="56.1371%" y="1071.50"></text></g><g><title>deno`&lt;T as core::any::Any&gt;::type_id (1 samples, 0.01%)</title><rect x="55.8978%" y="1061" width="0.0107%" height="15" fill="rgb(246,81,33)" fg:x="5208" fg:w="1"/><text x="56.1478%" y="1071.50"></text></g><g><title>deno`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (4 samples, 0.04%)</title><rect x="55.9086%" y="1061" width="0.0429%" height="15" fill="rgb(252,33,42)" fg:x="5209" fg:w="4"/><text x="56.1586%" y="1071.50"></text></g><g><title>deno`DYLD-STUB$$memmove (2 samples, 0.02%)</title><rect x="56.1983%" y="1045" width="0.0215%" height="15" fill="rgb(209,212,41)" fg:x="5236" fg:w="2"/><text x="56.4483%" y="1055.50"></text></g><g><title>deno`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (7 samples, 0.08%)</title><rect x="56.2198%" y="1045" width="0.0751%" height="15" fill="rgb(207,154,6)" fg:x="5238" fg:w="7"/><text x="56.4698%" y="1055.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::take (43 samples, 0.46%)</title><rect x="55.9515%" y="1061" width="0.4615%" height="15" fill="rgb(223,64,47)" fg:x="5213" fg:w="43"/><text x="56.2015%" y="1071.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.12%)</title><rect x="56.2949%" y="1045" width="0.1181%" height="15" fill="rgb(211,161,38)" fg:x="5245" fg:w="11"/><text x="56.5449%" y="1055.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="56.4130%" y="1045" width="0.0107%" height="15" fill="rgb(219,138,40)" fg:x="5256" fg:w="1"/><text x="56.6630%" y="1055.50"></text></g><g><title>deno`DYLD-STUB$$send (1 samples, 0.01%)</title><rect x="56.4237%" y="1045" width="0.0107%" height="15" fill="rgb(241,228,46)" fg:x="5257" fg:w="1"/><text x="56.6737%" y="1055.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (2 samples, 0.02%)</title><rect x="56.4345%" y="1045" width="0.0215%" height="15" fill="rgb(223,209,38)" fg:x="5258" fg:w="2"/><text x="56.6845%" y="1055.50"></text></g><g><title>libsystem_c.dylib`send (1 samples, 0.01%)</title><rect x="56.4559%" y="1045" width="0.0107%" height="15" fill="rgb(236,164,45)" fg:x="5260" fg:w="1"/><text x="56.7059%" y="1055.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write_str::call (3,826 samples, 41.06%)</title><rect x="55.8334%" y="1077" width="41.0647%" height="15" fill="rgb(231,15,5)" fg:x="5202" fg:w="3826"/><text x="56.0834%" y="1087.50">deno`deno_flash2::op_flash_try_write_str::call</text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (3,772 samples, 40.49%)</title><rect x="56.4130%" y="1061" width="40.4851%" height="15" fill="rgb(252,35,15)" fg:x="5256" fg:w="3772"/><text x="56.6630%" y="1071.50">deno`tokio::net::tcp::stream::TcpStream::try_write</text></g><g><title>libsystem_kernel.dylib`__sendto (3,767 samples, 40.43%)</title><rect x="56.4667%" y="1045" width="40.4315%" height="15" fill="rgb(248,181,18)" fg:x="5261" fg:w="3767"/><text x="56.7167%" y="1055.50">libsystem_kernel.dylib`__sendto</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.11%)</title><rect x="96.9840%" y="1061" width="0.1073%" height="15" fill="rgb(233,39,42)" fg:x="9036" fg:w="10"/><text x="97.2340%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.20%)</title><rect x="96.8981%" y="1077" width="0.2039%" height="15" fill="rgb(238,110,33)" fg:x="9028" fg:w="19"/><text x="97.1481%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="97.0913%" y="1061" width="0.0107%" height="15" fill="rgb(233,195,10)" fg:x="9046" fg:w="1"/><text x="97.3413%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.04%)</title><rect x="97.1021%" y="1077" width="0.0429%" height="15" fill="rgb(254,105,3)" fg:x="9047" fg:w="4"/><text x="97.3521%" y="1087.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write_str_fast_fn (3,854 samples, 41.37%)</title><rect x="55.8012%" y="1093" width="41.3652%" height="15" fill="rgb(221,225,9)" fg:x="5199" fg:w="3854"/><text x="56.0512%" y="1103.50">deno`deno_flash2::op_flash_try_write_str_fast_fn</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="97.1450%" y="1077" width="0.0215%" height="15" fill="rgb(224,227,45)" fg:x="9051" fg:w="2"/><text x="97.3950%" y="1087.50"></text></g><g><title>deno`v8::External::Value (6 samples, 0.06%)</title><rect x="97.1665%" y="1093" width="0.0644%" height="15" fill="rgb(229,198,43)" fg:x="9053" fg:w="6"/><text x="97.4165%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="97.2309%" y="1093" width="0.0215%" height="15" fill="rgb(206,209,35)" fg:x="9059" fg:w="2"/><text x="97.4809%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.04%)</title><rect x="97.2523%" y="1093" width="0.0429%" height="15" fill="rgb(245,195,53)" fg:x="9061" fg:w="4"/><text x="97.5023%" y="1103.50"></text></g><g><title>0x11001251c (3,870 samples, 41.54%)</title><rect x="55.7798%" y="1109" width="41.5370%" height="15" fill="rgb(240,92,26)" fg:x="5197" fg:w="3870"/><text x="56.0298%" y="1119.50">0x11001251c</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="97.2953%" y="1093" width="0.0215%" height="15" fill="rgb(207,40,23)" fg:x="9065" fg:w="2"/><text x="97.5453%" y="1103.50"></text></g><g><title>0x11001255c (2 samples, 0.02%)</title><rect x="97.3167%" y="1109" width="0.0215%" height="15" fill="rgb(223,111,35)" fg:x="9067" fg:w="2"/><text x="97.5667%" y="1119.50"></text></g><g><title>deno`Builtins_LessThan_WithFeedback (1 samples, 0.01%)</title><rect x="97.3489%" y="1093" width="0.0107%" height="15" fill="rgb(229,147,28)" fg:x="9070" fg:w="1"/><text x="97.5989%" y="1103.50"></text></g><g><title>0x110012584 (5 samples, 0.05%)</title><rect x="97.3382%" y="1109" width="0.0537%" height="15" fill="rgb(211,29,28)" fg:x="9069" fg:w="5"/><text x="97.5882%" y="1119.50"></text></g><g><title>deno`Builtins_NonNumberToNumeric (3 samples, 0.03%)</title><rect x="97.3597%" y="1093" width="0.0322%" height="15" fill="rgb(228,72,33)" fg:x="9071" fg:w="3"/><text x="97.6097%" y="1103.50"></text></g><g><title>deno`v8::internal::AllocationCounter::InvokeAllocationObservers (1 samples, 0.01%)</title><rect x="97.3919%" y="1045" width="0.0107%" height="15" fill="rgb(205,214,31)" fg:x="9074" fg:w="1"/><text x="97.6419%" y="1055.50"></text></g><g><title>deno`v8::internal::Heap::CreateFillerObjectAt (1 samples, 0.01%)</title><rect x="97.4026%" y="1045" width="0.0107%" height="15" fill="rgb(224,111,15)" fg:x="9075" fg:w="1"/><text x="97.6526%" y="1055.50"></text></g><g><title>0x1100125fc (3 samples, 0.03%)</title><rect x="97.3919%" y="1109" width="0.0322%" height="15" fill="rgb(253,21,26)" fg:x="9074" fg:w="3"/><text x="97.6419%" y="1119.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.03%)</title><rect x="97.3919%" y="1093" width="0.0322%" height="15" fill="rgb(245,139,43)" fg:x="9074" fg:w="3"/><text x="97.6419%" y="1103.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.03%)</title><rect x="97.3919%" y="1077" width="0.0322%" height="15" fill="rgb(252,170,7)" fg:x="9074" fg:w="3"/><text x="97.6419%" y="1087.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (3 samples, 0.03%)</title><rect x="97.3919%" y="1061" width="0.0322%" height="15" fill="rgb(231,118,14)" fg:x="9074" fg:w="3"/><text x="97.6419%" y="1071.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.01%)</title><rect x="97.4133%" y="1045" width="0.0107%" height="15" fill="rgb(238,83,0)" fg:x="9076" fg:w="1"/><text x="97.6633%" y="1055.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.01%)</title><rect x="97.4133%" y="1029" width="0.0107%" height="15" fill="rgb(221,39,39)" fg:x="9076" fg:w="1"/><text x="97.6633%" y="1039.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.01%)</title><rect x="97.4133%" y="1013" width="0.0107%" height="15" fill="rgb(222,119,46)" fg:x="9076" fg:w="1"/><text x="97.6633%" y="1023.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.01%)</title><rect x="97.4133%" y="997" width="0.0107%" height="15" fill="rgb(222,165,49)" fg:x="9076" fg:w="1"/><text x="97.6633%" y="1007.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.01%)</title><rect x="97.4133%" y="981" width="0.0107%" height="15" fill="rgb(219,113,52)" fg:x="9076" fg:w="1"/><text x="97.6633%" y="991.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.01%)</title><rect x="97.4133%" y="965" width="0.0107%" height="15" fill="rgb(214,7,15)" fg:x="9076" fg:w="1"/><text x="97.6633%" y="975.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (1 samples, 0.01%)</title><rect x="97.4133%" y="949" width="0.0107%" height="15" fill="rgb(235,32,4)" fg:x="9076" fg:w="1"/><text x="97.6633%" y="959.50"></text></g><g><title>deno`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, v8::internal::Object::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt; &gt; &gt;::__rehash (1 samples, 0.01%)</title><rect x="97.4133%" y="933" width="0.0107%" height="15" fill="rgb(238,90,54)" fg:x="9076" fg:w="1"/><text x="97.6633%" y="943.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.01%)</title><rect x="97.4348%" y="1045" width="0.0107%" height="15" fill="rgb(213,208,19)" fg:x="9078" fg:w="1"/><text x="97.6848%" y="1055.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.01%)</title><rect x="97.4348%" y="1029" width="0.0107%" height="15" fill="rgb(233,156,4)" fg:x="9078" fg:w="1"/><text x="97.6848%" y="1039.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.01%)</title><rect x="97.4348%" y="1013" width="0.0107%" height="15" fill="rgb(207,194,5)" fg:x="9078" fg:w="1"/><text x="97.6848%" y="1023.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.01%)</title><rect x="97.4348%" y="997" width="0.0107%" height="15" fill="rgb(206,111,30)" fg:x="9078" fg:w="1"/><text x="97.6848%" y="1007.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.01%)</title><rect x="97.4348%" y="981" width="0.0107%" height="15" fill="rgb(243,70,54)" fg:x="9078" fg:w="1"/><text x="97.6848%" y="991.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.01%)</title><rect x="97.4348%" y="965" width="0.0107%" height="15" fill="rgb(242,28,8)" fg:x="9078" fg:w="1"/><text x="97.6848%" y="975.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.01%)</title><rect x="97.4348%" y="949" width="0.0107%" height="15" fill="rgb(219,106,18)" fg:x="9078" fg:w="1"/><text x="97.6848%" y="959.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (1 samples, 0.01%)</title><rect x="97.4348%" y="933" width="0.0107%" height="15" fill="rgb(244,222,10)" fg:x="9078" fg:w="1"/><text x="97.6848%" y="943.50"></text></g><g><title>0x110012614 (3 samples, 0.03%)</title><rect x="97.4241%" y="1109" width="0.0322%" height="15" fill="rgb(236,179,52)" fg:x="9077" fg:w="3"/><text x="97.6741%" y="1119.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.03%)</title><rect x="97.4241%" y="1093" width="0.0322%" height="15" fill="rgb(213,23,39)" fg:x="9077" fg:w="3"/><text x="97.6741%" y="1103.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.03%)</title><rect x="97.4241%" y="1077" width="0.0322%" height="15" fill="rgb(238,48,10)" fg:x="9077" fg:w="3"/><text x="97.6741%" y="1087.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.02%)</title><rect x="97.4348%" y="1061" width="0.0215%" height="15" fill="rgb(251,196,23)" fg:x="9078" fg:w="2"/><text x="97.6848%" y="1071.50"></text></g><g><title>deno`v8::internal::ScavengeTaskObserver::Step (1 samples, 0.01%)</title><rect x="97.4455%" y="1045" width="0.0107%" height="15" fill="rgb(250,152,24)" fg:x="9079" fg:w="1"/><text x="97.6955%" y="1055.50"></text></g><g><title>0x110012630 (1 samples, 0.01%)</title><rect x="97.4563%" y="1109" width="0.0107%" height="15" fill="rgb(209,150,17)" fg:x="9080" fg:w="1"/><text x="97.7063%" y="1119.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="97.4563%" y="1093" width="0.0107%" height="15" fill="rgb(234,202,34)" fg:x="9080" fg:w="1"/><text x="97.7063%" y="1103.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.01%)</title><rect x="97.4563%" y="1077" width="0.0107%" height="15" fill="rgb(253,148,53)" fg:x="9080" fg:w="1"/><text x="97.7063%" y="1087.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.01%)</title><rect x="97.4563%" y="1061" width="0.0107%" height="15" fill="rgb(218,129,16)" fg:x="9080" fg:w="1"/><text x="97.7063%" y="1071.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.01%)</title><rect x="97.4563%" y="1045" width="0.0107%" height="15" fill="rgb(216,85,19)" fg:x="9080" fg:w="1"/><text x="97.7063%" y="1055.50"></text></g><g><title>deno`v8::internal::AllocationCounter::AdvanceAllocationObservers (1 samples, 0.01%)</title><rect x="97.4563%" y="1029" width="0.0107%" height="15" fill="rgb(235,228,7)" fg:x="9080" fg:w="1"/><text x="97.7063%" y="1039.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (1 samples, 0.01%)</title><rect x="97.4885%" y="997" width="0.0107%" height="15" fill="rgb(245,175,0)" fg:x="9083" fg:w="1"/><text x="97.7385%" y="1007.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (1 samples, 0.01%)</title><rect x="97.4885%" y="981" width="0.0107%" height="15" fill="rgb(208,168,36)" fg:x="9083" fg:w="1"/><text x="97.7385%" y="991.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (1 samples, 0.01%)</title><rect x="97.4885%" y="965" width="0.0107%" height="15" fill="rgb(246,171,24)" fg:x="9083" fg:w="1"/><text x="97.7385%" y="975.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (1 samples, 0.01%)</title><rect x="97.4885%" y="949" width="0.0107%" height="15" fill="rgb(215,142,24)" fg:x="9083" fg:w="1"/><text x="97.7385%" y="959.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.01%)</title><rect x="97.4885%" y="933" width="0.0107%" height="15" fill="rgb(250,187,7)" fg:x="9083" fg:w="1"/><text x="97.7385%" y="943.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.01%)</title><rect x="97.4885%" y="917" width="0.0107%" height="15" fill="rgb(228,66,33)" fg:x="9083" fg:w="1"/><text x="97.7385%" y="927.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionEpilogue (1 samples, 0.01%)</title><rect x="97.4992%" y="997" width="0.0107%" height="15" fill="rgb(234,215,21)" fg:x="9084" fg:w="1"/><text x="97.7492%" y="1007.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="97.4992%" y="981" width="0.0107%" height="15" fill="rgb(222,191,20)" fg:x="9084" fg:w="1"/><text x="97.7492%" y="991.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (5 samples, 0.05%)</title><rect x="97.5207%" y="933" width="0.0537%" height="15" fill="rgb(245,79,54)" fg:x="9086" fg:w="5"/><text x="97.7707%" y="943.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (7 samples, 0.08%)</title><rect x="97.5207%" y="949" width="0.0751%" height="15" fill="rgb(240,10,37)" fg:x="9086" fg:w="7"/><text x="97.7707%" y="959.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (2 samples, 0.02%)</title><rect x="97.5743%" y="933" width="0.0215%" height="15" fill="rgb(214,192,32)" fg:x="9091" fg:w="2"/><text x="97.8243%" y="943.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (1 samples, 0.01%)</title><rect x="97.5958%" y="949" width="0.0107%" height="15" fill="rgb(209,36,54)" fg:x="9093" fg:w="1"/><text x="97.8458%" y="959.50"></text></g><g><title>deno`v8::internal::FreeList::CreateFreeList (1 samples, 0.01%)</title><rect x="97.5958%" y="933" width="0.0107%" height="15" fill="rgb(220,10,11)" fg:x="9093" fg:w="1"/><text x="97.8458%" y="943.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::Run (1 samples, 0.01%)</title><rect x="97.6065%" y="933" width="0.0107%" height="15" fill="rgb(221,106,17)" fg:x="9094" fg:w="1"/><text x="97.8565%" y="943.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (1 samples, 0.01%)</title><rect x="97.6173%" y="917" width="0.0107%" height="15" fill="rgb(251,142,44)" fg:x="9095" fg:w="1"/><text x="97.8673%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.01%)</title><rect x="97.6173%" y="901" width="0.0107%" height="15" fill="rgb(238,13,15)" fg:x="9095" fg:w="1"/><text x="97.8673%" y="911.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (12 samples, 0.13%)</title><rect x="97.5099%" y="981" width="0.1288%" height="15" fill="rgb(208,107,27)" fg:x="9085" fg:w="12"/><text x="97.7599%" y="991.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (12 samples, 0.13%)</title><rect x="97.5099%" y="965" width="0.1288%" height="15" fill="rgb(205,136,37)" fg:x="9085" fg:w="12"/><text x="97.7599%" y="975.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (3 samples, 0.03%)</title><rect x="97.6065%" y="949" width="0.0322%" height="15" fill="rgb(250,205,27)" fg:x="9094" fg:w="3"/><text x="97.8565%" y="959.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (2 samples, 0.02%)</title><rect x="97.6173%" y="933" width="0.0215%" height="15" fill="rgb(210,80,43)" fg:x="9095" fg:w="2"/><text x="97.8673%" y="943.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_destroy (1 samples, 0.01%)</title><rect x="97.6280%" y="917" width="0.0107%" height="15" fill="rgb(247,160,36)" fg:x="9096" fg:w="1"/><text x="97.8780%" y="927.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (17 samples, 0.18%)</title><rect x="97.4777%" y="1045" width="0.1825%" height="15" fill="rgb(234,13,49)" fg:x="9082" fg:w="17"/><text x="97.7277%" y="1055.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (17 samples, 0.18%)</title><rect x="97.4777%" y="1029" width="0.1825%" height="15" fill="rgb(234,122,0)" fg:x="9082" fg:w="17"/><text x="97.7277%" y="1039.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (17 samples, 0.18%)</title><rect x="97.4777%" y="1013" width="0.1825%" height="15" fill="rgb(207,146,38)" fg:x="9082" fg:w="17"/><text x="97.7277%" y="1023.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (14 samples, 0.15%)</title><rect x="97.5099%" y="997" width="0.1503%" height="15" fill="rgb(207,177,25)" fg:x="9085" fg:w="14"/><text x="97.7599%" y="1007.50"></text></g><g><title>deno`v8::internal::PretenturingHandler::ProcessPretenuringFeedback (2 samples, 0.02%)</title><rect x="97.6387%" y="981" width="0.0215%" height="15" fill="rgb(211,178,42)" fg:x="9097" fg:w="2"/><text x="97.8887%" y="991.50"></text></g><g><title>0x110012648 (19 samples, 0.20%)</title><rect x="97.4670%" y="1109" width="0.2039%" height="15" fill="rgb(230,69,54)" fg:x="9081" fg:w="19"/><text x="97.7170%" y="1119.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (19 samples, 0.20%)</title><rect x="97.4670%" y="1093" width="0.2039%" height="15" fill="rgb(214,135,41)" fg:x="9081" fg:w="19"/><text x="97.7170%" y="1103.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (19 samples, 0.20%)</title><rect x="97.4670%" y="1077" width="0.2039%" height="15" fill="rgb(237,67,25)" fg:x="9081" fg:w="19"/><text x="97.7170%" y="1087.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (19 samples, 0.20%)</title><rect x="97.4670%" y="1061" width="0.2039%" height="15" fill="rgb(222,189,50)" fg:x="9081" fg:w="19"/><text x="97.7170%" y="1071.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.01%)</title><rect x="97.6602%" y="1045" width="0.0107%" height="15" fill="rgb(245,148,34)" fg:x="9099" fg:w="1"/><text x="97.9102%" y="1055.50"></text></g><g><title>deno`v8::internal::AllocationCounter::AdvanceAllocationObservers (1 samples, 0.01%)</title><rect x="97.6602%" y="1029" width="0.0107%" height="15" fill="rgb(222,29,6)" fg:x="9099" fg:w="1"/><text x="97.9102%" y="1039.50"></text></g><g><title>0x110014040 (2 samples, 0.02%)</title><rect x="97.6709%" y="1109" width="0.0215%" height="15" fill="rgb(221,189,43)" fg:x="9100" fg:w="2"/><text x="97.9209%" y="1119.50"></text></g><g><title>0x110014140 (1 samples, 0.01%)</title><rect x="97.6924%" y="1109" width="0.0107%" height="15" fill="rgb(207,36,27)" fg:x="9102" fg:w="1"/><text x="97.9424%" y="1119.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="97.7031%" y="1109" width="0.0107%" height="15" fill="rgb(217,90,24)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="1119.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="97.7031%" y="1093" width="0.0107%" height="15" fill="rgb(224,66,35)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="1103.50"></text></g><g><title>deno`Builtins_ReturnHandler (1 samples, 0.01%)</title><rect x="97.7031%" y="1077" width="0.0107%" height="15" fill="rgb(221,13,50)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="1087.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="97.7031%" y="1061" width="0.0107%" height="15" fill="rgb(236,68,49)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="1071.50"></text></g><g><title>deno`v8::internal::Runtime_BytecodeBudgetInterrupt_Ignition (1 samples, 0.01%)</title><rect x="97.7031%" y="1045" width="0.0107%" height="15" fill="rgb(229,146,28)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="1055.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::BytecodeBudgetInterrupt(v8::internal::Isolate*, v8::internal::Arguments&lt; (1 samples, 0.01%)</title><rect x="97.7031%" y="1029" width="0.0107%" height="15" fill="rgb(225,31,38)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="1039.50"></text></g><g><title>deno`v8::internal::TieringManager::OnInterruptTick(v8::internal::Handle (1 samples, 0.01%)</title><rect x="97.7031%" y="1013" width="0.0107%" height="15" fill="rgb(250,208,3)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="1023.50"></text></g><g><title>deno`v8::internal::baseline::BaselineBatchCompiler::CompileBatch(v8::internal::Handle (1 samples, 0.01%)</title><rect x="97.7031%" y="997" width="0.0107%" height="15" fill="rgb(246,54,23)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="1007.50"></text></g><g><title>deno`v8::internal::Compiler::CompileBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="97.7031%" y="981" width="0.0107%" height="15" fill="rgb(243,76,11)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="991.50"></text></g><g><title>deno`v8::internal::Compiler::CompileSharedWithBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="97.7031%" y="965" width="0.0107%" height="15" fill="rgb(245,21,50)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="975.50"></text></g><g><title>deno`v8::internal::GenerateBaselineCode(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="97.7031%" y="949" width="0.0107%" height="15" fill="rgb(228,9,43)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="959.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::GenerateCode (1 samples, 0.01%)</title><rect x="97.7031%" y="933" width="0.0107%" height="15" fill="rgb(208,100,47)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="943.50"></text></g><g><title>deno`void v8::internal::baseline::BaselineCompiler::CallBuiltin&lt;(v8::internal::Builtin)367, v8::internal::interpreter::Register, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::TaggedIndex&gt;(v8::internal::interpreter::Register, v8::internal::Handle (1 samples, 0.01%)</title><rect x="97.7031%" y="917" width="0.0107%" height="15" fill="rgb(232,26,8)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="927.50"></text></g><g><title>deno`v8::internal::TurboAssembler::Mov (1 samples, 0.01%)</title><rect x="97.7031%" y="901" width="0.0107%" height="15" fill="rgb(216,166,38)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="911.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.01%)</title><rect x="97.7031%" y="885" width="0.0107%" height="15" fill="rgb(251,202,51)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="895.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.01%)</title><rect x="97.7031%" y="869" width="0.0107%" height="15" fill="rgb(254,216,34)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="879.50"></text></g><g><title>deno`v8::internal::Assembler::RecordRelocInfo (1 samples, 0.01%)</title><rect x="97.7031%" y="853" width="0.0107%" height="15" fill="rgb(251,32,27)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="863.50"></text></g><g><title>deno`v8::internal::ConstantPool::RecordEntry (1 samples, 0.01%)</title><rect x="97.7031%" y="837" width="0.0107%" height="15" fill="rgb(208,127,28)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="847.50"></text></g><g><title>deno`v8::internal::ConstantPool::RecordKey (1 samples, 0.01%)</title><rect x="97.7031%" y="821" width="0.0107%" height="15" fill="rgb(224,137,22)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="831.50"></text></g><g><title>deno`v8::internal::ConstantPool::GetRelocInfoStatusFor (1 samples, 0.01%)</title><rect x="97.7031%" y="805" width="0.0107%" height="15" fill="rgb(254,70,32)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="815.50"></text></g><g><title>deno`std::__1::__tree_iterator&lt;std::__1::__value_type&lt;v8::internal::ConstantPoolKey, int&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;v8::internal::ConstantPoolKey, int&gt;, void*&gt;*, long&gt; std::__1::__tree&lt;std::__1::__value_type&lt;v8::internal::ConstantPoolKey, int&gt;, std::__1::__map_value_compare&lt;v8::internal::ConstantPoolKey, std::__1::__value_type&lt;v8::internal::ConstantPoolKey, int&gt;, std::__1::less&lt;v8::internal::ConstantPoolKey&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;v8::internal::ConstantPoolKey, int&gt; &gt; &gt;::__lower_bound&lt;v8::internal::ConstantPoolKey&gt;(v8::internal::ConstantPoolKey const&amp;, std::__1::__tree_node&lt;std::__1::__value_type&lt;v8::internal::ConstantPoolKey, int&gt;, void*&gt;*, std::__1::__tree_end_node&lt;std::__1::__tree_node_base (1 samples, 0.01%)</title><rect x="97.7031%" y="789" width="0.0107%" height="15" fill="rgb(229,75,37)" fg:x="9103" fg:w="1"/><text x="97.9531%" y="799.50"></text></g><g><title>deno`Builtins_LessThan_WithFeedback (5 samples, 0.05%)</title><rect x="97.7139%" y="1109" width="0.0537%" height="15" fill="rgb(252,64,23)" fg:x="9104" fg:w="5"/><text x="97.9639%" y="1119.50"></text></g><g><title>deno`Builtins_LoadIC (16 samples, 0.17%)</title><rect x="97.7675%" y="1109" width="0.1717%" height="15" fill="rgb(232,162,48)" fg:x="9109" fg:w="16"/><text x="98.0175%" y="1119.50"></text></g><g><title>deno`Builtins_JSEntry (4,265 samples, 45.78%)</title><rect x="52.1734%" y="1141" width="45.7765%" height="15" fill="rgb(246,160,12)" fg:x="4861" fg:w="4265"/><text x="52.4234%" y="1151.50">deno`Builtins_JSEntry</text></g><g><title>deno`Builtins_JSEntryTrampoline (4,252 samples, 45.64%)</title><rect x="52.3130%" y="1125" width="45.6370%" height="15" fill="rgb(247,166,0)" fg:x="4874" fg:w="4252"/><text x="52.5630%" y="1135.50">deno`Builtins_JSEntryTrampoline</text></g><g><title>deno`deno_flash2::op_flash_try_write_str_fast_fn (1 samples, 0.01%)</title><rect x="97.9393%" y="1109" width="0.0107%" height="15" fill="rgb(249,219,21)" fg:x="9125" fg:w="1"/><text x="98.1893%" y="1119.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (4,287 samples, 46.01%)</title><rect x="51.9803%" y="1157" width="46.0127%" height="15" fill="rgb(205,209,3)" fg:x="4843" fg:w="4287"/><text x="52.2303%" y="1167.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8..</text></g><g><title>deno`v8::internal::SaveContext::SaveContext (4 samples, 0.04%)</title><rect x="97.9500%" y="1141" width="0.0429%" height="15" fill="rgb(243,44,1)" fg:x="9126" fg:w="4"/><text x="98.2000%" y="1151.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (1 samples, 0.01%)</title><rect x="97.9929%" y="1157" width="0.0107%" height="15" fill="rgb(206,159,16)" fg:x="9130" fg:w="1"/><text x="98.2429%" y="1167.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (2 samples, 0.02%)</title><rect x="98.0036%" y="1157" width="0.0215%" height="15" fill="rgb(244,77,30)" fg:x="9131" fg:w="2"/><text x="98.2536%" y="1167.50"></text></g><g><title>deno`v8::internal::DumpOnJavascriptExecution::IsAllowed (3 samples, 0.03%)</title><rect x="98.0251%" y="1157" width="0.0322%" height="15" fill="rgb(218,69,12)" fg:x="9133" fg:w="3"/><text x="98.2751%" y="1167.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (4 samples, 0.04%)</title><rect x="98.0573%" y="1157" width="0.0429%" height="15" fill="rgb(212,87,7)" fg:x="9136" fg:w="4"/><text x="98.3073%" y="1167.50"></text></g><g><title>deno`v8::internal::SaveContext::~SaveContext (2 samples, 0.02%)</title><rect x="98.1002%" y="1157" width="0.0215%" height="15" fill="rgb(245,114,25)" fg:x="9140" fg:w="2"/><text x="98.3502%" y="1167.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (4,317 samples, 46.33%)</title><rect x="51.8193%" y="1173" width="46.3347%" height="15" fill="rgb(210,61,42)" fg:x="4828" fg:w="4317"/><text x="52.0693%" y="1183.50">deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Han..</text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (3 samples, 0.03%)</title><rect x="98.1217%" y="1157" width="0.0322%" height="15" fill="rgb(211,52,33)" fg:x="9142" fg:w="3"/><text x="98.3717%" y="1167.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.01%)</title><rect x="98.1539%" y="1173" width="0.0107%" height="15" fill="rgb(234,58,33)" fg:x="9145" fg:w="1"/><text x="98.4039%" y="1183.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (4 samples, 0.04%)</title><rect x="98.2076%" y="1157" width="0.0429%" height="15" fill="rgb(220,115,36)" fg:x="9150" fg:w="4"/><text x="98.4576%" y="1167.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (3 samples, 0.03%)</title><rect x="98.2505%" y="1157" width="0.0322%" height="15" fill="rgb(243,153,54)" fg:x="9154" fg:w="3"/><text x="98.5005%" y="1167.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.02%)</title><rect x="98.2612%" y="1141" width="0.0215%" height="15" fill="rgb(251,47,18)" fg:x="9155" fg:w="2"/><text x="98.5112%" y="1151.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (14 samples, 0.15%)</title><rect x="98.1646%" y="1173" width="0.1503%" height="15" fill="rgb(242,102,42)" fg:x="9146" fg:w="14"/><text x="98.4146%" y="1183.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (3 samples, 0.03%)</title><rect x="98.2827%" y="1157" width="0.0322%" height="15" fill="rgb(234,31,38)" fg:x="9157" fg:w="3"/><text x="98.5327%" y="1167.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (4,380 samples, 47.01%)</title><rect x="51.3148%" y="1189" width="47.0108%" height="15" fill="rgb(221,117,51)" fg:x="4781" fg:w="4380"/><text x="51.5648%" y="1199.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8..</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (1 samples, 0.01%)</title><rect x="98.3149%" y="1173" width="0.0107%" height="15" fill="rgb(212,20,18)" fg:x="9160" fg:w="1"/><text x="98.5649%" y="1183.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (11 samples, 0.12%)</title><rect x="98.3256%" y="1189" width="0.1181%" height="15" fill="rgb(245,133,36)" fg:x="9161" fg:w="11"/><text x="98.5756%" y="1199.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (8 samples, 0.09%)</title><rect x="98.3578%" y="1173" width="0.0859%" height="15" fill="rgb(212,6,19)" fg:x="9164" fg:w="8"/><text x="98.6078%" y="1183.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (7 samples, 0.08%)</title><rect x="98.4437%" y="1189" width="0.0751%" height="15" fill="rgb(218,1,36)" fg:x="9172" fg:w="7"/><text x="98.6937%" y="1199.50"></text></g><g><title>deno`v8::Integer::New (14 samples, 0.15%)</title><rect x="98.5188%" y="1189" width="0.1503%" height="15" fill="rgb(246,84,54)" fg:x="9179" fg:w="14"/><text x="98.7688%" y="1199.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (2 samples, 0.02%)</title><rect x="98.6691%" y="1189" width="0.0215%" height="15" fill="rgb(242,110,6)" fg:x="9193" fg:w="2"/><text x="98.9191%" y="1199.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (3 samples, 0.03%)</title><rect x="98.6906%" y="1189" width="0.0322%" height="15" fill="rgb(214,47,5)" fg:x="9195" fg:w="3"/><text x="98.9406%" y="1199.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (3 samples, 0.03%)</title><rect x="98.7228%" y="1189" width="0.0322%" height="15" fill="rgb(218,159,25)" fg:x="9198" fg:w="3"/><text x="98.9728%" y="1199.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (4 samples, 0.04%)</title><rect x="98.7550%" y="1189" width="0.0429%" height="15" fill="rgb(215,211,28)" fg:x="9201" fg:w="4"/><text x="99.0050%" y="1199.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (3 samples, 0.03%)</title><rect x="98.7979%" y="1189" width="0.0322%" height="15" fill="rgb(238,59,32)" fg:x="9205" fg:w="3"/><text x="99.0479%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="98.8730%" y="1173" width="0.0215%" height="15" fill="rgb(226,82,3)" fg:x="9212" fg:w="2"/><text x="99.1230%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.16%)</title><rect x="98.9374%" y="1157" width="0.1610%" height="15" fill="rgb(240,164,32)" fg:x="9218" fg:w="15"/><text x="99.1874%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.10%)</title><rect x="99.0018%" y="1141" width="0.0966%" height="15" fill="rgb(232,46,7)" fg:x="9224" fg:w="9"/><text x="99.2518%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.28%)</title><rect x="98.8301%" y="1189" width="0.2791%" height="15" fill="rgb(229,129,53)" fg:x="9208" fg:w="26"/><text x="99.0801%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.21%)</title><rect x="98.8945%" y="1173" width="0.2147%" height="15" fill="rgb(234,188,29)" fg:x="9214" fg:w="20"/><text x="99.1445%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="99.0984%" y="1157" width="0.0107%" height="15" fill="rgb(246,141,4)" fg:x="9233" fg:w="1"/><text x="99.3484%" y="1167.50"></text></g><g><title>deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (8,401 samples, 90.17%)</title><rect x="8.9836%" y="1205" width="90.1685%" height="15" fill="rgb(229,23,39)" fg:x="837" fg:w="8401"/><text x="9.2336%" y="1215.50">deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.04%)</title><rect x="99.1092%" y="1189" width="0.0429%" height="15" fill="rgb(206,12,3)" fg:x="9234" fg:w="4"/><text x="99.3592%" y="1199.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_idle (4 samples, 0.04%)</title><rect x="99.1521%" y="1205" width="0.0429%" height="15" fill="rgb(252,226,20)" fg:x="9238" fg:w="4"/><text x="99.4021%" y="1215.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_running (4 samples, 0.04%)</title><rect x="99.1950%" y="1205" width="0.0429%" height="15" fill="rgb(216,123,35)" fg:x="9242" fg:w="4"/><text x="99.4450%" y="1215.50"></text></g><g><title>deno`v8::Context::Enter (2 samples, 0.02%)</title><rect x="99.2380%" y="1205" width="0.0215%" height="15" fill="rgb(212,68,40)" fg:x="9246" fg:w="2"/><text x="99.4880%" y="1215.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (2 samples, 0.02%)</title><rect x="99.2594%" y="1205" width="0.0215%" height="15" fill="rgb(254,125,32)" fg:x="9248" fg:w="2"/><text x="99.5094%" y="1215.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (6 samples, 0.06%)</title><rect x="99.2809%" y="1205" width="0.0644%" height="15" fill="rgb(253,97,22)" fg:x="9250" fg:w="6"/><text x="99.5309%" y="1215.50"></text></g><g><title>deno`v8::Integer::New (8 samples, 0.09%)</title><rect x="99.3453%" y="1205" width="0.0859%" height="15" fill="rgb(241,101,14)" fg:x="9256" fg:w="8"/><text x="99.5953%" y="1215.50"></text></g><g><title>deno`v8__Local__New (2 samples, 0.02%)</title><rect x="99.4311%" y="1205" width="0.0215%" height="15" fill="rgb(238,103,29)" fg:x="9264" fg:w="2"/><text x="99.6811%" y="1215.50"></text></g><g><title>deno`v8__Undefined (3 samples, 0.03%)</title><rect x="99.4526%" y="1205" width="0.0322%" height="15" fill="rgb(233,195,47)" fg:x="9266" fg:w="3"/><text x="99.7026%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="99.4848%" y="1205" width="0.0322%" height="15" fill="rgb(246,218,30)" fg:x="9269" fg:w="3"/><text x="99.7348%" y="1215.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (8,451 samples, 90.71%)</title><rect x="8.8226%" y="1221" width="90.7052%" height="15" fill="rgb(219,145,47)" fg:x="822" fg:w="8451"/><text x="9.0726%" y="1231.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.01%)</title><rect x="99.5170%" y="1205" width="0.0107%" height="15" fill="rgb(243,12,26)" fg:x="9272" fg:w="1"/><text x="99.7670%" y="1215.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_idle (1 samples, 0.01%)</title><rect x="99.5277%" y="1221" width="0.0107%" height="15" fill="rgb(214,87,16)" fg:x="9273" fg:w="1"/><text x="99.7777%" y="1231.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_running (1 samples, 0.01%)</title><rect x="99.5385%" y="1221" width="0.0107%" height="15" fill="rgb(208,99,42)" fg:x="9274" fg:w="1"/><text x="99.7885%" y="1231.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (9,267 samples, 99.46%)</title><rect x="0.2254%" y="1237" width="99.4633%" height="15" fill="rgb(253,99,2)" fg:x="21" fg:w="9267"/><text x="0.4754%" y="1247.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.14%)</title><rect x="99.5492%" y="1221" width="0.1395%" height="15" fill="rgb(220,168,23)" fg:x="9275" fg:w="13"/><text x="99.7992%" y="1231.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Spawner::pop (1 samples, 0.01%)</title><rect x="99.6887%" y="1237" width="0.0107%" height="15" fill="rgb(242,38,24)" fg:x="9288" fg:w="1"/><text x="99.9387%" y="1247.50"></text></g><g><title>deno`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::assert_owner (1 samples, 0.01%)</title><rect x="99.6995%" y="1237" width="0.0107%" height="15" fill="rgb(225,182,9)" fg:x="9289" fg:w="1"/><text x="99.9495%" y="1247.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (1 samples, 0.01%)</title><rect x="99.7102%" y="1237" width="0.0107%" height="15" fill="rgb(243,178,37)" fg:x="9290" fg:w="1"/><text x="99.9602%" y="1247.50"></text></g><g><title>dyld`start (9,299 samples, 99.81%)</title><rect x="0.0000%" y="1301" width="99.8068%" height="15" fill="rgb(232,139,19)" fg:x="0" fg:w="9299"/><text x="0.2500%" y="1311.50">dyld`start</text></g><g><title>deno`main (9,299 samples, 99.81%)</title><rect x="0.0000%" y="1285" width="99.8068%" height="15" fill="rgb(225,201,24)" fg:x="0" fg:w="9299"/><text x="0.2500%" y="1295.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (9,299 samples, 99.81%)</title><rect x="0.0000%" y="1269" width="99.8068%" height="15" fill="rgb(221,47,46)" fg:x="0" fg:w="9299"/><text x="0.2500%" y="1279.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (9,299 samples, 99.81%)</title><rect x="0.0000%" y="1253" width="99.8068%" height="15" fill="rgb(249,23,13)" fg:x="0" fg:w="9299"/><text x="0.2500%" y="1263.50">deno`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.09%)</title><rect x="99.7209%" y="1237" width="0.0859%" height="15" fill="rgb(219,9,5)" fg:x="9291" fg:w="8"/><text x="99.9709%" y="1247.50"></text></g><g><title>deno`v8::internal::LocalIsolate::LocalIsolate (1 samples, 0.01%)</title><rect x="99.8068%" y="1221" width="0.0107%" height="15" fill="rgb(254,171,16)" fg:x="9299" fg:w="1"/><text x="100.0568%" y="1231.50"></text></g><g><title>deno`v8::internal::LocalHeap::LocalHeap(v8::internal::Heap*, v8::internal::ThreadKind, std::__1::unique_ptr&lt;v8::internal::PersistentHandles, std::__1::default_delete (1 samples, 0.01%)</title><rect x="99.8068%" y="1205" width="0.0107%" height="15" fill="rgb(230,171,20)" fg:x="9299" fg:w="1"/><text x="100.0568%" y="1215.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="99.8068%" y="1189" width="0.0107%" height="15" fill="rgb(210,71,41)" fg:x="9299" fg:w="1"/><text x="100.0568%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="99.8068%" y="1173" width="0.0107%" height="15" fill="rgb(206,173,20)" fg:x="9299" fg:w="1"/><text x="100.0568%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="99.8068%" y="1157" width="0.0107%" height="15" fill="rgb(233,88,34)" fg:x="9299" fg:w="1"/><text x="100.0568%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="99.8068%" y="1141" width="0.0107%" height="15" fill="rgb(223,209,46)" fg:x="9299" fg:w="1"/><text x="100.0568%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AssembleCode (1 samples, 0.01%)</title><rect x="99.8175%" y="1173" width="0.0107%" height="15" fill="rgb(250,43,18)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleCode (1 samples, 0.01%)</title><rect x="99.8175%" y="1157" width="0.0107%" height="15" fill="rgb(208,13,10)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleInstruction (1 samples, 0.01%)</title><rect x="99.8175%" y="1141" width="0.0107%" height="15" fill="rgb(212,200,36)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GapResolver::Resolve (1 samples, 0.01%)</title><rect x="99.8175%" y="1125" width="0.0107%" height="15" fill="rgb(225,90,30)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove (1 samples, 0.01%)</title><rect x="99.8175%" y="1109" width="0.0107%" height="15" fill="rgb(236,182,39)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove(v8::internal::compiler::InstructionOperand*, v8::internal::compiler::InstructionOperand*)::$_0::operator() (1 samples, 0.01%)</title><rect x="99.8175%" y="1093" width="0.0107%" height="15" fill="rgb(212,144,35)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1103.50"></text></g><g><title>deno`v8::internal::TurboAssembler::Mov (1 samples, 0.01%)</title><rect x="99.8175%" y="1077" width="0.0107%" height="15" fill="rgb(228,63,44)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1087.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.01%)</title><rect x="99.8175%" y="1061" width="0.0107%" height="15" fill="rgb(228,109,6)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1071.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.01%)</title><rect x="99.8175%" y="1045" width="0.0107%" height="15" fill="rgb(238,117,24)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1055.50"></text></g><g><title>deno`v8::internal::RelocInfoWriter::Write (1 samples, 0.01%)</title><rect x="99.8175%" y="1029" width="0.0107%" height="15" fill="rgb(242,26,26)" fg:x="9300" fg:w="1"/><text x="100.0675%" y="1039.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (1 samples, 0.01%)</title><rect x="99.8283%" y="1157" width="0.0107%" height="15" fill="rgb(221,92,48)" fg:x="9301" fg:w="1"/><text x="100.0783%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::GraphBuilderPhase::Run (1 samples, 0.01%)</title><rect x="99.8283%" y="1141" width="0.0107%" height="15" fill="rgb(209,209,32)" fg:x="9301" fg:w="1"/><text x="100.0783%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (1 samples, 0.01%)</title><rect x="99.8283%" y="1125" width="0.0107%" height="15" fill="rgb(221,70,22)" fg:x="9301" fg:w="1"/><text x="100.0783%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::CreateGraph (1 samples, 0.01%)</title><rect x="99.8283%" y="1109" width="0.0107%" height="15" fill="rgb(248,145,5)" fg:x="9301" fg:w="1"/><text x="100.0783%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitBytecodes (1 samples, 0.01%)</title><rect x="99.8283%" y="1093" width="0.0107%" height="15" fill="rgb(226,116,26)" fg:x="9301" fg:w="1"/><text x="100.0783%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitSingleBytecode (1 samples, 0.01%)</title><rect x="99.8283%" y="1077" width="0.0107%" height="15" fill="rgb(244,5,17)" fg:x="9301" fg:w="1"/><text x="100.0783%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (2 samples, 0.02%)</title><rect x="99.8283%" y="1173" width="0.0215%" height="15" fill="rgb(252,159,33)" fg:x="9301" fg:w="2"/><text x="100.0783%" y="1183.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (1 samples, 0.01%)</title><rect x="99.8390%" y="1157" width="0.0107%" height="15" fill="rgb(206,71,0)" fg:x="9302" fg:w="1"/><text x="100.0890%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (1 samples, 0.01%)</title><rect x="99.8390%" y="1141" width="0.0107%" height="15" fill="rgb(233,118,54)" fg:x="9302" fg:w="1"/><text x="100.0890%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="99.8390%" y="1125" width="0.0107%" height="15" fill="rgb(234,83,48)" fg:x="9302" fg:w="1"/><text x="100.0890%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.01%)</title><rect x="99.8390%" y="1109" width="0.0107%" height="15" fill="rgb(228,3,54)" fg:x="9302" fg:w="1"/><text x="100.0890%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="99.8497%" y="1125" width="0.0107%" height="15" fill="rgb(226,155,13)" fg:x="9303" fg:w="1"/><text x="100.0997%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.01%)</title><rect x="99.8497%" y="1109" width="0.0107%" height="15" fill="rgb(241,28,37)" fg:x="9303" fg:w="1"/><text x="100.0997%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::CommonOperatorReducer::Reduce (1 samples, 0.01%)</title><rect x="99.8497%" y="1093" width="0.0107%" height="15" fill="rgb(233,93,10)" fg:x="9303" fg:w="1"/><text x="100.0997%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (1 samples, 0.01%)</title><rect x="99.8605%" y="1125" width="0.0107%" height="15" fill="rgb(225,113,19)" fg:x="9304" fg:w="1"/><text x="100.1105%" y="1135.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (3 samples, 0.03%)</title><rect x="99.8497%" y="1157" width="0.0322%" height="15" fill="rgb(241,2,18)" fg:x="9303" fg:w="3"/><text x="100.0997%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (3 samples, 0.03%)</title><rect x="99.8497%" y="1141" width="0.0322%" height="15" fill="rgb(228,207,21)" fg:x="9303" fg:w="3"/><text x="100.0997%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::LinearizeEffectControl (1 samples, 0.01%)</title><rect x="99.8712%" y="1125" width="0.0107%" height="15" fill="rgb(213,211,35)" fg:x="9305" fg:w="1"/><text x="100.1212%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizer::Run (1 samples, 0.01%)</title><rect x="99.8712%" y="1109" width="0.0107%" height="15" fill="rgb(209,83,10)" fg:x="9305" fg:w="1"/><text x="100.1212%" y="1119.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (2 samples, 0.02%)</title><rect x="99.8819%" y="1157" width="0.0215%" height="15" fill="rgb(209,164,1)" fg:x="9306" fg:w="2"/><text x="100.1319%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (2 samples, 0.02%)</title><rect x="99.8819%" y="1141" width="0.0215%" height="15" fill="rgb(213,184,43)" fg:x="9306" fg:w="2"/><text x="100.1319%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::EffectGraphReducer::ReduceFrom (2 samples, 0.02%)</title><rect x="99.8819%" y="1125" width="0.0215%" height="15" fill="rgb(231,61,34)" fg:x="9306" fg:w="2"/><text x="100.1319%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::IsEffectEdge (1 samples, 0.01%)</title><rect x="99.8927%" y="1109" width="0.0107%" height="15" fill="rgb(235,75,3)" fg:x="9307" fg:w="1"/><text x="100.1427%" y="1119.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (1 samples, 0.01%)</title><rect x="99.9034%" y="1157" width="0.0107%" height="15" fill="rgb(220,106,47)" fg:x="9308" fg:w="1"/><text x="100.1534%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (1 samples, 0.01%)</title><rect x="99.9034%" y="1141" width="0.0107%" height="15" fill="rgb(210,196,33)" fg:x="9308" fg:w="1"/><text x="100.1534%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="99.9034%" y="1125" width="0.0107%" height="15" fill="rgb(229,154,42)" fg:x="9308" fg:w="1"/><text x="100.1534%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.01%)</title><rect x="99.9034%" y="1109" width="0.0107%" height="15" fill="rgb(228,114,26)" fg:x="9308" fg:w="1"/><text x="100.1534%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.01%)</title><rect x="99.9034%" y="1093" width="0.0107%" height="15" fill="rgb(208,144,1)" fg:x="9308" fg:w="1"/><text x="100.1534%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::BranchElimination::Reduce (1 samples, 0.01%)</title><rect x="99.9034%" y="1077" width="0.0107%" height="15" fill="rgb(239,112,37)" fg:x="9308" fg:w="1"/><text x="100.1534%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (2 samples, 0.02%)</title><rect x="99.9141%" y="1157" width="0.0215%" height="15" fill="rgb(210,96,50)" fg:x="9309" fg:w="2"/><text x="100.1641%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (2 samples, 0.02%)</title><rect x="99.9141%" y="1141" width="0.0215%" height="15" fill="rgb(222,178,2)" fg:x="9309" fg:w="2"/><text x="100.1641%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="99.9141%" y="1125" width="0.0215%" height="15" fill="rgb(226,74,18)" fg:x="9309" fg:w="2"/><text x="100.1641%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="99.9141%" y="1109" width="0.0215%" height="15" fill="rgb(225,67,54)" fg:x="9309" fg:w="2"/><text x="100.1641%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.01%)</title><rect x="99.9249%" y="1093" width="0.0107%" height="15" fill="rgb(251,92,32)" fg:x="9310" fg:w="1"/><text x="100.1749%" y="1103.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::StoreStoreEliminationPhase&gt; (1 samples, 0.01%)</title><rect x="99.9356%" y="1157" width="0.0107%" height="15" fill="rgb(228,149,22)" fg:x="9311" fg:w="1"/><text x="100.1856%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::StoreStoreEliminationPhase::Run (1 samples, 0.01%)</title><rect x="99.9356%" y="1141" width="0.0107%" height="15" fill="rgb(243,54,13)" fg:x="9311" fg:w="1"/><text x="100.1856%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::StoreStoreElimination::Run (1 samples, 0.01%)</title><rect x="99.9356%" y="1125" width="0.0107%" height="15" fill="rgb(243,180,28)" fg:x="9311" fg:w="1"/><text x="100.1856%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::(anonymous namespace)::RedundantStoreFinder::Visit (1 samples, 0.01%)</title><rect x="99.9356%" y="1109" width="0.0107%" height="15" fill="rgb(208,167,24)" fg:x="9311" fg:w="1"/><text x="100.1856%" y="1119.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TyperPhase, v8::internal::compiler::Typer*&gt; (1 samples, 0.01%)</title><rect x="99.9463%" y="1157" width="0.0107%" height="15" fill="rgb(245,73,45)" fg:x="9312" fg:w="1"/><text x="100.1963%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::TyperPhase::Run (1 samples, 0.01%)</title><rect x="99.9463%" y="1141" width="0.0107%" height="15" fill="rgb(237,203,48)" fg:x="9312" fg:w="1"/><text x="100.1963%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Run(v8::internal::ZoneVector (1 samples, 0.01%)</title><rect x="99.9463%" y="1125" width="0.0107%" height="15" fill="rgb(211,197,16)" fg:x="9312" fg:w="1"/><text x="100.1963%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="99.9463%" y="1109" width="0.0107%" height="15" fill="rgb(243,99,51)" fg:x="9312" fg:w="1"/><text x="100.1963%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.01%)</title><rect x="99.9463%" y="1093" width="0.0107%" height="15" fill="rgb(215,123,29)" fg:x="9312" fg:w="1"/><text x="100.1963%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.01%)</title><rect x="99.9463%" y="1077" width="0.0107%" height="15" fill="rgb(239,186,37)" fg:x="9312" fg:w="1"/><text x="100.1963%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Visitor::Reduce (1 samples, 0.01%)</title><rect x="99.9463%" y="1061" width="0.0107%" height="15" fill="rgb(252,136,39)" fg:x="9312" fg:w="1"/><text x="100.1963%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Visitor::TypeNode (1 samples, 0.01%)</title><rect x="99.9463%" y="1045" width="0.0107%" height="15" fill="rgb(223,213,32)" fg:x="9312" fg:w="1"/><text x="100.1963%" y="1055.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateFPRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (1 samples, 0.01%)</title><rect x="99.9571%" y="1125" width="0.0107%" height="15" fill="rgb(233,115,5)" fg:x="9313" fg:w="1"/><text x="100.2071%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (1 samples, 0.01%)</title><rect x="99.9571%" y="1109" width="0.0107%" height="15" fill="rgb(207,226,44)" fg:x="9313" fg:w="1"/><text x="100.2071%" y="1119.50"></text></g><g><title>deno`void std::__1::__tree_remove&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (1 samples, 0.01%)</title><rect x="99.9571%" y="1093" width="0.0107%" height="15" fill="rgb(208,126,0)" fg:x="9313" fg:w="1"/><text x="100.2071%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::FindFreeRegistersForRange(v8::internal::compiler::LiveRange*, v8::base::Vector (1 samples, 0.01%)</title><rect x="99.9678%" y="1093" width="0.0107%" height="15" fill="rgb(244,66,21)" fg:x="9314" fg:w="1"/><text x="100.2178%" y="1103.50"></text></g><g><title>deno`v8::base::ThreadEntry (17 samples, 0.18%)</title><rect x="99.8068%" y="1269" width="0.1825%" height="15" fill="rgb(222,97,12)" fg:x="9299" fg:w="17"/><text x="100.0568%" y="1279.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (17 samples, 0.18%)</title><rect x="99.8068%" y="1253" width="0.1825%" height="15" fill="rgb(219,213,19)" fg:x="9299" fg:w="17"/><text x="100.0568%" y="1263.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (17 samples, 0.18%)</title><rect x="99.8068%" y="1237" width="0.1825%" height="15" fill="rgb(252,169,30)" fg:x="9299" fg:w="17"/><text x="100.0568%" y="1247.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (16 samples, 0.17%)</title><rect x="99.8175%" y="1221" width="0.1717%" height="15" fill="rgb(206,32,51)" fg:x="9300" fg:w="16"/><text x="100.0675%" y="1231.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (16 samples, 0.17%)</title><rect x="99.8175%" y="1205" width="0.1717%" height="15" fill="rgb(250,172,42)" fg:x="9300" fg:w="16"/><text x="100.0675%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (16 samples, 0.17%)</title><rect x="99.8175%" y="1189" width="0.1717%" height="15" fill="rgb(209,34,43)" fg:x="9300" fg:w="16"/><text x="100.0675%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (13 samples, 0.14%)</title><rect x="99.8497%" y="1173" width="0.1395%" height="15" fill="rgb(223,11,35)" fg:x="9303" fg:w="13"/><text x="100.0997%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (3 samples, 0.03%)</title><rect x="99.9571%" y="1157" width="0.0322%" height="15" fill="rgb(251,219,26)" fg:x="9313" fg:w="3"/><text x="100.2071%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (3 samples, 0.03%)</title><rect x="99.9571%" y="1141" width="0.0322%" height="15" fill="rgb(231,119,3)" fg:x="9313" fg:w="3"/><text x="100.2071%" y="1151.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (2 samples, 0.02%)</title><rect x="99.9678%" y="1125" width="0.0215%" height="15" fill="rgb(216,97,11)" fg:x="9314" fg:w="2"/><text x="100.2178%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (2 samples, 0.02%)</title><rect x="99.9678%" y="1109" width="0.0215%" height="15" fill="rgb(223,59,9)" fg:x="9314" fg:w="2"/><text x="100.2178%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (1 samples, 0.01%)</title><rect x="99.9785%" y="1093" width="0.0107%" height="15" fill="rgb(233,93,31)" fg:x="9315" fg:w="1"/><text x="100.2285%" y="1103.50"></text></g><g><title>all (9,317 samples, 100%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(239,81,33)" fg:x="0" fg:w="9317"/><text x="0.2500%" y="1327.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (18 samples, 0.19%)</title><rect x="99.8068%" y="1301" width="0.1932%" height="15" fill="rgb(213,120,34)" fg:x="9299" fg:w="18"/><text x="100.0568%" y="1311.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (18 samples, 0.19%)</title><rect x="99.8068%" y="1285" width="0.1932%" height="15" fill="rgb(243,49,53)" fg:x="9299" fg:w="18"/><text x="100.0568%" y="1295.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.01%)</title><rect x="99.9893%" y="1269" width="0.0107%" height="15" fill="rgb(247,216,33)" fg:x="9316" fg:w="1"/><text x="100.2393%" y="1279.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (1 samples, 0.01%)</title><rect x="99.9893%" y="1253" width="0.0107%" height="15" fill="rgb(226,26,14)" fg:x="9316" fg:w="1"/><text x="100.2393%" y="1263.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.01%)</title><rect x="99.9893%" y="1237" width="0.0107%" height="15" fill="rgb(215,49,53)" fg:x="9316" fg:w="1"/><text x="100.2393%" y="1247.50"></text></g></svg></svg>