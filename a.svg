<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="613.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="15619"><g><title>deno`OUTLINED_FUNCTION_10426 (2 samples, 0.01%)</title><rect x="0.0064%" y="501" width="0.0128%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2564%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11843 (2 samples, 0.01%)</title><rect x="0.0192%" y="501" width="0.0128%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="2"/><text x="0.2692%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11844 (3 samples, 0.02%)</title><rect x="0.0320%" y="501" width="0.0192%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="3"/><text x="0.2820%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_12152 (3 samples, 0.02%)</title><rect x="0.0512%" y="501" width="0.0192%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="3"/><text x="0.3012%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18318 (2 samples, 0.01%)</title><rect x="0.0704%" y="501" width="0.0128%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="2"/><text x="0.3204%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_26217 (2 samples, 0.01%)</title><rect x="0.1024%" y="501" width="0.0128%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="2"/><text x="0.3524%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_4767 (3 samples, 0.02%)</title><rect x="0.1280%" y="501" width="0.0192%" height="15" fill="rgb(207,160,47)" fg:x="20" fg:w="3"/><text x="0.3780%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6352 (3 samples, 0.02%)</title><rect x="0.1473%" y="501" width="0.0192%" height="15" fill="rgb(228,23,34)" fg:x="23" fg:w="3"/><text x="0.3973%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_7958 (3 samples, 0.02%)</title><rect x="0.1665%" y="501" width="0.0192%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="3"/><text x="0.4165%" y="511.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (3 samples, 0.02%)</title><rect x="0.1857%" y="501" width="0.0192%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="3"/><text x="0.4357%" y="511.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.3137%" y="469" width="0.0128%" height="15" fill="rgb(250,228,42)" fg:x="49" fg:w="2"/><text x="0.5637%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_23666 (3 samples, 0.02%)</title><rect x="0.3393%" y="469" width="0.0192%" height="15" fill="rgb(240,193,28)" fg:x="53" fg:w="3"/><text x="0.5893%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_24704 (3 samples, 0.02%)</title><rect x="0.3649%" y="469" width="0.0192%" height="15" fill="rgb(216,20,37)" fg:x="57" fg:w="3"/><text x="0.6149%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_26771 (2 samples, 0.01%)</title><rect x="0.3841%" y="469" width="0.0128%" height="15" fill="rgb(206,188,39)" fg:x="60" fg:w="2"/><text x="0.6341%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_0 (2 samples, 0.01%)</title><rect x="0.5058%" y="437" width="0.0128%" height="15" fill="rgb(217,207,13)" fg:x="79" fg:w="2"/><text x="0.7558%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_29359 (6 samples, 0.04%)</title><rect x="0.5186%" y="437" width="0.0384%" height="15" fill="rgb(231,73,38)" fg:x="81" fg:w="6"/><text x="0.7686%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_32535 (3 samples, 0.02%)</title><rect x="0.5570%" y="437" width="0.0192%" height="15" fill="rgb(225,20,46)" fg:x="87" fg:w="3"/><text x="0.8070%" y="447.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="0.6787%" y="389" width="0.0192%" height="15" fill="rgb(210,31,41)" fg:x="106" fg:w="3"/><text x="0.9287%" y="399.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="0.6979%" y="389" width="0.0192%" height="15" fill="rgb(221,200,47)" fg:x="109" fg:w="3"/><text x="0.9479%" y="399.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="0.6979%" y="373" width="0.0192%" height="15" fill="rgb(226,26,5)" fg:x="109" fg:w="3"/><text x="0.9479%" y="383.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (2 samples, 0.01%)</title><rect x="0.7043%" y="357" width="0.0128%" height="15" fill="rgb(249,33,26)" fg:x="110" fg:w="2"/><text x="0.9543%" y="367.50"></text></g><g><title>deno`v8::Module::Evaluate(v8::Local (2 samples, 0.01%)</title><rect x="0.7043%" y="341" width="0.0128%" height="15" fill="rgb(235,183,28)" fg:x="110" fg:w="2"/><text x="0.9543%" y="351.50"></text></g><g><title>deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.01%)</title><rect x="0.7043%" y="325" width="0.0128%" height="15" fill="rgb(221,5,38)" fg:x="110" fg:w="2"/><text x="0.9543%" y="335.50"></text></g><g><title>deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.01%)</title><rect x="0.7043%" y="309" width="0.0128%" height="15" fill="rgb(247,18,42)" fg:x="110" fg:w="2"/><text x="0.9543%" y="319.50"></text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (2 samples, 0.01%)</title><rect x="0.7043%" y="293" width="0.0128%" height="15" fill="rgb(241,131,45)" fg:x="110" fg:w="2"/><text x="0.9543%" y="303.50"></text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.01%)</title><rect x="0.7043%" y="277" width="0.0128%" height="15" fill="rgb(249,31,29)" fg:x="110" fg:w="2"/><text x="0.9543%" y="287.50"></text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (2 samples, 0.01%)</title><rect x="0.7043%" y="261" width="0.0128%" height="15" fill="rgb(225,111,53)" fg:x="110" fg:w="2"/><text x="0.9543%" y="271.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (2 samples, 0.01%)</title><rect x="0.7043%" y="245" width="0.0128%" height="15" fill="rgb(238,160,17)" fg:x="110" fg:w="2"/><text x="0.9543%" y="255.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.01%)</title><rect x="0.7043%" y="229" width="0.0128%" height="15" fill="rgb(214,148,48)" fg:x="110" fg:w="2"/><text x="0.9543%" y="239.50"></text></g><g><title>deno`Builtins_JSEntry (2 samples, 0.01%)</title><rect x="0.7043%" y="213" width="0.0128%" height="15" fill="rgb(232,36,49)" fg:x="110" fg:w="2"/><text x="0.9543%" y="223.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (2 samples, 0.01%)</title><rect x="0.7043%" y="197" width="0.0128%" height="15" fill="rgb(209,103,24)" fg:x="110" fg:w="2"/><text x="0.9543%" y="207.50"></text></g><g><title>deno`Builtins_GeneratorPrototypeNext (2 samples, 0.01%)</title><rect x="0.7043%" y="181" width="0.0128%" height="15" fill="rgb(229,88,8)" fg:x="110" fg:w="2"/><text x="0.9543%" y="191.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="0.7043%" y="165" width="0.0128%" height="15" fill="rgb(213,181,19)" fg:x="110" fg:w="2"/><text x="0.9543%" y="175.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="0.7043%" y="149" width="0.0128%" height="15" fill="rgb(254,191,54)" fg:x="110" fg:w="2"/><text x="0.9543%" y="159.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.01%)</title><rect x="0.7043%" y="133" width="0.0128%" height="15" fill="rgb(241,83,37)" fg:x="110" fg:w="2"/><text x="0.9543%" y="143.50"></text></g><g><title>deno`v8::internal::Builtin_DatePrototypeToUTCString (2 samples, 0.01%)</title><rect x="0.7043%" y="117" width="0.0128%" height="15" fill="rgb(233,36,39)" fg:x="110" fg:w="2"/><text x="0.9543%" y="127.50"></text></g><g><title>deno`v8::internal::ToDateString (2 samples, 0.01%)</title><rect x="0.7043%" y="101" width="0.0128%" height="15" fill="rgb(226,3,54)" fg:x="110" fg:w="2"/><text x="0.9543%" y="111.50"></text></g><g><title>deno`&lt;futures_util::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.7171%" y="389" width="0.0128%" height="15" fill="rgb(245,192,40)" fg:x="112" fg:w="2"/><text x="0.9671%" y="399.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="0.7363%" y="389" width="0.0128%" height="15" fill="rgb(238,167,29)" fg:x="115" fg:w="2"/><text x="0.9863%" y="399.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="0.7555%" y="389" width="0.0128%" height="15" fill="rgb(232,182,51)" fg:x="118" fg:w="2"/><text x="1.0055%" y="399.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.02%)</title><rect x="0.7683%" y="389" width="0.0192%" height="15" fill="rgb(231,60,39)" fg:x="120" fg:w="3"/><text x="1.0183%" y="399.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="0.7939%" y="389" width="0.0128%" height="15" fill="rgb(208,69,12)" fg:x="124" fg:w="2"/><text x="1.0439%" y="399.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="0.8067%" y="389" width="0.0192%" height="15" fill="rgb(235,93,37)" fg:x="126" fg:w="3"/><text x="1.0567%" y="399.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (3 samples, 0.02%)</title><rect x="0.8259%" y="389" width="0.0192%" height="15" fill="rgb(213,116,39)" fg:x="129" fg:w="3"/><text x="1.0759%" y="399.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt;&gt; (4 samples, 0.03%)</title><rect x="0.8451%" y="389" width="0.0256%" height="15" fill="rgb(222,207,29)" fg:x="132" fg:w="4"/><text x="1.0951%" y="399.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (2 samples, 0.01%)</title><rect x="0.8899%" y="389" width="0.0128%" height="15" fill="rgb(206,96,30)" fg:x="139" fg:w="2"/><text x="1.1399%" y="399.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_dyn_imports (2 samples, 0.01%)</title><rect x="0.9091%" y="389" width="0.0128%" height="15" fill="rgb(218,138,4)" fg:x="142" fg:w="2"/><text x="1.1591%" y="399.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="1.1460%" y="357" width="0.0128%" height="15" fill="rgb(250,191,14)" fg:x="179" fg:w="2"/><text x="1.3960%" y="367.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (6 samples, 0.04%)</title><rect x="1.1588%" y="357" width="0.0384%" height="15" fill="rgb(239,60,40)" fg:x="181" fg:w="6"/><text x="1.4088%" y="367.50"></text></g><g><title>deno`v8__Global__New (5 samples, 0.03%)</title><rect x="1.2037%" y="357" width="0.0320%" height="15" fill="rgb(206,27,48)" fg:x="188" fg:w="5"/><text x="1.4537%" y="367.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (4 samples, 0.03%)</title><rect x="1.2101%" y="341" width="0.0256%" height="15" fill="rgb(225,35,8)" fg:x="189" fg:w="4"/><text x="1.4601%" y="351.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.12%)</title><rect x="1.1396%" y="373" width="0.1152%" height="15" fill="rgb(250,213,24)" fg:x="178" fg:w="18"/><text x="1.3896%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="1.2357%" y="357" width="0.0192%" height="15" fill="rgb(247,123,22)" fg:x="193" fg:w="3"/><text x="1.4857%" y="367.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="1.2549%" y="373" width="0.0192%" height="15" fill="rgb(231,138,38)" fg:x="196" fg:w="3"/><text x="1.5049%" y="383.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="1.2741%" y="373" width="0.0256%" height="15" fill="rgb(231,145,46)" fg:x="199" fg:w="4"/><text x="1.5241%" y="383.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (2 samples, 0.01%)</title><rect x="1.4342%" y="341" width="0.0128%" height="15" fill="rgb(251,118,11)" fg:x="224" fg:w="2"/><text x="1.6842%" y="351.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="1.4534%" y="341" width="0.0128%" height="15" fill="rgb(217,147,25)" fg:x="227" fg:w="2"/><text x="1.7034%" y="351.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="1.4854%" y="325" width="0.0256%" height="15" fill="rgb(247,81,37)" fg:x="232" fg:w="4"/><text x="1.7354%" y="335.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.03%)</title><rect x="1.4854%" y="341" width="0.0320%" height="15" fill="rgb(209,12,38)" fg:x="232" fg:w="5"/><text x="1.7354%" y="351.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (8 samples, 0.05%)</title><rect x="1.5174%" y="341" width="0.0512%" height="15" fill="rgb(227,1,9)" fg:x="237" fg:w="8"/><text x="1.7674%" y="351.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (8 samples, 0.05%)</title><rect x="1.5686%" y="341" width="0.0512%" height="15" fill="rgb(248,47,43)" fg:x="245" fg:w="8"/><text x="1.8186%" y="351.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (50 samples, 0.32%)</title><rect x="1.3125%" y="357" width="0.3201%" height="15" fill="rgb(221,10,30)" fg:x="205" fg:w="50"/><text x="1.5625%" y="367.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (2 samples, 0.01%)</title><rect x="1.6198%" y="341" width="0.0128%" height="15" fill="rgb(210,229,1)" fg:x="253" fg:w="2"/><text x="1.8698%" y="351.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.01%)</title><rect x="1.6454%" y="357" width="0.0128%" height="15" fill="rgb(222,148,37)" fg:x="257" fg:w="2"/><text x="1.8954%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="1.6582%" y="357" width="0.0256%" height="15" fill="rgb(234,67,33)" fg:x="259" fg:w="4"/><text x="1.9082%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="1.6710%" y="341" width="0.0128%" height="15" fill="rgb(247,98,35)" fg:x="261" fg:w="2"/><text x="1.9210%" y="351.50"></text></g><g><title>deno`&lt;futures_util::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (61 samples, 0.39%)</title><rect x="1.2997%" y="373" width="0.3905%" height="15" fill="rgb(247,138,52)" fg:x="203" fg:w="61"/><text x="1.5497%" y="383.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (2 samples, 0.01%)</title><rect x="1.6902%" y="373" width="0.0128%" height="15" fill="rgb(213,79,30)" fg:x="264" fg:w="2"/><text x="1.9402%" y="383.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="1.7095%" y="373" width="0.0384%" height="15" fill="rgb(246,177,23)" fg:x="267" fg:w="6"/><text x="1.9595%" y="383.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3 (2 samples, 0.01%)</title><rect x="1.7799%" y="373" width="0.0128%" height="15" fill="rgb(230,62,27)" fg:x="278" fg:w="2"/><text x="2.0299%" y="383.50"></text></g><g><title>deno`__rust_alloc (2 samples, 0.01%)</title><rect x="1.7927%" y="373" width="0.0128%" height="15" fill="rgb(216,154,8)" fg:x="280" fg:w="2"/><text x="2.0427%" y="383.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.01%)</title><rect x="1.8055%" y="373" width="0.0128%" height="15" fill="rgb(244,35,45)" fg:x="282" fg:w="2"/><text x="2.0555%" y="383.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="1.8183%" y="373" width="0.0128%" height="15" fill="rgb(251,115,12)" fg:x="284" fg:w="2"/><text x="2.0683%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[v8::handle::Global&lt;v8::data::Value&gt;]&gt; (2 samples, 0.01%)</title><rect x="1.8311%" y="373" width="0.0128%" height="15" fill="rgb(240,54,50)" fg:x="286" fg:w="2"/><text x="2.0811%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="1.8439%" y="373" width="0.0192%" height="15" fill="rgb(233,84,52)" fg:x="288" fg:w="3"/><text x="2.0939%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;()&gt;+Output = ()&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="1.8631%" y="373" width="0.0128%" height="15" fill="rgb(207,117,47)" fg:x="291" fg:w="2"/><text x="2.1131%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;v8::handle::Global&lt;v8::data::Function&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="1.8759%" y="373" width="0.0128%" height="15" fill="rgb(249,43,39)" fg:x="293" fg:w="2"/><text x="2.1259%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (2 samples, 0.01%)</title><rect x="1.8951%" y="373" width="0.0128%" height="15" fill="rgb(209,38,44)" fg:x="296" fg:w="2"/><text x="2.1451%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.01%)</title><rect x="1.9463%" y="357" width="0.0128%" height="15" fill="rgb(236,212,23)" fg:x="304" fg:w="2"/><text x="2.1963%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt;&gt; (9 samples, 0.06%)</title><rect x="1.9079%" y="373" width="0.0576%" height="15" fill="rgb(242,79,21)" fg:x="298" fg:w="9"/><text x="2.1579%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.02%)</title><rect x="1.9656%" y="373" width="0.0192%" height="15" fill="rgb(211,96,35)" fg:x="307" fg:w="3"/><text x="2.2156%" y="383.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (5 samples, 0.03%)</title><rect x="1.9848%" y="373" width="0.0320%" height="15" fill="rgb(253,215,40)" fg:x="310" fg:w="5"/><text x="2.2348%" y="383.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (7 samples, 0.04%)</title><rect x="2.0168%" y="373" width="0.0448%" height="15" fill="rgb(211,81,21)" fg:x="315" fg:w="7"/><text x="2.2668%" y="383.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (3 samples, 0.02%)</title><rect x="2.0424%" y="357" width="0.0192%" height="15" fill="rgb(208,190,38)" fg:x="319" fg:w="3"/><text x="2.2924%" y="367.50"></text></g><g><title>deno`v8::Integer::New (2 samples, 0.01%)</title><rect x="2.0488%" y="341" width="0.0128%" height="15" fill="rgb(235,213,38)" fg:x="320" fg:w="2"/><text x="2.2988%" y="351.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::handle_scope (8 samples, 0.05%)</title><rect x="2.0616%" y="373" width="0.0512%" height="15" fill="rgb(237,122,38)" fg:x="322" fg:w="8"/><text x="2.3116%" y="383.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::evaluate_pending_module (2 samples, 0.01%)</title><rect x="2.1128%" y="373" width="0.0128%" height="15" fill="rgb(244,218,35)" fg:x="330" fg:w="2"/><text x="2.3628%" y="383.50"></text></g><g><title>deno`v8::internal::wasm::GetWasmEngine (2 samples, 0.01%)</title><rect x="2.1576%" y="357" width="0.0128%" height="15" fill="rgb(240,68,47)" fg:x="337" fg:w="2"/><text x="2.4076%" y="367.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (4 samples, 0.03%)</title><rect x="2.1704%" y="357" width="0.0256%" height="15" fill="rgb(210,16,53)" fg:x="339" fg:w="4"/><text x="2.4204%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.03%)</title><rect x="2.1704%" y="341" width="0.0256%" height="15" fill="rgb(235,124,12)" fg:x="339" fg:w="4"/><text x="2.4204%" y="351.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (12 samples, 0.08%)</title><rect x="2.1256%" y="373" width="0.0768%" height="15" fill="rgb(224,169,11)" fg:x="332" fg:w="12"/><text x="2.3756%" y="383.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (2 samples, 0.01%)</title><rect x="2.2024%" y="373" width="0.0128%" height="15" fill="rgb(250,166,2)" fg:x="344" fg:w="2"/><text x="2.4524%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.01%)</title><rect x="2.2281%" y="357" width="0.0128%" height="15" fill="rgb(242,216,29)" fg:x="348" fg:w="2"/><text x="2.4781%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (4 samples, 0.03%)</title><rect x="2.2665%" y="341" width="0.0256%" height="15" fill="rgb(230,116,27)" fg:x="354" fg:w="4"/><text x="2.5165%" y="351.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (2 samples, 0.01%)</title><rect x="2.2793%" y="325" width="0.0128%" height="15" fill="rgb(228,99,48)" fg:x="356" fg:w="2"/><text x="2.5293%" y="335.50"></text></g><g><title>deno`v8::Context::Enter (6 samples, 0.04%)</title><rect x="2.2921%" y="341" width="0.0384%" height="15" fill="rgb(253,11,6)" fg:x="358" fg:w="6"/><text x="2.5421%" y="351.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (4 samples, 0.03%)</title><rect x="2.3369%" y="341" width="0.0256%" height="15" fill="rgb(247,143,39)" fg:x="365" fg:w="4"/><text x="2.5869%" y="351.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (4 samples, 0.03%)</title><rect x="2.3369%" y="325" width="0.0256%" height="15" fill="rgb(236,97,10)" fg:x="365" fg:w="4"/><text x="2.5869%" y="335.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::handle_scope (23 samples, 0.15%)</title><rect x="2.2409%" y="357" width="0.1473%" height="15" fill="rgb(233,208,19)" fg:x="350" fg:w="23"/><text x="2.4909%" y="367.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (9 samples, 0.06%)</title><rect x="2.4073%" y="341" width="0.0576%" height="15" fill="rgb(216,164,2)" fg:x="376" fg:w="9"/><text x="2.6573%" y="351.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (3 samples, 0.02%)</title><rect x="2.4713%" y="341" width="0.0192%" height="15" fill="rgb(220,129,5)" fg:x="386" fg:w="3"/><text x="2.7213%" y="351.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (17 samples, 0.11%)</title><rect x="2.3881%" y="357" width="0.1088%" height="15" fill="rgb(242,17,10)" fg:x="373" fg:w="17"/><text x="2.6381%" y="367.50"></text></g><g><title>deno`v8::Context::Enter (3 samples, 0.02%)</title><rect x="2.4970%" y="357" width="0.0192%" height="15" fill="rgb(242,107,0)" fg:x="390" fg:w="3"/><text x="2.7470%" y="367.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (6 samples, 0.04%)</title><rect x="2.5226%" y="357" width="0.0384%" height="15" fill="rgb(251,28,31)" fg:x="394" fg:w="6"/><text x="2.7726%" y="367.50"></text></g><g><title>deno`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (2 samples, 0.01%)</title><rect x="2.5674%" y="357" width="0.0128%" height="15" fill="rgb(233,223,10)" fg:x="401" fg:w="2"/><text x="2.8174%" y="367.50"></text></g><g><title>deno`v8__Global__New (2 samples, 0.01%)</title><rect x="2.5802%" y="357" width="0.0128%" height="15" fill="rgb(215,21,27)" fg:x="403" fg:w="2"/><text x="2.8302%" y="367.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (60 samples, 0.38%)</title><rect x="2.2153%" y="373" width="0.3841%" height="15" fill="rgb(232,23,21)" fg:x="346" fg:w="60"/><text x="2.4653%" y="383.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_dyn_imports (5 samples, 0.03%)</title><rect x="2.5994%" y="373" width="0.0320%" height="15" fill="rgb(244,5,23)" fg:x="406" fg:w="5"/><text x="2.8494%" y="383.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (5 samples, 0.03%)</title><rect x="2.6442%" y="357" width="0.0320%" height="15" fill="rgb(226,81,46)" fg:x="413" fg:w="5"/><text x="2.8942%" y="367.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (8 samples, 0.05%)</title><rect x="2.6314%" y="373" width="0.0512%" height="15" fill="rgb(247,70,30)" fg:x="411" fg:w="8"/><text x="2.8814%" y="383.50"></text></g><g><title>deno`OUTLINED_FUNCTION_28809 (2 samples, 0.01%)</title><rect x="2.7210%" y="357" width="0.0128%" height="15" fill="rgb(212,68,19)" fg:x="425" fg:w="2"/><text x="2.9710%" y="367.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (5 samples, 0.03%)</title><rect x="2.7403%" y="357" width="0.0320%" height="15" fill="rgb(240,187,13)" fg:x="428" fg:w="5"/><text x="2.9903%" y="367.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (3 samples, 0.02%)</title><rect x="2.7723%" y="357" width="0.0192%" height="15" fill="rgb(223,113,26)" fg:x="433" fg:w="3"/><text x="3.0223%" y="367.50"></text></g><g><title>deno`deno_napi::init::_{{closure}} (19 samples, 0.12%)</title><rect x="2.6826%" y="373" width="0.1216%" height="15" fill="rgb(206,192,2)" fg:x="419" fg:w="19"/><text x="2.9326%" y="383.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (2 samples, 0.01%)</title><rect x="2.7915%" y="357" width="0.0128%" height="15" fill="rgb(241,108,4)" fg:x="436" fg:w="2"/><text x="3.0415%" y="367.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (6 samples, 0.04%)</title><rect x="2.8043%" y="373" width="0.0384%" height="15" fill="rgb(247,173,49)" fg:x="438" fg:w="6"/><text x="3.0543%" y="383.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (9 samples, 0.06%)</title><rect x="2.8427%" y="373" width="0.0576%" height="15" fill="rgb(224,114,35)" fg:x="444" fg:w="9"/><text x="3.0927%" y="383.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (4 samples, 0.03%)</title><rect x="2.9003%" y="373" width="0.0256%" height="15" fill="rgb(245,159,27)" fg:x="453" fg:w="4"/><text x="3.1503%" y="383.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (86 samples, 0.55%)</title><rect x="2.9387%" y="373" width="0.5506%" height="15" fill="rgb(245,172,44)" fg:x="459" fg:w="86"/><text x="3.1887%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`kevent (85 samples, 0.54%)</title><rect x="2.9451%" y="357" width="0.5442%" height="15" fill="rgb(236,23,11)" fg:x="460" fg:w="85"/><text x="3.1951%" y="367.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (2 samples, 0.01%)</title><rect x="3.4893%" y="373" width="0.0128%" height="15" fill="rgb(205,117,38)" fg:x="545" fg:w="2"/><text x="3.7393%" y="383.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.01%)</title><rect x="3.5021%" y="373" width="0.0128%" height="15" fill="rgb(237,72,25)" fg:x="547" fg:w="2"/><text x="3.7521%" y="383.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (4 samples, 0.03%)</title><rect x="3.5982%" y="357" width="0.0256%" height="15" fill="rgb(244,70,9)" fg:x="562" fg:w="4"/><text x="3.8482%" y="367.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.01%)</title><rect x="3.6238%" y="357" width="0.0128%" height="15" fill="rgb(217,125,39)" fg:x="566" fg:w="2"/><text x="3.8738%" y="367.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.01%)</title><rect x="3.6366%" y="357" width="0.0128%" height="15" fill="rgb(235,36,10)" fg:x="568" fg:w="2"/><text x="3.8866%" y="367.50"></text></g><g><title>0x11001cc60 (2 samples, 0.01%)</title><rect x="3.7646%" y="309" width="0.0128%" height="15" fill="rgb(251,123,47)" fg:x="588" fg:w="2"/><text x="4.0146%" y="319.50"></text></g><g><title>0x110034ea0 (7 samples, 0.04%)</title><rect x="3.7775%" y="309" width="0.0448%" height="15" fill="rgb(221,13,13)" fg:x="590" fg:w="7"/><text x="4.0275%" y="319.50"></text></g><g><title>0x110035da0 (4 samples, 0.03%)</title><rect x="3.8287%" y="309" width="0.0256%" height="15" fill="rgb(238,131,9)" fg:x="598" fg:w="4"/><text x="4.0787%" y="319.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (4 samples, 0.03%)</title><rect x="3.8543%" y="309" width="0.0256%" height="15" fill="rgb(211,50,8)" fg:x="602" fg:w="4"/><text x="4.1043%" y="319.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (2 samples, 0.01%)</title><rect x="3.8799%" y="309" width="0.0128%" height="15" fill="rgb(245,182,24)" fg:x="606" fg:w="2"/><text x="4.1299%" y="319.50"></text></g><g><title>0x110035f80 (2 samples, 0.01%)</title><rect x="3.9439%" y="293" width="0.0128%" height="15" fill="rgb(242,14,37)" fg:x="616" fg:w="2"/><text x="4.1939%" y="303.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (9 samples, 0.06%)</title><rect x="3.9567%" y="277" width="0.0576%" height="15" fill="rgb(246,228,12)" fg:x="618" fg:w="9"/><text x="4.2067%" y="287.50"></text></g><g><title>deno`Builtins_ResolvePromise (7 samples, 0.04%)</title><rect x="3.9695%" y="261" width="0.0448%" height="15" fill="rgb(213,55,15)" fg:x="620" fg:w="7"/><text x="4.2195%" y="271.50"></text></g><g><title>deno`Builtins_FulfillPromise (4 samples, 0.03%)</title><rect x="3.9887%" y="245" width="0.0256%" height="15" fill="rgb(209,9,3)" fg:x="623" fg:w="4"/><text x="4.2387%" y="255.50"></text></g><g><title>0x110035fbc (13 samples, 0.08%)</title><rect x="3.9567%" y="293" width="0.0832%" height="15" fill="rgb(230,59,30)" fg:x="618" fg:w="13"/><text x="4.2067%" y="303.50"></text></g><g><title>deno`Builtins_ResolvePromise (4 samples, 0.03%)</title><rect x="4.0143%" y="277" width="0.0256%" height="15" fill="rgb(209,121,21)" fg:x="627" fg:w="4"/><text x="4.2643%" y="287.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (5 samples, 0.03%)</title><rect x="4.0400%" y="293" width="0.0320%" height="15" fill="rgb(220,109,13)" fg:x="631" fg:w="5"/><text x="4.2900%" y="303.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNotNullOrUndefined (2 samples, 0.01%)</title><rect x="4.0784%" y="293" width="0.0128%" height="15" fill="rgb(232,18,1)" fg:x="637" fg:w="2"/><text x="4.3284%" y="303.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (68 samples, 0.44%)</title><rect x="3.6686%" y="341" width="0.4354%" height="15" fill="rgb(215,41,42)" fg:x="573" fg:w="68"/><text x="3.9186%" y="351.50"></text></g><g><title>deno`Builtins_JSEntry (58 samples, 0.37%)</title><rect x="3.7326%" y="325" width="0.3713%" height="15" fill="rgb(224,123,36)" fg:x="583" fg:w="58"/><text x="3.9826%" y="335.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (33 samples, 0.21%)</title><rect x="3.8927%" y="309" width="0.2113%" height="15" fill="rgb(240,125,3)" fg:x="608" fg:w="33"/><text x="4.1427%" y="319.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (5 samples, 0.03%)</title><rect x="4.1040%" y="341" width="0.0320%" height="15" fill="rgb(205,98,50)" fg:x="641" fg:w="5"/><text x="4.3540%" y="351.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (2 samples, 0.01%)</title><rect x="4.1360%" y="341" width="0.0128%" height="15" fill="rgb(205,185,37)" fg:x="646" fg:w="2"/><text x="4.3860%" y="351.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (80 samples, 0.51%)</title><rect x="3.6494%" y="357" width="0.5122%" height="15" fill="rgb(238,207,15)" fg:x="570" fg:w="80"/><text x="3.8994%" y="367.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (5 samples, 0.03%)</title><rect x="4.1616%" y="357" width="0.0320%" height="15" fill="rgb(213,199,42)" fg:x="650" fg:w="5"/><text x="4.4116%" y="367.50"></text></g><g><title>0x110015630 (3 samples, 0.02%)</title><rect x="4.4753%" y="181" width="0.0192%" height="15" fill="rgb(235,201,11)" fg:x="699" fg:w="3"/><text x="4.7253%" y="191.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (3 samples, 0.02%)</title><rect x="4.4753%" y="165" width="0.0192%" height="15" fill="rgb(207,46,11)" fg:x="699" fg:w="3"/><text x="4.7253%" y="175.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.02%)</title><rect x="4.4753%" y="149" width="0.0192%" height="15" fill="rgb(241,35,35)" fg:x="699" fg:w="3"/><text x="4.7253%" y="159.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (3 samples, 0.02%)</title><rect x="4.4753%" y="133" width="0.0192%" height="15" fill="rgb(243,32,47)" fg:x="699" fg:w="3"/><text x="4.7253%" y="143.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.02%)</title><rect x="4.4753%" y="117" width="0.0192%" height="15" fill="rgb(247,202,23)" fg:x="699" fg:w="3"/><text x="4.7253%" y="127.50"></text></g><g><title>deno`deno_flash::next_request_sync (3 samples, 0.02%)</title><rect x="4.4753%" y="101" width="0.0192%" height="15" fill="rgb(219,102,11)" fg:x="699" fg:w="3"/><text x="4.7253%" y="111.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.01%)</title><rect x="4.4817%" y="85" width="0.0128%" height="15" fill="rgb(243,110,44)" fg:x="700" fg:w="2"/><text x="4.7317%" y="95.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.01%)</title><rect x="4.5009%" y="149" width="0.0128%" height="15" fill="rgb(222,74,54)" fg:x="703" fg:w="2"/><text x="4.7509%" y="159.50"></text></g><g><title>deno`deno_flash::next_request_sync (4 samples, 0.03%)</title><rect x="4.4945%" y="165" width="0.0256%" height="15" fill="rgb(216,99,12)" fg:x="702" fg:w="4"/><text x="4.7445%" y="175.50"></text></g><g><title>0x11000ea64 (8 samples, 0.05%)</title><rect x="4.4753%" y="197" width="0.0512%" height="15" fill="rgb(226,22,26)" fg:x="699" fg:w="8"/><text x="4.7253%" y="207.50"></text></g><g><title>0x1100289c4 (5 samples, 0.03%)</title><rect x="4.4945%" y="181" width="0.0320%" height="15" fill="rgb(217,163,10)" fg:x="702" fg:w="5"/><text x="4.7445%" y="191.50"></text></g><g><title>0x11000eb80 (3 samples, 0.02%)</title><rect x="4.5265%" y="197" width="0.0192%" height="15" fill="rgb(213,25,53)" fg:x="707" fg:w="3"/><text x="4.7765%" y="207.50"></text></g><g><title>0x110034d8c (2 samples, 0.01%)</title><rect x="4.5329%" y="181" width="0.0128%" height="15" fill="rgb(252,105,26)" fg:x="708" fg:w="2"/><text x="4.7829%" y="191.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="4.5586%" y="181" width="0.0128%" height="15" fill="rgb(220,39,43)" fg:x="712" fg:w="2"/><text x="4.8086%" y="191.50"></text></g><g><title>deno`v8::internal::Runtime_PushBlockContext (2 samples, 0.01%)</title><rect x="4.5586%" y="165" width="0.0128%" height="15" fill="rgb(229,68,48)" fg:x="712" fg:w="2"/><text x="4.8086%" y="175.50"></text></g><g><title>0x11000ef98 (3 samples, 0.02%)</title><rect x="4.5586%" y="197" width="0.0192%" height="15" fill="rgb(252,8,32)" fg:x="712" fg:w="3"/><text x="4.8086%" y="207.50"></text></g><g><title>0x11000f168 (2 samples, 0.01%)</title><rect x="4.5778%" y="197" width="0.0128%" height="15" fill="rgb(223,20,43)" fg:x="715" fg:w="2"/><text x="4.8278%" y="207.50"></text></g><g><title>0x11001f6f4 (2 samples, 0.01%)</title><rect x="4.5778%" y="181" width="0.0128%" height="15" fill="rgb(229,81,49)" fg:x="715" fg:w="2"/><text x="4.8278%" y="191.50"></text></g><g><title>deno`deno_flash::op_flash_get_method_fast (2 samples, 0.01%)</title><rect x="4.5778%" y="165" width="0.0128%" height="15" fill="rgb(236,28,36)" fg:x="715" fg:w="2"/><text x="4.8278%" y="175.50"></text></g><g><title>0x11000e634 (3 samples, 0.02%)</title><rect x="4.5970%" y="181" width="0.0192%" height="15" fill="rgb(249,185,26)" fg:x="718" fg:w="3"/><text x="4.8470%" y="191.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="4.5970%" y="165" width="0.0192%" height="15" fill="rgb(249,174,33)" fg:x="718" fg:w="3"/><text x="4.8470%" y="175.50"></text></g><g><title>deno`v8::internal::Runtime_NewClosure_Tenured (3 samples, 0.02%)</title><rect x="4.5970%" y="149" width="0.0192%" height="15" fill="rgb(233,201,37)" fg:x="718" fg:w="3"/><text x="4.8470%" y="159.50"></text></g><g><title>deno`v8::internal::Factory::JSFunctionBuilder::Build (3 samples, 0.02%)</title><rect x="4.5970%" y="133" width="0.0192%" height="15" fill="rgb(221,78,26)" fg:x="718" fg:w="3"/><text x="4.8470%" y="143.50"></text></g><g><title>0x11000f510 (7 samples, 0.04%)</title><rect x="4.5906%" y="197" width="0.0448%" height="15" fill="rgb(250,127,30)" fg:x="717" fg:w="7"/><text x="4.8406%" y="207.50"></text></g><g><title>0x11000e040 (2 samples, 0.01%)</title><rect x="4.6418%" y="181" width="0.0128%" height="15" fill="rgb(230,49,44)" fg:x="725" fg:w="2"/><text x="4.8918%" y="191.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (2 samples, 0.01%)</title><rect x="4.6418%" y="165" width="0.0128%" height="15" fill="rgb(229,67,23)" fg:x="725" fg:w="2"/><text x="4.8918%" y="175.50"></text></g><g><title>0x11001a8bc (2 samples, 0.01%)</title><rect x="4.6610%" y="149" width="0.0128%" height="15" fill="rgb(249,83,47)" fg:x="728" fg:w="2"/><text x="4.9110%" y="159.50"></text></g><g><title>0x11000f5d0 (6 samples, 0.04%)</title><rect x="4.6418%" y="197" width="0.0384%" height="15" fill="rgb(215,43,3)" fg:x="725" fg:w="6"/><text x="4.8918%" y="207.50"></text></g><g><title>0x11001fb80 (4 samples, 0.03%)</title><rect x="4.6546%" y="181" width="0.0256%" height="15" fill="rgb(238,154,13)" fg:x="727" fg:w="4"/><text x="4.9046%" y="191.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (4 samples, 0.03%)</title><rect x="4.6546%" y="165" width="0.0256%" height="15" fill="rgb(219,56,2)" fg:x="727" fg:w="4"/><text x="4.9046%" y="175.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (7 samples, 0.04%)</title><rect x="4.6930%" y="69" width="0.0448%" height="15" fill="rgb(233,0,4)" fg:x="733" fg:w="7"/><text x="4.9430%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (7 samples, 0.04%)</title><rect x="4.6930%" y="53" width="0.0448%" height="15" fill="rgb(235,30,7)" fg:x="733" fg:w="7"/><text x="4.9430%" y="63.50"></text></g><g><title>0x1100130bc (8 samples, 0.05%)</title><rect x="4.6930%" y="181" width="0.0512%" height="15" fill="rgb(250,79,13)" fg:x="733" fg:w="8"/><text x="4.9430%" y="191.50"></text></g><g><title>0x1100113cc (8 samples, 0.05%)</title><rect x="4.6930%" y="165" width="0.0512%" height="15" fill="rgb(211,146,34)" fg:x="733" fg:w="8"/><text x="4.9430%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (8 samples, 0.05%)</title><rect x="4.6930%" y="149" width="0.0512%" height="15" fill="rgb(228,22,38)" fg:x="733" fg:w="8"/><text x="4.9430%" y="159.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (8 samples, 0.05%)</title><rect x="4.6930%" y="133" width="0.0512%" height="15" fill="rgb(235,168,5)" fg:x="733" fg:w="8"/><text x="4.9430%" y="143.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (8 samples, 0.05%)</title><rect x="4.6930%" y="117" width="0.0512%" height="15" fill="rgb(221,155,16)" fg:x="733" fg:w="8"/><text x="4.9430%" y="127.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (8 samples, 0.05%)</title><rect x="4.6930%" y="101" width="0.0512%" height="15" fill="rgb(215,215,53)" fg:x="733" fg:w="8"/><text x="4.9430%" y="111.50"></text></g><g><title>deno`deno_flash::flash_respond (8 samples, 0.05%)</title><rect x="4.6930%" y="85" width="0.0512%" height="15" fill="rgb(223,4,10)" fg:x="733" fg:w="8"/><text x="4.9430%" y="95.50"></text></g><g><title>0x11001b704 (5 samples, 0.03%)</title><rect x="4.7506%" y="181" width="0.0320%" height="15" fill="rgb(234,103,6)" fg:x="742" fg:w="5"/><text x="5.0006%" y="191.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (2 samples, 0.01%)</title><rect x="4.7698%" y="165" width="0.0128%" height="15" fill="rgb(227,97,0)" fg:x="745" fg:w="2"/><text x="5.0198%" y="175.50"></text></g><g><title>0x11001b9c0 (2 samples, 0.01%)</title><rect x="4.7890%" y="181" width="0.0128%" height="15" fill="rgb(234,150,53)" fg:x="748" fg:w="2"/><text x="5.0390%" y="191.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="4.8403%" y="117" width="0.0128%" height="15" fill="rgb(228,201,54)" fg:x="756" fg:w="2"/><text x="5.0903%" y="127.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (153 samples, 0.98%)</title><rect x="4.8531%" y="117" width="0.9796%" height="15" fill="rgb(222,22,37)" fg:x="758" fg:w="153"/><text x="5.1031%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (150 samples, 0.96%)</title><rect x="4.8723%" y="101" width="0.9604%" height="15" fill="rgb(237,53,32)" fg:x="761" fg:w="150"/><text x="5.1223%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="5.8390%" y="117" width="0.0192%" height="15" fill="rgb(233,25,53)" fg:x="912" fg:w="3"/><text x="6.0890%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="5.8454%" y="101" width="0.0128%" height="15" fill="rgb(210,40,34)" fg:x="913" fg:w="2"/><text x="6.0954%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.01%)</title><rect x="5.8839%" y="101" width="0.0128%" height="15" fill="rgb(241,220,44)" fg:x="919" fg:w="2"/><text x="6.1339%" y="111.50"></text></g><g><title>deno`deno_flash::flash_respond (172 samples, 1.10%)</title><rect x="4.8211%" y="133" width="1.1012%" height="15" fill="rgb(235,28,35)" fg:x="753" fg:w="172"/><text x="5.0711%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.06%)</title><rect x="5.8582%" y="117" width="0.0640%" height="15" fill="rgb(210,56,17)" fg:x="915" fg:w="10"/><text x="6.1082%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="5.9031%" y="101" width="0.0192%" height="15" fill="rgb(224,130,29)" fg:x="922" fg:w="3"/><text x="6.1531%" y="111.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (2 samples, 0.01%)</title><rect x="5.9351%" y="69" width="0.0128%" height="15" fill="rgb(235,212,8)" fg:x="927" fg:w="2"/><text x="6.1851%" y="79.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (2 samples, 0.01%)</title><rect x="5.9351%" y="53" width="0.0128%" height="15" fill="rgb(223,33,50)" fg:x="927" fg:w="2"/><text x="6.1851%" y="63.50"></text></g><g><title>deno`v8::String::WriteUtf8 (9 samples, 0.06%)</title><rect x="5.9223%" y="101" width="0.0576%" height="15" fill="rgb(219,149,13)" fg:x="925" fg:w="9"/><text x="6.1723%" y="111.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (7 samples, 0.04%)</title><rect x="5.9351%" y="85" width="0.0448%" height="15" fill="rgb(250,156,29)" fg:x="927" fg:w="7"/><text x="6.1851%" y="95.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (5 samples, 0.03%)</title><rect x="5.9479%" y="69" width="0.0320%" height="15" fill="rgb(216,193,19)" fg:x="929" fg:w="5"/><text x="6.1979%" y="79.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8_uninit (11 samples, 0.07%)</title><rect x="5.9223%" y="117" width="0.0704%" height="15" fill="rgb(216,135,14)" fg:x="925" fg:w="11"/><text x="6.1723%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="5.9799%" y="101" width="0.0128%" height="15" fill="rgb(241,47,5)" fg:x="934" fg:w="2"/><text x="6.2299%" y="111.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (12 samples, 0.08%)</title><rect x="5.9223%" y="133" width="0.0768%" height="15" fill="rgb(233,42,35)" fg:x="925" fg:w="12"/><text x="6.1723%" y="143.50"></text></g><g><title>0x11001bbf4 (188 samples, 1.20%)</title><rect x="4.8018%" y="181" width="1.2037%" height="15" fill="rgb(231,13,6)" fg:x="750" fg:w="188"/><text x="5.0518%" y="191.50"></text></g><g><title>deno`Builtins_CallApiCallback (188 samples, 1.20%)</title><rect x="4.8018%" y="165" width="1.2037%" height="15" fill="rgb(207,181,40)" fg:x="750" fg:w="188"/><text x="5.0518%" y="175.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (188 samples, 1.20%)</title><rect x="4.8018%" y="149" width="1.2037%" height="15" fill="rgb(254,173,49)" fg:x="750" fg:w="188"/><text x="5.0518%" y="159.50"></text></g><g><title>0x11000fd2c (207 samples, 1.33%)</title><rect x="4.6866%" y="197" width="1.3253%" height="15" fill="rgb(221,1,38)" fg:x="732" fg:w="207"/><text x="4.9366%" y="207.50"></text></g><g><title>0x1100209dc (2 samples, 0.01%)</title><rect x="6.0311%" y="197" width="0.0128%" height="15" fill="rgb(206,124,46)" fg:x="942" fg:w="2"/><text x="6.2811%" y="207.50"></text></g><g><title>0x11001bbf4 (2 samples, 0.01%)</title><rect x="6.0311%" y="181" width="0.0128%" height="15" fill="rgb(249,21,11)" fg:x="942" fg:w="2"/><text x="6.2811%" y="191.50"></text></g><g><title>deno`Builtins_CallApiCallback (2 samples, 0.01%)</title><rect x="6.0311%" y="165" width="0.0128%" height="15" fill="rgb(222,201,40)" fg:x="942" fg:w="2"/><text x="6.2811%" y="175.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.01%)</title><rect x="6.0311%" y="149" width="0.0128%" height="15" fill="rgb(235,61,29)" fg:x="942" fg:w="2"/><text x="6.2811%" y="159.50"></text></g><g><title>deno`deno_flash::flash_respond (2 samples, 0.01%)</title><rect x="6.0311%" y="133" width="0.0128%" height="15" fill="rgb(219,207,3)" fg:x="942" fg:w="2"/><text x="6.2811%" y="143.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (2 samples, 0.01%)</title><rect x="6.0311%" y="117" width="0.0128%" height="15" fill="rgb(222,56,46)" fg:x="942" fg:w="2"/><text x="6.2811%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="6.0311%" y="101" width="0.0128%" height="15" fill="rgb(239,76,54)" fg:x="942" fg:w="2"/><text x="6.2811%" y="111.50"></text></g><g><title>0x11002369c (2 samples, 0.01%)</title><rect x="6.0567%" y="197" width="0.0128%" height="15" fill="rgb(231,124,27)" fg:x="946" fg:w="2"/><text x="6.3067%" y="207.50"></text></g><g><title>0x11001bbf4 (2 samples, 0.01%)</title><rect x="6.0567%" y="181" width="0.0128%" height="15" fill="rgb(249,195,6)" fg:x="946" fg:w="2"/><text x="6.3067%" y="191.50"></text></g><g><title>deno`Builtins_CallApiCallback (2 samples, 0.01%)</title><rect x="6.0567%" y="165" width="0.0128%" height="15" fill="rgb(237,174,47)" fg:x="946" fg:w="2"/><text x="6.3067%" y="175.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.01%)</title><rect x="6.0567%" y="149" width="0.0128%" height="15" fill="rgb(206,201,31)" fg:x="946" fg:w="2"/><text x="6.3067%" y="159.50"></text></g><g><title>deno`deno_flash::flash_respond (2 samples, 0.01%)</title><rect x="6.0567%" y="133" width="0.0128%" height="15" fill="rgb(231,57,52)" fg:x="946" fg:w="2"/><text x="6.3067%" y="143.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (2 samples, 0.01%)</title><rect x="6.0567%" y="117" width="0.0128%" height="15" fill="rgb(248,177,22)" fg:x="946" fg:w="2"/><text x="6.3067%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="6.0567%" y="101" width="0.0128%" height="15" fill="rgb(215,211,37)" fg:x="946" fg:w="2"/><text x="6.3067%" y="111.50"></text></g><g><title>0x1100270dc (4 samples, 0.03%)</title><rect x="6.0823%" y="197" width="0.0256%" height="15" fill="rgb(241,128,51)" fg:x="950" fg:w="4"/><text x="6.3323%" y="207.50"></text></g><g><title>0x11001bbf4 (4 samples, 0.03%)</title><rect x="6.0823%" y="181" width="0.0256%" height="15" fill="rgb(227,165,31)" fg:x="950" fg:w="4"/><text x="6.3323%" y="191.50"></text></g><g><title>deno`Builtins_CallApiCallback (4 samples, 0.03%)</title><rect x="6.0823%" y="165" width="0.0256%" height="15" fill="rgb(228,167,24)" fg:x="950" fg:w="4"/><text x="6.3323%" y="175.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (4 samples, 0.03%)</title><rect x="6.0823%" y="149" width="0.0256%" height="15" fill="rgb(228,143,12)" fg:x="950" fg:w="4"/><text x="6.3323%" y="159.50"></text></g><g><title>deno`deno_flash::flash_respond (4 samples, 0.03%)</title><rect x="6.0823%" y="133" width="0.0256%" height="15" fill="rgb(249,149,8)" fg:x="950" fg:w="4"/><text x="6.3323%" y="143.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (4 samples, 0.03%)</title><rect x="6.0823%" y="117" width="0.0256%" height="15" fill="rgb(243,35,44)" fg:x="950" fg:w="4"/><text x="6.3323%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (4 samples, 0.03%)</title><rect x="6.0823%" y="101" width="0.0256%" height="15" fill="rgb(246,89,9)" fg:x="950" fg:w="4"/><text x="6.3323%" y="111.50"></text></g><g><title>0x1100307bc (3 samples, 0.02%)</title><rect x="6.1272%" y="197" width="0.0192%" height="15" fill="rgb(233,213,13)" fg:x="957" fg:w="3"/><text x="6.3772%" y="207.50"></text></g><g><title>0x11001bbf4 (3 samples, 0.02%)</title><rect x="6.1272%" y="181" width="0.0192%" height="15" fill="rgb(233,141,41)" fg:x="957" fg:w="3"/><text x="6.3772%" y="191.50"></text></g><g><title>deno`Builtins_CallApiCallback (3 samples, 0.02%)</title><rect x="6.1272%" y="165" width="0.0192%" height="15" fill="rgb(239,167,4)" fg:x="957" fg:w="3"/><text x="6.3772%" y="175.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.02%)</title><rect x="6.1272%" y="149" width="0.0192%" height="15" fill="rgb(209,217,16)" fg:x="957" fg:w="3"/><text x="6.3772%" y="159.50"></text></g><g><title>deno`deno_flash::flash_respond (3 samples, 0.02%)</title><rect x="6.1272%" y="133" width="0.0192%" height="15" fill="rgb(219,88,35)" fg:x="957" fg:w="3"/><text x="6.3772%" y="143.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (3 samples, 0.02%)</title><rect x="6.1272%" y="117" width="0.0192%" height="15" fill="rgb(220,193,23)" fg:x="957" fg:w="3"/><text x="6.3772%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (3 samples, 0.02%)</title><rect x="6.1272%" y="101" width="0.0192%" height="15" fill="rgb(230,90,52)" fg:x="957" fg:w="3"/><text x="6.3772%" y="111.50"></text></g><g><title>0x1100330fc (2 samples, 0.01%)</title><rect x="6.1464%" y="197" width="0.0128%" height="15" fill="rgb(252,106,19)" fg:x="960" fg:w="2"/><text x="6.3964%" y="207.50"></text></g><g><title>0x11001bbf4 (2 samples, 0.01%)</title><rect x="6.1464%" y="181" width="0.0128%" height="15" fill="rgb(206,74,20)" fg:x="960" fg:w="2"/><text x="6.3964%" y="191.50"></text></g><g><title>deno`Builtins_CallApiCallback (2 samples, 0.01%)</title><rect x="6.1464%" y="165" width="0.0128%" height="15" fill="rgb(230,138,44)" fg:x="960" fg:w="2"/><text x="6.3964%" y="175.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.01%)</title><rect x="6.1464%" y="149" width="0.0128%" height="15" fill="rgb(235,182,43)" fg:x="960" fg:w="2"/><text x="6.3964%" y="159.50"></text></g><g><title>deno`deno_flash::flash_respond (2 samples, 0.01%)</title><rect x="6.1464%" y="133" width="0.0128%" height="15" fill="rgb(242,16,51)" fg:x="960" fg:w="2"/><text x="6.3964%" y="143.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (2 samples, 0.01%)</title><rect x="6.1464%" y="117" width="0.0128%" height="15" fill="rgb(248,9,4)" fg:x="960" fg:w="2"/><text x="6.3964%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="6.1464%" y="101" width="0.0128%" height="15" fill="rgb(210,31,22)" fg:x="960" fg:w="2"/><text x="6.3964%" y="111.50"></text></g><g><title>0x110035bfc (2 samples, 0.01%)</title><rect x="6.1592%" y="197" width="0.0128%" height="15" fill="rgb(239,54,39)" fg:x="962" fg:w="2"/><text x="6.4092%" y="207.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (2 samples, 0.01%)</title><rect x="6.1848%" y="117" width="0.0128%" height="15" fill="rgb(230,99,41)" fg:x="966" fg:w="2"/><text x="6.4348%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="6.1848%" y="101" width="0.0128%" height="15" fill="rgb(253,106,12)" fg:x="966" fg:w="2"/><text x="6.4348%" y="111.50"></text></g><g><title>0x11003853c (4 samples, 0.03%)</title><rect x="6.1784%" y="197" width="0.0256%" height="15" fill="rgb(213,46,41)" fg:x="965" fg:w="4"/><text x="6.4284%" y="207.50"></text></g><g><title>0x11001bbf4 (4 samples, 0.03%)</title><rect x="6.1784%" y="181" width="0.0256%" height="15" fill="rgb(215,133,35)" fg:x="965" fg:w="4"/><text x="6.4284%" y="191.50"></text></g><g><title>deno`Builtins_CallApiCallback (4 samples, 0.03%)</title><rect x="6.1784%" y="165" width="0.0256%" height="15" fill="rgb(213,28,5)" fg:x="965" fg:w="4"/><text x="6.4284%" y="175.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (4 samples, 0.03%)</title><rect x="6.1784%" y="149" width="0.0256%" height="15" fill="rgb(215,77,49)" fg:x="965" fg:w="4"/><text x="6.4284%" y="159.50"></text></g><g><title>deno`deno_flash::flash_respond (3 samples, 0.02%)</title><rect x="6.1848%" y="133" width="0.0192%" height="15" fill="rgb(248,100,22)" fg:x="966" fg:w="3"/><text x="6.4348%" y="143.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (12 samples, 0.08%)</title><rect x="6.2360%" y="117" width="0.0768%" height="15" fill="rgb(208,67,9)" fg:x="974" fg:w="12"/><text x="6.4860%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (11 samples, 0.07%)</title><rect x="6.2424%" y="101" width="0.0704%" height="15" fill="rgb(219,133,21)" fg:x="975" fg:w="11"/><text x="6.4924%" y="111.50"></text></g><g><title>0x110058dfc (13 samples, 0.08%)</title><rect x="6.2360%" y="197" width="0.0832%" height="15" fill="rgb(246,46,29)" fg:x="974" fg:w="13"/><text x="6.4860%" y="207.50"></text></g><g><title>0x11001bbf4 (13 samples, 0.08%)</title><rect x="6.2360%" y="181" width="0.0832%" height="15" fill="rgb(246,185,52)" fg:x="974" fg:w="13"/><text x="6.4860%" y="191.50"></text></g><g><title>deno`Builtins_CallApiCallback (13 samples, 0.08%)</title><rect x="6.2360%" y="165" width="0.0832%" height="15" fill="rgb(252,136,11)" fg:x="974" fg:w="13"/><text x="6.4860%" y="175.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (13 samples, 0.08%)</title><rect x="6.2360%" y="149" width="0.0832%" height="15" fill="rgb(219,138,53)" fg:x="974" fg:w="13"/><text x="6.4860%" y="159.50"></text></g><g><title>deno`deno_flash::flash_respond (13 samples, 0.08%)</title><rect x="6.2360%" y="133" width="0.0832%" height="15" fill="rgb(211,51,23)" fg:x="974" fg:w="13"/><text x="6.4860%" y="143.50"></text></g><g><title>0x11005bb5c (2 samples, 0.01%)</title><rect x="6.3256%" y="197" width="0.0128%" height="15" fill="rgb(247,221,28)" fg:x="988" fg:w="2"/><text x="6.5756%" y="207.50"></text></g><g><title>0x11005bbb4 (2 samples, 0.01%)</title><rect x="6.3448%" y="197" width="0.0128%" height="15" fill="rgb(251,222,45)" fg:x="991" fg:w="2"/><text x="6.5948%" y="207.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (2 samples, 0.01%)</title><rect x="6.3576%" y="181" width="0.0128%" height="15" fill="rgb(217,162,53)" fg:x="993" fg:w="2"/><text x="6.6076%" y="191.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (4 samples, 0.03%)</title><rect x="6.7674%" y="165" width="0.0256%" height="15" fill="rgb(229,93,14)" fg:x="1057" fg:w="4"/><text x="7.0174%" y="175.50"></text></g><g><title>deno`&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (2 samples, 0.01%)</title><rect x="6.7930%" y="165" width="0.0128%" height="15" fill="rgb(209,67,49)" fg:x="1061" fg:w="2"/><text x="7.0430%" y="175.50"></text></g><g><title>deno`tokio::park::thread::Inner::park (2 samples, 0.01%)</title><rect x="6.7930%" y="149" width="0.0128%" height="15" fill="rgb(213,87,29)" fg:x="1061" fg:w="2"/><text x="7.0430%" y="159.50"></text></g><g><title>deno`parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.01%)</title><rect x="6.7930%" y="133" width="0.0128%" height="15" fill="rgb(205,151,52)" fg:x="1061" fg:w="2"/><text x="7.0430%" y="143.50"></text></g><g><title>deno`&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (2 samples, 0.01%)</title><rect x="6.7930%" y="117" width="0.0128%" height="15" fill="rgb(253,215,39)" fg:x="1061" fg:w="2"/><text x="7.0430%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.01%)</title><rect x="6.7930%" y="101" width="0.0128%" height="15" fill="rgb(221,220,41)" fg:x="1061" fg:w="2"/><text x="7.0430%" y="111.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.06%)</title><rect x="6.9019%" y="149" width="0.0576%" height="15" fill="rgb(218,133,21)" fg:x="1078" fg:w="9"/><text x="7.1519%" y="159.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (38 samples, 0.24%)</title><rect x="6.8058%" y="165" width="0.2433%" height="15" fill="rgb(221,193,43)" fg:x="1063" fg:w="38"/><text x="7.0558%" y="175.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (14 samples, 0.09%)</title><rect x="6.9595%" y="149" width="0.0896%" height="15" fill="rgb(240,128,52)" fg:x="1087" fg:w="14"/><text x="7.2095%" y="159.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (29 samples, 0.19%)</title><rect x="7.0491%" y="165" width="0.1857%" height="15" fill="rgb(253,114,12)" fg:x="1101" fg:w="29"/><text x="7.2991%" y="175.50"></text></g><g><title>deno`deno_flash::next_request_sync (173 samples, 1.11%)</title><rect x="6.3704%" y="181" width="1.1076%" height="15" fill="rgb(215,223,47)" fg:x="995" fg:w="173"/><text x="6.6204%" y="191.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (38 samples, 0.24%)</title><rect x="7.2348%" y="165" width="0.2433%" height="15" fill="rgb(248,225,23)" fg:x="1130" fg:w="38"/><text x="7.4848%" y="175.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (5 samples, 0.03%)</title><rect x="7.4845%" y="181" width="0.0320%" height="15" fill="rgb(250,108,0)" fg:x="1169" fg:w="5"/><text x="7.7345%" y="191.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.01%)</title><rect x="7.5165%" y="181" width="0.0128%" height="15" fill="rgb(228,208,7)" fg:x="1174" fg:w="2"/><text x="7.7665%" y="191.50"></text></g><g><title>0x11005bbbc (185 samples, 1.18%)</title><rect x="6.3576%" y="197" width="1.1845%" height="15" fill="rgb(244,45,10)" fg:x="993" fg:w="185"/><text x="6.6076%" y="207.50"></text></g><g><title>0x11005bcf8 (2 samples, 0.01%)</title><rect x="7.5613%" y="197" width="0.0128%" height="15" fill="rgb(207,125,25)" fg:x="1181" fg:w="2"/><text x="7.8113%" y="207.50"></text></g><g><title>0x11005bd04 (2 samples, 0.01%)</title><rect x="7.5805%" y="197" width="0.0128%" height="15" fill="rgb(210,195,18)" fg:x="1184" fg:w="2"/><text x="7.8305%" y="207.50"></text></g><g><title>0x11005bd18 (3 samples, 0.02%)</title><rect x="7.5933%" y="197" width="0.0192%" height="15" fill="rgb(249,80,12)" fg:x="1186" fg:w="3"/><text x="7.8433%" y="207.50"></text></g><g><title>0x11005bd40 (3 samples, 0.02%)</title><rect x="7.6189%" y="197" width="0.0192%" height="15" fill="rgb(221,65,9)" fg:x="1190" fg:w="3"/><text x="7.8689%" y="207.50"></text></g><g><title>0x11005bdd0 (2 samples, 0.01%)</title><rect x="7.6573%" y="197" width="0.0128%" height="15" fill="rgb(235,49,36)" fg:x="1196" fg:w="2"/><text x="7.9073%" y="207.50"></text></g><g><title>0x11005bdd4 (2 samples, 0.01%)</title><rect x="7.6701%" y="197" width="0.0128%" height="15" fill="rgb(225,32,20)" fg:x="1198" fg:w="2"/><text x="7.9201%" y="207.50"></text></g><g><title>0x11005bf84 (14 samples, 0.09%)</title><rect x="7.7214%" y="197" width="0.0896%" height="15" fill="rgb(215,141,46)" fg:x="1206" fg:w="14"/><text x="7.9714%" y="207.50"></text></g><g><title>deno`deno_flash::get_method (3 samples, 0.02%)</title><rect x="7.8174%" y="181" width="0.0192%" height="15" fill="rgb(250,160,47)" fg:x="1221" fg:w="3"/><text x="8.0674%" y="191.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="7.8430%" y="165" width="0.0320%" height="15" fill="rgb(216,222,40)" fg:x="1225" fg:w="5"/><text x="8.0930%" y="175.50"></text></g><g><title>0x11005bf8c (19 samples, 0.12%)</title><rect x="7.8110%" y="197" width="0.1216%" height="15" fill="rgb(234,217,39)" fg:x="1220" fg:w="19"/><text x="8.0610%" y="207.50"></text></g><g><title>deno`deno_flash::op_flash_get_method_fast (15 samples, 0.10%)</title><rect x="7.8366%" y="181" width="0.0960%" height="15" fill="rgb(207,178,40)" fg:x="1224" fg:w="15"/><text x="8.0866%" y="191.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (9 samples, 0.06%)</title><rect x="7.8750%" y="165" width="0.0576%" height="15" fill="rgb(221,136,13)" fg:x="1230" fg:w="9"/><text x="8.1250%" y="175.50"></text></g><g><title>0x11005c004 (4 samples, 0.03%)</title><rect x="7.9519%" y="197" width="0.0256%" height="15" fill="rgb(249,199,10)" fg:x="1242" fg:w="4"/><text x="8.2019%" y="207.50"></text></g><g><title>0x11005c090 (2 samples, 0.01%)</title><rect x="8.0031%" y="197" width="0.0128%" height="15" fill="rgb(249,222,13)" fg:x="1250" fg:w="2"/><text x="8.2531%" y="207.50"></text></g><g><title>0x11005c0b8 (2 samples, 0.01%)</title><rect x="8.0223%" y="197" width="0.0128%" height="15" fill="rgb(244,185,38)" fg:x="1253" fg:w="2"/><text x="8.2723%" y="207.50"></text></g><g><title>0x11005c104 (2 samples, 0.01%)</title><rect x="8.0543%" y="197" width="0.0128%" height="15" fill="rgb(236,202,9)" fg:x="1258" fg:w="2"/><text x="8.3043%" y="207.50"></text></g><g><title>0x11005c17c (2 samples, 0.01%)</title><rect x="8.0799%" y="197" width="0.0128%" height="15" fill="rgb(250,229,37)" fg:x="1262" fg:w="2"/><text x="8.3299%" y="207.50"></text></g><g><title>0x11005c180 (4 samples, 0.03%)</title><rect x="8.0927%" y="197" width="0.0256%" height="15" fill="rgb(206,174,23)" fg:x="1264" fg:w="4"/><text x="8.3427%" y="207.50"></text></g><g><title>0x11005c1fc (2 samples, 0.01%)</title><rect x="8.1311%" y="197" width="0.0128%" height="15" fill="rgb(211,33,43)" fg:x="1270" fg:w="2"/><text x="8.3811%" y="207.50"></text></g><g><title>0x11005c214 (2 samples, 0.01%)</title><rect x="8.1439%" y="197" width="0.0128%" height="15" fill="rgb(245,58,50)" fg:x="1272" fg:w="2"/><text x="8.3939%" y="207.50"></text></g><g><title>0x11005c29c (2 samples, 0.01%)</title><rect x="8.1887%" y="197" width="0.0128%" height="15" fill="rgb(244,68,36)" fg:x="1279" fg:w="2"/><text x="8.4387%" y="207.50"></text></g><g><title>0x11005c2e4 (2 samples, 0.01%)</title><rect x="8.2336%" y="197" width="0.0128%" height="15" fill="rgb(232,229,15)" fg:x="1286" fg:w="2"/><text x="8.4836%" y="207.50"></text></g><g><title>0x11005c2fc (18 samples, 0.12%)</title><rect x="8.2464%" y="197" width="0.1152%" height="15" fill="rgb(254,30,23)" fg:x="1288" fg:w="18"/><text x="8.4964%" y="207.50"></text></g><g><title>0x11005c3f8 (3 samples, 0.02%)</title><rect x="8.3936%" y="197" width="0.0192%" height="15" fill="rgb(235,160,14)" fg:x="1311" fg:w="3"/><text x="8.6436%" y="207.50"></text></g><g><title>deno`Builtins_FastNewObject (10 samples, 0.06%)</title><rect x="8.4128%" y="181" width="0.0640%" height="15" fill="rgb(212,155,44)" fg:x="1314" fg:w="10"/><text x="8.6628%" y="191.50"></text></g><g><title>0x11001a7b0 (2 samples, 0.01%)</title><rect x="8.5921%" y="165" width="0.0128%" height="15" fill="rgb(226,2,50)" fg:x="1342" fg:w="2"/><text x="8.8421%" y="175.50"></text></g><g><title>0x11001a810 (17 samples, 0.11%)</title><rect x="8.6177%" y="165" width="0.1088%" height="15" fill="rgb(234,177,6)" fg:x="1346" fg:w="17"/><text x="8.8677%" y="175.50"></text></g><g><title>deno`Builtins_LoadIC (17 samples, 0.11%)</title><rect x="8.6177%" y="149" width="0.1088%" height="15" fill="rgb(217,24,9)" fg:x="1346" fg:w="17"/><text x="8.8677%" y="159.50"></text></g><g><title>0x11001a874 (2 samples, 0.01%)</title><rect x="8.7394%" y="165" width="0.0128%" height="15" fill="rgb(220,13,46)" fg:x="1365" fg:w="2"/><text x="8.9894%" y="175.50"></text></g><g><title>0x11001ef00 (2 samples, 0.01%)</title><rect x="8.7650%" y="149" width="0.0128%" height="15" fill="rgb(239,221,27)" fg:x="1369" fg:w="2"/><text x="9.0150%" y="159.50"></text></g><g><title>0x11001ef08 (3 samples, 0.02%)</title><rect x="8.7778%" y="149" width="0.0192%" height="15" fill="rgb(222,198,25)" fg:x="1371" fg:w="3"/><text x="9.0278%" y="159.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (3 samples, 0.02%)</title><rect x="8.7778%" y="133" width="0.0192%" height="15" fill="rgb(211,99,13)" fg:x="1371" fg:w="3"/><text x="9.0278%" y="143.50"></text></g><g><title>0x11001ef40 (4 samples, 0.03%)</title><rect x="8.8034%" y="149" width="0.0256%" height="15" fill="rgb(232,111,31)" fg:x="1375" fg:w="4"/><text x="9.0534%" y="159.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (4 samples, 0.03%)</title><rect x="8.8034%" y="133" width="0.0256%" height="15" fill="rgb(245,82,37)" fg:x="1375" fg:w="4"/><text x="9.0534%" y="143.50"></text></g><g><title>0x11001ef78 (3 samples, 0.02%)</title><rect x="8.8290%" y="149" width="0.0192%" height="15" fill="rgb(227,149,46)" fg:x="1379" fg:w="3"/><text x="9.0790%" y="159.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (3 samples, 0.02%)</title><rect x="8.8290%" y="133" width="0.0192%" height="15" fill="rgb(218,36,50)" fg:x="1379" fg:w="3"/><text x="9.0790%" y="143.50"></text></g><g><title>0x11001efb0 (6 samples, 0.04%)</title><rect x="8.8546%" y="149" width="0.0384%" height="15" fill="rgb(226,80,48)" fg:x="1383" fg:w="6"/><text x="9.1046%" y="159.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (6 samples, 0.04%)</title><rect x="8.8546%" y="133" width="0.0384%" height="15" fill="rgb(238,224,15)" fg:x="1383" fg:w="6"/><text x="9.1046%" y="143.50"></text></g><g><title>0x11001f01c (5 samples, 0.03%)</title><rect x="8.9058%" y="149" width="0.0320%" height="15" fill="rgb(241,136,10)" fg:x="1391" fg:w="5"/><text x="9.1558%" y="159.50"></text></g><g><title>deno`Builtins_LoadIC (5 samples, 0.03%)</title><rect x="8.9058%" y="133" width="0.0320%" height="15" fill="rgb(208,32,45)" fg:x="1391" fg:w="5"/><text x="9.1558%" y="143.50"></text></g><g><title>deno`Builtins_LoadIC (5 samples, 0.03%)</title><rect x="8.9570%" y="149" width="0.0320%" height="15" fill="rgb(207,135,9)" fg:x="1399" fg:w="5"/><text x="9.2070%" y="159.50"></text></g><g><title>0x11001a8bc (41 samples, 0.26%)</title><rect x="8.7586%" y="165" width="0.2625%" height="15" fill="rgb(206,86,44)" fg:x="1368" fg:w="41"/><text x="9.0086%" y="175.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (4 samples, 0.03%)</title><rect x="8.9955%" y="149" width="0.0256%" height="15" fill="rgb(245,177,15)" fg:x="1405" fg:w="4"/><text x="9.2455%" y="159.50"></text></g><g><title>0x11001a8dc (2 samples, 0.01%)</title><rect x="9.0211%" y="165" width="0.0128%" height="15" fill="rgb(206,64,50)" fg:x="1409" fg:w="2"/><text x="9.2711%" y="175.50"></text></g><g><title>0x11001a8e4 (2 samples, 0.01%)</title><rect x="9.0339%" y="165" width="0.0128%" height="15" fill="rgb(234,36,40)" fg:x="1411" fg:w="2"/><text x="9.2839%" y="175.50"></text></g><g><title>0x11001a9f8 (2 samples, 0.01%)</title><rect x="9.0659%" y="165" width="0.0128%" height="15" fill="rgb(213,64,8)" fg:x="1416" fg:w="2"/><text x="9.3159%" y="175.50"></text></g><g><title>0x11001a9fc (3 samples, 0.02%)</title><rect x="9.0787%" y="165" width="0.0192%" height="15" fill="rgb(210,75,36)" fg:x="1418" fg:w="3"/><text x="9.3287%" y="175.50"></text></g><g><title>0x11001aa80 (3 samples, 0.02%)</title><rect x="9.1235%" y="165" width="0.0192%" height="15" fill="rgb(229,88,21)" fg:x="1425" fg:w="3"/><text x="9.3735%" y="175.50"></text></g><g><title>0x11001aadc (3 samples, 0.02%)</title><rect x="9.1491%" y="165" width="0.0192%" height="15" fill="rgb(252,204,47)" fg:x="1429" fg:w="3"/><text x="9.3991%" y="175.50"></text></g><g><title>0x11001f8bc (15 samples, 0.10%)</title><rect x="9.1811%" y="149" width="0.0960%" height="15" fill="rgb(208,77,27)" fg:x="1434" fg:w="15"/><text x="9.4311%" y="159.50"></text></g><g><title>0x11001f98c (3 samples, 0.02%)</title><rect x="9.2964%" y="149" width="0.0192%" height="15" fill="rgb(221,76,26)" fg:x="1452" fg:w="3"/><text x="9.5464%" y="159.50"></text></g><g><title>0x11001f9c0 (3 samples, 0.02%)</title><rect x="9.3156%" y="149" width="0.0192%" height="15" fill="rgb(225,139,18)" fg:x="1455" fg:w="3"/><text x="9.5656%" y="159.50"></text></g><g><title>0x11001fa38 (2 samples, 0.01%)</title><rect x="9.3348%" y="149" width="0.0128%" height="15" fill="rgb(230,137,11)" fg:x="1458" fg:w="2"/><text x="9.5848%" y="159.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="9.3348%" y="133" width="0.0128%" height="15" fill="rgb(212,28,1)" fg:x="1458" fg:w="2"/><text x="9.5848%" y="143.50"></text></g><g><title>0x11001ab38 (30 samples, 0.19%)</title><rect x="9.1811%" y="165" width="0.1921%" height="15" fill="rgb(248,164,17)" fg:x="1434" fg:w="30"/><text x="9.4311%" y="175.50"></text></g><g><title>deno`Builtins_SameValueNumbersOnly (3 samples, 0.02%)</title><rect x="9.3540%" y="149" width="0.0192%" height="15" fill="rgb(222,171,42)" fg:x="1461" fg:w="3"/><text x="9.6040%" y="159.50"></text></g><g><title>0x11001ab9c (4 samples, 0.03%)</title><rect x="9.3796%" y="165" width="0.0256%" height="15" fill="rgb(243,84,45)" fg:x="1465" fg:w="4"/><text x="9.6296%" y="175.50"></text></g><g><title>0x11001ac70 (2 samples, 0.01%)</title><rect x="9.4180%" y="165" width="0.0128%" height="15" fill="rgb(252,49,23)" fg:x="1471" fg:w="2"/><text x="9.6680%" y="175.50"></text></g><g><title>0x11001acd4 (3 samples, 0.02%)</title><rect x="9.4372%" y="165" width="0.0192%" height="15" fill="rgb(215,19,7)" fg:x="1474" fg:w="3"/><text x="9.6872%" y="175.50"></text></g><g><title>0x11001ad1c (4 samples, 0.03%)</title><rect x="9.4692%" y="165" width="0.0256%" height="15" fill="rgb(238,81,41)" fg:x="1479" fg:w="4"/><text x="9.7192%" y="175.50"></text></g><g><title>0x11001ad9c (2 samples, 0.01%)</title><rect x="9.5012%" y="165" width="0.0128%" height="15" fill="rgb(210,199,37)" fg:x="1484" fg:w="2"/><text x="9.7512%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="9.5012%" y="149" width="0.0128%" height="15" fill="rgb(244,192,49)" fg:x="1484" fg:w="2"/><text x="9.7512%" y="159.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="9.5012%" y="133" width="0.0128%" height="15" fill="rgb(226,211,11)" fg:x="1484" fg:w="2"/><text x="9.7512%" y="143.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="9.5012%" y="117" width="0.0128%" height="15" fill="rgb(236,162,54)" fg:x="1484" fg:w="2"/><text x="9.7512%" y="127.50"></text></g><g><title>0x11001adc4 (2 samples, 0.01%)</title><rect x="9.5141%" y="165" width="0.0128%" height="15" fill="rgb(220,229,9)" fg:x="1486" fg:w="2"/><text x="9.7641%" y="175.50"></text></g><g><title>deno`Builtins_GrowFastSmiOrObjectElements (20 samples, 0.13%)</title><rect x="9.5461%" y="165" width="0.1280%" height="15" fill="rgb(250,87,22)" fg:x="1491" fg:w="20"/><text x="9.7961%" y="175.50"></text></g><g><title>deno`Builtins_LoadIC (11 samples, 0.07%)</title><rect x="9.6741%" y="165" width="0.0704%" height="15" fill="rgb(239,43,17)" fg:x="1511" fg:w="11"/><text x="9.9241%" y="175.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (5 samples, 0.03%)</title><rect x="9.7445%" y="165" width="0.0320%" height="15" fill="rgb(231,177,25)" fg:x="1522" fg:w="5"/><text x="9.9945%" y="175.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (203 samples, 1.30%)</title><rect x="8.4833%" y="181" width="1.2997%" height="15" fill="rgb(219,179,1)" fg:x="1325" fg:w="203"/><text x="8.7333%" y="191.50"></text></g><g><title>0x11005c400 (217 samples, 1.39%)</title><rect x="8.4128%" y="197" width="1.3893%" height="15" fill="rgb(238,219,53)" fg:x="1314" fg:w="217"/><text x="8.6628%" y="207.50"></text></g><g><title>deno`construct_stub_invoke_deopt_addr (3 samples, 0.02%)</title><rect x="9.7830%" y="181" width="0.0192%" height="15" fill="rgb(232,167,36)" fg:x="1528" fg:w="3"/><text x="10.0330%" y="191.50"></text></g><g><title>0x11005c424 (2 samples, 0.01%)</title><rect x="9.8022%" y="197" width="0.0128%" height="15" fill="rgb(244,19,51)" fg:x="1531" fg:w="2"/><text x="10.0522%" y="207.50"></text></g><g><title>0x11005c448 (4 samples, 0.03%)</title><rect x="9.8150%" y="197" width="0.0256%" height="15" fill="rgb(224,6,22)" fg:x="1533" fg:w="4"/><text x="10.0650%" y="207.50"></text></g><g><title>0x11005c518 (2 samples, 0.01%)</title><rect x="9.8662%" y="197" width="0.0128%" height="15" fill="rgb(224,145,5)" fg:x="1541" fg:w="2"/><text x="10.1162%" y="207.50"></text></g><g><title>0x11005c59c (2 samples, 0.01%)</title><rect x="9.8918%" y="197" width="0.0128%" height="15" fill="rgb(234,130,49)" fg:x="1545" fg:w="2"/><text x="10.1418%" y="207.50"></text></g><g><title>0x11001b1a0 (2 samples, 0.01%)</title><rect x="9.9238%" y="181" width="0.0128%" height="15" fill="rgb(254,6,2)" fg:x="1550" fg:w="2"/><text x="10.1738%" y="191.50"></text></g><g><title>0x11001b340 (2 samples, 0.01%)</title><rect x="9.9558%" y="181" width="0.0128%" height="15" fill="rgb(208,96,46)" fg:x="1555" fg:w="2"/><text x="10.2058%" y="191.50"></text></g><g><title>0x11001b370 (2 samples, 0.01%)</title><rect x="9.9750%" y="181" width="0.0128%" height="15" fill="rgb(239,3,39)" fg:x="1558" fg:w="2"/><text x="10.2250%" y="191.50"></text></g><g><title>0x11001b39c (2 samples, 0.01%)</title><rect x="9.9942%" y="181" width="0.0128%" height="15" fill="rgb(233,210,1)" fg:x="1561" fg:w="2"/><text x="10.2442%" y="191.50"></text></g><g><title>0x11001b4cc (2 samples, 0.01%)</title><rect x="10.0711%" y="181" width="0.0128%" height="15" fill="rgb(244,137,37)" fg:x="1573" fg:w="2"/><text x="10.3211%" y="191.50"></text></g><g><title>0x11001b4f4 (2 samples, 0.01%)</title><rect x="10.0839%" y="181" width="0.0128%" height="15" fill="rgb(240,136,2)" fg:x="1575" fg:w="2"/><text x="10.3339%" y="191.50"></text></g><g><title>0x11001b588 (3 samples, 0.02%)</title><rect x="10.1095%" y="181" width="0.0192%" height="15" fill="rgb(239,18,37)" fg:x="1579" fg:w="3"/><text x="10.3595%" y="191.50"></text></g><g><title>0x11001b590 (23 samples, 0.15%)</title><rect x="10.1287%" y="181" width="0.1473%" height="15" fill="rgb(218,185,22)" fg:x="1582" fg:w="23"/><text x="10.3787%" y="191.50"></text></g><g><title>deno`Builtins_LoadIC (11 samples, 0.07%)</title><rect x="10.2055%" y="165" width="0.0704%" height="15" fill="rgb(225,218,4)" fg:x="1594" fg:w="11"/><text x="10.4555%" y="175.50"></text></g><g><title>0x11001b594 (3 samples, 0.02%)</title><rect x="10.2759%" y="181" width="0.0192%" height="15" fill="rgb(230,182,32)" fg:x="1605" fg:w="3"/><text x="10.5259%" y="191.50"></text></g><g><title>0x11001b5c8 (6 samples, 0.04%)</title><rect x="10.2952%" y="181" width="0.0384%" height="15" fill="rgb(242,56,43)" fg:x="1608" fg:w="6"/><text x="10.5452%" y="191.50"></text></g><g><title>deno`Builtins_LoadIC (6 samples, 0.04%)</title><rect x="10.2952%" y="165" width="0.0384%" height="15" fill="rgb(233,99,24)" fg:x="1608" fg:w="6"/><text x="10.5452%" y="175.50"></text></g><g><title>0x11001b5e0 (6 samples, 0.04%)</title><rect x="10.3336%" y="181" width="0.0384%" height="15" fill="rgb(234,209,42)" fg:x="1614" fg:w="6"/><text x="10.5836%" y="191.50"></text></g><g><title>0x11001b5f0 (2 samples, 0.01%)</title><rect x="10.3720%" y="181" width="0.0128%" height="15" fill="rgb(227,7,12)" fg:x="1620" fg:w="2"/><text x="10.6220%" y="191.50"></text></g><g><title>0x11001b64c (10 samples, 0.06%)</title><rect x="10.3912%" y="181" width="0.0640%" height="15" fill="rgb(245,203,43)" fg:x="1623" fg:w="10"/><text x="10.6412%" y="191.50"></text></g><g><title>0x11001b6d4 (3 samples, 0.02%)</title><rect x="10.4552%" y="181" width="0.0192%" height="15" fill="rgb(238,205,33)" fg:x="1633" fg:w="3"/><text x="10.7052%" y="191.50"></text></g><g><title>0x11001b6fc (3 samples, 0.02%)</title><rect x="10.4808%" y="181" width="0.0192%" height="15" fill="rgb(231,56,7)" fg:x="1637" fg:w="3"/><text x="10.7308%" y="191.50"></text></g><g><title>0x110019b2c (2 samples, 0.01%)</title><rect x="10.5064%" y="165" width="0.0128%" height="15" fill="rgb(244,186,29)" fg:x="1641" fg:w="2"/><text x="10.7564%" y="175.50"></text></g><g><title>0x110019b34 (7 samples, 0.04%)</title><rect x="10.5192%" y="165" width="0.0448%" height="15" fill="rgb(234,111,31)" fg:x="1643" fg:w="7"/><text x="10.7692%" y="175.50"></text></g><g><title>deno`Builtins_ToString (7 samples, 0.04%)</title><rect x="10.5192%" y="149" width="0.0448%" height="15" fill="rgb(241,149,10)" fg:x="1643" fg:w="7"/><text x="10.7692%" y="159.50"></text></g><g><title>0x110019b80 (2 samples, 0.01%)</title><rect x="10.5641%" y="165" width="0.0128%" height="15" fill="rgb(249,206,44)" fg:x="1650" fg:w="2"/><text x="10.8141%" y="175.50"></text></g><g><title>0x110019b88 (2 samples, 0.01%)</title><rect x="10.5769%" y="165" width="0.0128%" height="15" fill="rgb(251,153,30)" fg:x="1652" fg:w="2"/><text x="10.8269%" y="175.50"></text></g><g><title>0x110019bb4 (2 samples, 0.01%)</title><rect x="10.5961%" y="165" width="0.0128%" height="15" fill="rgb(239,152,38)" fg:x="1655" fg:w="2"/><text x="10.8461%" y="175.50"></text></g><g><title>0x110019bf4 (4 samples, 0.03%)</title><rect x="10.6153%" y="165" width="0.0256%" height="15" fill="rgb(249,139,47)" fg:x="1658" fg:w="4"/><text x="10.8653%" y="175.50"></text></g><g><title>deno`Builtins_ToString (3 samples, 0.02%)</title><rect x="10.6217%" y="149" width="0.0192%" height="15" fill="rgb(244,64,35)" fg:x="1659" fg:w="3"/><text x="10.8717%" y="159.50"></text></g><g><title>0x110019c6c (3 samples, 0.02%)</title><rect x="10.6665%" y="165" width="0.0192%" height="15" fill="rgb(216,46,15)" fg:x="1666" fg:w="3"/><text x="10.9165%" y="175.50"></text></g><g><title>deno`Builtins_ToString (3 samples, 0.02%)</title><rect x="10.6665%" y="149" width="0.0192%" height="15" fill="rgb(250,74,19)" fg:x="1666" fg:w="3"/><text x="10.9165%" y="159.50"></text></g><g><title>0x110019dfc (4 samples, 0.03%)</title><rect x="10.7305%" y="165" width="0.0256%" height="15" fill="rgb(249,42,33)" fg:x="1676" fg:w="4"/><text x="10.9805%" y="175.50"></text></g><g><title>deno`Builtins_ToString (4 samples, 0.03%)</title><rect x="10.7305%" y="149" width="0.0256%" height="15" fill="rgb(242,149,17)" fg:x="1676" fg:w="4"/><text x="10.9805%" y="159.50"></text></g><g><title>0x110019e34 (3 samples, 0.02%)</title><rect x="10.7625%" y="165" width="0.0192%" height="15" fill="rgb(244,29,21)" fg:x="1681" fg:w="3"/><text x="11.0125%" y="175.50"></text></g><g><title>0x110019e3c (2 samples, 0.01%)</title><rect x="10.7817%" y="165" width="0.0128%" height="15" fill="rgb(220,130,37)" fg:x="1684" fg:w="2"/><text x="11.0317%" y="175.50"></text></g><g><title>deno`Builtins_ToString (2 samples, 0.01%)</title><rect x="10.7817%" y="149" width="0.0128%" height="15" fill="rgb(211,67,2)" fg:x="1684" fg:w="2"/><text x="11.0317%" y="159.50"></text></g><g><title>0x110019e5c (2 samples, 0.01%)</title><rect x="10.8009%" y="165" width="0.0128%" height="15" fill="rgb(235,68,52)" fg:x="1687" fg:w="2"/><text x="11.0509%" y="175.50"></text></g><g><title>0x110019e90 (2 samples, 0.01%)</title><rect x="10.8266%" y="165" width="0.0128%" height="15" fill="rgb(246,142,3)" fg:x="1691" fg:w="2"/><text x="11.0766%" y="175.50"></text></g><g><title>0x110019ee0 (2 samples, 0.01%)</title><rect x="10.8394%" y="165" width="0.0128%" height="15" fill="rgb(241,25,7)" fg:x="1693" fg:w="2"/><text x="11.0894%" y="175.50"></text></g><g><title>0x11001a1a4 (2 samples, 0.01%)</title><rect x="10.8842%" y="165" width="0.0128%" height="15" fill="rgb(242,119,39)" fg:x="1700" fg:w="2"/><text x="11.1342%" y="175.50"></text></g><g><title>0x11001a1ac (5 samples, 0.03%)</title><rect x="10.8970%" y="165" width="0.0320%" height="15" fill="rgb(241,98,45)" fg:x="1702" fg:w="5"/><text x="11.1470%" y="175.50"></text></g><g><title>deno`Builtins_ToString (5 samples, 0.03%)</title><rect x="10.8970%" y="149" width="0.0320%" height="15" fill="rgb(254,28,30)" fg:x="1702" fg:w="5"/><text x="11.1470%" y="159.50"></text></g><g><title>0x11001a24c (2 samples, 0.01%)</title><rect x="10.9418%" y="165" width="0.0128%" height="15" fill="rgb(241,142,54)" fg:x="1709" fg:w="2"/><text x="11.1918%" y="175.50"></text></g><g><title>0x11001a290 (2 samples, 0.01%)</title><rect x="10.9610%" y="165" width="0.0128%" height="15" fill="rgb(222,85,15)" fg:x="1712" fg:w="2"/><text x="11.2110%" y="175.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (71 samples, 0.45%)</title><rect x="10.9802%" y="165" width="0.4546%" height="15" fill="rgb(210,85,47)" fg:x="1715" fg:w="71"/><text x="11.2302%" y="175.50"></text></g><g><title>0x11001b704 (148 samples, 0.95%)</title><rect x="10.5000%" y="181" width="0.9476%" height="15" fill="rgb(224,206,25)" fg:x="1640" fg:w="148"/><text x="10.7500%" y="191.50"></text></g><g><title>deno`Builtins_ToString (2 samples, 0.01%)</title><rect x="11.4348%" y="165" width="0.0128%" height="15" fill="rgb(243,201,19)" fg:x="1786" fg:w="2"/><text x="11.6848%" y="175.50"></text></g><g><title>0x11001b794 (3 samples, 0.02%)</title><rect x="11.4604%" y="181" width="0.0192%" height="15" fill="rgb(236,59,4)" fg:x="1790" fg:w="3"/><text x="11.7104%" y="191.50"></text></g><g><title>0x11001b7d0 (6 samples, 0.04%)</title><rect x="11.4860%" y="181" width="0.0384%" height="15" fill="rgb(254,179,45)" fg:x="1794" fg:w="6"/><text x="11.7360%" y="191.50"></text></g><g><title>deno`Builtins_LoadIC (6 samples, 0.04%)</title><rect x="11.4860%" y="165" width="0.0384%" height="15" fill="rgb(226,14,10)" fg:x="1794" fg:w="6"/><text x="11.7360%" y="175.50"></text></g><g><title>0x11001b974 (3 samples, 0.02%)</title><rect x="11.5500%" y="181" width="0.0192%" height="15" fill="rgb(244,27,41)" fg:x="1804" fg:w="3"/><text x="11.8000%" y="191.50"></text></g><g><title>0x110017218 (3 samples, 0.02%)</title><rect x="11.5884%" y="165" width="0.0192%" height="15" fill="rgb(235,35,32)" fg:x="1810" fg:w="3"/><text x="11.8384%" y="175.50"></text></g><g><title>deno`Builtins_BaselineOutOfLinePrologue (3 samples, 0.02%)</title><rect x="11.5884%" y="149" width="0.0192%" height="15" fill="rgb(218,68,31)" fg:x="1810" fg:w="3"/><text x="11.8384%" y="159.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="11.5884%" y="133" width="0.0192%" height="15" fill="rgb(207,120,37)" fg:x="1810" fg:w="3"/><text x="11.8384%" y="143.50"></text></g><g><title>deno`v8::internal::Runtime_StackGuardWithGap (3 samples, 0.02%)</title><rect x="11.5884%" y="117" width="0.0192%" height="15" fill="rgb(227,98,0)" fg:x="1810" fg:w="3"/><text x="11.8384%" y="127.50"></text></g><g><title>deno`v8::internal::StackGuard::HandleInterrupts (3 samples, 0.02%)</title><rect x="11.5884%" y="101" width="0.0192%" height="15" fill="rgb(207,7,3)" fg:x="1810" fg:w="3"/><text x="11.8384%" y="111.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::InstallOptimizedFunctions (3 samples, 0.02%)</title><rect x="11.5884%" y="85" width="0.0192%" height="15" fill="rgb(206,98,19)" fg:x="1810" fg:w="3"/><text x="11.8384%" y="95.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::~PipelineCompilationJob (2 samples, 0.01%)</title><rect x="11.5949%" y="69" width="0.0128%" height="15" fill="rgb(217,5,26)" fg:x="1811" fg:w="2"/><text x="11.8449%" y="79.50"></text></g><g><title>0x1100172c8 (15 samples, 0.10%)</title><rect x="11.6141%" y="165" width="0.0960%" height="15" fill="rgb(235,190,38)" fg:x="1814" fg:w="15"/><text x="11.8641%" y="175.50"></text></g><g><title>deno`Builtins_AsyncFunctionEnter (15 samples, 0.10%)</title><rect x="11.6141%" y="149" width="0.0960%" height="15" fill="rgb(247,86,24)" fg:x="1814" fg:w="15"/><text x="11.8641%" y="159.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="11.6973%" y="133" width="0.0128%" height="15" fill="rgb(205,101,16)" fg:x="1827" fg:w="2"/><text x="11.9473%" y="143.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="11.6973%" y="117" width="0.0128%" height="15" fill="rgb(246,168,33)" fg:x="1827" fg:w="2"/><text x="11.9473%" y="127.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="11.6973%" y="101" width="0.0128%" height="15" fill="rgb(231,114,1)" fg:x="1827" fg:w="2"/><text x="11.9473%" y="111.50"></text></g><g><title>deno`Builtins_FulfillPromise (2 samples, 0.01%)</title><rect x="11.7357%" y="133" width="0.0128%" height="15" fill="rgb(207,184,53)" fg:x="1833" fg:w="2"/><text x="11.9857%" y="143.50"></text></g><g><title>deno`Builtins_AsyncFunctionResolve (4 samples, 0.03%)</title><rect x="11.7357%" y="149" width="0.0256%" height="15" fill="rgb(224,95,51)" fg:x="1833" fg:w="4"/><text x="11.9857%" y="159.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.01%)</title><rect x="11.7485%" y="133" width="0.0128%" height="15" fill="rgb(212,188,45)" fg:x="1835" fg:w="2"/><text x="11.9985%" y="143.50"></text></g><g><title>deno`Builtins_FulfillPromise (2 samples, 0.01%)</title><rect x="11.7485%" y="117" width="0.0128%" height="15" fill="rgb(223,154,38)" fg:x="1835" fg:w="2"/><text x="11.9985%" y="127.50"></text></g><g><title>0x110018fb0 (5 samples, 0.03%)</title><rect x="11.7357%" y="165" width="0.0320%" height="15" fill="rgb(251,22,52)" fg:x="1833" fg:w="5"/><text x="11.9857%" y="175.50"></text></g><g><title>0x110048648 (2 samples, 0.01%)</title><rect x="11.7997%" y="165" width="0.0128%" height="15" fill="rgb(229,209,22)" fg:x="1843" fg:w="2"/><text x="12.0497%" y="175.50"></text></g><g><title>0x110048660 (2 samples, 0.01%)</title><rect x="11.8125%" y="165" width="0.0128%" height="15" fill="rgb(234,138,34)" fg:x="1845" fg:w="2"/><text x="12.0625%" y="175.50"></text></g><g><title>0x11004872c (5 samples, 0.03%)</title><rect x="11.8574%" y="165" width="0.0320%" height="15" fill="rgb(212,95,11)" fg:x="1852" fg:w="5"/><text x="12.1074%" y="175.50"></text></g><g><title>0x11004876c (2 samples, 0.01%)</title><rect x="11.8958%" y="165" width="0.0128%" height="15" fill="rgb(240,179,47)" fg:x="1858" fg:w="2"/><text x="12.1458%" y="175.50"></text></g><g><title>0x1100487e0 (5 samples, 0.03%)</title><rect x="11.9086%" y="165" width="0.0320%" height="15" fill="rgb(240,163,11)" fg:x="1860" fg:w="5"/><text x="12.1586%" y="175.50"></text></g><g><title>deno`Builtins_FulfillPromise (4 samples, 0.03%)</title><rect x="11.9150%" y="149" width="0.0256%" height="15" fill="rgb(236,37,12)" fg:x="1861" fg:w="4"/><text x="12.1650%" y="159.50"></text></g><g><title>0x110048938 (3 samples, 0.02%)</title><rect x="11.9470%" y="165" width="0.0192%" height="15" fill="rgb(232,164,16)" fg:x="1866" fg:w="3"/><text x="12.1970%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="11.9470%" y="149" width="0.0192%" height="15" fill="rgb(244,205,15)" fg:x="1866" fg:w="3"/><text x="12.1970%" y="159.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.02%)</title><rect x="11.9470%" y="133" width="0.0192%" height="15" fill="rgb(223,117,47)" fg:x="1866" fg:w="3"/><text x="12.1970%" y="143.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (3 samples, 0.02%)</title><rect x="11.9470%" y="117" width="0.0192%" height="15" fill="rgb(244,107,35)" fg:x="1866" fg:w="3"/><text x="12.1970%" y="127.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (2 samples, 0.01%)</title><rect x="11.9534%" y="101" width="0.0128%" height="15" fill="rgb(205,140,8)" fg:x="1867" fg:w="2"/><text x="12.2034%" y="111.50"></text></g><g><title>deno`Builtins_BaselineOutOfLinePrologue (2 samples, 0.01%)</title><rect x="11.9662%" y="165" width="0.0128%" height="15" fill="rgb(228,84,46)" fg:x="1869" fg:w="2"/><text x="12.2162%" y="175.50"></text></g><g><title>0x11001b9c0 (63 samples, 0.40%)</title><rect x="11.5884%" y="181" width="0.4034%" height="15" fill="rgb(254,188,9)" fg:x="1810" fg:w="63"/><text x="11.8384%" y="191.50"></text></g><g><title>0x11001b9e0 (14 samples, 0.09%)</title><rect x="11.9982%" y="181" width="0.0896%" height="15" fill="rgb(206,112,54)" fg:x="1874" fg:w="14"/><text x="12.2482%" y="191.50"></text></g><g><title>deno`Builtins_FulfillPromise (3 samples, 0.02%)</title><rect x="12.0686%" y="165" width="0.0192%" height="15" fill="rgb(216,84,49)" fg:x="1885" fg:w="3"/><text x="12.3186%" y="175.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="12.1006%" y="133" width="0.0128%" height="15" fill="rgb(214,194,35)" fg:x="1890" fg:w="2"/><text x="12.3506%" y="143.50"></text></g><g><title>0x11001ba78 (3 samples, 0.02%)</title><rect x="12.1006%" y="181" width="0.0192%" height="15" fill="rgb(249,28,3)" fg:x="1890" fg:w="3"/><text x="12.3506%" y="191.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="12.1006%" y="165" width="0.0192%" height="15" fill="rgb(222,56,52)" fg:x="1890" fg:w="3"/><text x="12.3506%" y="175.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.02%)</title><rect x="12.1006%" y="149" width="0.0192%" height="15" fill="rgb(245,217,50)" fg:x="1890" fg:w="3"/><text x="12.3506%" y="159.50"></text></g><g><title>0x11001bbb8 (2 samples, 0.01%)</title><rect x="12.1199%" y="181" width="0.0128%" height="15" fill="rgb(213,201,24)" fg:x="1893" fg:w="2"/><text x="12.3699%" y="191.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (6 samples, 0.04%)</title><rect x="12.1583%" y="165" width="0.0384%" height="15" fill="rgb(248,116,28)" fg:x="1899" fg:w="6"/><text x="12.4083%" y="175.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (11 samples, 0.07%)</title><rect x="12.5232%" y="133" width="0.0704%" height="15" fill="rgb(219,72,43)" fg:x="1956" fg:w="11"/><text x="12.7732%" y="143.50"></text></g><g><title>deno`v8::Integer::NewFromUnsigned (7 samples, 0.04%)</title><rect x="12.5488%" y="117" width="0.0448%" height="15" fill="rgb(209,138,14)" fg:x="1960" fg:w="7"/><text x="12.7988%" y="127.50"></text></g><g><title>deno`v8::Integer::New (5 samples, 0.03%)</title><rect x="12.5616%" y="101" width="0.0320%" height="15" fill="rgb(222,18,33)" fg:x="1962" fg:w="5"/><text x="12.8116%" y="111.50"></text></g><g><title>deno`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="12.6000%" y="133" width="0.0192%" height="15" fill="rgb(213,199,7)" fg:x="1968" fg:w="3"/><text x="12.8500%" y="143.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (9 samples, 0.06%)</title><rect x="12.6321%" y="133" width="0.0576%" height="15" fill="rgb(250,110,10)" fg:x="1973" fg:w="9"/><text x="12.8821%" y="143.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::CallbackScope&gt; (5 samples, 0.03%)</title><rect x="12.6897%" y="133" width="0.0320%" height="15" fill="rgb(248,123,6)" fg:x="1982" fg:w="5"/><text x="12.9397%" y="143.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (8 samples, 0.05%)</title><rect x="12.7217%" y="133" width="0.0512%" height="15" fill="rgb(206,91,31)" fg:x="1987" fg:w="8"/><text x="12.9717%" y="143.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="12.8817%" y="117" width="0.0192%" height="15" fill="rgb(211,154,13)" fg:x="2012" fg:w="3"/><text x="13.1317%" y="127.50"></text></g><g><title>deno`&lt;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (5 samples, 0.03%)</title><rect x="12.9010%" y="117" width="0.0320%" height="15" fill="rgb(225,148,7)" fg:x="2015" fg:w="5"/><text x="13.1510%" y="127.50"></text></g><g><title>deno`OUTLINED_FUNCTION_16186 (2 samples, 0.01%)</title><rect x="12.9394%" y="117" width="0.0128%" height="15" fill="rgb(220,160,43)" fg:x="2021" fg:w="2"/><text x="13.1894%" y="127.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (13 samples, 0.08%)</title><rect x="12.9522%" y="117" width="0.0832%" height="15" fill="rgb(213,52,39)" fg:x="2023" fg:w="13"/><text x="13.2022%" y="127.50"></text></g><g><title>deno`&lt;deno_flash::socket::Stream as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="13.0802%" y="101" width="0.0192%" height="15" fill="rgb(243,137,7)" fg:x="2043" fg:w="3"/><text x="13.3302%" y="111.50"></text></g><g><title>deno`DYLD-STUB$$send (7 samples, 0.04%)</title><rect x="13.0994%" y="101" width="0.0448%" height="15" fill="rgb(230,79,13)" fg:x="2046" fg:w="7"/><text x="13.3494%" y="111.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (2 samples, 0.01%)</title><rect x="13.1442%" y="101" width="0.0128%" height="15" fill="rgb(247,105,23)" fg:x="2053" fg:w="2"/><text x="13.3942%" y="111.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (4,071 samples, 26.06%)</title><rect x="13.0354%" y="117" width="26.0644%" height="15" fill="rgb(223,179,41)" fg:x="2036" fg:w="4071"/><text x="13.2854%" y="127.50">deno`deno_flash::socket::Stream::try_write</text></g><g><title>libsystem_kernel.dylib`__sendto (4,052 samples, 25.94%)</title><rect x="13.1571%" y="101" width="25.9428%" height="15" fill="rgb(218,9,34)" fg:x="2055" fg:w="4052"/><text x="13.4071%" y="111.50">libsystem_kernel.dylib`__sendto</text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (27 samples, 0.17%)</title><rect x="39.0998%" y="117" width="0.1729%" height="15" fill="rgb(222,106,8)" fg:x="6107" fg:w="27"/><text x="39.3498%" y="127.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (11 samples, 0.07%)</title><rect x="39.2023%" y="101" width="0.0704%" height="15" fill="rgb(211,220,0)" fg:x="6123" fg:w="11"/><text x="39.4523%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="39.3559%" y="101" width="0.0128%" height="15" fill="rgb(229,52,16)" fg:x="6147" fg:w="2"/><text x="39.6059%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="39.3687%" y="101" width="0.0192%" height="15" fill="rgb(212,155,18)" fg:x="6149" fg:w="3"/><text x="39.6187%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (8 samples, 0.05%)</title><rect x="39.3879%" y="101" width="0.0512%" height="15" fill="rgb(242,21,14)" fg:x="6152" fg:w="8"/><text x="39.6379%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.29%)</title><rect x="39.2791%" y="117" width="0.2881%" height="15" fill="rgb(222,19,48)" fg:x="6135" fg:w="45"/><text x="39.5291%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (20 samples, 0.13%)</title><rect x="39.4391%" y="101" width="0.1280%" height="15" fill="rgb(232,45,27)" fg:x="6160" fg:w="20"/><text x="39.6891%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.11%)</title><rect x="39.4584%" y="85" width="0.1088%" height="15" fill="rgb(249,103,42)" fg:x="6163" fg:w="17"/><text x="39.7084%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (6 samples, 0.04%)</title><rect x="40.3163%" y="101" width="0.0384%" height="15" fill="rgb(246,81,33)" fg:x="6297" fg:w="6"/><text x="40.5663%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (19 samples, 0.12%)</title><rect x="40.3547%" y="101" width="0.1216%" height="15" fill="rgb(252,33,42)" fg:x="6303" fg:w="19"/><text x="40.6047%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (7 samples, 0.04%)</title><rect x="40.4763%" y="101" width="0.0448%" height="15" fill="rgb(209,212,41)" fg:x="6322" fg:w="7"/><text x="40.7263%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="40.5212%" y="101" width="0.0128%" height="15" fill="rgb(207,154,6)" fg:x="6329" fg:w="2"/><text x="40.7712%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (191 samples, 1.22%)</title><rect x="39.5672%" y="117" width="1.2229%" height="15" fill="rgb(223,64,47)" fg:x="6180" fg:w="191"/><text x="39.8172%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (40 samples, 0.26%)</title><rect x="40.5340%" y="101" width="0.2561%" height="15" fill="rgb(211,161,38)" fg:x="6331" fg:w="40"/><text x="40.7840%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="40.7901%" y="117" width="0.0256%" height="15" fill="rgb(219,138,40)" fg:x="6371" fg:w="4"/><text x="41.0401%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.03%)</title><rect x="40.8157%" y="117" width="0.0320%" height="15" fill="rgb(241,228,46)" fg:x="6375" fg:w="5"/><text x="41.0657%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (10 samples, 0.06%)</title><rect x="40.8605%" y="117" width="0.0640%" height="15" fill="rgb(223,209,38)" fg:x="6382" fg:w="10"/><text x="41.1105%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="40.9245%" y="117" width="0.0192%" height="15" fill="rgb(236,164,45)" fg:x="6392" fg:w="3"/><text x="41.1745%" y="127.50"></text></g><g><title>deno`deno_flash::flash_respond (4,402 samples, 28.18%)</title><rect x="12.7729%" y="133" width="28.1836%" height="15" fill="rgb(231,15,5)" fg:x="1995" fg:w="4402"/><text x="13.0229%" y="143.50">deno`deno_flash::flash_respond</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (2 samples, 0.01%)</title><rect x="40.9437%" y="117" width="0.0128%" height="15" fill="rgb(252,35,15)" fg:x="6395" fg:w="2"/><text x="41.1937%" y="127.50"></text></g><g><title>deno`deno_flash::socket::Stream::try_write (5 samples, 0.03%)</title><rect x="40.9565%" y="133" width="0.0320%" height="15" fill="rgb(248,181,18)" fg:x="6397" fg:w="5"/><text x="41.2065%" y="143.50"></text></g><g><title>deno`serde_v8::de::from_v8 (7 samples, 0.04%)</title><rect x="40.9885%" y="133" width="0.0448%" height="15" fill="rgb(233,39,42)" fg:x="6402" fg:w="7"/><text x="41.2385%" y="143.50"></text></g><g><title>deno`v8::String::WriteUtf8 (2 samples, 0.01%)</title><rect x="41.0910%" y="117" width="0.0128%" height="15" fill="rgb(238,110,33)" fg:x="6418" fg:w="2"/><text x="41.3410%" y="127.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (4 samples, 0.03%)</title><rect x="41.1166%" y="101" width="0.0256%" height="15" fill="rgb(233,195,10)" fg:x="6422" fg:w="4"/><text x="41.3666%" y="111.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawOneByteString (3 samples, 0.02%)</title><rect x="41.5007%" y="85" width="0.0192%" height="15" fill="rgb(254,105,3)" fg:x="6482" fg:w="3"/><text x="41.7507%" y="95.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (6 samples, 0.04%)</title><rect x="41.5199%" y="85" width="0.0384%" height="15" fill="rgb(221,225,9)" fg:x="6485" fg:w="6"/><text x="41.7699%" y="95.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (2 samples, 0.01%)</title><rect x="41.6160%" y="69" width="0.0128%" height="15" fill="rgb(224,227,45)" fg:x="6500" fg:w="2"/><text x="41.8660%" y="79.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawOneByteString (3 samples, 0.02%)</title><rect x="41.6288%" y="69" width="0.0192%" height="15" fill="rgb(229,198,43)" fg:x="6502" fg:w="3"/><text x="41.8788%" y="79.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (16 samples, 0.10%)</title><rect x="41.6480%" y="69" width="0.1024%" height="15" fill="rgb(206,209,35)" fg:x="6505" fg:w="16"/><text x="41.8980%" y="79.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (9 samples, 0.06%)</title><rect x="41.6928%" y="53" width="0.0576%" height="15" fill="rgb(245,195,53)" fg:x="6512" fg:w="9"/><text x="41.9428%" y="63.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (2 samples, 0.01%)</title><rect x="42.0770%" y="53" width="0.0128%" height="15" fill="rgb(240,92,26)" fg:x="6572" fg:w="2"/><text x="42.3270%" y="63.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (3 samples, 0.02%)</title><rect x="42.4995%" y="37" width="0.0192%" height="15" fill="rgb(207,40,23)" fg:x="6638" fg:w="3"/><text x="42.7495%" y="47.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (80 samples, 0.51%)</title><rect x="42.0898%" y="53" width="0.5122%" height="15" fill="rgb(223,111,35)" fg:x="6574" fg:w="80"/><text x="42.3398%" y="63.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (13 samples, 0.08%)</title><rect x="42.5187%" y="37" width="0.0832%" height="15" fill="rgb(229,147,28)" fg:x="6641" fg:w="13"/><text x="42.7687%" y="47.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (143 samples, 0.92%)</title><rect x="41.7504%" y="69" width="0.9156%" height="15" fill="rgb(211,29,28)" fg:x="6521" fg:w="143"/><text x="42.0004%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.06%)</title><rect x="42.6020%" y="53" width="0.0640%" height="15" fill="rgb(228,72,33)" fg:x="6654" fg:w="10"/><text x="42.8520%" y="63.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (182 samples, 1.17%)</title><rect x="41.5584%" y="85" width="1.1652%" height="15" fill="rgb(205,214,31)" fg:x="6491" fg:w="182"/><text x="41.8084%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.06%)</title><rect x="42.6660%" y="69" width="0.0576%" height="15" fill="rgb(224,111,15)" fg:x="6664" fg:w="9"/><text x="42.9160%" y="79.50"></text></g><g><title>deno`v8::String::WriteUtf8 (254 samples, 1.63%)</title><rect x="41.1422%" y="101" width="1.6262%" height="15" fill="rgb(253,21,26)" fg:x="6426" fg:w="254"/><text x="41.3922%" y="111.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (7 samples, 0.04%)</title><rect x="42.7236%" y="85" width="0.0448%" height="15" fill="rgb(245,139,43)" fg:x="6673" fg:w="7"/><text x="42.9736%" y="95.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (3 samples, 0.02%)</title><rect x="42.7684%" y="101" width="0.0192%" height="15" fill="rgb(252,170,7)" fg:x="6680" fg:w="3"/><text x="43.0184%" y="111.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8_uninit (293 samples, 1.88%)</title><rect x="41.1038%" y="117" width="1.8759%" height="15" fill="rgb(231,118,14)" fg:x="6420" fg:w="293"/><text x="41.3538%" y="127.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.19%)</title><rect x="42.7876%" y="101" width="0.1921%" height="15" fill="rgb(238,83,0)" fg:x="6683" fg:w="30"/><text x="43.0376%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="43.0565%" y="101" width="0.0256%" height="15" fill="rgb(221,39,39)" fg:x="6725" fg:w="4"/><text x="43.3065%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.05%)</title><rect x="43.0885%" y="85" width="0.0512%" height="15" fill="rgb(222,119,46)" fg:x="6730" fg:w="8"/><text x="43.3385%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="43.1270%" y="69" width="0.0128%" height="15" fill="rgb(222,165,49)" fg:x="6736" fg:w="2"/><text x="43.3770%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.17%)</title><rect x="42.9797%" y="117" width="0.1665%" height="15" fill="rgb(219,113,52)" fg:x="6713" fg:w="26"/><text x="43.2297%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.06%)</title><rect x="43.0821%" y="101" width="0.0640%" height="15" fill="rgb(214,7,15)" fg:x="6729" fg:w="10"/><text x="43.3321%" y="111.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (333 samples, 2.13%)</title><rect x="41.0334%" y="133" width="2.1320%" height="15" fill="rgb(235,32,4)" fg:x="6409" fg:w="333"/><text x="41.2834%" y="143.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="43.1526%" y="117" width="0.0128%" height="15" fill="rgb(238,90,54)" fg:x="6740" fg:w="2"/><text x="43.4026%" y="127.50"></text></g><g><title>deno`v8::Integer::NewFromUnsigned (2 samples, 0.01%)</title><rect x="43.1718%" y="133" width="0.0128%" height="15" fill="rgb(213,208,19)" fg:x="6743" fg:w="2"/><text x="43.4218%" y="143.50"></text></g><g><title>deno`v8::Number::Value (3 samples, 0.02%)</title><rect x="43.1846%" y="133" width="0.0192%" height="15" fill="rgb(233,156,4)" fg:x="6745" fg:w="3"/><text x="43.4346%" y="143.50"></text></g><g><title>deno`v8::String::Length (2 samples, 0.01%)</title><rect x="43.2038%" y="133" width="0.0128%" height="15" fill="rgb(207,194,5)" fg:x="6748" fg:w="2"/><text x="43.4538%" y="143.50"></text></g><g><title>deno`v8::Value::IsNumber (4 samples, 0.03%)</title><rect x="43.2166%" y="133" width="0.0256%" height="15" fill="rgb(206,111,30)" fg:x="6750" fg:w="4"/><text x="43.4666%" y="143.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8_uninit (2 samples, 0.01%)</title><rect x="43.2486%" y="133" width="0.0128%" height="15" fill="rgb(243,70,54)" fg:x="6755" fg:w="2"/><text x="43.4986%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="43.2742%" y="133" width="0.0384%" height="15" fill="rgb(242,28,8)" fg:x="6759" fg:w="6"/><text x="43.5242%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="43.3126%" y="133" width="0.0192%" height="15" fill="rgb(219,106,18)" fg:x="6765" fg:w="3"/><text x="43.5626%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.13%)</title><rect x="43.3318%" y="133" width="0.1345%" height="15" fill="rgb(244,222,10)" fg:x="6768" fg:w="21"/><text x="43.5818%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.04%)</title><rect x="43.4215%" y="117" width="0.0448%" height="15" fill="rgb(236,179,52)" fg:x="6782" fg:w="7"/><text x="43.6715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.02%)</title><rect x="43.4663%" y="133" width="0.0192%" height="15" fill="rgb(213,23,39)" fg:x="6789" fg:w="3"/><text x="43.7163%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="43.4919%" y="133" width="0.0256%" height="15" fill="rgb(238,48,10)" fg:x="6793" fg:w="4"/><text x="43.7419%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.06%)</title><rect x="43.5175%" y="133" width="0.0576%" height="15" fill="rgb(251,196,23)" fg:x="6797" fg:w="9"/><text x="43.7675%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="43.5751%" y="133" width="0.0128%" height="15" fill="rgb(250,152,24)" fg:x="6806" fg:w="2"/><text x="43.8251%" y="143.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (4,898 samples, 31.36%)</title><rect x="12.2543%" y="149" width="31.3592%" height="15" fill="rgb(209,150,17)" fg:x="1914" fg:w="4898"/><text x="12.5043%" y="159.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFro..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (4 samples, 0.03%)</title><rect x="43.5879%" y="133" width="0.0256%" height="15" fill="rgb(234,202,34)" fg:x="6808" fg:w="4"/><text x="43.8379%" y="143.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (3 samples, 0.02%)</title><rect x="43.6135%" y="149" width="0.0192%" height="15" fill="rgb(253,148,53)" fg:x="6812" fg:w="3"/><text x="43.8635%" y="159.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::CallbackScope&gt; (2 samples, 0.01%)</title><rect x="43.6392%" y="149" width="0.0128%" height="15" fill="rgb(218,129,16)" fg:x="6816" fg:w="2"/><text x="43.8892%" y="159.50"></text></g><g><title>deno`deno_flash::flash_respond (3 samples, 0.02%)</title><rect x="43.6584%" y="149" width="0.0192%" height="15" fill="rgb(216,85,19)" fg:x="6819" fg:w="3"/><text x="43.9084%" y="159.50"></text></g><g><title>deno`serde_v8::de::from_v8 (4 samples, 0.03%)</title><rect x="43.6776%" y="149" width="0.0256%" height="15" fill="rgb(235,228,7)" fg:x="6822" fg:w="4"/><text x="43.9276%" y="159.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (7 samples, 0.04%)</title><rect x="43.7032%" y="149" width="0.0448%" height="15" fill="rgb(245,175,0)" fg:x="6826" fg:w="7"/><text x="43.9532%" y="159.50"></text></g><g><title>deno`v8::External::Value (3 samples, 0.02%)</title><rect x="43.7480%" y="149" width="0.0192%" height="15" fill="rgb(208,168,36)" fg:x="6833" fg:w="3"/><text x="43.9980%" y="159.50"></text></g><g><title>deno`v8::Value::IsTrue (4 samples, 0.03%)</title><rect x="43.7672%" y="149" width="0.0256%" height="15" fill="rgb(246,171,24)" fg:x="6836" fg:w="4"/><text x="44.0172%" y="159.50"></text></g><g><title>deno`v8__ReturnValue__Set (2 samples, 0.01%)</title><rect x="43.7992%" y="149" width="0.0128%" height="15" fill="rgb(215,142,24)" fg:x="6841" fg:w="2"/><text x="44.0492%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="43.8184%" y="149" width="0.0192%" height="15" fill="rgb(250,187,7)" fg:x="6844" fg:w="3"/><text x="44.0684%" y="159.50"></text></g><g><title>0x11001bbf4 (4,955 samples, 31.72%)</title><rect x="12.1327%" y="181" width="31.7242%" height="15" fill="rgb(228,66,33)" fg:x="1895" fg:w="4955"/><text x="12.3827%" y="191.50">0x11001bbf4</text></g><g><title>deno`Builtins_CallApiCallback (4,945 samples, 31.66%)</title><rect x="12.1967%" y="165" width="31.6602%" height="15" fill="rgb(234,215,21)" fg:x="1905" fg:w="4945"/><text x="12.4467%" y="175.50">deno`Builtins_CallApiCallback</text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (2 samples, 0.01%)</title><rect x="43.8696%" y="181" width="0.0128%" height="15" fill="rgb(222,191,20)" fg:x="6852" fg:w="2"/><text x="44.1196%" y="191.50"></text></g><g><title>deno`Builtins_CompileLazy (15 samples, 0.10%)</title><rect x="43.8825%" y="181" width="0.0960%" height="15" fill="rgb(245,79,54)" fg:x="6854" fg:w="15"/><text x="44.1325%" y="191.50"></text></g><g><title>deno`Builtins_LoadIC (11 samples, 0.07%)</title><rect x="43.9785%" y="181" width="0.0704%" height="15" fill="rgb(240,10,37)" fg:x="6869" fg:w="11"/><text x="44.2285%" y="191.50"></text></g><g><title>0x11005c5a4 (5,338 samples, 34.18%)</title><rect x="9.9046%" y="197" width="34.1763%" height="15" fill="rgb(214,192,32)" fg:x="1547" fg:w="5338"/><text x="10.1546%" y="207.50">0x11005c5a4</text></g><g><title>deno`deno_core::ops_builtin::op_str_byte_length_fast_fn (4 samples, 0.03%)</title><rect x="44.0553%" y="181" width="0.0256%" height="15" fill="rgb(209,36,54)" fg:x="6881" fg:w="4"/><text x="44.3053%" y="191.50"></text></g><g><title>0x11005c5cc (4 samples, 0.03%)</title><rect x="44.0873%" y="197" width="0.0256%" height="15" fill="rgb(220,10,11)" fg:x="6886" fg:w="4"/><text x="44.3373%" y="207.50"></text></g><g><title>0x11005c6b0 (2 samples, 0.01%)</title><rect x="44.1129%" y="197" width="0.0128%" height="15" fill="rgb(221,106,17)" fg:x="6890" fg:w="2"/><text x="44.3629%" y="207.50"></text></g><g><title>deno`Builtins_LoadIC (2 samples, 0.01%)</title><rect x="44.1129%" y="181" width="0.0128%" height="15" fill="rgb(251,142,44)" fg:x="6890" fg:w="2"/><text x="44.3629%" y="191.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (8 samples, 0.05%)</title><rect x="44.1257%" y="181" width="0.0512%" height="15" fill="rgb(238,13,15)" fg:x="6892" fg:w="8"/><text x="44.3757%" y="191.50"></text></g><g><title>0x11005c6f4 (11 samples, 0.07%)</title><rect x="44.1257%" y="197" width="0.0704%" height="15" fill="rgb(208,107,27)" fg:x="6892" fg:w="11"/><text x="44.3757%" y="207.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (3 samples, 0.02%)</title><rect x="44.1770%" y="181" width="0.0192%" height="15" fill="rgb(205,136,37)" fg:x="6900" fg:w="3"/><text x="44.4270%" y="191.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.01%)</title><rect x="44.2474%" y="181" width="0.0128%" height="15" fill="rgb(250,205,27)" fg:x="6911" fg:w="2"/><text x="44.4974%" y="191.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="44.2730%" y="149" width="0.0128%" height="15" fill="rgb(210,80,43)" fg:x="6915" fg:w="2"/><text x="44.5230%" y="159.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="44.3498%" y="117" width="0.0128%" height="15" fill="rgb(247,160,36)" fg:x="6927" fg:w="2"/><text x="44.5998%" y="127.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9822 (2 samples, 0.01%)</title><rect x="44.3626%" y="117" width="0.0128%" height="15" fill="rgb(234,13,49)" fg:x="6929" fg:w="2"/><text x="44.6126%" y="127.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="44.3754%" y="117" width="0.0192%" height="15" fill="rgb(234,122,0)" fg:x="6931" fg:w="3"/><text x="44.6254%" y="127.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (2 samples, 0.01%)</title><rect x="44.4011%" y="117" width="0.0128%" height="15" fill="rgb(207,146,38)" fg:x="6935" fg:w="2"/><text x="44.6511%" y="127.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21 samples, 0.13%)</title><rect x="44.2858%" y="133" width="0.1345%" height="15" fill="rgb(207,177,25)" fg:x="6917" fg:w="21"/><text x="44.5358%" y="143.50"></text></g><g><title>deno`deno_core::async_cancel::internal::_::_&lt;impl deno_core::async_cancel::internal::Registration&gt;::project_replace (3 samples, 0.02%)</title><rect x="44.4203%" y="133" width="0.0192%" height="15" fill="rgb(211,178,42)" fg:x="6938" fg:w="3"/><text x="44.6703%" y="143.50"></text></g><g><title>deno`&lt;futures_util::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (26 samples, 0.17%)</title><rect x="44.2858%" y="149" width="0.1665%" height="15" fill="rgb(230,69,54)" fg:x="6917" fg:w="26"/><text x="44.5358%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="44.4715%" y="133" width="0.0192%" height="15" fill="rgb(214,135,41)" fg:x="6946" fg:w="3"/><text x="44.7215%" y="143.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (6 samples, 0.04%)</title><rect x="44.4587%" y="149" width="0.0384%" height="15" fill="rgb(237,67,25)" fg:x="6944" fg:w="6"/><text x="44.7087%" y="159.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (2 samples, 0.01%)</title><rect x="44.5035%" y="149" width="0.0128%" height="15" fill="rgb(222,189,50)" fg:x="6951" fg:w="2"/><text x="44.7535%" y="159.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (2 samples, 0.01%)</title><rect x="44.5035%" y="133" width="0.0128%" height="15" fill="rgb(245,148,34)" fg:x="6951" fg:w="2"/><text x="44.7535%" y="143.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.01%)</title><rect x="44.5035%" y="117" width="0.0128%" height="15" fill="rgb(222,29,6)" fg:x="6951" fg:w="2"/><text x="44.7535%" y="127.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (49 samples, 0.31%)</title><rect x="44.2602%" y="165" width="0.3137%" height="15" fill="rgb(221,189,43)" fg:x="6913" fg:w="49"/><text x="44.5102%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="44.5227%" y="149" width="0.0512%" height="15" fill="rgb(207,36,27)" fg:x="6954" fg:w="8"/><text x="44.7727%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="44.5419%" y="133" width="0.0320%" height="15" fill="rgb(217,90,24)" fg:x="6957" fg:w="5"/><text x="44.7919%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.03%)</title><rect x="44.5419%" y="117" width="0.0320%" height="15" fill="rgb(224,66,35)" fg:x="6957" fg:w="5"/><text x="44.7919%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="44.5611%" y="101" width="0.0128%" height="15" fill="rgb(221,13,50)" fg:x="6960" fg:w="2"/><text x="44.8111%" y="111.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="44.5739%" y="165" width="0.0256%" height="15" fill="rgb(236,68,49)" fg:x="6962" fg:w="4"/><text x="44.8239%" y="175.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (3 samples, 0.02%)</title><rect x="44.6187%" y="165" width="0.0192%" height="15" fill="rgb(229,146,28)" fg:x="6969" fg:w="3"/><text x="44.8687%" y="175.50"></text></g><g><title>0x11005c9f0 (62 samples, 0.40%)</title><rect x="44.2474%" y="197" width="0.3970%" height="15" fill="rgb(225,31,38)" fg:x="6911" fg:w="62"/><text x="44.4974%" y="207.50"></text></g><g><title>deno`Builtins_CallApiCallback (60 samples, 0.38%)</title><rect x="44.2602%" y="181" width="0.3841%" height="15" fill="rgb(250,208,3)" fg:x="6913" fg:w="60"/><text x="44.5102%" y="191.50"></text></g><g><title>0x11005cb10 (4 samples, 0.03%)</title><rect x="44.6507%" y="197" width="0.0256%" height="15" fill="rgb(246,54,23)" fg:x="6974" fg:w="4"/><text x="44.9007%" y="207.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (4 samples, 0.03%)</title><rect x="44.6507%" y="181" width="0.0256%" height="15" fill="rgb(243,76,11)" fg:x="6974" fg:w="4"/><text x="44.9007%" y="191.50"></text></g><g><title>0x11005cdd0 (3 samples, 0.02%)</title><rect x="44.6828%" y="197" width="0.0192%" height="15" fill="rgb(245,21,50)" fg:x="6979" fg:w="3"/><text x="44.9328%" y="207.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="44.6828%" y="181" width="0.0192%" height="15" fill="rgb(228,9,43)" fg:x="6979" fg:w="3"/><text x="44.9328%" y="191.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="44.6892%" y="165" width="0.0128%" height="15" fill="rgb(208,100,47)" fg:x="6980" fg:w="2"/><text x="44.9392%" y="175.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="44.6892%" y="149" width="0.0128%" height="15" fill="rgb(232,26,8)" fg:x="6980" fg:w="2"/><text x="44.9392%" y="159.50"></text></g><g><title>0x11005ceb8 (2 samples, 0.01%)</title><rect x="44.7020%" y="197" width="0.0128%" height="15" fill="rgb(216,166,38)" fg:x="6982" fg:w="2"/><text x="44.9520%" y="207.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="44.7020%" y="181" width="0.0128%" height="15" fill="rgb(251,202,51)" fg:x="6982" fg:w="2"/><text x="44.9520%" y="191.50"></text></g><g><title>0x11005d990 (3 samples, 0.02%)</title><rect x="44.7532%" y="197" width="0.0192%" height="15" fill="rgb(254,216,34)" fg:x="6990" fg:w="3"/><text x="45.0032%" y="207.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (3 samples, 0.02%)</title><rect x="44.7532%" y="181" width="0.0192%" height="15" fill="rgb(251,32,27)" fg:x="6990" fg:w="3"/><text x="45.0032%" y="191.50"></text></g><g><title>0x11005dae8 (2 samples, 0.01%)</title><rect x="44.7788%" y="197" width="0.0128%" height="15" fill="rgb(208,127,28)" fg:x="6994" fg:w="2"/><text x="45.0288%" y="207.50"></text></g><g><title>0x11005db50 (2 samples, 0.01%)</title><rect x="44.7980%" y="197" width="0.0128%" height="15" fill="rgb(224,137,22)" fg:x="6997" fg:w="2"/><text x="45.0480%" y="207.50"></text></g><g><title>0x11005db80 (3 samples, 0.02%)</title><rect x="44.8108%" y="197" width="0.0192%" height="15" fill="rgb(254,70,32)" fg:x="6999" fg:w="3"/><text x="45.0608%" y="207.50"></text></g><g><title>0x11005dbb0 (3 samples, 0.02%)</title><rect x="44.8300%" y="197" width="0.0192%" height="15" fill="rgb(229,75,37)" fg:x="7002" fg:w="3"/><text x="45.0800%" y="207.50"></text></g><g><title>0x11005dc00 (9 samples, 0.06%)</title><rect x="44.8684%" y="197" width="0.0576%" height="15" fill="rgb(252,64,23)" fg:x="7008" fg:w="9"/><text x="45.1184%" y="207.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (9 samples, 0.06%)</title><rect x="44.8684%" y="181" width="0.0576%" height="15" fill="rgb(232,162,48)" fg:x="7008" fg:w="9"/><text x="45.1184%" y="191.50"></text></g><g><title>0x11005dc10 (2 samples, 0.01%)</title><rect x="44.9261%" y="197" width="0.0128%" height="15" fill="rgb(246,160,12)" fg:x="7017" fg:w="2"/><text x="45.1761%" y="207.50"></text></g><g><title>0x11005dcd0 (2 samples, 0.01%)</title><rect x="44.9581%" y="197" width="0.0128%" height="15" fill="rgb(247,166,0)" fg:x="7022" fg:w="2"/><text x="45.2081%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="45.0541%" y="133" width="0.0128%" height="15" fill="rgb(249,219,21)" fg:x="7037" fg:w="2"/><text x="45.3041%" y="143.50"></text></g><g><title>deno`operator new(unsigned long) (3 samples, 0.02%)</title><rect x="45.0541%" y="149" width="0.0192%" height="15" fill="rgb(205,209,3)" fg:x="7037" fg:w="3"/><text x="45.3041%" y="159.50"></text></g><g><title>0x11005dcf0 (17 samples, 0.11%)</title><rect x="44.9709%" y="197" width="0.1088%" height="15" fill="rgb(243,44,1)" fg:x="7024" fg:w="17"/><text x="45.2209%" y="207.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (17 samples, 0.11%)</title><rect x="44.9709%" y="181" width="0.1088%" height="15" fill="rgb(206,159,16)" fg:x="7024" fg:w="17"/><text x="45.2209%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::InsertIntoRememberedSetFromCode (4 samples, 0.03%)</title><rect x="45.0541%" y="165" width="0.0256%" height="15" fill="rgb(244,77,30)" fg:x="7037" fg:w="4"/><text x="45.3041%" y="175.50"></text></g><g><title>0x11005dd00 (2 samples, 0.01%)</title><rect x="45.0861%" y="197" width="0.0128%" height="15" fill="rgb(218,69,12)" fg:x="7042" fg:w="2"/><text x="45.3361%" y="207.50"></text></g><g><title>0x11005dd28 (2 samples, 0.01%)</title><rect x="45.0989%" y="197" width="0.0128%" height="15" fill="rgb(212,87,7)" fg:x="7044" fg:w="2"/><text x="45.3489%" y="207.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="45.1437%" y="197" width="0.0128%" height="15" fill="rgb(245,114,25)" fg:x="7051" fg:w="2"/><text x="45.3937%" y="207.50"></text></g><g><title>deno`deno_flash::next_request_sync (2 samples, 0.01%)</title><rect x="45.1693%" y="197" width="0.0128%" height="15" fill="rgb(210,61,42)" fg:x="7055" fg:w="2"/><text x="45.4193%" y="207.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (6,361 samples, 40.73%)</title><rect x="4.4625%" y="213" width="40.7260%" height="15" fill="rgb(211,52,33)" fg:x="697" fg:w="6361"/><text x="4.7125%" y="223.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_ResolvePromise (3 samples, 0.02%)</title><rect x="45.1886%" y="213" width="0.0192%" height="15" fill="rgb(234,58,33)" fg:x="7058" fg:w="3"/><text x="45.4386%" y="223.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (6,387 samples, 40.89%)</title><rect x="4.3217%" y="277" width="40.8925%" height="15" fill="rgb(220,115,36)" fg:x="675" fg:w="6387"/><text x="4.5717%" y="287.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isol..</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (6,380 samples, 40.85%)</title><rect x="4.3665%" y="261" width="40.8477%" height="15" fill="rgb(243,153,54)" fg:x="682" fg:w="6380"/><text x="4.6165%" y="271.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (6,378 samples, 40.83%)</title><rect x="4.3793%" y="245" width="40.8349%" height="15" fill="rgb(251,47,18)" fg:x="684" fg:w="6378"/><text x="4.6293%" y="255.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (6,370 samples, 40.78%)</title><rect x="4.4305%" y="229" width="40.7837%" height="15" fill="rgb(242,102,42)" fg:x="692" fg:w="6370"/><text x="4.6805%" y="239.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (6,515 samples, 41.71%)</title><rect x="3.5149%" y="373" width="41.7120%" height="15" fill="rgb(234,31,38)" fg:x="549" fg:w="6515"/><text x="3.7649%" y="383.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;..</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (6,409 samples, 41.03%)</title><rect x="4.1936%" y="357" width="41.0334%" height="15" fill="rgb(221,117,51)" fg:x="655" fg:w="6409"/><text x="4.4436%" y="367.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (6,406 samples, 41.01%)</title><rect x="4.2128%" y="341" width="41.0141%" height="15" fill="rgb(212,20,18)" fg:x="658" fg:w="6406"/><text x="4.4628%" y="351.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (6,403 samples, 40.99%)</title><rect x="4.2320%" y="325" width="40.9949%" height="15" fill="rgb(245,133,36)" fg:x="661" fg:w="6403"/><text x="4.4820%" y="335.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (6,397 samples, 40.96%)</title><rect x="4.2704%" y="309" width="40.9565%" height="15" fill="rgb(212,6,19)" fg:x="667" fg:w="6397"/><text x="4.5204%" y="319.50">deno`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (6,394 samples, 40.94%)</title><rect x="4.2896%" y="293" width="40.9373%" height="15" fill="rgb(218,1,36)" fg:x="670" fg:w="6394"/><text x="4.5396%" y="303.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::in..</text></g><g><title>deno`v8::internal::Isolate::UnregisterTryCatchHandler (2 samples, 0.01%)</title><rect x="45.2142%" y="277" width="0.0128%" height="15" fill="rgb(246,84,54)" fg:x="7062" fg:w="2"/><text x="45.4642%" y="287.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (2 samples, 0.01%)</title><rect x="45.2270%" y="373" width="0.0128%" height="15" fill="rgb(242,110,6)" fg:x="7064" fg:w="2"/><text x="45.4770%" y="383.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (6 samples, 0.04%)</title><rect x="45.2398%" y="373" width="0.0384%" height="15" fill="rgb(214,47,5)" fg:x="7066" fg:w="6"/><text x="45.4898%" y="383.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (2 samples, 0.01%)</title><rect x="45.2782%" y="373" width="0.0128%" height="15" fill="rgb(218,159,25)" fg:x="7072" fg:w="2"/><text x="45.5282%" y="383.50"></text></g><g><title>deno`v8::handle::HandleHost::get_isolate (2 samples, 0.01%)</title><rect x="45.2910%" y="373" width="0.0128%" height="15" fill="rgb(215,211,28)" fg:x="7074" fg:w="2"/><text x="45.5410%" y="383.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (4 samples, 0.03%)</title><rect x="45.3038%" y="373" width="0.0256%" height="15" fill="rgb(238,59,32)" fg:x="7076" fg:w="4"/><text x="45.5538%" y="383.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (2 samples, 0.01%)</title><rect x="45.3422%" y="373" width="0.0128%" height="15" fill="rgb(226,82,3)" fg:x="7082" fg:w="2"/><text x="45.5922%" y="383.50"></text></g><g><title>deno`v8::internal::Isolate::ClearKeptObjects (3 samples, 0.02%)</title><rect x="45.3550%" y="373" width="0.0192%" height="15" fill="rgb(240,164,32)" fg:x="7084" fg:w="3"/><text x="45.6050%" y="383.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (3 samples, 0.02%)</title><rect x="45.3870%" y="373" width="0.0192%" height="15" fill="rgb(232,46,7)" fg:x="7089" fg:w="3"/><text x="45.6370%" y="383.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (3 samples, 0.02%)</title><rect x="45.4062%" y="373" width="0.0192%" height="15" fill="rgb(229,129,53)" fg:x="7092" fg:w="3"/><text x="45.6562%" y="383.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (2 samples, 0.01%)</title><rect x="45.4254%" y="373" width="0.0128%" height="15" fill="rgb(234,188,29)" fg:x="7095" fg:w="2"/><text x="45.6754%" y="383.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (7 samples, 0.04%)</title><rect x="45.4382%" y="373" width="0.0448%" height="15" fill="rgb(246,141,4)" fg:x="7097" fg:w="7"/><text x="45.6882%" y="383.50"></text></g><g><title>deno`v8::base::Mutex::Lock (3 samples, 0.02%)</title><rect x="45.4895%" y="357" width="0.0192%" height="15" fill="rgb(229,23,39)" fg:x="7105" fg:w="3"/><text x="45.7395%" y="367.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::EvacuatePagesInParallel (2 samples, 0.01%)</title><rect x="45.5151%" y="245" width="0.0128%" height="15" fill="rgb(206,12,3)" fg:x="7109" fg:w="2"/><text x="45.7651%" y="255.50"></text></g><g><title>deno`v8::internal::CompactionSpaceCollection::CompactionSpaceCollection (2 samples, 0.01%)</title><rect x="45.5151%" y="229" width="0.0128%" height="15" fill="rgb(252,226,20)" fg:x="7109" fg:w="2"/><text x="45.7651%" y="239.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::EvacuatePrologue (3 samples, 0.02%)</title><rect x="45.5279%" y="245" width="0.0192%" height="15" fill="rgb(216,123,35)" fg:x="7111" fg:w="3"/><text x="45.7779%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.02%)</title><rect x="45.5279%" y="229" width="0.0192%" height="15" fill="rgb(212,68,40)" fg:x="7111" fg:w="3"/><text x="45.7779%" y="239.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::UpdatePointersAfterEvacuation (2 samples, 0.01%)</title><rect x="45.5471%" y="245" width="0.0128%" height="15" fill="rgb(254,125,32)" fg:x="7114" fg:w="2"/><text x="45.7971%" y="255.50"></text></g><g><title>deno`v8::internal::Heap::IterateRootsIncludingClients(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.01%)</title><rect x="45.5471%" y="229" width="0.0128%" height="15" fill="rgb(253,97,22)" fg:x="7114" fg:w="2"/><text x="45.7971%" y="239.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::Evacuate (8 samples, 0.05%)</title><rect x="45.5151%" y="261" width="0.0512%" height="15" fill="rgb(241,101,14)" fg:x="7109" fg:w="8"/><text x="45.7651%" y="271.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.01%)</title><rect x="45.5727%" y="197" width="0.0128%" height="15" fill="rgb(238,103,29)" fg:x="7118" fg:w="2"/><text x="45.8227%" y="207.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::RootMarkingVisitor::VisitRootPointer (2 samples, 0.01%)</title><rect x="45.5727%" y="181" width="0.0128%" height="15" fill="rgb(233,195,47)" fg:x="7118" fg:w="2"/><text x="45.8227%" y="191.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::MarkRoots (4 samples, 0.03%)</title><rect x="45.5727%" y="245" width="0.0256%" height="15" fill="rgb(246,218,30)" fg:x="7118" fg:w="4"/><text x="45.8227%" y="255.50"></text></g><g><title>deno`v8::internal::Heap::IterateRootsIncludingClients(v8::internal::RootVisitor*, v8::base::EnumSet (4 samples, 0.03%)</title><rect x="45.5727%" y="229" width="0.0256%" height="15" fill="rgb(219,145,47)" fg:x="7118" fg:w="4"/><text x="45.8227%" y="239.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (4 samples, 0.03%)</title><rect x="45.5727%" y="213" width="0.0256%" height="15" fill="rgb(243,12,26)" fg:x="7118" fg:w="4"/><text x="45.8227%" y="223.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::CollectGarbage (16 samples, 0.10%)</title><rect x="45.5087%" y="277" width="0.1024%" height="15" fill="rgb(214,87,16)" fg:x="7108" fg:w="16"/><text x="45.7587%" y="287.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::MarkLiveObjects (7 samples, 0.04%)</title><rect x="45.5663%" y="261" width="0.0448%" height="15" fill="rgb(208,99,42)" fg:x="7117" fg:w="7"/><text x="45.8163%" y="271.50"></text></g><g><title>deno`v8::internal::Heap::FinalizeIncrementalMarkingIfComplete (17 samples, 0.11%)</title><rect x="45.5087%" y="341" width="0.1088%" height="15" fill="rgb(253,99,2)" fg:x="7108" fg:w="17"/><text x="45.7587%" y="351.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (17 samples, 0.11%)</title><rect x="45.5087%" y="325" width="0.1088%" height="15" fill="rgb(220,168,23)" fg:x="7108" fg:w="17"/><text x="45.7587%" y="335.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (17 samples, 0.11%)</title><rect x="45.5087%" y="309" width="0.1088%" height="15" fill="rgb(242,38,24)" fg:x="7108" fg:w="17"/><text x="45.7587%" y="319.50"></text></g><g><title>deno`v8::internal::Heap::MarkCompact (17 samples, 0.11%)</title><rect x="45.5087%" y="293" width="0.1088%" height="15" fill="rgb(225,182,9)" fg:x="7108" fg:w="17"/><text x="45.7587%" y="303.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.01%)</title><rect x="45.6175%" y="261" width="0.0128%" height="15" fill="rgb(243,178,37)" fg:x="7125" fg:w="2"/><text x="45.8675%" y="271.50"></text></g><g><title>deno`v8::internal::Heap::StartIncrementalMarking (5 samples, 0.03%)</title><rect x="45.6175%" y="341" width="0.0320%" height="15" fill="rgb(232,139,19)" fg:x="7125" fg:w="5"/><text x="45.8675%" y="351.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::Start (5 samples, 0.03%)</title><rect x="45.6175%" y="325" width="0.0320%" height="15" fill="rgb(225,201,24)" fg:x="7125" fg:w="5"/><text x="45.8675%" y="335.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::StartMarkingMajor (5 samples, 0.03%)</title><rect x="45.6175%" y="309" width="0.0320%" height="15" fill="rgb(221,47,46)" fg:x="7125" fg:w="5"/><text x="45.8675%" y="319.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::MarkRoots (5 samples, 0.03%)</title><rect x="45.6175%" y="293" width="0.0320%" height="15" fill="rgb(249,23,13)" fg:x="7125" fg:w="5"/><text x="45.8675%" y="303.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (5 samples, 0.03%)</title><rect x="45.6175%" y="277" width="0.0320%" height="15" fill="rgb(219,9,5)" fg:x="7125" fg:w="5"/><text x="45.8675%" y="287.50"></text></g><g><title>deno`v8::internal::Heap::IterateBuiltins (2 samples, 0.01%)</title><rect x="45.6367%" y="261" width="0.0128%" height="15" fill="rgb(254,171,16)" fg:x="7128" fg:w="2"/><text x="45.8867%" y="271.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::IncrementalMarkingRootMarkingVisitor::VisitRootPointer (2 samples, 0.01%)</title><rect x="45.6367%" y="245" width="0.0128%" height="15" fill="rgb(230,171,20)" fg:x="7128" fg:w="2"/><text x="45.8867%" y="255.50"></text></g><g><title>deno`int v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt;::VisitLeftTrimmableArray&lt;v8::internal::FixedArray&gt; (2 samples, 0.01%)</title><rect x="45.6879%" y="293" width="0.0128%" height="15" fill="rgb(210,71,41)" fg:x="7136" fg:w="2"/><text x="45.9379%" y="303.50"></text></g><g><title>deno`void v8::internal::MarkingVisitorBase&lt;v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt;, v8::internal::MarkingState&gt;::ProcessStrongHeapObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.01%)</title><rect x="45.6879%" y="277" width="0.0128%" height="15" fill="rgb(206,173,20)" fg:x="7136" fg:w="2"/><text x="45.9379%" y="287.50"></text></g><g><title>deno`v8::internal::MarkingWorklists::Local::Pop (2 samples, 0.01%)</title><rect x="45.7072%" y="293" width="0.0128%" height="15" fill="rgb(233,88,34)" fg:x="7139" fg:w="2"/><text x="45.9572%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.01%)</title><rect x="45.7072%" y="277" width="0.0128%" height="15" fill="rgb(223,209,46)" fg:x="7139" fg:w="2"/><text x="45.9572%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (2 samples, 0.01%)</title><rect x="45.7072%" y="261" width="0.0128%" height="15" fill="rgb(250,43,18)" fg:x="7139" fg:w="2"/><text x="45.9572%" y="271.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateMaybeWeakPointers&lt;v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt; &gt;(v8::internal::HeapObject, int, int, v8::internal::MainMarkingVisitor (2 samples, 0.01%)</title><rect x="45.7264%" y="293" width="0.0128%" height="15" fill="rgb(208,13,10)" fg:x="7142" fg:w="2"/><text x="45.9764%" y="303.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::ProcessMarkingWorklist (20 samples, 0.13%)</title><rect x="45.6495%" y="309" width="0.1280%" height="15" fill="rgb(212,200,36)" fg:x="7130" fg:w="20"/><text x="45.8995%" y="319.50"></text></g><g><title>deno`void v8::internal::MarkingVisitorBase&lt;v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt;, v8::internal::MarkingState&gt;::ProcessStrongHeapObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (5 samples, 0.03%)</title><rect x="45.7456%" y="293" width="0.0320%" height="15" fill="rgb(225,90,30)" fg:x="7145" fg:w="5"/><text x="45.9956%" y="303.50"></text></g><g><title>deno`void v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt;::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (3 samples, 0.02%)</title><rect x="45.7776%" y="309" width="0.0192%" height="15" fill="rgb(236,182,39)" fg:x="7150" fg:w="3"/><text x="46.0276%" y="319.50"></text></g><g><title>deno`v8::internal::IncrementalMarkingJob::Task::RunInternal (47 samples, 0.30%)</title><rect x="45.5087%" y="357" width="0.3009%" height="15" fill="rgb(212,144,35)" fg:x="7108" fg:w="47"/><text x="45.7587%" y="367.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::AdvanceAndFinalizeIfComplete (25 samples, 0.16%)</title><rect x="45.6495%" y="341" width="0.1601%" height="15" fill="rgb(228,63,44)" fg:x="7130" fg:w="25"/><text x="45.8995%" y="351.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::Step (25 samples, 0.16%)</title><rect x="45.6495%" y="325" width="0.1601%" height="15" fill="rgb(228,109,6)" fg:x="7130" fg:w="25"/><text x="45.8995%" y="335.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (6 samples, 0.04%)</title><rect x="45.8480%" y="261" width="0.0384%" height="15" fill="rgb(238,117,24)" fg:x="7161" fg:w="6"/><text x="46.0980%" y="271.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (2 samples, 0.01%)</title><rect x="45.8928%" y="261" width="0.0128%" height="15" fill="rgb(242,26,26)" fg:x="7168" fg:w="2"/><text x="46.1428%" y="271.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (10 samples, 0.06%)</title><rect x="45.8480%" y="277" width="0.0640%" height="15" fill="rgb(221,92,48)" fg:x="7161" fg:w="10"/><text x="46.0980%" y="287.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (6 samples, 0.04%)</title><rect x="45.9376%" y="229" width="0.0384%" height="15" fill="rgb(209,209,32)" fg:x="7175" fg:w="6"/><text x="46.1876%" y="239.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (2 samples, 0.01%)</title><rect x="46.2578%" y="197" width="0.0128%" height="15" fill="rgb(221,70,22)" fg:x="7225" fg:w="2"/><text x="46.5078%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::GetFillToAlign (5 samples, 0.03%)</title><rect x="46.2706%" y="197" width="0.0320%" height="15" fill="rgb(248,145,5)" fg:x="7227" fg:w="5"/><text x="46.5206%" y="207.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (30 samples, 0.19%)</title><rect x="46.1425%" y="213" width="0.1921%" height="15" fill="rgb(226,116,26)" fg:x="7207" fg:w="30"/><text x="46.3925%" y="223.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (5 samples, 0.03%)</title><rect x="46.3026%" y="197" width="0.0320%" height="15" fill="rgb(244,5,17)" fg:x="7232" fg:w="5"/><text x="46.5526%" y="207.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInNewSpace (2 samples, 0.01%)</title><rect x="46.3346%" y="213" width="0.0128%" height="15" fill="rgb(252,159,33)" fg:x="7237" fg:w="2"/><text x="46.5846%" y="223.50"></text></g><g><title>deno`v8::internal::Scavenger::PromotionList::Local::Pop (2 samples, 0.01%)</title><rect x="46.3602%" y="213" width="0.0128%" height="15" fill="rgb(206,71,0)" fg:x="7241" fg:w="2"/><text x="46.6102%" y="223.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::ShouldBePromoted (2 samples, 0.01%)</title><rect x="46.3730%" y="213" width="0.0128%" height="15" fill="rgb(233,118,54)" fg:x="7243" fg:w="2"/><text x="46.6230%" y="223.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (2 samples, 0.01%)</title><rect x="46.3858%" y="213" width="0.0128%" height="15" fill="rgb(234,83,48)" fg:x="7245" fg:w="2"/><text x="46.6358%" y="223.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (7 samples, 0.04%)</title><rect x="46.3986%" y="213" width="0.0448%" height="15" fill="rgb(228,3,54)" fg:x="7247" fg:w="7"/><text x="46.6486%" y="223.50"></text></g><g><title>deno`auto v8::internal::BodyDescriptorApply&lt;v8::internal::CallIterateBody, v8::internal::Map&amp;, v8::internal::HeapObject&amp;, int&amp;, v8::internal::IterateAndScavengePromotedObjectsVisitor*&amp;&gt; (5 samples, 0.03%)</title><rect x="46.4498%" y="197" width="0.0320%" height="15" fill="rgb(226,155,13)" fg:x="7255" fg:w="5"/><text x="46.6998%" y="207.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (3 samples, 0.02%)</title><rect x="46.4818%" y="197" width="0.0192%" height="15" fill="rgb(241,28,37)" fg:x="7260" fg:w="3"/><text x="46.7318%" y="207.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (2 samples, 0.01%)</title><rect x="46.7892%" y="165" width="0.0128%" height="15" fill="rgb(233,93,10)" fg:x="7308" fg:w="2"/><text x="47.0392%" y="175.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (21 samples, 0.13%)</title><rect x="46.6739%" y="181" width="0.1345%" height="15" fill="rgb(225,113,19)" fg:x="7290" fg:w="21"/><text x="46.9239%" y="191.50"></text></g><g><title>deno`void v8::internal::HeapObject::IterateFast&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (59 samples, 0.38%)</title><rect x="46.4434%" y="213" width="0.3777%" height="15" fill="rgb(241,2,18)" fg:x="7254" fg:w="59"/><text x="46.6934%" y="223.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (49 samples, 0.31%)</title><rect x="46.5075%" y="197" width="0.3137%" height="15" fill="rgb(228,207,21)" fg:x="7264" fg:w="49"/><text x="46.7575%" y="207.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::ShouldBePromoted (2 samples, 0.01%)</title><rect x="46.8084%" y="181" width="0.0128%" height="15" fill="rgb(213,211,35)" fg:x="7311" fg:w="2"/><text x="47.0584%" y="191.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.01%)</title><rect x="46.8404%" y="197" width="0.0128%" height="15" fill="rgb(209,83,10)" fg:x="7316" fg:w="2"/><text x="47.0904%" y="207.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (2 samples, 0.01%)</title><rect x="46.8404%" y="181" width="0.0128%" height="15" fill="rgb(209,164,1)" fg:x="7316" fg:w="2"/><text x="47.0904%" y="191.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (6 samples, 0.04%)</title><rect x="46.8212%" y="213" width="0.0384%" height="15" fill="rgb(213,184,43)" fg:x="7313" fg:w="6"/><text x="47.0712%" y="223.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (139 samples, 0.89%)</title><rect x="45.9825%" y="229" width="0.8899%" height="15" fill="rgb(231,61,34)" fg:x="7182" fg:w="139"/><text x="46.2325%" y="239.50"></text></g><g><title>deno`v8::internal::CompactionSpace::TryExpandImpl (2 samples, 0.01%)</title><rect x="47.0453%" y="181" width="0.0128%" height="15" fill="rgb(235,75,3)" fg:x="7348" fg:w="2"/><text x="47.2953%" y="191.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::TryExpandImpl (2 samples, 0.01%)</title><rect x="47.0453%" y="165" width="0.0128%" height="15" fill="rgb(220,106,47)" fg:x="7348" fg:w="2"/><text x="47.2953%" y="175.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (2 samples, 0.01%)</title><rect x="47.0453%" y="149" width="0.0128%" height="15" fill="rgb(210,196,33)" fg:x="7348" fg:w="2"/><text x="47.2953%" y="159.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (25 samples, 0.16%)</title><rect x="46.9108%" y="213" width="0.1601%" height="15" fill="rgb(229,154,42)" fg:x="7327" fg:w="25"/><text x="47.1608%" y="223.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::RawRefillLabMain (4 samples, 0.03%)</title><rect x="47.0453%" y="197" width="0.0256%" height="15" fill="rgb(228,114,26)" fg:x="7348" fg:w="4"/><text x="47.2953%" y="207.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (32 samples, 0.20%)</title><rect x="46.8788%" y="229" width="0.2049%" height="15" fill="rgb(208,144,1)" fg:x="7322" fg:w="32"/><text x="47.1288%" y="239.50"></text></g><g><title>deno`void v8::internal::HeapObject::IterateFast&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (3 samples, 0.02%)</title><rect x="47.0837%" y="229" width="0.0192%" height="15" fill="rgb(239,112,37)" fg:x="7354" fg:w="3"/><text x="47.3337%" y="239.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (183 samples, 1.17%)</title><rect x="45.9376%" y="245" width="1.1716%" height="15" fill="rgb(210,96,50)" fg:x="7175" fg:w="183"/><text x="46.1876%" y="255.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (184 samples, 1.18%)</title><rect x="45.9376%" y="261" width="1.1781%" height="15" fill="rgb(222,178,2)" fg:x="7175" fg:w="184"/><text x="46.1876%" y="271.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (185 samples, 1.18%)</title><rect x="45.9376%" y="277" width="1.1845%" height="15" fill="rgb(226,74,18)" fg:x="7175" fg:w="185"/><text x="46.1876%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (2 samples, 0.01%)</title><rect x="47.1221%" y="277" width="0.0128%" height="15" fill="rgb(225,67,54)" fg:x="7360" fg:w="2"/><text x="47.3721%" y="287.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (205 samples, 1.31%)</title><rect x="45.8288%" y="293" width="1.3125%" height="15" fill="rgb(251,92,32)" fg:x="7158" fg:w="205"/><text x="46.0788%" y="303.50"></text></g><g><title>deno`v8::internal::SemiSpace::Swap (6 samples, 0.04%)</title><rect x="47.1413%" y="293" width="0.0384%" height="15" fill="rgb(228,149,22)" fg:x="7363" fg:w="6"/><text x="47.3913%" y="303.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (220 samples, 1.41%)</title><rect x="45.8096%" y="325" width="1.4085%" height="15" fill="rgb(243,54,13)" fg:x="7155" fg:w="220"/><text x="46.0596%" y="335.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (218 samples, 1.40%)</title><rect x="45.8224%" y="309" width="1.3957%" height="15" fill="rgb(243,180,28)" fg:x="7157" fg:w="218"/><text x="46.0724%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.04%)</title><rect x="47.1797%" y="293" width="0.0384%" height="15" fill="rgb(208,167,24)" fg:x="7369" fg:w="6"/><text x="47.4297%" y="303.50"></text></g><g><title>deno`v8::internal::ScavengeJob::Task::RunInternal (221 samples, 1.41%)</title><rect x="45.8096%" y="357" width="1.4149%" height="15" fill="rgb(245,73,45)" fg:x="7155" fg:w="221"/><text x="46.0596%" y="367.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (221 samples, 1.41%)</title><rect x="45.8096%" y="341" width="1.4149%" height="15" fill="rgb(237,203,48)" fg:x="7155" fg:w="221"/><text x="46.0596%" y="351.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::MoveExpiredDelayedTasks(v8::base::LockGuard&lt;v8::base::Mutex, (3 samples, 0.02%)</title><rect x="47.2245%" y="357" width="0.0192%" height="15" fill="rgb(211,197,16)" fg:x="7376" fg:w="3"/><text x="47.4745%" y="367.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::MoveExpiredDelayedTasks(v8::base::LockGuard&lt;v8::base::Mutex,  (20 samples, 0.13%)</title><rect x="47.2565%" y="341" width="0.1280%" height="15" fill="rgb(243,99,51)" fg:x="7381" fg:w="20"/><text x="47.5065%" y="351.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromDelayedQueueLocked(v8::base::LockGuard&lt;v8::base::Mutex,  (20 samples, 0.13%)</title><rect x="47.2565%" y="325" width="0.1280%" height="15" fill="rgb(215,123,29)" fg:x="7381" fg:w="20"/><text x="47.5065%" y="335.50"></text></g><g><title>deno`v8::platform::(anonymous namespace)::DefaultTimeFunction (19 samples, 0.12%)</title><rect x="47.2629%" y="309" width="0.1216%" height="15" fill="rgb(239,186,37)" fg:x="7382" fg:w="19"/><text x="47.5129%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (19 samples, 0.12%)</title><rect x="47.2629%" y="293" width="0.1216%" height="15" fill="rgb(252,136,39)" fg:x="7382" fg:w="19"/><text x="47.5129%" y="303.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromDelayedQueueLocked(v8::base::LockGuard&lt;v8::base::Mutex, (5 samples, 0.03%)</title><rect x="47.3846%" y="341" width="0.0320%" height="15" fill="rgb(223,213,32)" fg:x="7401" fg:w="5"/><text x="47.6346%" y="351.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (30 samples, 0.19%)</title><rect x="47.2437%" y="357" width="0.1921%" height="15" fill="rgb(233,115,5)" fg:x="7379" fg:w="30"/><text x="47.4937%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="47.4166%" y="341" width="0.0192%" height="15" fill="rgb(207,226,44)" fg:x="7406" fg:w="3"/><text x="47.6666%" y="351.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (306 samples, 1.96%)</title><rect x="45.4831%" y="373" width="1.9592%" height="15" fill="rgb(208,126,0)" fg:x="7104" fg:w="306"/><text x="45.7331%" y="383.50">d..</text></g><g><title>deno`v8::TryCatch::TryCatch (6 samples, 0.04%)</title><rect x="47.4742%" y="357" width="0.0384%" height="15" fill="rgb(244,66,21)" fg:x="7415" fg:w="6"/><text x="47.7242%" y="367.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::new (11 samples, 0.07%)</title><rect x="47.4486%" y="373" width="0.0704%" height="15" fill="rgb(222,97,12)" fg:x="7411" fg:w="11"/><text x="47.6986%" y="383.50"></text></g><g><title>deno`v8__Global__New (2 samples, 0.01%)</title><rect x="47.5190%" y="373" width="0.0128%" height="15" fill="rgb(219,213,19)" fg:x="7422" fg:w="2"/><text x="47.7690%" y="383.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="47.5190%" y="357" width="0.0128%" height="15" fill="rgb(252,169,30)" fg:x="7422" fg:w="2"/><text x="47.7690%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="47.5319%" y="373" width="0.0128%" height="15" fill="rgb(206,32,51)" fg:x="7424" fg:w="2"/><text x="47.7819%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.04%)</title><rect x="47.5447%" y="373" width="0.0448%" height="15" fill="rgb(250,172,42)" fg:x="7426" fg:w="7"/><text x="47.7947%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="47.5639%" y="357" width="0.0256%" height="15" fill="rgb(209,34,43)" fg:x="7429" fg:w="4"/><text x="47.8139%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.05%)</title><rect x="47.5959%" y="373" width="0.0512%" height="15" fill="rgb(223,11,35)" fg:x="7434" fg:w="8"/><text x="47.8459%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5 samples, 0.03%)</title><rect x="47.6471%" y="373" width="0.0320%" height="15" fill="rgb(251,219,26)" fg:x="7442" fg:w="5"/><text x="47.8971%" y="383.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (7,306 samples, 46.78%)</title><rect x="0.9220%" y="389" width="46.7764%" height="15" fill="rgb(231,119,3)" fg:x="144" fg:w="7306"/><text x="1.1720%" y="399.50">deno`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="47.6791%" y="373" width="0.0192%" height="15" fill="rgb(216,97,11)" fg:x="7447" fg:w="3"/><text x="47.9291%" y="383.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (2 samples, 0.01%)</title><rect x="47.6983%" y="389" width="0.0128%" height="15" fill="rgb(223,59,9)" fg:x="7450" fg:w="2"/><text x="47.9483%" y="399.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.03%)</title><rect x="47.7111%" y="373" width="0.0256%" height="15" fill="rgb(233,93,31)" fg:x="7452" fg:w="4"/><text x="47.9611%" y="383.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.01%)</title><rect x="47.7239%" y="357" width="0.0128%" height="15" fill="rgb(239,81,33)" fg:x="7454" fg:w="2"/><text x="47.9739%" y="367.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.01%)</title><rect x="47.7239%" y="341" width="0.0128%" height="15" fill="rgb(213,120,34)" fg:x="7454" fg:w="2"/><text x="47.9739%" y="351.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.01%)</title><rect x="47.7239%" y="325" width="0.0128%" height="15" fill="rgb(243,49,53)" fg:x="7454" fg:w="2"/><text x="47.9739%" y="335.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.01%)</title><rect x="47.7239%" y="309" width="0.0128%" height="15" fill="rgb(247,216,33)" fg:x="7454" fg:w="2"/><text x="47.9739%" y="319.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.01%)</title><rect x="47.7239%" y="293" width="0.0128%" height="15" fill="rgb(226,26,14)" fg:x="7454" fg:w="2"/><text x="47.9739%" y="303.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (2 samples, 0.01%)</title><rect x="47.7367%" y="325" width="0.0128%" height="15" fill="rgb(215,49,53)" fg:x="7456" fg:w="2"/><text x="47.9867%" y="335.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (2 samples, 0.01%)</title><rect x="47.7367%" y="309" width="0.0128%" height="15" fill="rgb(245,162,40)" fg:x="7456" fg:w="2"/><text x="47.9867%" y="319.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.01%)</title><rect x="47.7367%" y="293" width="0.0128%" height="15" fill="rgb(229,68,17)" fg:x="7456" fg:w="2"/><text x="47.9867%" y="303.50"></text></g><g><title>deno`Builtins_JSEntry (2 samples, 0.01%)</title><rect x="47.7367%" y="277" width="0.0128%" height="15" fill="rgb(213,182,10)" fg:x="7456" fg:w="2"/><text x="47.9867%" y="287.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (2 samples, 0.01%)</title><rect x="47.7367%" y="261" width="0.0128%" height="15" fill="rgb(245,125,30)" fg:x="7456" fg:w="2"/><text x="47.9867%" y="271.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="47.7367%" y="245" width="0.0128%" height="15" fill="rgb(232,202,2)" fg:x="7456" fg:w="2"/><text x="47.9867%" y="255.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="47.7367%" y="229" width="0.0128%" height="15" fill="rgb(237,140,51)" fg:x="7456" fg:w="2"/><text x="47.9867%" y="239.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (7 samples, 0.04%)</title><rect x="47.7111%" y="389" width="0.0448%" height="15" fill="rgb(236,157,25)" fg:x="7452" fg:w="7"/><text x="47.9611%" y="399.50"></text></g><g><title>deno`deno_runtime::web_worker::WebWorker::execute_script (3 samples, 0.02%)</title><rect x="47.7367%" y="373" width="0.0192%" height="15" fill="rgb(219,209,0)" fg:x="7456" fg:w="3"/><text x="47.9867%" y="383.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (3 samples, 0.02%)</title><rect x="47.7367%" y="357" width="0.0192%" height="15" fill="rgb(240,116,54)" fg:x="7456" fg:w="3"/><text x="47.9867%" y="367.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (3 samples, 0.02%)</title><rect x="47.7367%" y="341" width="0.0192%" height="15" fill="rgb(216,10,36)" fg:x="7456" fg:w="3"/><text x="47.9867%" y="351.50"></text></g><g><title>deno`smallvec::SmallVec&lt;A&gt;::push (2 samples, 0.01%)</title><rect x="47.7623%" y="389" width="0.0128%" height="15" fill="rgb(222,72,44)" fg:x="7460" fg:w="2"/><text x="48.0123%" y="399.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (2 samples, 0.01%)</title><rect x="47.7815%" y="389" width="0.0128%" height="15" fill="rgb(232,159,9)" fg:x="7463" fg:w="2"/><text x="48.0315%" y="399.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (2 samples, 0.01%)</title><rect x="47.8264%" y="389" width="0.0128%" height="15" fill="rgb(210,39,32)" fg:x="7470" fg:w="2"/><text x="48.0764%" y="399.50"></text></g><g><title>deno`v8::platform::PumpMessageLoop (2 samples, 0.01%)</title><rect x="47.8392%" y="389" width="0.0128%" height="15" fill="rgb(216,194,45)" fg:x="7472" fg:w="2"/><text x="48.0892%" y="399.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::exception (3 samples, 0.02%)</title><rect x="47.8520%" y="389" width="0.0192%" height="15" fill="rgb(218,18,35)" fg:x="7474" fg:w="3"/><text x="48.1020%" y="399.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::new (3 samples, 0.02%)</title><rect x="47.8712%" y="389" width="0.0192%" height="15" fill="rgb(207,83,51)" fg:x="7477" fg:w="3"/><text x="48.1212%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="47.9352%" y="389" width="0.0192%" height="15" fill="rgb(225,63,43)" fg:x="7487" fg:w="3"/><text x="48.1852%" y="399.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,391 samples, 47.32%)</title><rect x="0.6531%" y="405" width="47.3206%" height="15" fill="rgb(207,57,36)" fg:x="102" fg:w="7391"/><text x="0.9031%" y="415.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Futu..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="47.9544%" y="389" width="0.0192%" height="15" fill="rgb(216,99,33)" fg:x="7490" fg:w="3"/><text x="48.2044%" y="399.50"></text></g><g><title>deno`OUTLINED_FUNCTION_21144 (6 samples, 0.04%)</title><rect x="47.9736%" y="405" width="0.0384%" height="15" fill="rgb(225,42,16)" fg:x="7493" fg:w="6"/><text x="48.2236%" y="415.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,405 samples, 47.41%)</title><rect x="0.6146%" y="421" width="47.4102%" height="15" fill="rgb(220,201,45)" fg:x="96" fg:w="7405"/><text x="0.8646%" y="431.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Futu..</text></g><g><title>deno`OUTLINED_FUNCTION_14752 (2 samples, 0.01%)</title><rect x="48.0248%" y="421" width="0.0128%" height="15" fill="rgb(225,33,4)" fg:x="7501" fg:w="2"/><text x="48.2748%" y="431.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,431 samples, 47.58%)</title><rect x="0.4738%" y="453" width="47.5767%" height="15" fill="rgb(224,33,50)" fg:x="74" fg:w="7431"/><text x="0.7238%" y="463.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Futu..</text></g><g><title>deno`deno::run_command::_{{closure}} (7,415 samples, 47.47%)</title><rect x="0.5762%" y="437" width="47.4742%" height="15" fill="rgb(246,198,51)" fg:x="90" fg:w="7415"/><text x="0.8262%" y="447.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`OUTLINED_FUNCTION_262 (2 samples, 0.01%)</title><rect x="48.0376%" y="421" width="0.0128%" height="15" fill="rgb(205,22,4)" fg:x="7503" fg:w="2"/><text x="48.2876%" y="431.50"></text></g><g><title>deno`deno::main::_{{closure}} (7,444 samples, 47.66%)</title><rect x="0.4034%" y="469" width="47.6599%" height="15" fill="rgb(206,3,8)" fg:x="63" fg:w="7444"/><text x="0.6534%" y="479.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,466 samples, 47.80%)</title><rect x="0.2753%" y="485" width="47.8008%" height="15" fill="rgb(251,23,15)" fg:x="43" fg:w="7466"/><text x="0.5253%" y="495.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Futur..</text></g><g><title>deno`OUTLINED_FUNCTION_472 (2 samples, 0.01%)</title><rect x="48.0953%" y="485" width="0.0128%" height="15" fill="rgb(252,88,28)" fg:x="7512" fg:w="2"/><text x="48.3453%" y="495.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::task::local::LocalSet::with::{{closure}}::Reset&gt; (9 samples, 0.06%)</title><rect x="48.1209%" y="485" width="0.0576%" height="15" fill="rgb(212,127,14)" fg:x="7516" fg:w="9"/><text x="48.3709%" y="495.50"></text></g><g><title>deno`DYLD-STUB$$mach_absolute_time (2 samples, 0.01%)</title><rect x="48.2169%" y="469" width="0.0128%" height="15" fill="rgb(247,145,37)" fg:x="7531" fg:w="2"/><text x="48.4669%" y="479.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (3 samples, 0.02%)</title><rect x="48.2361%" y="469" width="0.0192%" height="15" fill="rgb(209,117,53)" fg:x="7534" fg:w="3"/><text x="48.4861%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_117 (2 samples, 0.01%)</title><rect x="48.2937%" y="453" width="0.0128%" height="15" fill="rgb(212,90,42)" fg:x="7543" fg:w="2"/><text x="48.5437%" y="463.50"></text></g><g><title>deno`mio::poll::Poll::poll (4 samples, 0.03%)</title><rect x="48.3065%" y="453" width="0.0256%" height="15" fill="rgb(218,164,37)" fg:x="7545" fg:w="4"/><text x="48.5565%" y="463.50"></text></g><g><title>deno`tokio::process::imp::GlobalOrphanQueue::reap_orphans (5 samples, 0.03%)</title><rect x="48.3386%" y="453" width="0.0320%" height="15" fill="rgb(246,65,34)" fg:x="7550" fg:w="5"/><text x="48.5886%" y="463.50"></text></g><g><title>deno`mio::poll::Poll::poll (2 samples, 0.01%)</title><rect x="48.4090%" y="437" width="0.0128%" height="15" fill="rgb(231,100,33)" fg:x="7561" fg:w="2"/><text x="48.6590%" y="447.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (337 samples, 2.16%)</title><rect x="48.3706%" y="453" width="2.1576%" height="15" fill="rgb(228,126,14)" fg:x="7555" fg:w="337"/><text x="48.6206%" y="463.50">d..</text></g><g><title>libsystem_kernel.dylib`kevent (329 samples, 2.11%)</title><rect x="48.4218%" y="437" width="2.1064%" height="15" fill="rgb(215,173,21)" fg:x="7563" fg:w="329"/><text x="48.6718%" y="447.50">l..</text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.01%)</title><rect x="50.5282%" y="453" width="0.0128%" height="15" fill="rgb(210,6,40)" fg:x="7892" fg:w="2"/><text x="50.7782%" y="463.50"></text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (5 samples, 0.03%)</title><rect x="50.5538%" y="437" width="0.0320%" height="15" fill="rgb(212,48,18)" fg:x="7896" fg:w="5"/><text x="50.8038%" y="447.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (11 samples, 0.07%)</title><rect x="50.5410%" y="453" width="0.0704%" height="15" fill="rgb(230,214,11)" fg:x="7894" fg:w="11"/><text x="50.7910%" y="463.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.03%)</title><rect x="50.5858%" y="437" width="0.0256%" height="15" fill="rgb(254,105,39)" fg:x="7901" fg:w="4"/><text x="50.8358%" y="447.50"></text></g><g><title>deno`tokio::signal::unix::driver::noop (3 samples, 0.02%)</title><rect x="50.6114%" y="453" width="0.0192%" height="15" fill="rgb(245,158,5)" fg:x="7905" fg:w="3"/><text x="50.8614%" y="463.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (6 samples, 0.04%)</title><rect x="50.6306%" y="453" width="0.0384%" height="15" fill="rgb(249,208,11)" fg:x="7908" fg:w="6"/><text x="50.8806%" y="463.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (5 samples, 0.03%)</title><rect x="50.6370%" y="437" width="0.0320%" height="15" fill="rgb(210,39,28)" fg:x="7909" fg:w="5"/><text x="50.8870%" y="447.50"></text></g><g><title> 32]&gt; (5 samples, 0.03%)</title><rect x="50.6370%" y="421" width="0.0320%" height="15" fill="rgb(211,56,53)" fg:x="7909" fg:w="5"/><text x="50.8870%" y="431.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (378 samples, 2.42%)</title><rect x="48.2553%" y="469" width="2.4201%" height="15" fill="rgb(226,201,30)" fg:x="7537" fg:w="378"/><text x="48.5053%" y="479.50">de..</text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Context::park (416 samples, 2.66%)</title><rect x="48.1849%" y="485" width="2.6634%" height="15" fill="rgb(239,101,34)" fg:x="7526" fg:w="416"/><text x="48.4349%" y="495.50">de..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (27 samples, 0.17%)</title><rect x="50.6755%" y="469" width="0.1729%" height="15" fill="rgb(226,209,5)" fg:x="7915" fg:w="27"/><text x="50.9255%" y="479.50"></text></g><g><title>deno`tokio::task::local::CURRENT::__getit (3 samples, 0.02%)</title><rect x="50.8547%" y="485" width="0.0192%" height="15" fill="rgb(250,105,47)" fg:x="7943" fg:w="3"/><text x="51.1047%" y="495.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="50.8867%" y="485" width="0.0192%" height="15" fill="rgb(230,72,3)" fg:x="7948" fg:w="3"/><text x="51.1367%" y="495.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (7,933 samples, 50.79%)</title><rect x="0.2177%" y="501" width="50.7907%" height="15" fill="rgb(232,218,39)" fg:x="34" fg:w="7933"/><text x="0.4677%" y="511.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.10%)</title><rect x="50.9059%" y="485" width="0.1024%" height="15" fill="rgb(248,166,6)" fg:x="7951" fg:w="16"/><text x="51.1559%" y="495.50"></text></g><g><title>dyld`start (7,972 samples, 51.04%)</title><rect x="0.0000%" y="565" width="51.0404%" height="15" fill="rgb(247,89,20)" fg:x="0" fg:w="7972"/><text x="0.2500%" y="575.50">dyld`start</text></g><g><title>deno`main (7,972 samples, 51.04%)</title><rect x="0.0000%" y="549" width="51.0404%" height="15" fill="rgb(248,130,54)" fg:x="0" fg:w="7972"/><text x="0.2500%" y="559.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (7,972 samples, 51.04%)</title><rect x="0.0000%" y="533" width="51.0404%" height="15" fill="rgb(234,196,4)" fg:x="0" fg:w="7972"/><text x="0.2500%" y="543.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (7,972 samples, 51.04%)</title><rect x="0.0000%" y="517" width="51.0404%" height="15" fill="rgb(250,143,31)" fg:x="0" fg:w="7972"/><text x="0.2500%" y="527.50">deno`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.03%)</title><rect x="51.0084%" y="501" width="0.0320%" height="15" fill="rgb(211,110,34)" fg:x="7967" fg:w="5"/><text x="51.2584%" y="511.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="51.0404%" y="485" width="0.0128%" height="15" fill="rgb(215,124,48)" fg:x="7972" fg:w="2"/><text x="51.2904%" y="495.50"></text></g><g><title>deno`&lt;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="51.0532%" y="485" width="0.0256%" height="15" fill="rgb(216,46,13)" fg:x="7974" fg:w="4"/><text x="51.3032%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_117 (2 samples, 0.01%)</title><rect x="51.0788%" y="485" width="0.0128%" height="15" fill="rgb(205,184,25)" fg:x="7978" fg:w="2"/><text x="51.3288%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_16186 (3 samples, 0.02%)</title><rect x="51.0916%" y="485" width="0.0192%" height="15" fill="rgb(228,1,10)" fg:x="7980" fg:w="3"/><text x="51.3416%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_352 (4 samples, 0.03%)</title><rect x="51.1108%" y="485" width="0.0256%" height="15" fill="rgb(213,116,27)" fg:x="7983" fg:w="4"/><text x="51.3608%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36 (3 samples, 0.02%)</title><rect x="51.1364%" y="485" width="0.0192%" height="15" fill="rgb(241,95,50)" fg:x="7987" fg:w="3"/><text x="51.3864%" y="495.50"></text></g><g><title>deno`alloc::vec::from_elem (10 samples, 0.06%)</title><rect x="51.1620%" y="485" width="0.0640%" height="15" fill="rgb(238,48,32)" fg:x="7991" fg:w="10"/><text x="51.4120%" y="495.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::result::Result&lt;u64,std::io::error::Error&gt;&gt; (3 samples, 0.02%)</title><rect x="51.2325%" y="485" width="0.0192%" height="15" fill="rgb(235,113,49)" fg:x="8002" fg:w="3"/><text x="51.4825%" y="495.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::ok (2 samples, 0.01%)</title><rect x="51.2517%" y="485" width="0.0128%" height="15" fill="rgb(205,127,43)" fg:x="8005" fg:w="2"/><text x="51.5017%" y="495.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="52.3145%" y="469" width="0.0128%" height="15" fill="rgb(250,162,2)" fg:x="8171" fg:w="2"/><text x="52.5645%" y="479.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.08%)</title><rect x="52.3337%" y="469" width="0.0832%" height="15" fill="rgb(220,13,41)" fg:x="8174" fg:w="13"/><text x="52.5837%" y="479.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="52.4233%" y="469" width="0.0128%" height="15" fill="rgb(249,221,25)" fg:x="8188" fg:w="2"/><text x="52.6733%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3 (6 samples, 0.04%)</title><rect x="52.4553%" y="469" width="0.0384%" height="15" fill="rgb(215,208,19)" fg:x="8193" fg:w="6"/><text x="52.7053%" y="479.50"></text></g><g><title>deno`__rust_alloc_zeroed (3 samples, 0.02%)</title><rect x="52.5066%" y="469" width="0.0192%" height="15" fill="rgb(236,175,2)" fg:x="8201" fg:w="3"/><text x="52.7566%" y="479.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (4 samples, 0.03%)</title><rect x="52.5258%" y="469" width="0.0256%" height="15" fill="rgb(241,52,2)" fg:x="8204" fg:w="4"/><text x="52.7758%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.05%)</title><rect x="52.8715%" y="437" width="0.0512%" height="15" fill="rgb(248,140,14)" fg:x="8258" fg:w="8"/><text x="53.1215%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.01%)</title><rect x="52.9611%" y="421" width="0.0128%" height="15" fill="rgb(253,22,42)" fg:x="8272" fg:w="2"/><text x="53.2111%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.01%)</title><rect x="52.9739%" y="421" width="0.0128%" height="15" fill="rgb(234,61,47)" fg:x="8274" fg:w="2"/><text x="53.2239%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (5 samples, 0.03%)</title><rect x="53.1276%" y="405" width="0.0320%" height="15" fill="rgb(208,226,15)" fg:x="8298" fg:w="5"/><text x="53.3776%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (19 samples, 0.12%)</title><rect x="53.2877%" y="389" width="0.1216%" height="15" fill="rgb(217,221,4)" fg:x="8323" fg:w="19"/><text x="53.5377%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.02%)</title><rect x="53.4093%" y="389" width="0.0192%" height="15" fill="rgb(212,174,34)" fg:x="8342" fg:w="3"/><text x="53.6593%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (82 samples, 0.53%)</title><rect x="52.9867%" y="421" width="0.5250%" height="15" fill="rgb(253,83,4)" fg:x="8276" fg:w="82"/><text x="53.2367%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (53 samples, 0.34%)</title><rect x="53.1724%" y="405" width="0.3393%" height="15" fill="rgb(250,195,49)" fg:x="8305" fg:w="53"/><text x="53.4224%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.08%)</title><rect x="53.4285%" y="389" width="0.0832%" height="15" fill="rgb(241,192,25)" fg:x="8345" fg:w="13"/><text x="53.6785%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (132 samples, 0.85%)</title><rect x="52.7883%" y="453" width="0.8451%" height="15" fill="rgb(208,124,10)" fg:x="8245" fg:w="132"/><text x="53.0383%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (111 samples, 0.71%)</title><rect x="52.9227%" y="437" width="0.7107%" height="15" fill="rgb(222,33,0)" fg:x="8266" fg:w="111"/><text x="53.1727%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.12%)</title><rect x="53.5117%" y="421" width="0.1216%" height="15" fill="rgb(234,209,28)" fg:x="8358" fg:w="19"/><text x="53.7617%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="53.6718%" y="437" width="0.0192%" height="15" fill="rgb(224,11,23)" fg:x="8383" fg:w="3"/><text x="53.9218%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2 samples, 0.01%)</title><rect x="53.9023%" y="405" width="0.0128%" height="15" fill="rgb(232,99,1)" fg:x="8419" fg:w="2"/><text x="54.1523%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (20 samples, 0.13%)</title><rect x="54.0239%" y="389" width="0.1280%" height="15" fill="rgb(237,95,45)" fg:x="8438" fg:w="20"/><text x="54.2739%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="54.1520%" y="389" width="0.0128%" height="15" fill="rgb(208,109,11)" fg:x="8458" fg:w="2"/><text x="54.4020%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (100 samples, 0.64%)</title><rect x="53.6334%" y="453" width="0.6402%" height="15" fill="rgb(216,190,48)" fg:x="8377" fg:w="100"/><text x="53.8834%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (90 samples, 0.58%)</title><rect x="53.6974%" y="437" width="0.5762%" height="15" fill="rgb(251,171,36)" fg:x="8387" fg:w="90"/><text x="53.9474%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (85 samples, 0.54%)</title><rect x="53.7294%" y="421" width="0.5442%" height="15" fill="rgb(230,62,22)" fg:x="8392" fg:w="85"/><text x="53.9794%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (55 samples, 0.35%)</title><rect x="53.9215%" y="405" width="0.3521%" height="15" fill="rgb(225,114,35)" fg:x="8422" fg:w="55"/><text x="54.1715%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (17 samples, 0.11%)</title><rect x="54.1648%" y="389" width="0.1088%" height="15" fill="rgb(215,118,42)" fg:x="8460" fg:w="17"/><text x="54.4148%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="54.2800%" y="453" width="0.0128%" height="15" fill="rgb(243,119,21)" fg:x="8478" fg:w="2"/><text x="54.5300%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (5 samples, 0.03%)</title><rect x="54.2928%" y="453" width="0.0320%" height="15" fill="rgb(252,177,53)" fg:x="8480" fg:w="5"/><text x="54.5428%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="54.3249%" y="453" width="0.0192%" height="15" fill="rgb(237,209,29)" fg:x="8485" fg:w="3"/><text x="54.5749%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (2 samples, 0.01%)</title><rect x="54.3505%" y="453" width="0.0128%" height="15" fill="rgb(212,65,23)" fg:x="8489" fg:w="2"/><text x="54.6005%" y="463.50"></text></g><g><title>deno`alloc::vec::from_elem (288 samples, 1.84%)</title><rect x="52.5514%" y="469" width="1.8439%" height="15" fill="rgb(230,222,46)" fg:x="8208" fg:w="288"/><text x="52.8014%" y="479.50">d..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.03%)</title><rect x="54.3633%" y="453" width="0.0320%" height="15" fill="rgb(215,135,32)" fg:x="8491" fg:w="5"/><text x="54.6133%" y="463.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (8 samples, 0.05%)</title><rect x="54.3953%" y="469" width="0.0512%" height="15" fill="rgb(246,101,22)" fg:x="8496" fg:w="8"/><text x="54.6453%" y="479.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::request::Request&gt;::send::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="54.4465%" y="469" width="0.0128%" height="15" fill="rgb(206,107,13)" fg:x="8504" fg:w="2"/><text x="54.6965%" y="479.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::result::Result&lt;u64,std::io::error::Error&gt;&gt; (3 samples, 0.02%)</title><rect x="54.4593%" y="469" width="0.0192%" height="15" fill="rgb(250,100,44)" fg:x="8506" fg:w="3"/><text x="54.7093%" y="479.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::ok (53 samples, 0.34%)</title><rect x="54.4785%" y="469" width="0.3393%" height="15" fill="rgb(231,147,38)" fg:x="8509" fg:w="53"/><text x="54.7285%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9007 (4 samples, 0.03%)</title><rect x="54.8435%" y="453" width="0.0256%" height="15" fill="rgb(229,8,40)" fg:x="8566" fg:w="4"/><text x="55.0935%" y="463.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (20 samples, 0.13%)</title><rect x="54.8307%" y="469" width="0.1280%" height="15" fill="rgb(221,135,30)" fg:x="8564" fg:w="20"/><text x="55.0807%" y="479.50"></text></g><g><title>deno`http::header::name::parse_hdr (14 samples, 0.09%)</title><rect x="54.8691%" y="453" width="0.0896%" height="15" fill="rgb(249,193,18)" fg:x="8570" fg:w="14"/><text x="55.1191%" y="463.50"></text></g><g><title>deno`http::header::name::parse_hdr (6 samples, 0.04%)</title><rect x="54.9587%" y="469" width="0.0384%" height="15" fill="rgb(209,133,39)" fg:x="8584" fg:w="6"/><text x="55.2087%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_120 (6 samples, 0.04%)</title><rect x="55.0163%" y="453" width="0.0384%" height="15" fill="rgb(232,100,14)" fg:x="8593" fg:w="6"/><text x="55.2663%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_184 (2 samples, 0.01%)</title><rect x="55.0547%" y="453" width="0.0128%" height="15" fill="rgb(224,185,1)" fg:x="8599" fg:w="2"/><text x="55.3047%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2714 (5 samples, 0.03%)</title><rect x="55.0675%" y="453" width="0.0320%" height="15" fill="rgb(223,139,8)" fg:x="8601" fg:w="5"/><text x="55.3175%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_37904 (4 samples, 0.03%)</title><rect x="55.0996%" y="453" width="0.0256%" height="15" fill="rgb(232,213,38)" fg:x="8606" fg:w="4"/><text x="55.3496%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_5778 (2 samples, 0.01%)</title><rect x="55.1252%" y="453" width="0.0128%" height="15" fill="rgb(207,94,22)" fg:x="8610" fg:w="2"/><text x="55.3752%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_68 (4 samples, 0.03%)</title><rect x="55.1380%" y="453" width="0.0256%" height="15" fill="rgb(219,183,54)" fg:x="8612" fg:w="4"/><text x="55.3880%" y="463.50"></text></g><g><title>deno`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.22%)</title><rect x="55.2660%" y="437" width="0.2177%" height="15" fill="rgb(216,185,54)" fg:x="8632" fg:w="34"/><text x="55.5160%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_12198 (5 samples, 0.03%)</title><rect x="55.4837%" y="437" width="0.0320%" height="15" fill="rgb(254,217,39)" fg:x="8666" fg:w="5"/><text x="55.7337%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_15179 (2 samples, 0.01%)</title><rect x="55.5349%" y="437" width="0.0128%" height="15" fill="rgb(240,178,23)" fg:x="8674" fg:w="2"/><text x="55.7849%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_16313 (2 samples, 0.01%)</title><rect x="55.5477%" y="437" width="0.0128%" height="15" fill="rgb(218,11,47)" fg:x="8676" fg:w="2"/><text x="55.7977%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_19520 (4 samples, 0.03%)</title><rect x="55.5605%" y="437" width="0.0256%" height="15" fill="rgb(218,51,51)" fg:x="8678" fg:w="4"/><text x="55.8105%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2185 (10 samples, 0.06%)</title><rect x="55.5861%" y="437" width="0.0640%" height="15" fill="rgb(238,126,27)" fg:x="8682" fg:w="10"/><text x="55.8361%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_25681 (2 samples, 0.01%)</title><rect x="55.6502%" y="437" width="0.0128%" height="15" fill="rgb(249,202,22)" fg:x="8692" fg:w="2"/><text x="55.9002%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3305 (5 samples, 0.03%)</title><rect x="55.6630%" y="437" width="0.0320%" height="15" fill="rgb(254,195,49)" fg:x="8694" fg:w="5"/><text x="55.9130%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_33399 (2 samples, 0.01%)</title><rect x="55.6950%" y="437" width="0.0128%" height="15" fill="rgb(208,123,14)" fg:x="8699" fg:w="2"/><text x="55.9450%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3564 (2 samples, 0.01%)</title><rect x="55.7078%" y="437" width="0.0128%" height="15" fill="rgb(224,200,8)" fg:x="8701" fg:w="2"/><text x="55.9578%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_35741 (6 samples, 0.04%)</title><rect x="55.7206%" y="437" width="0.0384%" height="15" fill="rgb(217,61,36)" fg:x="8703" fg:w="6"/><text x="55.9706%" y="447.50"></text></g><g><title>deno`httparse::iter::Bytes::peek (2 samples, 0.01%)</title><rect x="55.7590%" y="437" width="0.0128%" height="15" fill="rgb(206,35,45)" fg:x="8709" fg:w="2"/><text x="56.0090%" y="447.50"></text></g><g><title>deno`httparse::iter::Bytes::peek_n (11 samples, 0.07%)</title><rect x="55.7718%" y="437" width="0.0704%" height="15" fill="rgb(217,65,33)" fg:x="8711" fg:w="11"/><text x="56.0218%" y="447.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (6 samples, 0.04%)</title><rect x="55.8486%" y="437" width="0.0384%" height="15" fill="rgb(222,158,48)" fg:x="8723" fg:w="6"/><text x="56.0986%" y="447.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (88 samples, 0.56%)</title><rect x="55.8871%" y="437" width="0.5634%" height="15" fill="rgb(254,2,54)" fg:x="8729" fg:w="88"/><text x="56.1371%" y="447.50"></text></g><g><title>deno`httparse::parse_version (7 samples, 0.04%)</title><rect x="56.4505%" y="437" width="0.0448%" height="15" fill="rgb(250,143,38)" fg:x="8817" fg:w="7"/><text x="56.7005%" y="447.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (216 samples, 1.38%)</title><rect x="55.1636%" y="453" width="1.3829%" height="15" fill="rgb(248,25,0)" fg:x="8616" fg:w="216"/><text x="55.4136%" y="463.50"></text></g><g><title>deno`httparse::skip_empty_lines (8 samples, 0.05%)</title><rect x="56.4953%" y="437" width="0.0512%" height="15" fill="rgb(206,152,27)" fg:x="8824" fg:w="8"/><text x="56.7453%" y="447.50"></text></g><g><title>deno`httparse::Request::parse (243 samples, 1.56%)</title><rect x="54.9971%" y="469" width="1.5558%" height="15" fill="rgb(240,77,30)" fg:x="8590" fg:w="243"/><text x="55.2471%" y="479.50"></text></g><g><title>deno`mio::poll::Poll::poll (3 samples, 0.02%)</title><rect x="56.5593%" y="469" width="0.0192%" height="15" fill="rgb(231,5,3)" fg:x="8834" fg:w="3"/><text x="56.8093%" y="479.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (5 samples, 0.03%)</title><rect x="56.5785%" y="469" width="0.0320%" height="15" fill="rgb(207,226,32)" fg:x="8837" fg:w="5"/><text x="56.8285%" y="479.50"></text></g><g><title>deno`tokio::park::thread::drop_waker (3 samples, 0.02%)</title><rect x="56.6105%" y="469" width="0.0192%" height="15" fill="rgb(222,207,47)" fg:x="8842" fg:w="3"/><text x="56.8605%" y="479.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (16 samples, 0.10%)</title><rect x="56.6361%" y="469" width="0.1024%" height="15" fill="rgb(229,115,45)" fg:x="8846" fg:w="16"/><text x="56.8861%" y="479.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (9 samples, 0.06%)</title><rect x="56.6810%" y="453" width="0.0576%" height="15" fill="rgb(224,191,6)" fg:x="8853" fg:w="9"/><text x="56.9310%" y="463.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (30 samples, 0.19%)</title><rect x="57.4493%" y="453" width="0.1921%" height="15" fill="rgb(230,227,24)" fg:x="8973" fg:w="30"/><text x="57.6993%" y="463.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="57.6413%" y="453" width="0.0128%" height="15" fill="rgb(228,80,19)" fg:x="9003" fg:w="2"/><text x="57.8913%" y="463.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::request::Request&gt;::send::{{closure}}&gt;&gt; (3 samples, 0.02%)</title><rect x="57.6541%" y="453" width="0.0192%" height="15" fill="rgb(247,229,0)" fg:x="9005" fg:w="3"/><text x="57.9041%" y="463.50"></text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.01%)</title><rect x="57.6862%" y="421" width="0.0128%" height="15" fill="rgb(237,194,15)" fg:x="9010" fg:w="2"/><text x="57.9362%" y="431.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (163 samples, 1.04%)</title><rect x="57.6862%" y="437" width="1.0436%" height="15" fill="rgb(219,203,20)" fg:x="9010" fg:w="163"/><text x="57.9362%" y="447.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (161 samples, 1.03%)</title><rect x="57.6990%" y="421" width="1.0308%" height="15" fill="rgb(234,128,8)" fg:x="9012" fg:w="161"/><text x="57.9490%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`kevent (161 samples, 1.03%)</title><rect x="57.6990%" y="405" width="1.0308%" height="15" fill="rgb(248,202,8)" fg:x="9012" fg:w="161"/><text x="57.9490%" y="415.50"></text></g><g><title>deno`OUTLINED_FUNCTION_23136 (2 samples, 0.01%)</title><rect x="58.7298%" y="437" width="0.0128%" height="15" fill="rgb(206,104,37)" fg:x="9173" fg:w="2"/><text x="58.9798%" y="447.50"></text></g><g><title>deno`futures_task::waker::wake_arc_raw (167 samples, 1.07%)</title><rect x="57.6797%" y="453" width="1.0692%" height="15" fill="rgb(223,8,27)" fg:x="9009" fg:w="167"/><text x="57.9297%" y="463.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (2 samples, 0.01%)</title><rect x="58.7490%" y="453" width="0.0128%" height="15" fill="rgb(216,217,28)" fg:x="9176" fg:w="2"/><text x="58.9990%" y="463.50"></text></g><g><title>deno`tokio::runtime::enter::enter (3 samples, 0.02%)</title><rect x="58.7618%" y="453" width="0.0192%" height="15" fill="rgb(249,199,1)" fg:x="9178" fg:w="3"/><text x="59.0118%" y="463.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (7 samples, 0.04%)</title><rect x="58.7810%" y="453" width="0.0448%" height="15" fill="rgb(240,85,17)" fg:x="9181" fg:w="7"/><text x="59.0310%" y="463.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::blocking_send (366 samples, 2.34%)</title><rect x="56.7386%" y="469" width="2.3433%" height="15" fill="rgb(206,108,45)" fg:x="8862" fg:w="366"/><text x="56.9886%" y="479.50">d..</text></g><g><title>libdyld.dylib`tlv_get_addr (40 samples, 0.26%)</title><rect x="58.8258%" y="453" width="0.2561%" height="15" fill="rgb(245,210,41)" fg:x="9188" fg:w="40"/><text x="59.0758%" y="463.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (2 samples, 0.01%)</title><rect x="59.0819%" y="469" width="0.0128%" height="15" fill="rgb(206,13,37)" fg:x="9228" fg:w="2"/><text x="59.3319%" y="479.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::wake (19 samples, 0.12%)</title><rect x="59.0947%" y="469" width="0.1216%" height="15" fill="rgb(250,61,18)" fg:x="9230" fg:w="19"/><text x="59.3447%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.01%)</title><rect x="59.2163%" y="469" width="0.0128%" height="15" fill="rgb(235,172,48)" fg:x="9249" fg:w="2"/><text x="59.4663%" y="479.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (2 samples, 0.01%)</title><rect x="59.2291%" y="469" width="0.0128%" height="15" fill="rgb(249,201,17)" fg:x="9251" fg:w="2"/><text x="59.4791%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (3,930 samples, 25.16%)</title><rect x="59.2484%" y="469" width="25.1617%" height="15" fill="rgb(219,208,6)" fg:x="9254" fg:w="3930"/><text x="59.4984%" y="479.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>libsystem_kernel.dylib`kevent (1,032 samples, 6.61%)</title><rect x="84.4100%" y="469" width="6.6073%" height="15" fill="rgb(248,31,23)" fg:x="13184" fg:w="1032"/><text x="84.6600%" y="479.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="91.0174%" y="469" width="0.0192%" height="15" fill="rgb(245,15,42)" fg:x="14216" fg:w="3"/><text x="91.2674%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="91.0366%" y="469" width="0.0384%" height="15" fill="rgb(222,217,39)" fg:x="14219" fg:w="6"/><text x="91.2866%" y="479.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (6,248 samples, 40.00%)</title><rect x="51.2709%" y="485" width="40.0026%" height="15" fill="rgb(210,219,27)" fg:x="8008" fg:w="6248"/><text x="51.5209%" y="495.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.20%)</title><rect x="91.0750%" y="469" width="0.1985%" height="15" fill="rgb(252,166,36)" fg:x="14225" fg:w="31"/><text x="91.3250%" y="479.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (6,292 samples, 40.28%)</title><rect x="51.0404%" y="533" width="40.2843%" height="15" fill="rgb(245,132,34)" fg:x="7972" fg:w="6292"/><text x="51.2904%" y="543.50">deno`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,292 samples, 40.28%)</title><rect x="51.0404%" y="517" width="40.2843%" height="15" fill="rgb(236,54,3)" fg:x="7972" fg:w="6292"/><text x="51.2904%" y="527.50">deno`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (6,292 samples, 40.28%)</title><rect x="51.0404%" y="501" width="40.2843%" height="15" fill="rgb(241,173,43)" fg:x="7972" fg:w="6292"/><text x="51.2904%" y="511.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (8 samples, 0.05%)</title><rect x="91.2734%" y="485" width="0.0512%" height="15" fill="rgb(215,190,9)" fg:x="14256" fg:w="8"/><text x="91.5234%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleArchInstruction (3 samples, 0.02%)</title><rect x="91.3567%" y="389" width="0.0192%" height="15" fill="rgb(242,101,16)" fg:x="14269" fg:w="3"/><text x="91.6067%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove(v8::internal::compiler::InstructionOperand*, v8::internal::compiler::InstructionOperand*)::$_0::operator() (2 samples, 0.01%)</title><rect x="91.3823%" y="357" width="0.0128%" height="15" fill="rgb(223,190,21)" fg:x="14273" fg:w="2"/><text x="91.6323%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove (4 samples, 0.03%)</title><rect x="91.3759%" y="373" width="0.0256%" height="15" fill="rgb(215,228,25)" fg:x="14272" fg:w="4"/><text x="91.6259%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleInstruction (14 samples, 0.09%)</title><rect x="91.3311%" y="405" width="0.0896%" height="15" fill="rgb(225,36,22)" fg:x="14265" fg:w="14"/><text x="91.5811%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GapResolver::Resolve (7 samples, 0.04%)</title><rect x="91.3759%" y="389" width="0.0448%" height="15" fill="rgb(251,106,46)" fg:x="14272" fg:w="7"/><text x="91.6259%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GapResolver::PerformMove (3 samples, 0.02%)</title><rect x="91.4015%" y="373" width="0.0192%" height="15" fill="rgb(208,90,1)" fg:x="14276" fg:w="3"/><text x="91.6515%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GapResolver::PerformMoveHelper (3 samples, 0.02%)</title><rect x="91.4015%" y="357" width="0.0192%" height="15" fill="rgb(243,10,4)" fg:x="14276" fg:w="3"/><text x="91.6515%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove (3 samples, 0.02%)</title><rect x="91.4015%" y="341" width="0.0192%" height="15" fill="rgb(212,137,27)" fg:x="14276" fg:w="3"/><text x="91.6515%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove(v8::internal::compiler::InstructionOperand*, v8::internal::compiler::InstructionOperand*)::$_0::operator() (2 samples, 0.01%)</title><rect x="91.4079%" y="325" width="0.0128%" height="15" fill="rgb(231,220,49)" fg:x="14277" fg:w="2"/><text x="91.6579%" y="335.50"></text></g><g><title>deno`v8::internal::TurboAssembler::Mov (2 samples, 0.01%)</title><rect x="91.4079%" y="309" width="0.0128%" height="15" fill="rgb(237,96,20)" fg:x="14277" fg:w="2"/><text x="91.6579%" y="319.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AssembleCode (15 samples, 0.10%)</title><rect x="91.3311%" y="437" width="0.0960%" height="15" fill="rgb(239,229,30)" fg:x="14265" fg:w="15"/><text x="91.5811%" y="447.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleCode (15 samples, 0.10%)</title><rect x="91.3311%" y="421" width="0.0960%" height="15" fill="rgb(219,65,33)" fg:x="14265" fg:w="15"/><text x="91.5811%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeAnalysis::Analyze (4 samples, 0.03%)</title><rect x="91.4335%" y="341" width="0.0256%" height="15" fill="rgb(243,134,7)" fg:x="14281" fg:w="4"/><text x="91.6835%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeAnalysis::BytecodeAnalysis(v8::internal::Handle (6 samples, 0.04%)</title><rect x="91.4335%" y="357" width="0.0384%" height="15" fill="rgb(216,177,54)" fg:x="14281" fg:w="6"/><text x="91.6835%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::BytecodeGraphBuilder(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::NativeContextRef const&amp;, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (7 samples, 0.04%)</title><rect x="91.4335%" y="373" width="0.0448%" height="15" fill="rgb(211,160,20)" fg:x="14281" fg:w="7"/><text x="91.6835%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitLdaImmutableContextSlot (2 samples, 0.01%)</title><rect x="91.5167%" y="341" width="0.0128%" height="15" fill="rgb(239,85,39)" fg:x="14294" fg:w="2"/><text x="91.7667%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitReThrow (2 samples, 0.01%)</title><rect x="91.5359%" y="341" width="0.0128%" height="15" fill="rgb(232,125,22)" fg:x="14297" fg:w="2"/><text x="91.7859%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::MakeNode (2 samples, 0.01%)</title><rect x="91.5359%" y="325" width="0.0128%" height="15" fill="rgb(244,57,34)" fg:x="14297" fg:w="2"/><text x="91.7859%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::MergeIntoSuccessorEnvironment (2 samples, 0.01%)</title><rect x="91.5359%" y="309" width="0.0128%" height="15" fill="rgb(214,203,32)" fg:x="14297" fg:w="2"/><text x="91.7859%" y="319.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (23 samples, 0.15%)</title><rect x="91.4271%" y="421" width="0.1473%" height="15" fill="rgb(207,58,43)" fg:x="14280" fg:w="23"/><text x="91.6771%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::GraphBuilderPhase::Run (23 samples, 0.15%)</title><rect x="91.4271%" y="405" width="0.1473%" height="15" fill="rgb(215,193,15)" fg:x="14280" fg:w="23"/><text x="91.6771%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (22 samples, 0.14%)</title><rect x="91.4335%" y="389" width="0.1409%" height="15" fill="rgb(232,15,44)" fg:x="14281" fg:w="22"/><text x="91.6835%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::CreateGraph (15 samples, 0.10%)</title><rect x="91.4783%" y="373" width="0.0960%" height="15" fill="rgb(212,3,48)" fg:x="14288" fg:w="15"/><text x="91.7283%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitBytecodes (15 samples, 0.10%)</title><rect x="91.4783%" y="357" width="0.0960%" height="15" fill="rgb(218,128,7)" fg:x="14288" fg:w="15"/><text x="91.7283%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitThrowReferenceErrorIfHole (2 samples, 0.01%)</title><rect x="91.5616%" y="341" width="0.0128%" height="15" fill="rgb(226,216,39)" fg:x="14301" fg:w="2"/><text x="91.8116%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::BuildHoleCheckAndThrow (2 samples, 0.01%)</title><rect x="91.5616%" y="325" width="0.0128%" height="15" fill="rgb(243,47,51)" fg:x="14301" fg:w="2"/><text x="91.8116%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::Reduce (3 samples, 0.02%)</title><rect x="91.6320%" y="341" width="0.0192%" height="15" fill="rgb(241,183,40)" fg:x="14312" fg:w="3"/><text x="91.8820%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::InlineCandidate (3 samples, 0.02%)</title><rect x="91.6320%" y="325" width="0.0192%" height="15" fill="rgb(231,217,32)" fg:x="14312" fg:w="3"/><text x="91.8820%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::JSInliner::ReduceJSCall (3 samples, 0.02%)</title><rect x="91.6320%" y="309" width="0.0192%" height="15" fill="rgb(229,61,38)" fg:x="14312" fg:w="3"/><text x="91.8820%" y="319.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReduceJSLoadNamed (3 samples, 0.02%)</title><rect x="91.6512%" y="341" width="0.0192%" height="15" fill="rgb(225,210,5)" fg:x="14315" fg:w="3"/><text x="91.9012%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReducePropertyAccess(v8::internal::compiler::Node*, v8::internal::compiler::Node*, v8::base::Optional (3 samples, 0.02%)</title><rect x="91.6512%" y="325" width="0.0192%" height="15" fill="rgb(231,79,45)" fg:x="14315" fg:w="3"/><text x="91.9012%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReduceNamedAccess (2 samples, 0.01%)</title><rect x="91.6576%" y="309" width="0.0128%" height="15" fill="rgb(224,100,7)" fg:x="14316" fg:w="2"/><text x="91.9076%" y="319.50"></text></g><g><title>deno`v8::internal::compiler::JSHeapBroker::GetPropertyAccessInfo (2 samples, 0.01%)</title><rect x="91.6576%" y="293" width="0.0128%" height="15" fill="rgb(241,198,18)" fg:x="14316" fg:w="2"/><text x="91.9076%" y="303.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReduceJSSetKeyedProperty (2 samples, 0.01%)</title><rect x="91.6704%" y="341" width="0.0128%" height="15" fill="rgb(252,97,53)" fg:x="14318" fg:w="2"/><text x="91.9204%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReducePropertyAccess(v8::internal::compiler::Node*, v8::internal::compiler::Node*, v8::base::Optional (2 samples, 0.01%)</title><rect x="91.6704%" y="325" width="0.0128%" height="15" fill="rgb(220,88,7)" fg:x="14318" fg:w="2"/><text x="91.9204%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReduceNamedAccess (2 samples, 0.01%)</title><rect x="91.6704%" y="309" width="0.0128%" height="15" fill="rgb(213,176,14)" fg:x="14318" fg:w="2"/><text x="91.9204%" y="319.50"></text></g><g><title>deno`v8::internal::compiler::JSHeapBroker::GetPropertyAccessInfo (2 samples, 0.01%)</title><rect x="91.6704%" y="293" width="0.0128%" height="15" fill="rgb(246,73,7)" fg:x="14318" fg:w="2"/><text x="91.9204%" y="303.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (13 samples, 0.08%)</title><rect x="91.6064%" y="357" width="0.0832%" height="15" fill="rgb(245,64,36)" fg:x="14308" fg:w="13"/><text x="91.8564%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (20 samples, 0.13%)</title><rect x="91.5744%" y="373" width="0.1280%" height="15" fill="rgb(245,80,10)" fg:x="14303" fg:w="20"/><text x="91.8244%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::AllNodes::AllNodes (2 samples, 0.01%)</title><rect x="91.7088%" y="325" width="0.0128%" height="15" fill="rgb(232,107,50)" fg:x="14324" fg:w="2"/><text x="91.9588%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::AllNodes::Mark (2 samples, 0.01%)</title><rect x="91.7088%" y="309" width="0.0128%" height="15" fill="rgb(253,3,0)" fg:x="14324" fg:w="2"/><text x="91.9588%" y="319.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::Finalize (4 samples, 0.03%)</title><rect x="91.7024%" y="373" width="0.0256%" height="15" fill="rgb(212,99,53)" fg:x="14323" fg:w="4"/><text x="91.9524%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::InlineCandidate (4 samples, 0.03%)</title><rect x="91.7024%" y="357" width="0.0256%" height="15" fill="rgb(249,111,54)" fg:x="14323" fg:w="4"/><text x="91.9524%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::JSInliner::ReduceJSCall (4 samples, 0.03%)</title><rect x="91.7024%" y="341" width="0.0256%" height="15" fill="rgb(249,55,30)" fg:x="14323" fg:w="4"/><text x="91.9524%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (25 samples, 0.16%)</title><rect x="91.5744%" y="389" width="0.1601%" height="15" fill="rgb(237,47,42)" fg:x="14303" fg:w="25"/><text x="91.8244%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (50 samples, 0.32%)</title><rect x="91.4271%" y="437" width="0.3201%" height="15" fill="rgb(211,20,18)" fg:x="14280" fg:w="50"/><text x="91.6771%" y="447.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (27 samples, 0.17%)</title><rect x="91.5744%" y="421" width="0.1729%" height="15" fill="rgb(231,203,46)" fg:x="14303" fg:w="27"/><text x="91.8244%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (27 samples, 0.17%)</title><rect x="91.5744%" y="405" width="0.1729%" height="15" fill="rgb(237,142,3)" fg:x="14303" fg:w="27"/><text x="91.8244%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::JSNativeContextSpecialization(v8::internal::compiler::AdvancedReducer::Editor*, v8::internal::compiler::JSGraph*, v8::internal::compiler::JSHeapBroker*, v8::base::Flags (2 samples, 0.01%)</title><rect x="91.7344%" y="389" width="0.0128%" height="15" fill="rgb(241,107,1)" fg:x="14328" fg:w="2"/><text x="91.9844%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::NativeContextRef::global_object (2 samples, 0.01%)</title><rect x="91.7344%" y="373" width="0.0128%" height="15" fill="rgb(229,83,13)" fg:x="14328" fg:w="2"/><text x="91.9844%" y="383.50"></text></g><g><title>deno`v8::base::Optional&lt;v8::internal::compiler::ref_traits&lt;v8::internal::JSGlobalObject&gt;::ref_type&gt; v8::internal::compiler::TryMakeRef&lt;v8::internal::JSGlobalObject, void&gt;(v8::internal::compiler::JSHeapBroker*, v8::internal::JSGlobalObject, v8::base::Flags (2 samples, 0.01%)</title><rect x="91.7344%" y="357" width="0.0128%" height="15" fill="rgb(241,91,40)" fg:x="14328" fg:w="2"/><text x="91.9844%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::JSHeapBroker::TryGetOrCreateData(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::base::Flags (2 samples, 0.01%)</title><rect x="91.7344%" y="341" width="0.0128%" height="15" fill="rgb(225,3,45)" fg:x="14328" fg:w="2"/><text x="91.9844%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::BuildCFG (4 samples, 0.03%)</title><rect x="91.7472%" y="389" width="0.0256%" height="15" fill="rgb(244,223,14)" fg:x="14330" fg:w="4"/><text x="91.9972%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::CFGBuilder::Run (4 samples, 0.03%)</title><rect x="91.7472%" y="373" width="0.0256%" height="15" fill="rgb(224,124,37)" fg:x="14330" fg:w="4"/><text x="91.9972%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::InitializePlacement (2 samples, 0.01%)</title><rect x="91.7728%" y="341" width="0.0128%" height="15" fill="rgb(251,171,30)" fg:x="14334" fg:w="2"/><text x="92.0228%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::PrepareUses (4 samples, 0.03%)</title><rect x="91.7728%" y="389" width="0.0256%" height="15" fill="rgb(236,46,54)" fg:x="14334" fg:w="4"/><text x="92.0228%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::Run (4 samples, 0.03%)</title><rect x="91.7728%" y="373" width="0.0256%" height="15" fill="rgb(245,213,5)" fg:x="14334" fg:w="4"/><text x="92.0228%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::VisitInputs (4 samples, 0.03%)</title><rect x="91.7728%" y="357" width="0.0256%" height="15" fill="rgb(230,144,27)" fg:x="14334" fg:w="4"/><text x="92.0228%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::IncrementUnscheduledUseCount (2 samples, 0.01%)</title><rect x="91.7856%" y="341" width="0.0128%" height="15" fill="rgb(220,86,6)" fg:x="14336" fg:w="2"/><text x="92.0356%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleEarly (4 samples, 0.03%)</title><rect x="91.7985%" y="389" width="0.0256%" height="15" fill="rgb(240,20,13)" fg:x="14338" fg:w="4"/><text x="92.0485%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleEarlyNodeVisitor::Run(v8::internal::ZoneVector (4 samples, 0.03%)</title><rect x="91.7985%" y="373" width="0.0256%" height="15" fill="rgb(217,89,34)" fg:x="14338" fg:w="4"/><text x="92.0485%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleEarlyNodeVisitor::VisitNode (4 samples, 0.03%)</title><rect x="91.7985%" y="357" width="0.0256%" height="15" fill="rgb(229,13,5)" fg:x="14338" fg:w="4"/><text x="92.0485%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleEarlyNodeVisitor::PropagateMinimumPositionToNode (4 samples, 0.03%)</title><rect x="91.7985%" y="341" width="0.0256%" height="15" fill="rgb(244,67,35)" fg:x="14338" fg:w="4"/><text x="92.0485%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::GetBlockForUse (2 samples, 0.01%)</title><rect x="91.8433%" y="341" width="0.0128%" height="15" fill="rgb(221,40,2)" fg:x="14345" fg:w="2"/><text x="92.0933%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::SplitNode (3 samples, 0.02%)</title><rect x="91.8561%" y="341" width="0.0192%" height="15" fill="rgb(237,157,21)" fg:x="14347" fg:w="3"/><text x="92.1061%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (9 samples, 0.06%)</title><rect x="91.8369%" y="357" width="0.0576%" height="15" fill="rgb(222,94,11)" fg:x="14344" fg:w="9"/><text x="92.0869%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::GetCommonDominator (3 samples, 0.02%)</title><rect x="91.8753%" y="341" width="0.0192%" height="15" fill="rgb(249,113,6)" fg:x="14350" fg:w="3"/><text x="92.1253%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (13 samples, 0.08%)</title><rect x="91.8241%" y="389" width="0.0832%" height="15" fill="rgb(238,137,36)" fg:x="14342" fg:w="13"/><text x="92.0741%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (13 samples, 0.08%)</title><rect x="91.8241%" y="373" width="0.0832%" height="15" fill="rgb(210,102,26)" fg:x="14342" fg:w="13"/><text x="92.0741%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::UpdatePlacement (2 samples, 0.01%)</title><rect x="91.8945%" y="357" width="0.0128%" height="15" fill="rgb(218,30,30)" fg:x="14353" fg:w="2"/><text x="92.1445%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::DecrementUnscheduledUseCount (2 samples, 0.01%)</title><rect x="91.8945%" y="341" width="0.0128%" height="15" fill="rgb(214,67,26)" fg:x="14353" fg:w="2"/><text x="92.1445%" y="351.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (26 samples, 0.17%)</title><rect x="91.7472%" y="421" width="0.1665%" height="15" fill="rgb(251,9,53)" fg:x="14330" fg:w="26"/><text x="91.9972%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (26 samples, 0.17%)</title><rect x="91.7472%" y="405" width="0.1665%" height="15" fill="rgb(228,204,25)" fg:x="14330" fg:w="26"/><text x="91.9972%" y="415.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ControlFlowOptimizationPhase&gt; (3 samples, 0.02%)</title><rect x="91.9137%" y="421" width="0.0192%" height="15" fill="rgb(207,153,8)" fg:x="14356" fg:w="3"/><text x="92.1637%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::ControlFlowOptimizationPhase::Run (3 samples, 0.02%)</title><rect x="91.9137%" y="405" width="0.0192%" height="15" fill="rgb(242,9,16)" fg:x="14356" fg:w="3"/><text x="92.1637%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::ControlFlowOptimizer::Optimize (3 samples, 0.02%)</title><rect x="91.9137%" y="389" width="0.0192%" height="15" fill="rgb(217,211,10)" fg:x="14356" fg:w="3"/><text x="92.1637%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::ControlFlowOptimizer::VisitNode (2 samples, 0.01%)</title><rect x="91.9201%" y="373" width="0.0128%" height="15" fill="rgb(219,228,52)" fg:x="14357" fg:w="2"/><text x="92.1701%" y="383.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::DecompressionOptimizationPhase&gt; (4 samples, 0.03%)</title><rect x="91.9329%" y="421" width="0.0256%" height="15" fill="rgb(231,92,29)" fg:x="14359" fg:w="4"/><text x="92.1829%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizationPhase::Run (4 samples, 0.03%)</title><rect x="91.9329%" y="405" width="0.0256%" height="15" fill="rgb(232,8,23)" fg:x="14359" fg:w="4"/><text x="92.1829%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizer::Reduce (3 samples, 0.02%)</title><rect x="91.9393%" y="389" width="0.0192%" height="15" fill="rgb(216,211,34)" fg:x="14360" fg:w="3"/><text x="92.1893%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizer::MarkNodeInputs (3 samples, 0.02%)</title><rect x="91.9393%" y="373" width="0.0192%" height="15" fill="rgb(236,151,0)" fg:x="14360" fg:w="3"/><text x="92.1893%" y="383.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyGraphTrimmingPhase&gt; (2 samples, 0.01%)</title><rect x="91.9585%" y="421" width="0.0128%" height="15" fill="rgb(209,168,3)" fg:x="14363" fg:w="2"/><text x="92.2085%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::EarlyGraphTrimmingPhase::Run (2 samples, 0.01%)</title><rect x="91.9585%" y="405" width="0.0128%" height="15" fill="rgb(208,129,28)" fg:x="14363" fg:w="2"/><text x="92.2085%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (2 samples, 0.01%)</title><rect x="91.9585%" y="389" width="0.0128%" height="15" fill="rgb(229,78,22)" fg:x="14363" fg:w="2"/><text x="92.2085%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::DeadCodeElimination::ReduceNode (2 samples, 0.01%)</title><rect x="92.0161%" y="341" width="0.0128%" height="15" fill="rgb(228,187,13)" fg:x="14372" fg:w="2"/><text x="92.2661%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (9 samples, 0.06%)</title><rect x="91.9969%" y="357" width="0.0576%" height="15" fill="rgb(240,119,24)" fg:x="14369" fg:w="9"/><text x="92.2469%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (3 samples, 0.02%)</title><rect x="92.0353%" y="341" width="0.0192%" height="15" fill="rgb(209,194,42)" fg:x="14375" fg:w="3"/><text x="92.2853%" y="351.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (14 samples, 0.09%)</title><rect x="91.9713%" y="421" width="0.0896%" height="15" fill="rgb(247,200,46)" fg:x="14365" fg:w="14"/><text x="92.2213%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::EarlyOptimizationPhase::Run (14 samples, 0.09%)</title><rect x="91.9713%" y="405" width="0.0896%" height="15" fill="rgb(218,76,16)" fg:x="14365" fg:w="14"/><text x="92.2213%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (14 samples, 0.09%)</title><rect x="91.9713%" y="389" width="0.0896%" height="15" fill="rgb(225,21,48)" fg:x="14365" fg:w="14"/><text x="92.2213%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (13 samples, 0.08%)</title><rect x="91.9777%" y="373" width="0.0832%" height="15" fill="rgb(239,223,50)" fg:x="14366" fg:w="13"/><text x="92.2277%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (6 samples, 0.04%)</title><rect x="92.0610%" y="389" width="0.0384%" height="15" fill="rgb(244,45,21)" fg:x="14379" fg:w="6"/><text x="92.3110%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (6 samples, 0.04%)</title><rect x="92.0610%" y="373" width="0.0384%" height="15" fill="rgb(232,33,43)" fg:x="14379" fg:w="6"/><text x="92.3110%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="92.0866%" y="357" width="0.0128%" height="15" fill="rgb(209,8,3)" fg:x="14383" fg:w="2"/><text x="92.3366%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (4 samples, 0.03%)</title><rect x="92.0994%" y="389" width="0.0256%" height="15" fill="rgb(214,25,53)" fg:x="14385" fg:w="4"/><text x="92.3494%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::LinearizeEffectControl (2 samples, 0.01%)</title><rect x="92.1250%" y="389" width="0.0128%" height="15" fill="rgb(254,186,54)" fg:x="14389" fg:w="2"/><text x="92.3750%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizer::Run (2 samples, 0.01%)</title><rect x="92.1250%" y="373" width="0.0128%" height="15" fill="rgb(208,174,49)" fg:x="14389" fg:w="2"/><text x="92.3750%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizer::ProcessNode (2 samples, 0.01%)</title><rect x="92.1250%" y="357" width="0.0128%" height="15" fill="rgb(233,191,51)" fg:x="14389" fg:w="2"/><text x="92.3750%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizer::TryWireInStateEffect (2 samples, 0.01%)</title><rect x="92.1250%" y="341" width="0.0128%" height="15" fill="rgb(222,134,10)" fg:x="14389" fg:w="2"/><text x="92.3750%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::CFGBuilder::Run (3 samples, 0.02%)</title><rect x="92.1442%" y="357" width="0.0192%" height="15" fill="rgb(230,226,20)" fg:x="14392" fg:w="3"/><text x="92.3942%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::BuildCFG (5 samples, 0.03%)</title><rect x="92.1442%" y="373" width="0.0320%" height="15" fill="rgb(251,111,25)" fg:x="14392" fg:w="5"/><text x="92.3942%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasContextInput (2 samples, 0.01%)</title><rect x="92.1634%" y="357" width="0.0128%" height="15" fill="rgb(224,40,46)" fg:x="14395" fg:w="2"/><text x="92.4134%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::PrepareUses (3 samples, 0.02%)</title><rect x="92.1762%" y="373" width="0.0192%" height="15" fill="rgb(236,108,47)" fg:x="14397" fg:w="3"/><text x="92.4262%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::Run (3 samples, 0.02%)</title><rect x="92.1762%" y="357" width="0.0192%" height="15" fill="rgb(234,93,0)" fg:x="14397" fg:w="3"/><text x="92.4262%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::VisitInputs (3 samples, 0.02%)</title><rect x="92.1762%" y="341" width="0.0192%" height="15" fill="rgb(224,213,32)" fg:x="14397" fg:w="3"/><text x="92.4262%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::InitializePlacement (2 samples, 0.01%)</title><rect x="92.1826%" y="325" width="0.0128%" height="15" fill="rgb(251,11,48)" fg:x="14398" fg:w="2"/><text x="92.4326%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ScheduleRegion (2 samples, 0.01%)</title><rect x="92.1954%" y="341" width="0.0128%" height="15" fill="rgb(236,173,5)" fg:x="14400" fg:w="2"/><text x="92.4454%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (3 samples, 0.02%)</title><rect x="92.2082%" y="341" width="0.0192%" height="15" fill="rgb(230,95,12)" fg:x="14402" fg:w="3"/><text x="92.4582%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::GetCommonDominator (3 samples, 0.02%)</title><rect x="92.2082%" y="325" width="0.0192%" height="15" fill="rgb(232,209,1)" fg:x="14402" fg:w="3"/><text x="92.4582%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (9 samples, 0.06%)</title><rect x="92.1954%" y="373" width="0.0576%" height="15" fill="rgb(232,6,1)" fg:x="14400" fg:w="9"/><text x="92.4454%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (9 samples, 0.06%)</title><rect x="92.1954%" y="357" width="0.0576%" height="15" fill="rgb(210,224,50)" fg:x="14400" fg:w="9"/><text x="92.4454%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::UpdatePlacement (4 samples, 0.03%)</title><rect x="92.2274%" y="341" width="0.0256%" height="15" fill="rgb(228,127,35)" fg:x="14405" fg:w="4"/><text x="92.4774%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::DecrementUnscheduledUseCount (3 samples, 0.02%)</title><rect x="92.2338%" y="325" width="0.0192%" height="15" fill="rgb(245,102,45)" fg:x="14406" fg:w="3"/><text x="92.4838%" y="335.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (31 samples, 0.20%)</title><rect x="92.0610%" y="421" width="0.1985%" height="15" fill="rgb(214,1,49)" fg:x="14379" fg:w="31"/><text x="92.3110%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (31 samples, 0.20%)</title><rect x="92.0610%" y="405" width="0.1985%" height="15" fill="rgb(226,163,40)" fg:x="14379" fg:w="31"/><text x="92.3110%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (18 samples, 0.12%)</title><rect x="92.1442%" y="389" width="0.1152%" height="15" fill="rgb(239,212,28)" fg:x="14392" fg:w="18"/><text x="92.3942%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::ZipIterable::begin (2 samples, 0.01%)</title><rect x="92.3235%" y="325" width="0.0128%" height="15" fill="rgb(220,20,13)" fg:x="14420" fg:w="2"/><text x="92.5735%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::iterator::begin(v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash (2 samples, 0.01%)</title><rect x="92.3235%" y="309" width="0.0128%" height="15" fill="rgb(210,164,35)" fg:x="14420" fg:w="2"/><text x="92.5735%" y="319.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::double_iterator::operator++ (2 samples, 0.01%)</title><rect x="92.3363%" y="325" width="0.0128%" height="15" fill="rgb(248,109,41)" fg:x="14422" fg:w="2"/><text x="92.5863%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::operator==(v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash (5 samples, 0.03%)</title><rect x="92.3235%" y="341" width="0.0320%" height="15" fill="rgb(238,23,50)" fg:x="14420" fg:w="5"/><text x="92.5735%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisTracker::Scope::~Scope (7 samples, 0.04%)</title><rect x="92.3170%" y="357" width="0.0448%" height="15" fill="rgb(211,48,49)" fg:x="14419" fg:w="7"/><text x="92.5670%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::SparseSidetable&lt;v8::internal::compiler::VariableTracker::State&gt;::Get (2 samples, 0.01%)</title><rect x="92.3683%" y="357" width="0.0128%" height="15" fill="rgb(223,36,21)" fg:x="14427" fg:w="2"/><text x="92.6183%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::SparseSidetable&lt;v8::internal::compiler::VirtualObject*&gt;::Get (2 samples, 0.01%)</title><rect x="92.3811%" y="357" width="0.0128%" height="15" fill="rgb(207,123,46)" fg:x="14429" fg:w="2"/><text x="92.6311%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::VariableTracker::MergeInputs (4 samples, 0.03%)</title><rect x="92.3939%" y="357" width="0.0256%" height="15" fill="rgb(240,218,32)" fg:x="14431" fg:w="4"/><text x="92.6439%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::iterator::operator++ (2 samples, 0.01%)</title><rect x="92.4067%" y="341" width="0.0128%" height="15" fill="rgb(252,5,43)" fg:x="14433" fg:w="2"/><text x="92.6567%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysis::Reduce (24 samples, 0.15%)</title><rect x="92.2786%" y="373" width="0.1537%" height="15" fill="rgb(252,84,19)" fg:x="14413" fg:w="24"/><text x="92.5286%" y="383.50"></text></g><g><title>deno`void v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::Modify&lt;v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::Set(v8::internal::compiler::Variable, v8::internal::compiler::Node*)::&apos;lambda&apos;(v8::internal::compiler::Node**)&gt;(v8::internal::compiler::Variable, v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::Set(v8::internal::compiler::Variable, v8::internal::compiler::Node*)::&apos;lambda&apos; (2 samples, 0.01%)</title><rect x="92.4195%" y="357" width="0.0128%" height="15" fill="rgb(243,152,39)" fg:x="14435" fg:w="2"/><text x="92.6695%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::EffectGraphReducer::ReduceFrom (28 samples, 0.18%)</title><rect x="92.2594%" y="389" width="0.1793%" height="15" fill="rgb(234,160,15)" fg:x="14410" fg:w="28"/><text x="92.5094%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (8 samples, 0.05%)</title><rect x="92.4451%" y="389" width="0.0512%" height="15" fill="rgb(237,34,20)" fg:x="14439" fg:w="8"/><text x="92.6951%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (8 samples, 0.05%)</title><rect x="92.4451%" y="373" width="0.0512%" height="15" fill="rgb(229,97,13)" fg:x="14439" fg:w="8"/><text x="92.6951%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (3 samples, 0.02%)</title><rect x="92.4771%" y="357" width="0.0192%" height="15" fill="rgb(234,71,50)" fg:x="14444" fg:w="3"/><text x="92.7271%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisReducer::Reduce (3 samples, 0.02%)</title><rect x="92.4771%" y="341" width="0.0192%" height="15" fill="rgb(253,155,4)" fg:x="14444" fg:w="3"/><text x="92.7271%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisReducer::ReduceFrameStateInputs (2 samples, 0.01%)</title><rect x="92.4835%" y="325" width="0.0128%" height="15" fill="rgb(222,185,37)" fg:x="14445" fg:w="2"/><text x="92.7335%" y="335.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (39 samples, 0.25%)</title><rect x="92.2594%" y="421" width="0.2497%" height="15" fill="rgb(251,177,13)" fg:x="14410" fg:w="39"/><text x="92.5094%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (39 samples, 0.25%)</title><rect x="92.2594%" y="405" width="0.2497%" height="15" fill="rgb(250,179,40)" fg:x="14410" fg:w="39"/><text x="92.5094%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::IsEffectEdge (2 samples, 0.01%)</title><rect x="92.4963%" y="389" width="0.0128%" height="15" fill="rgb(242,44,2)" fg:x="14447" fg:w="2"/><text x="92.7463%" y="399.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GenericLoweringPhase&gt; (3 samples, 0.02%)</title><rect x="92.5091%" y="421" width="0.0192%" height="15" fill="rgb(216,177,13)" fg:x="14449" fg:w="3"/><text x="92.7591%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::GenericLoweringPhase::Run (3 samples, 0.02%)</title><rect x="92.5091%" y="405" width="0.0192%" height="15" fill="rgb(216,106,43)" fg:x="14449" fg:w="3"/><text x="92.7591%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="92.5091%" y="389" width="0.0192%" height="15" fill="rgb(216,183,2)" fg:x="14449" fg:w="3"/><text x="92.7591%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="92.5091%" y="373" width="0.0192%" height="15" fill="rgb(249,75,3)" fg:x="14449" fg:w="3"/><text x="92.7591%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="92.5155%" y="357" width="0.0128%" height="15" fill="rgb(219,67,39)" fg:x="14450" fg:w="2"/><text x="92.7655%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (14 samples, 0.09%)</title><rect x="92.5283%" y="421" width="0.0896%" height="15" fill="rgb(253,228,2)" fg:x="14452" fg:w="14"/><text x="92.7783%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (14 samples, 0.09%)</title><rect x="92.5283%" y="405" width="0.0896%" height="15" fill="rgb(235,138,27)" fg:x="14452" fg:w="14"/><text x="92.7783%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (13 samples, 0.08%)</title><rect x="92.5347%" y="389" width="0.0832%" height="15" fill="rgb(236,97,51)" fg:x="14453" fg:w="13"/><text x="92.7847%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (13 samples, 0.08%)</title><rect x="92.5347%" y="373" width="0.0832%" height="15" fill="rgb(240,80,30)" fg:x="14453" fg:w="13"/><text x="92.7847%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (10 samples, 0.06%)</title><rect x="92.5539%" y="357" width="0.0640%" height="15" fill="rgb(230,178,19)" fg:x="14456" fg:w="10"/><text x="92.8039%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (4 samples, 0.03%)</title><rect x="92.5924%" y="341" width="0.0256%" height="15" fill="rgb(210,190,27)" fg:x="14462" fg:w="4"/><text x="92.8424%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (13 samples, 0.08%)</title><rect x="92.6564%" y="357" width="0.0832%" height="15" fill="rgb(222,107,31)" fg:x="14472" fg:w="13"/><text x="92.9064%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (20 samples, 0.13%)</title><rect x="92.6180%" y="421" width="0.1280%" height="15" fill="rgb(216,127,34)" fg:x="14466" fg:w="20"/><text x="92.8680%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (20 samples, 0.13%)</title><rect x="92.6180%" y="405" width="0.1280%" height="15" fill="rgb(234,116,52)" fg:x="14466" fg:w="20"/><text x="92.8680%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (20 samples, 0.13%)</title><rect x="92.6180%" y="389" width="0.1280%" height="15" fill="rgb(222,124,15)" fg:x="14466" fg:w="20"/><text x="92.8680%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (20 samples, 0.13%)</title><rect x="92.6180%" y="373" width="0.1280%" height="15" fill="rgb(231,179,28)" fg:x="14466" fg:w="20"/><text x="92.8680%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (4 samples, 0.03%)</title><rect x="92.7460%" y="389" width="0.0256%" height="15" fill="rgb(226,93,45)" fg:x="14486" fg:w="4"/><text x="92.9960%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::LoopFinderImpl::FinishLoopTree (2 samples, 0.01%)</title><rect x="92.7716%" y="373" width="0.0128%" height="15" fill="rgb(215,8,51)" fg:x="14490" fg:w="2"/><text x="93.0216%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::LoopFinderImpl::PropagateBackward (6 samples, 0.04%)</title><rect x="92.7844%" y="373" width="0.0384%" height="15" fill="rgb(223,106,5)" fg:x="14492" fg:w="6"/><text x="93.0344%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::LoopFinder::BuildLoopTree (9 samples, 0.06%)</title><rect x="92.7716%" y="389" width="0.0576%" height="15" fill="rgb(250,191,5)" fg:x="14490" fg:w="9"/><text x="93.0216%" y="399.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoopPeelingPhase&gt; (14 samples, 0.09%)</title><rect x="92.7460%" y="421" width="0.0896%" height="15" fill="rgb(242,132,44)" fg:x="14486" fg:w="14"/><text x="92.9960%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::LoopPeelingPhase::Run (14 samples, 0.09%)</title><rect x="92.7460%" y="405" width="0.0896%" height="15" fill="rgb(251,152,29)" fg:x="14486" fg:w="14"/><text x="92.9960%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (5 samples, 0.03%)</title><rect x="92.8485%" y="357" width="0.0320%" height="15" fill="rgb(218,179,5)" fg:x="14502" fg:w="5"/><text x="93.0985%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (3 samples, 0.02%)</title><rect x="92.8613%" y="341" width="0.0192%" height="15" fill="rgb(227,67,19)" fg:x="14504" fg:w="3"/><text x="93.1113%" y="351.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MachineOperatorOptimizationPhase&gt; (8 samples, 0.05%)</title><rect x="92.8356%" y="421" width="0.0512%" height="15" fill="rgb(233,119,31)" fg:x="14500" fg:w="8"/><text x="93.0856%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::MachineOperatorOptimizationPhase::Run (8 samples, 0.05%)</title><rect x="92.8356%" y="405" width="0.0512%" height="15" fill="rgb(241,120,22)" fg:x="14500" fg:w="8"/><text x="93.0856%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (8 samples, 0.05%)</title><rect x="92.8356%" y="389" width="0.0512%" height="15" fill="rgb(224,102,30)" fg:x="14500" fg:w="8"/><text x="93.0856%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (8 samples, 0.05%)</title><rect x="92.8356%" y="373" width="0.0512%" height="15" fill="rgb(210,164,37)" fg:x="14500" fg:w="8"/><text x="93.0856%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (2 samples, 0.01%)</title><rect x="92.8869%" y="389" width="0.0128%" height="15" fill="rgb(226,191,16)" fg:x="14508" fg:w="2"/><text x="93.1369%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::MemoryOptimizationPhase::Run (3 samples, 0.02%)</title><rect x="92.8869%" y="405" width="0.0192%" height="15" fill="rgb(214,40,45)" fg:x="14508" fg:w="3"/><text x="93.1369%" y="415.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MemoryOptimizationPhase&gt; (4 samples, 0.03%)</title><rect x="92.8869%" y="421" width="0.0256%" height="15" fill="rgb(244,29,26)" fg:x="14508" fg:w="4"/><text x="93.1369%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::GenerateTraversal (3 samples, 0.02%)</title><rect x="92.9125%" y="373" width="0.0192%" height="15" fill="rgb(216,16,5)" fg:x="14512" fg:w="3"/><text x="93.1625%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunLowerPhase (3 samples, 0.02%)</title><rect x="92.9381%" y="373" width="0.0192%" height="15" fill="rgb(249,76,35)" fg:x="14516" fg:w="3"/><text x="93.1881%" y="383.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::VisitNode&lt;(v8::internal::compiler::Phase)0&gt; (2 samples, 0.01%)</title><rect x="92.9637%" y="357" width="0.0128%" height="15" fill="rgb(207,11,44)" fg:x="14520" fg:w="2"/><text x="93.2137%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunPropagatePhase (4 samples, 0.03%)</title><rect x="92.9573%" y="373" width="0.0256%" height="15" fill="rgb(228,190,49)" fg:x="14519" fg:w="4"/><text x="93.2073%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RetypeNode (3 samples, 0.02%)</title><rect x="92.9829%" y="357" width="0.0192%" height="15" fill="rgb(214,173,12)" fg:x="14523" fg:w="3"/><text x="93.2329%" y="367.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::VisitNode&lt;(v8::internal::compiler::Phase)1&gt; (2 samples, 0.01%)</title><rect x="92.9893%" y="341" width="0.0128%" height="15" fill="rgb(218,26,35)" fg:x="14524" fg:w="2"/><text x="93.2393%" y="351.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (15 samples, 0.10%)</title><rect x="92.9125%" y="421" width="0.0960%" height="15" fill="rgb(220,200,19)" fg:x="14512" fg:w="15"/><text x="93.1625%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLoweringPhase::Run (15 samples, 0.10%)</title><rect x="92.9125%" y="405" width="0.0960%" height="15" fill="rgb(239,95,49)" fg:x="14512" fg:w="15"/><text x="93.1625%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (15 samples, 0.10%)</title><rect x="92.9125%" y="389" width="0.0960%" height="15" fill="rgb(235,85,53)" fg:x="14512" fg:w="15"/><text x="93.1625%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunRetypePhase (4 samples, 0.03%)</title><rect x="92.9829%" y="373" width="0.0256%" height="15" fill="rgb(233,133,31)" fg:x="14523" fg:w="4"/><text x="93.2329%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (3 samples, 0.02%)</title><rect x="93.0085%" y="389" width="0.0192%" height="15" fill="rgb(218,25,20)" fg:x="14527" fg:w="3"/><text x="93.2585%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::(anonymous namespace)::RedundantStoreFinder::VisitEffectfulNode (5 samples, 0.03%)</title><rect x="93.0341%" y="373" width="0.0320%" height="15" fill="rgb(252,210,38)" fg:x="14531" fg:w="5"/><text x="93.2841%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;unsigned int, v8::internal::compiler::PersistentMap&lt;unsigned int, bool, v8::base::hash&lt;unsigned int&gt; &gt;, v8::base::hash&lt;unsigned int&gt; &gt;::operator==(v8::internal::compiler::PersistentMap&lt;unsigned int, v8::internal::compiler::PersistentMap&lt;unsigned int, bool, v8::base::hash&lt;unsigned int&gt; &gt;, v8::base::hash (4 samples, 0.03%)</title><rect x="93.0405%" y="357" width="0.0256%" height="15" fill="rgb(242,134,21)" fg:x="14532" fg:w="4"/><text x="93.2905%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;unsigned int, v8::internal::compiler::PersistentMap&lt;unsigned int, bool, v8::base::hash&lt;unsigned int&gt; &gt;, v8::base::hash&lt;unsigned int&gt; &gt;::double_iterator::operator++ (3 samples, 0.02%)</title><rect x="93.0469%" y="341" width="0.0192%" height="15" fill="rgb(213,28,48)" fg:x="14533" fg:w="3"/><text x="93.2969%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;unsigned int, v8::internal::compiler::PersistentMap&lt;unsigned int, bool, v8::base::hash&lt;unsigned int&gt; &gt;, v8::base::hash&lt;unsigned int&gt; &gt;::iterator::operator++ (3 samples, 0.02%)</title><rect x="93.0469%" y="325" width="0.0192%" height="15" fill="rgb(250,196,2)" fg:x="14533" fg:w="3"/><text x="93.2969%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;unsigned int, bool, v8::base::hash&lt;unsigned int&gt; &gt;::operator==(v8::internal::compiler::PersistentMap&lt;unsigned int, bool, v8::base::hash (2 samples, 0.01%)</title><rect x="93.0533%" y="309" width="0.0128%" height="15" fill="rgb(227,5,17)" fg:x="14534" fg:w="2"/><text x="93.3033%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="93.0533%" y="293" width="0.0128%" height="15" fill="rgb(221,226,24)" fg:x="14534" fg:w="2"/><text x="93.3033%" y="303.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::StoreStoreEliminationPhase&gt; (10 samples, 0.06%)</title><rect x="93.0085%" y="421" width="0.0640%" height="15" fill="rgb(211,5,48)" fg:x="14527" fg:w="10"/><text x="93.2585%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::StoreStoreEliminationPhase::Run (10 samples, 0.06%)</title><rect x="93.0085%" y="405" width="0.0640%" height="15" fill="rgb(219,150,6)" fg:x="14527" fg:w="10"/><text x="93.2585%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::StoreStoreElimination::Run (7 samples, 0.04%)</title><rect x="93.0277%" y="389" width="0.0448%" height="15" fill="rgb(251,46,16)" fg:x="14530" fg:w="7"/><text x="93.2777%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (6 samples, 0.04%)</title><rect x="93.0917%" y="357" width="0.0384%" height="15" fill="rgb(220,204,40)" fg:x="14540" fg:w="6"/><text x="93.3417%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TypedLoweringPhase&gt; (11 samples, 0.07%)</title><rect x="93.0725%" y="421" width="0.0704%" height="15" fill="rgb(211,85,2)" fg:x="14537" fg:w="11"/><text x="93.3225%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::TypedLoweringPhase::Run (11 samples, 0.07%)</title><rect x="93.0725%" y="405" width="0.0704%" height="15" fill="rgb(229,17,7)" fg:x="14537" fg:w="11"/><text x="93.3225%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (11 samples, 0.07%)</title><rect x="93.0725%" y="389" width="0.0704%" height="15" fill="rgb(239,72,28)" fg:x="14537" fg:w="11"/><text x="93.3225%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (11 samples, 0.07%)</title><rect x="93.0725%" y="373" width="0.0704%" height="15" fill="rgb(230,47,54)" fg:x="14537" fg:w="11"/><text x="93.3225%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::LoopVariableOptimizer::Run (2 samples, 0.01%)</title><rect x="93.1430%" y="389" width="0.0128%" height="15" fill="rgb(214,50,8)" fg:x="14548" fg:w="2"/><text x="93.3930%" y="399.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TyperPhase, v8::internal::compiler::Typer*&gt; (8 samples, 0.05%)</title><rect x="93.1430%" y="421" width="0.0512%" height="15" fill="rgb(216,198,43)" fg:x="14548" fg:w="8"/><text x="93.3930%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::TyperPhase::Run (8 samples, 0.05%)</title><rect x="93.1430%" y="405" width="0.0512%" height="15" fill="rgb(234,20,35)" fg:x="14548" fg:w="8"/><text x="93.3930%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Run(v8::internal::ZoneVector (6 samples, 0.04%)</title><rect x="93.1558%" y="389" width="0.0384%" height="15" fill="rgb(254,45,19)" fg:x="14550" fg:w="6"/><text x="93.4058%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (6 samples, 0.04%)</title><rect x="93.1558%" y="373" width="0.0384%" height="15" fill="rgb(219,14,44)" fg:x="14550" fg:w="6"/><text x="93.4058%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (6 samples, 0.04%)</title><rect x="93.1558%" y="357" width="0.0384%" height="15" fill="rgb(217,220,26)" fg:x="14550" fg:w="6"/><text x="93.4058%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="93.1814%" y="341" width="0.0128%" height="15" fill="rgb(213,158,28)" fg:x="14554" fg:w="2"/><text x="93.4314%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitCall (2 samples, 0.01%)</title><rect x="93.2710%" y="341" width="0.0128%" height="15" fill="rgb(252,51,52)" fg:x="14568" fg:w="2"/><text x="93.5210%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::InitializeCallBuffer(v8::internal::compiler::Node*, v8::internal::compiler::CallBuffer*, v8::base::Flags (2 samples, 0.01%)</title><rect x="93.2710%" y="325" width="0.0128%" height="15" fill="rgb(246,89,16)" fg:x="14568" fg:w="2"/><text x="93.5210%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::AppendDeoptimizeArguments(v8::internal::ZoneVector (2 samples, 0.01%)</title><rect x="93.2902%" y="325" width="0.0128%" height="15" fill="rgb(216,158,49)" fg:x="14571" fg:w="2"/><text x="93.5402%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::AddInputsToFrameStateDescriptor(v8::internal::compiler::FrameStateDescriptor*, v8::internal::compiler::FrameState, v8::internal::compiler::OperandGenerator*, v8::internal::compiler::StateObjectDeduplicator*, v8::internal::ZoneVector (2 samples, 0.01%)</title><rect x="93.2902%" y="309" width="0.0128%" height="15" fill="rgb(236,107,19)" fg:x="14571" fg:w="2"/><text x="93.5402%" y="319.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::AddInputsToFrameStateDescriptor(v8::internal::compiler::StateValueList*, v8::internal::ZoneVector (2 samples, 0.01%)</title><rect x="93.2902%" y="293" width="0.0128%" height="15" fill="rgb(228,185,30)" fg:x="14571" fg:w="2"/><text x="93.5402%" y="303.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitCall (2 samples, 0.01%)</title><rect x="93.3030%" y="325" width="0.0128%" height="15" fill="rgb(246,134,8)" fg:x="14573" fg:w="2"/><text x="93.5530%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::InitializeCallBuffer(v8::internal::compiler::Node*, v8::internal::compiler::CallBuffer*, v8::base::Flags (2 samples, 0.01%)</title><rect x="93.3030%" y="309" width="0.0128%" height="15" fill="rgb(214,143,50)" fg:x="14573" fg:w="2"/><text x="93.5530%" y="319.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitWordCompareZero (2 samples, 0.01%)</title><rect x="93.3158%" y="325" width="0.0128%" height="15" fill="rgb(228,75,8)" fg:x="14575" fg:w="2"/><text x="93.5658%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitControl (7 samples, 0.04%)</title><rect x="93.2902%" y="341" width="0.0448%" height="15" fill="rgb(207,175,4)" fg:x="14571" fg:w="7"/><text x="93.5402%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitDeoptimizeUnless (2 samples, 0.01%)</title><rect x="93.3350%" y="341" width="0.0128%" height="15" fill="rgb(205,108,24)" fg:x="14578" fg:w="2"/><text x="93.5850%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitWordCompareZero (2 samples, 0.01%)</title><rect x="93.3350%" y="325" width="0.0128%" height="15" fill="rgb(244,120,49)" fg:x="14578" fg:w="2"/><text x="93.5850%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitNode (2 samples, 0.01%)</title><rect x="93.3478%" y="341" width="0.0128%" height="15" fill="rgb(223,47,38)" fg:x="14580" fg:w="2"/><text x="93.5978%" y="351.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InstructionSelectionPhase, v8::internal::compiler::Linkage*&amp;&gt; (27 samples, 0.17%)</title><rect x="93.2006%" y="405" width="0.1729%" height="15" fill="rgb(229,179,11)" fg:x="14557" fg:w="27"/><text x="93.4506%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelectionPhase::Run (27 samples, 0.17%)</title><rect x="93.2006%" y="389" width="0.1729%" height="15" fill="rgb(231,122,1)" fg:x="14557" fg:w="27"/><text x="93.4506%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::SelectInstructions (27 samples, 0.17%)</title><rect x="93.2006%" y="373" width="0.1729%" height="15" fill="rgb(245,119,9)" fg:x="14557" fg:w="27"/><text x="93.4506%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitBlock (23 samples, 0.15%)</title><rect x="93.2262%" y="357" width="0.1473%" height="15" fill="rgb(241,163,25)" fg:x="14561" fg:w="23"/><text x="93.4762%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitPhi (2 samples, 0.01%)</title><rect x="93.3607%" y="341" width="0.0128%" height="15" fill="rgb(217,214,3)" fg:x="14582" fg:w="2"/><text x="93.6107%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (3 samples, 0.02%)</title><rect x="93.3735%" y="357" width="0.0192%" height="15" fill="rgb(240,86,28)" fg:x="14584" fg:w="3"/><text x="93.6235%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateFPRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (7 samples, 0.04%)</title><rect x="93.3735%" y="389" width="0.0448%" height="15" fill="rgb(215,47,9)" fg:x="14584" fg:w="7"/><text x="93.6235%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (7 samples, 0.04%)</title><rect x="93.3735%" y="373" width="0.0448%" height="15" fill="rgb(252,25,45)" fg:x="14584" fg:w="7"/><text x="93.6235%" y="383.50"></text></g><g><title>deno`void std::__1::__tree_remove&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (2 samples, 0.01%)</title><rect x="93.4055%" y="357" width="0.0128%" height="15" fill="rgb(251,164,9)" fg:x="14589" fg:w="2"/><text x="93.6555%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateBlockedReg (2 samples, 0.01%)</title><rect x="93.4439%" y="357" width="0.0128%" height="15" fill="rgb(233,194,0)" fg:x="14595" fg:w="2"/><text x="93.6939%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::FindFreeRegistersForRange(v8::internal::compiler::LiveRange*, v8::base::Vector (8 samples, 0.05%)</title><rect x="93.4567%" y="357" width="0.0512%" height="15" fill="rgb(249,111,24)" fg:x="14597" fg:w="8"/><text x="93.7067%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ActiveToInactive(std::__1::__wrap_iter (3 samples, 0.02%)</title><rect x="93.5783%" y="341" width="0.0192%" height="15" fill="rgb(250,223,3)" fg:x="14616" fg:w="3"/><text x="93.8283%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (15 samples, 0.10%)</title><rect x="93.5079%" y="357" width="0.0960%" height="15" fill="rgb(236,178,37)" fg:x="14605" fg:w="15"/><text x="93.7579%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::TryAllocateFreeReg(v8::internal::compiler::LiveRange*, v8::base::Vector (4 samples, 0.03%)</title><rect x="93.6103%" y="357" width="0.0256%" height="15" fill="rgb(241,158,50)" fg:x="14621" fg:w="4"/><text x="93.8603%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::PickRegisterThatIsAvailableLongest(v8::internal::compiler::LiveRange*, int, v8::base::Vector (4 samples, 0.03%)</title><rect x="93.6103%" y="341" width="0.0256%" height="15" fill="rgb(213,121,41)" fg:x="14621" fg:w="4"/><text x="93.8603%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges (3 samples, 0.02%)</title><rect x="93.6424%" y="357" width="0.0192%" height="15" fill="rgb(240,92,3)" fg:x="14626" fg:w="3"/><text x="93.8924%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator() (3 samples, 0.02%)</title><rect x="93.6424%" y="341" width="0.0192%" height="15" fill="rgb(205,123,3)" fg:x="14626" fg:w="3"/><text x="93.8924%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator()(v8::internal::compiler::LiveRange*) const::&apos;lambda&apos;(v8::internal::compiler::LiveRange*, v8::internal::compiler::LiveRange*, std::__1::function&lt;void (v8::internal::compiler::LiveRange*)&gt;)::operator()(v8::internal::compiler::LiveRange*, v8::internal::compiler::LiveRange*, std::__1::function&lt;void (2 samples, 0.01%)</title><rect x="93.6488%" y="325" width="0.0128%" height="15" fill="rgb(205,97,47)" fg:x="14627" fg:w="2"/><text x="93.8988%" y="335.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (41 samples, 0.26%)</title><rect x="93.4183%" y="373" width="0.2625%" height="15" fill="rgb(247,152,14)" fg:x="14591" fg:w="41"/><text x="93.6683%" y="383.50"></text></g><g><title>deno`void std::__1::__tree_remove&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (2 samples, 0.01%)</title><rect x="93.6680%" y="357" width="0.0128%" height="15" fill="rgb(248,195,53)" fg:x="14630" fg:w="2"/><text x="93.9180%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (42 samples, 0.27%)</title><rect x="93.4183%" y="389" width="0.2689%" height="15" fill="rgb(226,201,16)" fg:x="14591" fg:w="42"/><text x="93.6683%" y="399.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AssignSpillSlotsPhase&gt; (2 samples, 0.01%)</title><rect x="93.6872%" y="389" width="0.0128%" height="15" fill="rgb(205,98,0)" fg:x="14633" fg:w="2"/><text x="93.9372%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::OperandAssigner::AssignSpillSlots (2 samples, 0.01%)</title><rect x="93.6872%" y="373" width="0.0128%" height="15" fill="rgb(214,191,48)" fg:x="14633" fg:w="2"/><text x="93.9372%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeBuilder::ProcessInstructions (9 samples, 0.06%)</title><rect x="93.7256%" y="357" width="0.0576%" height="15" fill="rgb(237,112,39)" fg:x="14639" fg:w="9"/><text x="93.9756%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeBuilder::Use (3 samples, 0.02%)</title><rect x="93.7640%" y="341" width="0.0192%" height="15" fill="rgb(247,203,27)" fg:x="14645" fg:w="3"/><text x="94.0140%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeBuilder::BuildLiveRanges (14 samples, 0.09%)</title><rect x="93.7064%" y="373" width="0.0896%" height="15" fill="rgb(235,124,28)" fg:x="14636" fg:w="14"/><text x="93.9564%" y="383.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::BuildLiveRangesPhase&gt; (15 samples, 0.10%)</title><rect x="93.7064%" y="389" width="0.0960%" height="15" fill="rgb(208,207,46)" fg:x="14636" fg:w="15"/><text x="93.9564%" y="399.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ConnectRangesPhase&gt; (2 samples, 0.01%)</title><rect x="93.8024%" y="389" width="0.0128%" height="15" fill="rgb(234,176,4)" fg:x="14651" fg:w="2"/><text x="94.0524%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeConnector::ConnectRanges (2 samples, 0.01%)</title><rect x="93.8024%" y="373" width="0.0128%" height="15" fill="rgb(230,133,28)" fg:x="14651" fg:w="2"/><text x="94.0524%" y="383.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::OptimizeMovesPhase&gt; (3 samples, 0.02%)</title><rect x="93.8216%" y="389" width="0.0192%" height="15" fill="rgb(211,137,40)" fg:x="14654" fg:w="3"/><text x="94.0716%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::MoveOptimizer::Run (2 samples, 0.01%)</title><rect x="93.8280%" y="373" width="0.0128%" height="15" fill="rgb(254,35,13)" fg:x="14655" fg:w="2"/><text x="94.0780%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::MoveOptimizer::FinalizeMoves (2 samples, 0.01%)</title><rect x="93.8280%" y="357" width="0.0128%" height="15" fill="rgb(225,49,51)" fg:x="14655" fg:w="2"/><text x="94.0780%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::PopulateReferenceMapsPhase&gt; (4 samples, 0.03%)</title><rect x="93.8408%" y="389" width="0.0256%" height="15" fill="rgb(251,10,15)" fg:x="14657" fg:w="4"/><text x="94.0908%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::ReferenceMapPopulator::PopulateReferenceMaps (4 samples, 0.03%)</title><rect x="93.8408%" y="373" width="0.0256%" height="15" fill="rgb(228,207,15)" fg:x="14657" fg:w="4"/><text x="94.0908%" y="383.50"></text></g><g><title>deno`void std::__1::__sort&lt;v8::internal::compiler::ReferenceMapPopulator::PopulateReferenceMaps()::$_5&amp;, v8::internal::compiler::TopLevelLiveRange**&gt;(v8::internal::compiler::TopLevelLiveRange**, v8::internal::compiler::TopLevelLiveRange**, v8::internal::compiler::ReferenceMapPopulator::PopulateReferenceMaps (2 samples, 0.01%)</title><rect x="93.8536%" y="357" width="0.0128%" height="15" fill="rgb(241,99,19)" fg:x="14659" fg:w="2"/><text x="94.1036%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ResolveControlFlowPhase&gt; (5 samples, 0.03%)</title><rect x="93.8664%" y="389" width="0.0320%" height="15" fill="rgb(207,104,49)" fg:x="14661" fg:w="5"/><text x="94.1164%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeConnector::ResolveControlFlow (5 samples, 0.03%)</title><rect x="93.8664%" y="373" width="0.0320%" height="15" fill="rgb(234,99,18)" fg:x="14661" fg:w="5"/><text x="94.1164%" y="383.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (403 samples, 2.58%)</title><rect x="91.3247%" y="501" width="2.5802%" height="15" fill="rgb(213,191,49)" fg:x="14264" fg:w="403"/><text x="91.5747%" y="511.50">de..</text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (403 samples, 2.58%)</title><rect x="91.3247%" y="485" width="2.5802%" height="15" fill="rgb(210,226,19)" fg:x="14264" fg:w="403"/><text x="91.5747%" y="495.50">de..</text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (403 samples, 2.58%)</title><rect x="91.3247%" y="469" width="2.5802%" height="15" fill="rgb(229,97,18)" fg:x="14264" fg:w="403"/><text x="91.5747%" y="479.50">de..</text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (403 samples, 2.58%)</title><rect x="91.3247%" y="453" width="2.5802%" height="15" fill="rgb(211,167,15)" fg:x="14264" fg:w="403"/><text x="91.5747%" y="463.50">de..</text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (337 samples, 2.16%)</title><rect x="91.7472%" y="437" width="2.1576%" height="15" fill="rgb(210,169,34)" fg:x="14330" fg:w="337"/><text x="91.9972%" y="447.50">d..</text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (110 samples, 0.70%)</title><rect x="93.2006%" y="421" width="0.7043%" height="15" fill="rgb(241,121,31)" fg:x="14557" fg:w="110"/><text x="93.4506%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (83 samples, 0.53%)</title><rect x="93.3735%" y="405" width="0.5314%" height="15" fill="rgb(232,40,11)" fg:x="14584" fg:w="83"/><text x="93.6235%" y="415.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ParallelClearingJob::Run (2 samples, 0.01%)</title><rect x="93.9049%" y="485" width="0.0128%" height="15" fill="rgb(205,86,26)" fg:x="14667" fg:w="2"/><text x="94.1549%" y="495.50"></text></g><g><title>deno`v8::internal::InternalizedStringTableCleaner::VisitRootPointers(v8::internal::Root, char const*, v8::internal::OffHeapCompressedObjectSlot&lt;v8::internal::V8HeapCompressionScheme&gt;, v8::internal::OffHeapCompressedObjectSlot (2 samples, 0.01%)</title><rect x="93.9049%" y="469" width="0.0128%" height="15" fill="rgb(231,126,28)" fg:x="14667" fg:w="2"/><text x="94.1549%" y="479.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitor::VisitLeftTrimmableArray&lt;v8::internal::FixedArray&gt; (13 samples, 0.08%)</title><rect x="94.3082%" y="453" width="0.0832%" height="15" fill="rgb(219,221,18)" fg:x="14730" fg:w="13"/><text x="94.5582%" y="463.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (12 samples, 0.08%)</title><rect x="94.3146%" y="437" width="0.0768%" height="15" fill="rgb(211,40,0)" fg:x="14731" fg:w="12"/><text x="94.5646%" y="447.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (3 samples, 0.02%)</title><rect x="94.3722%" y="421" width="0.0192%" height="15" fill="rgb(239,85,43)" fg:x="14740" fg:w="3"/><text x="94.6222%" y="431.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (2 samples, 0.01%)</title><rect x="94.4107%" y="437" width="0.0128%" height="15" fill="rgb(231,55,21)" fg:x="14746" fg:w="2"/><text x="94.6607%" y="447.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (2 samples, 0.01%)</title><rect x="94.4363%" y="421" width="0.0128%" height="15" fill="rgb(225,184,43)" fg:x="14750" fg:w="2"/><text x="94.6863%" y="431.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitorUtility::VisitJSObjectSubclass&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::JSFunction, v8::internal::JSFunction::BodyDescriptor&gt; (11 samples, 0.07%)</title><rect x="94.3978%" y="453" width="0.0704%" height="15" fill="rgb(251,158,41)" fg:x="14744" fg:w="11"/><text x="94.6478%" y="463.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ConcurrentMarkingVisitor&gt; (6 samples, 0.04%)</title><rect x="94.4299%" y="437" width="0.0384%" height="15" fill="rgb(234,159,37)" fg:x="14749" fg:w="6"/><text x="94.6799%" y="447.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (3 samples, 0.02%)</title><rect x="94.4491%" y="421" width="0.0192%" height="15" fill="rgb(216,204,22)" fg:x="14752" fg:w="3"/><text x="94.6991%" y="431.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitorUtility::VisitJSObjectSubclass&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::JSObject, v8::internal::JSObject::FastBodyDescriptor&gt; (5 samples, 0.03%)</title><rect x="94.4683%" y="453" width="0.0320%" height="15" fill="rgb(214,17,3)" fg:x="14755" fg:w="5"/><text x="94.7183%" y="463.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (5 samples, 0.03%)</title><rect x="94.4683%" y="437" width="0.0320%" height="15" fill="rgb(212,111,17)" fg:x="14755" fg:w="5"/><text x="94.7183%" y="447.50"></text></g><g><title>deno`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, v8::internal::BasicMemoryChunk::Hasher, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, v8::internal::BasicMemoryChunk::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt; &gt; &gt;::__emplace_unique_key_args&lt;v8::internal::MemoryChunk*, std::__1::piecewise_construct_t const&amp;, std::__1::tuple (9 samples, 0.06%)</title><rect x="94.5003%" y="453" width="0.0576%" height="15" fill="rgb(221,157,24)" fg:x="14760" fg:w="9"/><text x="94.7503%" y="463.50"></text></g><g><title>deno`v8::internal::ConcurrentMarkingVisitor::VisitSeqOneByteString (5 samples, 0.03%)</title><rect x="94.5643%" y="453" width="0.0320%" height="15" fill="rgb(252,16,13)" fg:x="14770" fg:w="5"/><text x="94.8143%" y="463.50"></text></g><g><title>deno`v8::internal::ConcurrentMarkingVisitor::ShouldVisit (5 samples, 0.03%)</title><rect x="94.5643%" y="437" width="0.0320%" height="15" fill="rgb(221,62,2)" fg:x="14770" fg:w="5"/><text x="94.8143%" y="447.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateMaybeWeakPointer&lt;v8::internal::MarkingVisitorBase&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::ConcurrentMarkingState&gt; &gt;(v8::internal::HeapObject, int, v8::internal::MarkingVisitorBase (2 samples, 0.01%)</title><rect x="94.6155%" y="453" width="0.0128%" height="15" fill="rgb(247,87,22)" fg:x="14778" fg:w="2"/><text x="94.8655%" y="463.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointer&lt;v8::internal::ConcurrentMarkingVisitor&gt; (2 samples, 0.01%)</title><rect x="94.6347%" y="453" width="0.0128%" height="15" fill="rgb(215,73,9)" fg:x="14781" fg:w="2"/><text x="94.8847%" y="463.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.01%)</title><rect x="94.7180%" y="437" width="0.0128%" height="15" fill="rgb(207,175,33)" fg:x="14794" fg:w="2"/><text x="94.9680%" y="447.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (15 samples, 0.10%)</title><rect x="94.6475%" y="453" width="0.0960%" height="15" fill="rgb(243,129,54)" fg:x="14783" fg:w="15"/><text x="94.8975%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (2 samples, 0.01%)</title><rect x="94.7308%" y="437" width="0.0128%" height="15" fill="rgb(227,119,45)" fg:x="14796" fg:w="2"/><text x="94.9808%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (2 samples, 0.01%)</title><rect x="94.7308%" y="421" width="0.0128%" height="15" fill="rgb(205,109,36)" fg:x="14796" fg:w="2"/><text x="94.9808%" y="431.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::MarkingVisitorBase&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::ConcurrentMarkingState&gt; &gt;(v8::internal::HeapObject, int, int, v8::internal::MarkingVisitorBase (12 samples, 0.08%)</title><rect x="94.7436%" y="453" width="0.0768%" height="15" fill="rgb(205,6,39)" fg:x="14798" fg:w="12"/><text x="94.9936%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="94.8460%" y="453" width="0.0128%" height="15" fill="rgb(221,32,16)" fg:x="14814" fg:w="2"/><text x="95.0960%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (3 samples, 0.02%)</title><rect x="94.8652%" y="453" width="0.0192%" height="15" fill="rgb(228,144,50)" fg:x="14817" fg:w="3"/><text x="95.1152%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (3 samples, 0.02%)</title><rect x="94.8652%" y="437" width="0.0192%" height="15" fill="rgb(229,201,53)" fg:x="14817" fg:w="3"/><text x="95.1152%" y="447.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::RunMajor(v8::JobDelegate*, v8::base::EnumSet (152 samples, 0.97%)</title><rect x="93.9369%" y="469" width="0.9732%" height="15" fill="rgb(249,153,27)" fg:x="14672" fg:w="152"/><text x="94.1869%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (4 samples, 0.03%)</title><rect x="94.8844%" y="453" width="0.0256%" height="15" fill="rgb(227,106,25)" fg:x="14820" fg:w="4"/><text x="95.1344%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (4 samples, 0.03%)</title><rect x="94.8844%" y="437" width="0.0256%" height="15" fill="rgb(230,65,29)" fg:x="14820" fg:w="4"/><text x="95.1344%" y="447.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (3 samples, 0.02%)</title><rect x="94.9229%" y="469" width="0.0192%" height="15" fill="rgb(221,57,46)" fg:x="14826" fg:w="3"/><text x="95.1729%" y="479.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::JobTaskMajor::Run (161 samples, 1.03%)</title><rect x="93.9177%" y="485" width="1.0308%" height="15" fill="rgb(229,161,17)" fg:x="14669" fg:w="161"/><text x="94.1677%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (2 samples, 0.01%)</title><rect x="94.9613%" y="405" width="0.0128%" height="15" fill="rgb(222,213,11)" fg:x="14832" fg:w="2"/><text x="95.2113%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (3 samples, 0.02%)</title><rect x="94.9741%" y="405" width="0.0192%" height="15" fill="rgb(235,35,13)" fg:x="14834" fg:w="3"/><text x="95.2241%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (3 samples, 0.02%)</title><rect x="94.9741%" y="389" width="0.0192%" height="15" fill="rgb(233,158,34)" fg:x="14834" fg:w="3"/><text x="95.2241%" y="399.50"></text></g><g><title>deno`v8::internal::VirtualMemory::Free (6 samples, 0.04%)</title><rect x="94.9613%" y="437" width="0.0384%" height="15" fill="rgb(215,151,48)" fg:x="14832" fg:w="6"/><text x="95.2113%" y="447.50"></text></g><g><title>deno`v8::base::BoundedPageAllocator::FreePages (6 samples, 0.04%)</title><rect x="94.9613%" y="421" width="0.0384%" height="15" fill="rgb(229,84,14)" fg:x="14832" fg:w="6"/><text x="95.2113%" y="431.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::PerformFreeMemory (9 samples, 0.06%)</title><rect x="94.9485%" y="453" width="0.0576%" height="15" fill="rgb(229,68,14)" fg:x="14830" fg:w="9"/><text x="95.1985%" y="463.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::Unmapper::UnmapFreeMemoryJob::Run (10 samples, 0.06%)</title><rect x="94.9485%" y="485" width="0.0640%" height="15" fill="rgb(243,106,26)" fg:x="14830" fg:w="10"/><text x="95.1985%" y="495.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::Unmapper::PerformFreeMemoryOnQueuedChunks (10 samples, 0.06%)</title><rect x="94.9485%" y="469" width="0.0640%" height="15" fill="rgb(206,45,38)" fg:x="14830" fg:w="10"/><text x="95.1985%" y="479.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (39 samples, 0.25%)</title><rect x="95.0189%" y="453" width="0.2497%" height="15" fill="rgb(226,6,15)" fg:x="14841" fg:w="39"/><text x="95.2689%" y="463.50"></text></g><g><title>deno`auto v8::internal::BodyDescriptorApply&lt;v8::internal::CallIterateBody, v8::internal::Map&amp;, v8::internal::HeapObject&amp;, int&amp;, v8::internal::IterateAndScavengePromotedObjectsVisitor*&amp;&gt; (4 samples, 0.03%)</title><rect x="95.9600%" y="437" width="0.0256%" height="15" fill="rgb(232,22,54)" fg:x="14988" fg:w="4"/><text x="96.2100%" y="447.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (8 samples, 0.05%)</title><rect x="96.5363%" y="421" width="0.0512%" height="15" fill="rgb(229,222,32)" fg:x="15078" fg:w="8"/><text x="96.7863%" y="431.50"></text></g><g><title>deno`v8::internal::Heap::GetFillToAlign (5 samples, 0.03%)</title><rect x="96.5875%" y="421" width="0.0320%" height="15" fill="rgb(228,62,29)" fg:x="15086" fg:w="5"/><text x="96.8375%" y="431.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (105 samples, 0.67%)</title><rect x="95.9857%" y="437" width="0.6723%" height="15" fill="rgb(251,103,34)" fg:x="14992" fg:w="105"/><text x="96.2357%" y="447.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (6 samples, 0.04%)</title><rect x="96.6195%" y="421" width="0.0384%" height="15" fill="rgb(233,12,30)" fg:x="15091" fg:w="6"/><text x="96.8695%" y="431.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (6 samples, 0.04%)</title><rect x="96.6579%" y="437" width="0.0384%" height="15" fill="rgb(238,52,0)" fg:x="15097" fg:w="6"/><text x="96.9079%" y="447.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInNewSpace (7 samples, 0.04%)</title><rect x="96.6963%" y="437" width="0.0448%" height="15" fill="rgb(223,98,5)" fg:x="15103" fg:w="7"/><text x="96.9463%" y="447.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (6 samples, 0.04%)</title><rect x="96.7411%" y="437" width="0.0384%" height="15" fill="rgb(228,75,37)" fg:x="15110" fg:w="6"/><text x="96.9911%" y="447.50"></text></g><g><title>deno`v8::internal::Scavenger::PromotionList::Local::Pop (11 samples, 0.07%)</title><rect x="96.7924%" y="437" width="0.0704%" height="15" fill="rgb(205,115,49)" fg:x="15118" fg:w="11"/><text x="97.0424%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.01%)</title><rect x="96.8500%" y="421" width="0.0128%" height="15" fill="rgb(250,154,43)" fg:x="15127" fg:w="2"/><text x="97.1000%" y="431.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::ShouldBePromoted (3 samples, 0.02%)</title><rect x="96.8628%" y="437" width="0.0192%" height="15" fill="rgb(226,43,29)" fg:x="15129" fg:w="3"/><text x="97.1128%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (15 samples, 0.10%)</title><rect x="96.8820%" y="405" width="0.0960%" height="15" fill="rgb(249,228,39)" fg:x="15132" fg:w="15"/><text x="97.1320%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (16 samples, 0.10%)</title><rect x="96.8820%" y="421" width="0.1024%" height="15" fill="rgb(216,79,43)" fg:x="15132" fg:w="16"/><text x="97.1320%" y="431.50"></text></g><g><title>deno`v8::platform::DefaultJobState::NotifyConcurrencyIncrease (17 samples, 0.11%)</title><rect x="96.8820%" y="437" width="0.1088%" height="15" fill="rgb(228,95,12)" fg:x="15132" fg:w="17"/><text x="97.1320%" y="447.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (10 samples, 0.06%)</title><rect x="96.9972%" y="437" width="0.0640%" height="15" fill="rgb(249,221,15)" fg:x="15150" fg:w="10"/><text x="97.2472%" y="447.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (19 samples, 0.12%)</title><rect x="97.0613%" y="437" width="0.1216%" height="15" fill="rgb(233,34,13)" fg:x="15160" fg:w="19"/><text x="97.3113%" y="447.50"></text></g><g><title>deno`auto v8::internal::BodyDescriptorApply&lt;v8::internal::CallIterateBody, v8::internal::Map&amp;, v8::internal::HeapObject&amp;, int&amp;, v8::internal::IterateAndScavengePromotedObjectsVisitor*&amp;&gt; (21 samples, 0.13%)</title><rect x="97.2085%" y="421" width="0.1345%" height="15" fill="rgb(214,103,39)" fg:x="15183" fg:w="21"/><text x="97.4585%" y="431.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (13 samples, 0.08%)</title><rect x="97.3430%" y="421" width="0.0832%" height="15" fill="rgb(251,126,39)" fg:x="15204" fg:w="13"/><text x="97.5930%" y="431.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (3 samples, 0.02%)</title><rect x="97.4262%" y="421" width="0.0192%" height="15" fill="rgb(214,216,36)" fg:x="15217" fg:w="3"/><text x="97.6762%" y="431.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (4 samples, 0.03%)</title><rect x="98.3033%" y="389" width="0.0256%" height="15" fill="rgb(220,221,8)" fg:x="15354" fg:w="4"/><text x="98.5533%" y="399.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (2 samples, 0.01%)</title><rect x="98.3290%" y="325" width="0.0128%" height="15" fill="rgb(240,216,3)" fg:x="15358" fg:w="2"/><text x="98.5790%" y="335.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (2 samples, 0.01%)</title><rect x="98.3290%" y="309" width="0.0128%" height="15" fill="rgb(232,218,17)" fg:x="15358" fg:w="2"/><text x="98.5790%" y="319.50"></text></g><g><title>deno`v8::internal::CompactionSpace::TryExpandImpl (3 samples, 0.02%)</title><rect x="98.3290%" y="373" width="0.0192%" height="15" fill="rgb(229,163,45)" fg:x="15358" fg:w="3"/><text x="98.5790%" y="383.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::TryExpandImpl (3 samples, 0.02%)</title><rect x="98.3290%" y="357" width="0.0192%" height="15" fill="rgb(231,110,42)" fg:x="15358" fg:w="3"/><text x="98.5790%" y="367.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (3 samples, 0.02%)</title><rect x="98.3290%" y="341" width="0.0192%" height="15" fill="rgb(208,170,48)" fg:x="15358" fg:w="3"/><text x="98.5790%" y="351.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (81 samples, 0.52%)</title><rect x="97.8424%" y="405" width="0.5186%" height="15" fill="rgb(239,116,25)" fg:x="15282" fg:w="81"/><text x="98.0924%" y="415.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::RawRefillLabMain (5 samples, 0.03%)</title><rect x="98.3290%" y="389" width="0.0320%" height="15" fill="rgb(219,200,50)" fg:x="15358" fg:w="5"/><text x="98.5790%" y="399.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::TryAllocationFromFreeListMain (2 samples, 0.01%)</title><rect x="98.3482%" y="373" width="0.0128%" height="15" fill="rgb(245,200,0)" fg:x="15361" fg:w="2"/><text x="98.5982%" y="383.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::FreeLinearAllocationArea (2 samples, 0.01%)</title><rect x="98.3482%" y="357" width="0.0128%" height="15" fill="rgb(245,119,33)" fg:x="15361" fg:w="2"/><text x="98.5982%" y="367.50"></text></g><g><title>deno`void v8::internal::HeapObject::IterateFast&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (190 samples, 1.22%)</title><rect x="97.1829%" y="437" width="1.2165%" height="15" fill="rgb(231,125,12)" fg:x="15179" fg:w="190"/><text x="97.4329%" y="447.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (149 samples, 0.95%)</title><rect x="97.4454%" y="421" width="0.9540%" height="15" fill="rgb(216,96,41)" fg:x="15220" fg:w="149"/><text x="97.6954%" y="431.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::ShouldBePromoted (6 samples, 0.04%)</title><rect x="98.3610%" y="405" width="0.0384%" height="15" fill="rgb(248,43,45)" fg:x="15363" fg:w="6"/><text x="98.6110%" y="415.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (3 samples, 0.02%)</title><rect x="98.6555%" y="405" width="0.0192%" height="15" fill="rgb(217,222,7)" fg:x="15409" fg:w="3"/><text x="98.9055%" y="415.50"></text></g><g><title>deno`v8::internal::Heap::GetFillToAlign (4 samples, 0.03%)</title><rect x="98.6747%" y="405" width="0.0256%" height="15" fill="rgb(233,28,6)" fg:x="15412" fg:w="4"/><text x="98.9247%" y="415.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (29 samples, 0.19%)</title><rect x="98.5338%" y="421" width="0.1857%" height="15" fill="rgb(231,218,15)" fg:x="15390" fg:w="29"/><text x="98.7838%" y="431.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (3 samples, 0.02%)</title><rect x="98.7003%" y="405" width="0.0192%" height="15" fill="rgb(226,171,48)" fg:x="15416" fg:w="3"/><text x="98.9503%" y="415.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (2 samples, 0.01%)</title><rect x="98.7195%" y="421" width="0.0128%" height="15" fill="rgb(235,201,9)" fg:x="15419" fg:w="2"/><text x="98.9695%" y="431.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInNewSpace (2 samples, 0.01%)</title><rect x="98.7323%" y="421" width="0.0128%" height="15" fill="rgb(217,80,15)" fg:x="15421" fg:w="2"/><text x="98.9823%" y="431.50"></text></g><g><title>deno`v8::internal::ScavengeVisitor::VisitPointers (4 samples, 0.03%)</title><rect x="98.7451%" y="421" width="0.0256%" height="15" fill="rgb(219,152,8)" fg:x="15423" fg:w="4"/><text x="98.9951%" y="431.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (59 samples, 0.38%)</title><rect x="98.3994%" y="437" width="0.3777%" height="15" fill="rgb(243,107,38)" fg:x="15369" fg:w="59"/><text x="98.6494%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (6 samples, 0.04%)</title><rect x="98.7771%" y="437" width="0.0384%" height="15" fill="rgb(231,17,5)" fg:x="15428" fg:w="6"/><text x="99.0271%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (6 samples, 0.04%)</title><rect x="98.7771%" y="421" width="0.0384%" height="15" fill="rgb(209,25,54)" fg:x="15428" fg:w="6"/><text x="99.0271%" y="431.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (555 samples, 3.55%)</title><rect x="95.2686%" y="453" width="3.5534%" height="15" fill="rgb(219,0,2)" fg:x="14880" fg:w="555"/><text x="95.5186%" y="463.50">deno..</text></g><g><title>deno`v8::internal::Scavenger::PromotionList::Local::Pop (4 samples, 0.03%)</title><rect x="98.8219%" y="453" width="0.0256%" height="15" fill="rgb(246,9,5)" fg:x="15435" fg:w="4"/><text x="99.0719%" y="463.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (6 samples, 0.04%)</title><rect x="99.2445%" y="421" width="0.0384%" height="15" fill="rgb(226,159,4)" fg:x="15501" fg:w="6"/><text x="99.4945%" y="431.50"></text></g><g><title>deno`v8::internal::Heap::GetFillToAlign (4 samples, 0.03%)</title><rect x="99.2829%" y="421" width="0.0256%" height="15" fill="rgb(219,175,34)" fg:x="15507" fg:w="4"/><text x="99.5329%" y="431.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (4 samples, 0.03%)</title><rect x="99.3085%" y="421" width="0.0256%" height="15" fill="rgb(236,10,46)" fg:x="15511" fg:w="4"/><text x="99.5585%" y="431.50"></text></g><g><title>deno`v8::internal::CompactionSpace::TryExpandImpl (2 samples, 0.01%)</title><rect x="99.3341%" y="405" width="0.0128%" height="15" fill="rgb(240,211,16)" fg:x="15515" fg:w="2"/><text x="99.5841%" y="415.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::TryExpandImpl (2 samples, 0.01%)</title><rect x="99.3341%" y="389" width="0.0128%" height="15" fill="rgb(205,3,43)" fg:x="15515" fg:w="2"/><text x="99.5841%" y="399.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (2 samples, 0.01%)</title><rect x="99.3341%" y="373" width="0.0128%" height="15" fill="rgb(245,7,22)" fg:x="15515" fg:w="2"/><text x="99.5841%" y="383.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (2 samples, 0.01%)</title><rect x="99.3341%" y="357" width="0.0128%" height="15" fill="rgb(239,132,32)" fg:x="15515" fg:w="2"/><text x="99.5841%" y="367.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (2 samples, 0.01%)</title><rect x="99.3341%" y="341" width="0.0128%" height="15" fill="rgb(228,202,34)" fg:x="15515" fg:w="2"/><text x="99.5841%" y="351.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (63 samples, 0.40%)</title><rect x="98.9500%" y="437" width="0.4034%" height="15" fill="rgb(254,200,22)" fg:x="15455" fg:w="63"/><text x="99.2000%" y="447.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::RawRefillLabMain (3 samples, 0.02%)</title><rect x="99.3341%" y="421" width="0.0192%" height="15" fill="rgb(219,10,39)" fg:x="15515" fg:w="3"/><text x="99.5841%" y="431.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInNewSpace (3 samples, 0.02%)</title><rect x="99.3598%" y="437" width="0.0192%" height="15" fill="rgb(226,210,39)" fg:x="15519" fg:w="3"/><text x="99.6098%" y="447.50"></text></g><g><title>deno`v8::internal::InvalidatedSlotsFilter::IsValid (7 samples, 0.04%)</title><rect x="99.3790%" y="437" width="0.0448%" height="15" fill="rgb(208,219,16)" fg:x="15522" fg:w="7"/><text x="99.6290%" y="447.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (94 samples, 0.60%)</title><rect x="98.8476%" y="453" width="0.6018%" height="15" fill="rgb(216,158,51)" fg:x="15439" fg:w="94"/><text x="99.0976%" y="463.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::ShouldBePromoted (4 samples, 0.03%)</title><rect x="99.4238%" y="437" width="0.0256%" height="15" fill="rgb(233,14,44)" fg:x="15529" fg:w="4"/><text x="99.6738%" y="447.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (6 samples, 0.04%)</title><rect x="99.4494%" y="453" width="0.0384%" height="15" fill="rgb(237,97,39)" fg:x="15533" fg:w="6"/><text x="99.6994%" y="463.50"></text></g><g><title>deno`void v8::internal::HeapObject::IterateFast&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (10 samples, 0.06%)</title><rect x="99.4878%" y="453" width="0.0640%" height="15" fill="rgb(218,198,43)" fg:x="15539" fg:w="10"/><text x="99.7378%" y="463.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::Run (713 samples, 4.56%)</title><rect x="95.0189%" y="485" width="4.5650%" height="15" fill="rgb(231,104,20)" fg:x="14841" fg:w="713"/><text x="95.2689%" y="495.50">deno`..</text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (713 samples, 4.56%)</title><rect x="95.0189%" y="469" width="4.5650%" height="15" fill="rgb(254,36,13)" fg:x="14841" fg:w="713"/><text x="95.2689%" y="479.50">deno`..</text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (5 samples, 0.03%)</title><rect x="99.5518%" y="453" width="0.0320%" height="15" fill="rgb(248,14,50)" fg:x="15549" fg:w="5"/><text x="99.8018%" y="463.50"></text></g><g><title>deno`v8::internal::LiveObjectRange&lt;(v8::internal::LiveObjectIterationMode)0&gt;::iterator::AdvanceToNextValidObject (2 samples, 0.01%)</title><rect x="99.5838%" y="437" width="0.0128%" height="15" fill="rgb(217,107,29)" fg:x="15554" fg:w="2"/><text x="99.8338%" y="447.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (2 samples, 0.01%)</title><rect x="99.6030%" y="421" width="0.0128%" height="15" fill="rgb(251,169,33)" fg:x="15557" fg:w="2"/><text x="99.8530%" y="431.50"></text></g><g><title>deno`v8::internal::LiveObjectRange&lt;(v8::internal::LiveObjectIterationMode)0&gt;::iterator::AdvanceToNextValidObject (37 samples, 0.24%)</title><rect x="99.6159%" y="421" width="0.2369%" height="15" fill="rgb(217,108,32)" fg:x="15559" fg:w="37"/><text x="99.8659%" y="431.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (9 samples, 0.06%)</title><rect x="99.7951%" y="405" width="0.0576%" height="15" fill="rgb(219,66,42)" fg:x="15587" fg:w="9"/><text x="100.0451%" y="415.50"></text></g><g><title>deno`v8::internal::Sweeper::RawSweep(v8::internal::Page*, v8::internal::FreeSpaceTreatmentMode, v8::internal::Sweeper::SweepingMode, v8::base::LockGuard&lt;v8::base::Mutex, (v8::base::NullBehavior)0&gt; const&amp;, std::__1::unordered_map&lt;v8::internal::AllocationSite, unsigned long, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, std::__1::allocator&lt;std::__1::pair (41 samples, 0.26%)</title><rect x="99.5966%" y="437" width="0.2625%" height="15" fill="rgb(206,180,7)" fg:x="15556" fg:w="41"/><text x="99.8466%" y="447.50"></text></g><g><title>deno`v8::internal::Sweeper::SweeperJob::RunImpl (45 samples, 0.29%)</title><rect x="99.5838%" y="485" width="0.2881%" height="15" fill="rgb(208,226,31)" fg:x="15554" fg:w="45"/><text x="99.8338%" y="495.50"></text></g><g><title>deno`v8::internal::Sweeper::SweeperJob::SweepNonNewSpaces (45 samples, 0.29%)</title><rect x="99.5838%" y="469" width="0.2881%" height="15" fill="rgb(218,26,49)" fg:x="15554" fg:w="45"/><text x="99.8338%" y="479.50"></text></g><g><title>deno`v8::internal::Sweeper::ParallelSweepPage(v8::internal::Page*, v8::internal::AllocationSpace, std::__1::unordered_map&lt;v8::internal::AllocationSite, unsigned long, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, std::__1::allocator&lt;std::__1::pair (45 samples, 0.29%)</title><rect x="99.5838%" y="453" width="0.2881%" height="15" fill="rgb(233,197,48)" fg:x="15554" fg:w="45"/><text x="99.8338%" y="463.50"></text></g><g><title>deno`v8::platform::DefaultJobWorker::Run (934 samples, 5.98%)</title><rect x="93.9049%" y="501" width="5.9799%" height="15" fill="rgb(252,181,51)" fg:x="14667" fg:w="934"/><text x="94.1549%" y="511.50">deno`v8:..</text></g><g><title>deno`v8::platform::DefaultJobState::DidRunTask (2 samples, 0.01%)</title><rect x="99.8720%" y="485" width="0.0128%" height="15" fill="rgb(253,90,19)" fg:x="15599" fg:w="2"/><text x="100.1220%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.01%)</title><rect x="99.8720%" y="469" width="0.0128%" height="15" fill="rgb(215,171,30)" fg:x="15599" fg:w="2"/><text x="100.1220%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (2 samples, 0.01%)</title><rect x="99.8720%" y="453" width="0.0128%" height="15" fill="rgb(214,222,9)" fg:x="15599" fg:w="2"/><text x="100.1220%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (10 samples, 0.06%)</title><rect x="99.8912%" y="485" width="0.0640%" height="15" fill="rgb(223,3,22)" fg:x="15602" fg:w="10"/><text x="100.1412%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (5 samples, 0.03%)</title><rect x="99.9552%" y="485" width="0.0320%" height="15" fill="rgb(225,196,46)" fg:x="15612" fg:w="5"/><text x="100.2052%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (5 samples, 0.03%)</title><rect x="99.9552%" y="469" width="0.0320%" height="15" fill="rgb(209,110,37)" fg:x="15612" fg:w="5"/><text x="100.2052%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (5 samples, 0.03%)</title><rect x="99.9552%" y="453" width="0.0320%" height="15" fill="rgb(249,89,12)" fg:x="15612" fg:w="5"/><text x="100.2052%" y="463.50"></text></g><g><title>all (15,619 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(226,27,33)" fg:x="0" fg:w="15619"/><text x="0.2500%" y="591.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (7,647 samples, 48.96%)</title><rect x="51.0404%" y="565" width="48.9596%" height="15" fill="rgb(213,82,22)" fg:x="7972" fg:w="7647"/><text x="51.2904%" y="575.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (7,647 samples, 48.96%)</title><rect x="51.0404%" y="549" width="48.9596%" height="15" fill="rgb(248,140,0)" fg:x="7972" fg:w="7647"/><text x="51.2904%" y="559.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>deno`v8::base::ThreadEntry (1,355 samples, 8.68%)</title><rect x="91.3247%" y="533" width="8.6753%" height="15" fill="rgb(228,106,3)" fg:x="14264" fg:w="1355"/><text x="91.5747%" y="543.50">deno`v8::bas..</text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (1,355 samples, 8.68%)</title><rect x="91.3247%" y="517" width="8.6753%" height="15" fill="rgb(209,23,37)" fg:x="14264" fg:w="1355"/><text x="91.5747%" y="527.50">deno`v8::pla..</text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (18 samples, 0.12%)</title><rect x="99.8848%" y="501" width="0.1152%" height="15" fill="rgb(241,93,50)" fg:x="15601" fg:w="18"/><text x="100.1348%" y="511.50"></text></g></svg></svg>