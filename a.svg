<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1270" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1253.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1253.00"> </text><svg id="frames" x="10" width="1180" total_samples="9295"><g><title>deno`OUTLINED_FUNCTION_10436 (4 samples, 0.04%)</title><rect x="0.0000%" y="1141" width="0.0430%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11480 (2 samples, 0.02%)</title><rect x="0.0430%" y="1141" width="0.0215%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="2"/><text x="0.2930%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11852 (6 samples, 0.06%)</title><rect x="0.0646%" y="1141" width="0.0646%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="6"/><text x="0.3146%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18319 (6 samples, 0.06%)</title><rect x="0.1291%" y="1141" width="0.0646%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="6"/><text x="0.3791%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_26229 (4 samples, 0.04%)</title><rect x="0.1937%" y="1141" width="0.0430%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="4"/><text x="0.4437%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36065 (1 samples, 0.01%)</title><rect x="0.2367%" y="1141" width="0.0108%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="1"/><text x="0.4867%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_37679 (2 samples, 0.02%)</title><rect x="0.2474%" y="1141" width="0.0215%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="2"/><text x="0.4974%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_37950 (1 samples, 0.01%)</title><rect x="0.2690%" y="1141" width="0.0108%" height="15" fill="rgb(228,23,34)" fg:x="25" fg:w="1"/><text x="0.5190%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_449 (3 samples, 0.03%)</title><rect x="0.2797%" y="1141" width="0.0323%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="3"/><text x="0.5297%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6347 (2 samples, 0.02%)</title><rect x="0.3120%" y="1141" width="0.0215%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="2"/><text x="0.5620%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_907 (2 samples, 0.02%)</title><rect x="0.3335%" y="1141" width="0.0215%" height="15" fill="rgb(250,228,42)" fg:x="31" fg:w="2"/><text x="0.5835%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9864 (3 samples, 0.03%)</title><rect x="0.3550%" y="1141" width="0.0323%" height="15" fill="rgb(240,193,28)" fg:x="33" fg:w="3"/><text x="0.6050%" y="1151.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (11 samples, 0.12%)</title><rect x="0.3873%" y="1141" width="0.1183%" height="15" fill="rgb(216,20,37)" fg:x="36" fg:w="11"/><text x="0.6373%" y="1151.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.03%)</title><rect x="0.5056%" y="1141" width="0.0323%" height="15" fill="rgb(206,188,39)" fg:x="47" fg:w="3"/><text x="0.7556%" y="1151.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::current_thread::Core&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="0.5379%" y="1141" width="0.0215%" height="15" fill="rgb(217,207,13)" fg:x="50" fg:w="2"/><text x="0.7879%" y="1151.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (3 samples, 0.03%)</title><rect x="0.5594%" y="1141" width="0.0323%" height="15" fill="rgb(231,73,38)" fg:x="52" fg:w="3"/><text x="0.8094%" y="1151.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="0.8392%" y="1029" width="0.0108%" height="15" fill="rgb(225,20,46)" fg:x="78" fg:w="1"/><text x="1.0892%" y="1039.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="0.8392%" y="1013" width="0.0108%" height="15" fill="rgb(210,31,41)" fg:x="78" fg:w="1"/><text x="1.0892%" y="1023.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="0.8392%" y="997" width="0.0108%" height="15" fill="rgb(221,200,47)" fg:x="78" fg:w="1"/><text x="1.0892%" y="1007.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="0.8392%" y="981" width="0.0108%" height="15" fill="rgb(226,26,5)" fg:x="78" fg:w="1"/><text x="1.0892%" y="991.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn deno::tools::bench::BenchReporter+core::marker::Send&gt;&gt; (1 samples, 0.01%)</title><rect x="0.8392%" y="965" width="0.0108%" height="15" fill="rgb(249,33,26)" fg:x="78" fg:w="1"/><text x="1.0892%" y="975.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno::cache::parsed_source::ParsedSourceCacheModuleAnalyzer&gt; (1 samples, 0.01%)</title><rect x="0.8392%" y="949" width="0.0108%" height="15" fill="rgb(235,183,28)" fg:x="78" fg:w="1"/><text x="1.0892%" y="959.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;rusqlite::Connection&gt; (1 samples, 0.01%)</title><rect x="0.8392%" y="933" width="0.0108%" height="15" fill="rgb(221,5,38)" fg:x="78" fg:w="1"/><text x="1.0892%" y="943.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;rusqlite::inner_connection::InnerConnection&gt;&gt; (1 samples, 0.01%)</title><rect x="0.8392%" y="917" width="0.0108%" height="15" fill="rgb(247,18,42)" fg:x="78" fg:w="1"/><text x="1.0892%" y="927.50"></text></g><g><title>deno`rusqlite::inner_connection::InnerConnection::close (1 samples, 0.01%)</title><rect x="0.8392%" y="901" width="0.0108%" height="15" fill="rgb(241,131,45)" fg:x="78" fg:w="1"/><text x="1.0892%" y="911.50"></text></g><g><title>deno`sqlite3Close (1 samples, 0.01%)</title><rect x="0.8392%" y="885" width="0.0108%" height="15" fill="rgb(249,31,29)" fg:x="78" fg:w="1"/><text x="1.0892%" y="895.50"></text></g><g><title>deno`sqlite3LeaveMutexAndCloseZombie (1 samples, 0.01%)</title><rect x="0.8392%" y="869" width="0.0108%" height="15" fill="rgb(225,111,53)" fg:x="78" fg:w="1"/><text x="1.0892%" y="879.50"></text></g><g><title>deno`sqlite3BtreeClose (1 samples, 0.01%)</title><rect x="0.8392%" y="853" width="0.0108%" height="15" fill="rgb(238,160,17)" fg:x="78" fg:w="1"/><text x="1.0892%" y="863.50"></text></g><g><title>deno`sqlite3PagerClose (1 samples, 0.01%)</title><rect x="0.8392%" y="837" width="0.0108%" height="15" fill="rgb(214,148,48)" fg:x="78" fg:w="1"/><text x="1.0892%" y="847.50"></text></g><g><title>deno`sqlite3WalClose (1 samples, 0.01%)</title><rect x="0.8392%" y="821" width="0.0108%" height="15" fill="rgb(232,36,49)" fg:x="78" fg:w="1"/><text x="1.0892%" y="831.50"></text></g><g><title>deno`unixShmUnmap (1 samples, 0.01%)</title><rect x="0.8392%" y="805" width="0.0108%" height="15" fill="rgb(209,103,24)" fg:x="78" fg:w="1"/><text x="1.0892%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (1 samples, 0.01%)</title><rect x="0.8392%" y="789" width="0.0108%" height="15" fill="rgb(229,88,8)" fg:x="78" fg:w="1"/><text x="1.0892%" y="799.50"></text></g><g><title>deno`deno::js::deno_isolate_init (1 samples, 0.01%)</title><rect x="0.8499%" y="1029" width="0.0108%" height="15" fill="rgb(213,181,19)" fg:x="79" fg:w="1"/><text x="1.0999%" y="1039.50"></text></g><g><title>deno`&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="0.8499%" y="1013" width="0.0108%" height="15" fill="rgb(254,191,54)" fg:x="79" fg:w="1"/><text x="1.0999%" y="1023.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.01%)</title><rect x="0.8499%" y="997" width="0.0108%" height="15" fill="rgb(241,83,37)" fg:x="79" fg:w="1"/><text x="1.0999%" y="1007.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.01%)</title><rect x="0.8499%" y="981" width="0.0108%" height="15" fill="rgb(233,36,39)" fg:x="79" fg:w="1"/><text x="1.0999%" y="991.50"></text></g><g><title>deno`deno::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.01%)</title><rect x="0.8499%" y="965" width="0.0108%" height="15" fill="rgb(226,3,54)" fg:x="79" fg:w="1"/><text x="1.0999%" y="975.50"></text></g><g><title>deno`lzzzz::lz4::block::decompress (1 samples, 0.01%)</title><rect x="0.8499%" y="949" width="0.0108%" height="15" fill="rgb(245,192,40)" fg:x="79" fg:w="1"/><text x="1.0999%" y="959.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.01%)</title><rect x="0.8499%" y="933" width="0.0108%" height="15" fill="rgb(238,167,29)" fg:x="79" fg:w="1"/><text x="1.0999%" y="943.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="885" width="0.0108%" height="15" fill="rgb(232,182,51)" fg:x="80" fg:w="1"/><text x="1.1107%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.8607%" y="869" width="0.0108%" height="15" fill="rgb(231,60,39)" fg:x="80" fg:w="1"/><text x="1.1107%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="853" width="0.0108%" height="15" fill="rgb(208,69,12)" fg:x="80" fg:w="1"/><text x="1.1107%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="837" width="0.0108%" height="15" fill="rgb(235,93,37)" fg:x="80" fg:w="1"/><text x="1.1107%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="821" width="0.0108%" height="15" fill="rgb(213,116,39)" fg:x="80" fg:w="1"/><text x="1.1107%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.8607%" y="805" width="0.0108%" height="15" fill="rgb(222,207,29)" fg:x="80" fg:w="1"/><text x="1.1107%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="789" width="0.0108%" height="15" fill="rgb(206,96,30)" fg:x="80" fg:w="1"/><text x="1.1107%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="773" width="0.0108%" height="15" fill="rgb(218,138,4)" fg:x="80" fg:w="1"/><text x="1.1107%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="757" width="0.0108%" height="15" fill="rgb(250,191,14)" fg:x="80" fg:w="1"/><text x="1.1107%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.8607%" y="741" width="0.0108%" height="15" fill="rgb(239,60,40)" fg:x="80" fg:w="1"/><text x="1.1107%" y="751.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="725" width="0.0108%" height="15" fill="rgb(206,27,48)" fg:x="80" fg:w="1"/><text x="1.1107%" y="735.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="709" width="0.0108%" height="15" fill="rgb(225,35,8)" fg:x="80" fg:w="1"/><text x="1.1107%" y="719.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="693" width="0.0108%" height="15" fill="rgb(250,213,24)" fg:x="80" fg:w="1"/><text x="1.1107%" y="703.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.8607%" y="677" width="0.0108%" height="15" fill="rgb(247,123,22)" fg:x="80" fg:w="1"/><text x="1.1107%" y="687.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="661" width="0.0108%" height="15" fill="rgb(231,138,38)" fg:x="80" fg:w="1"/><text x="1.1107%" y="671.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="645" width="0.0108%" height="15" fill="rgb(231,145,46)" fg:x="80" fg:w="1"/><text x="1.1107%" y="655.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="629" width="0.0108%" height="15" fill="rgb(251,118,11)" fg:x="80" fg:w="1"/><text x="1.1107%" y="639.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="613" width="0.0108%" height="15" fill="rgb(217,147,25)" fg:x="80" fg:w="1"/><text x="1.1107%" y="623.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="597" width="0.0108%" height="15" fill="rgb(247,81,37)" fg:x="80" fg:w="1"/><text x="1.1107%" y="607.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="581" width="0.0108%" height="15" fill="rgb(209,12,38)" fg:x="80" fg:w="1"/><text x="1.1107%" y="591.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="565" width="0.0108%" height="15" fill="rgb(227,1,9)" fg:x="80" fg:w="1"/><text x="1.1107%" y="575.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="549" width="0.0108%" height="15" fill="rgb(248,47,43)" fg:x="80" fg:w="1"/><text x="1.1107%" y="559.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="533" width="0.0108%" height="15" fill="rgb(221,10,30)" fg:x="80" fg:w="1"/><text x="1.1107%" y="543.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="517" width="0.0108%" height="15" fill="rgb(210,229,1)" fg:x="80" fg:w="1"/><text x="1.1107%" y="527.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="501" width="0.0108%" height="15" fill="rgb(222,148,37)" fg:x="80" fg:w="1"/><text x="1.1107%" y="511.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="485" width="0.0108%" height="15" fill="rgb(234,67,33)" fg:x="80" fg:w="1"/><text x="1.1107%" y="495.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="469" width="0.0108%" height="15" fill="rgb(247,98,35)" fg:x="80" fg:w="1"/><text x="1.1107%" y="479.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="453" width="0.0108%" height="15" fill="rgb(247,138,52)" fg:x="80" fg:w="1"/><text x="1.1107%" y="463.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="437" width="0.0108%" height="15" fill="rgb(213,79,30)" fg:x="80" fg:w="1"/><text x="1.1107%" y="447.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="421" width="0.0108%" height="15" fill="rgb(246,177,23)" fg:x="80" fg:w="1"/><text x="1.1107%" y="431.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="405" width="0.0108%" height="15" fill="rgb(230,62,27)" fg:x="80" fg:w="1"/><text x="1.1107%" y="415.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="389" width="0.0108%" height="15" fill="rgb(216,154,8)" fg:x="80" fg:w="1"/><text x="1.1107%" y="399.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="373" width="0.0108%" height="15" fill="rgb(244,35,45)" fg:x="80" fg:w="1"/><text x="1.1107%" y="383.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="357" width="0.0108%" height="15" fill="rgb(251,115,12)" fg:x="80" fg:w="1"/><text x="1.1107%" y="367.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="341" width="0.0108%" height="15" fill="rgb(240,54,50)" fg:x="80" fg:w="1"/><text x="1.1107%" y="351.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="325" width="0.0108%" height="15" fill="rgb(233,84,52)" fg:x="80" fg:w="1"/><text x="1.1107%" y="335.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="309" width="0.0108%" height="15" fill="rgb(207,117,47)" fg:x="80" fg:w="1"/><text x="1.1107%" y="319.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="293" width="0.0108%" height="15" fill="rgb(249,43,39)" fg:x="80" fg:w="1"/><text x="1.1107%" y="303.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="277" width="0.0108%" height="15" fill="rgb(209,38,44)" fg:x="80" fg:w="1"/><text x="1.1107%" y="287.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="261" width="0.0108%" height="15" fill="rgb(236,212,23)" fg:x="80" fg:w="1"/><text x="1.1107%" y="271.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="245" width="0.0108%" height="15" fill="rgb(242,79,21)" fg:x="80" fg:w="1"/><text x="1.1107%" y="255.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="229" width="0.0108%" height="15" fill="rgb(211,96,35)" fg:x="80" fg:w="1"/><text x="1.1107%" y="239.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="213" width="0.0108%" height="15" fill="rgb(253,215,40)" fg:x="80" fg:w="1"/><text x="1.1107%" y="223.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="197" width="0.0108%" height="15" fill="rgb(211,81,21)" fg:x="80" fg:w="1"/><text x="1.1107%" y="207.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="181" width="0.0108%" height="15" fill="rgb(208,190,38)" fg:x="80" fg:w="1"/><text x="1.1107%" y="191.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="165" width="0.0108%" height="15" fill="rgb(235,213,38)" fg:x="80" fg:w="1"/><text x="1.1107%" y="175.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="149" width="0.0108%" height="15" fill="rgb(237,122,38)" fg:x="80" fg:w="1"/><text x="1.1107%" y="159.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="133" width="0.0108%" height="15" fill="rgb(244,218,35)" fg:x="80" fg:w="1"/><text x="1.1107%" y="143.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="117" width="0.0108%" height="15" fill="rgb(240,68,47)" fg:x="80" fg:w="1"/><text x="1.1107%" y="127.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.8607%" y="101" width="0.0108%" height="15" fill="rgb(210,16,53)" fg:x="80" fg:w="1"/><text x="1.1107%" y="111.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="85" width="0.0108%" height="15" fill="rgb(235,124,12)" fg:x="80" fg:w="1"/><text x="1.1107%" y="95.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8607%" y="69" width="0.0108%" height="15" fill="rgb(224,169,11)" fg:x="80" fg:w="1"/><text x="1.1107%" y="79.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8607%" y="53" width="0.0108%" height="15" fill="rgb(250,166,2)" fg:x="80" fg:w="1"/><text x="1.1107%" y="63.50"></text></g><g><title>deno`v8::internal::SnapshotByteSource::GetInt (1 samples, 0.01%)</title><rect x="0.8607%" y="37" width="0.0108%" height="15" fill="rgb(242,216,29)" fg:x="80" fg:w="1"/><text x="1.1107%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.02%)</title><rect x="0.8607%" y="997" width="0.0215%" height="15" fill="rgb(230,116,27)" fg:x="80" fg:w="2"/><text x="1.1107%" y="1007.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.02%)</title><rect x="0.8607%" y="981" width="0.0215%" height="15" fill="rgb(228,99,48)" fg:x="80" fg:w="2"/><text x="1.1107%" y="991.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.02%)</title><rect x="0.8607%" y="965" width="0.0215%" height="15" fill="rgb(253,11,6)" fg:x="80" fg:w="2"/><text x="1.1107%" y="975.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.02%)</title><rect x="0.8607%" y="949" width="0.0215%" height="15" fill="rgb(247,143,39)" fg:x="80" fg:w="2"/><text x="1.1107%" y="959.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.02%)</title><rect x="0.8607%" y="933" width="0.0215%" height="15" fill="rgb(236,97,10)" fg:x="80" fg:w="2"/><text x="1.1107%" y="943.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.02%)</title><rect x="0.8607%" y="917" width="0.0215%" height="15" fill="rgb(233,208,19)" fg:x="80" fg:w="2"/><text x="1.1107%" y="927.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.02%)</title><rect x="0.8607%" y="901" width="0.0215%" height="15" fill="rgb(216,164,2)" fg:x="80" fg:w="2"/><text x="1.1107%" y="911.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.01%)</title><rect x="0.8714%" y="885" width="0.0108%" height="15" fill="rgb(220,129,5)" fg:x="81" fg:w="1"/><text x="1.1214%" y="895.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.01%)</title><rect x="0.8714%" y="869" width="0.0108%" height="15" fill="rgb(242,17,10)" fg:x="81" fg:w="1"/><text x="1.1214%" y="879.50"></text></g><g><title>deno`v8::internal::TransitionArray::Sort (1 samples, 0.01%)</title><rect x="0.8714%" y="853" width="0.0108%" height="15" fill="rgb(242,107,0)" fg:x="81" fg:w="1"/><text x="1.1214%" y="863.50"></text></g><g><title>deno`v8::internal::Heap::SetUp (1 samples, 0.01%)</title><rect x="0.8822%" y="917" width="0.0108%" height="15" fill="rgb(251,28,31)" fg:x="82" fg:w="1"/><text x="1.1322%" y="927.50"></text></g><g><title>deno`v8::internal::CodeRange::EnsureProcessWideCodeRange (1 samples, 0.01%)</title><rect x="0.8822%" y="901" width="0.0108%" height="15" fill="rgb(233,223,10)" fg:x="82" fg:w="1"/><text x="1.1322%" y="911.50"></text></g><g><title>deno`v8::internal::CodeRange::InitReservation (1 samples, 0.01%)</title><rect x="0.8822%" y="885" width="0.0108%" height="15" fill="rgb(215,21,27)" fg:x="82" fg:w="1"/><text x="1.1322%" y="895.50"></text></g><g><title>deno`v8::internal::VirtualMemoryCage::InitReservation (1 samples, 0.01%)</title><rect x="0.8822%" y="869" width="0.0108%" height="15" fill="rgb(232,23,21)" fg:x="82" fg:w="1"/><text x="1.1322%" y="879.50"></text></g><g><title>deno`v8::internal::VirtualMemory::VirtualMemory (1 samples, 0.01%)</title><rect x="0.8822%" y="853" width="0.0108%" height="15" fill="rgb(244,5,23)" fg:x="82" fg:w="1"/><text x="1.1322%" y="863.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.01%)</title><rect x="0.8822%" y="837" width="0.0108%" height="15" fill="rgb(226,81,46)" fg:x="82" fg:w="1"/><text x="1.1322%" y="847.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.04%)</title><rect x="0.8607%" y="1013" width="0.0430%" height="15" fill="rgb(247,70,30)" fg:x="80" fg:w="4"/><text x="1.1107%" y="1023.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.02%)</title><rect x="0.8822%" y="997" width="0.0215%" height="15" fill="rgb(212,68,19)" fg:x="82" fg:w="2"/><text x="1.1322%" y="1007.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.02%)</title><rect x="0.8822%" y="981" width="0.0215%" height="15" fill="rgb(240,187,13)" fg:x="82" fg:w="2"/><text x="1.1322%" y="991.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.02%)</title><rect x="0.8822%" y="965" width="0.0215%" height="15" fill="rgb(223,113,26)" fg:x="82" fg:w="2"/><text x="1.1322%" y="975.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.02%)</title><rect x="0.8822%" y="949" width="0.0215%" height="15" fill="rgb(206,192,2)" fg:x="82" fg:w="2"/><text x="1.1322%" y="959.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.02%)</title><rect x="0.8822%" y="933" width="0.0215%" height="15" fill="rgb(241,108,4)" fg:x="82" fg:w="2"/><text x="1.1322%" y="943.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.01%)</title><rect x="0.8930%" y="917" width="0.0108%" height="15" fill="rgb(247,173,49)" fg:x="83" fg:w="1"/><text x="1.1430%" y="927.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.01%)</title><rect x="0.8930%" y="901" width="0.0108%" height="15" fill="rgb(224,114,35)" fg:x="83" fg:w="1"/><text x="1.1430%" y="911.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.01%)</title><rect x="0.8930%" y="885" width="0.0108%" height="15" fill="rgb(245,159,27)" fg:x="83" fg:w="1"/><text x="1.1430%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.01%)</title><rect x="0.8930%" y="869" width="0.0108%" height="15" fill="rgb(245,172,44)" fg:x="83" fg:w="1"/><text x="1.1430%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8930%" y="853" width="0.0108%" height="15" fill="rgb(236,23,11)" fg:x="83" fg:w="1"/><text x="1.1430%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8930%" y="837" width="0.0108%" height="15" fill="rgb(205,117,38)" fg:x="83" fg:w="1"/><text x="1.1430%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8930%" y="821" width="0.0108%" height="15" fill="rgb(237,72,25)" fg:x="83" fg:w="1"/><text x="1.1430%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8930%" y="805" width="0.0108%" height="15" fill="rgb(244,70,9)" fg:x="83" fg:w="1"/><text x="1.1430%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.8930%" y="789" width="0.0108%" height="15" fill="rgb(217,125,39)" fg:x="83" fg:w="1"/><text x="1.1430%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.8930%" y="773" width="0.0108%" height="15" fill="rgb(235,36,10)" fg:x="83" fg:w="1"/><text x="1.1430%" y="783.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.01%)</title><rect x="0.9037%" y="869" width="0.0108%" height="15" fill="rgb(251,123,47)" fg:x="84" fg:w="1"/><text x="1.1537%" y="879.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="0.9037%" y="853" width="0.0108%" height="15" fill="rgb(221,13,13)" fg:x="84" fg:w="1"/><text x="1.1537%" y="863.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.01%)</title><rect x="0.9037%" y="837" width="0.0108%" height="15" fill="rgb(238,131,9)" fg:x="84" fg:w="1"/><text x="1.1537%" y="847.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.9037%" y="821" width="0.0108%" height="15" fill="rgb(211,50,8)" fg:x="84" fg:w="1"/><text x="1.1537%" y="831.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.9037%" y="805" width="0.0108%" height="15" fill="rgb(245,182,24)" fg:x="84" fg:w="1"/><text x="1.1537%" y="815.50"></text></g><g><title>deno`v8::internal::parsing::ParseFunction(v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.9037%" y="789" width="0.0108%" height="15" fill="rgb(242,14,37)" fg:x="84" fg:w="1"/><text x="1.1537%" y="799.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::Isolate*, v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.9037%" y="773" width="0.0108%" height="15" fill="rgb(246,228,12)" fg:x="84" fg:w="1"/><text x="1.1537%" y="783.50"></text></g><g><title>deno`void v8::internal::AstValueFactory::Internalize&lt;v8::internal::Isolate&gt; (1 samples, 0.01%)</title><rect x="0.9037%" y="757" width="0.0108%" height="15" fill="rgb(213,55,15)" fg:x="84" fg:w="1"/><text x="1.1537%" y="767.50"></text></g><g><title>deno`v8::internal::Handle&lt;v8::internal::String&gt; v8::internal::StringTable::LookupKey&lt;v8::internal::SequentialStringKey&lt;unsigned char&gt;, v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::SequentialStringKey (1 samples, 0.01%)</title><rect x="0.9037%" y="741" width="0.0108%" height="15" fill="rgb(209,9,3)" fg:x="84" fg:w="1"/><text x="1.1537%" y="751.50"></text></g><g><title>deno`v8::internal::InternalIndex v8::internal::StringTable::Data::FindEntry&lt;v8::internal::Isolate, v8::internal::SequentialStringKey&lt;unsigned char&gt; &gt;(v8::internal::Isolate*, v8::internal::SequentialStringKey (1 samples, 0.01%)</title><rect x="0.9037%" y="725" width="0.0108%" height="15" fill="rgb(230,59,30)" fg:x="84" fg:w="1"/><text x="1.1537%" y="735.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.01%)</title><rect x="0.9145%" y="837" width="0.0108%" height="15" fill="rgb(209,121,21)" fg:x="85" fg:w="1"/><text x="1.1645%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="0.9145%" y="821" width="0.0108%" height="15" fill="rgb(220,109,13)" fg:x="85" fg:w="1"/><text x="1.1645%" y="831.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.01%)</title><rect x="0.9145%" y="805" width="0.0108%" height="15" fill="rgb(232,18,1)" fg:x="85" fg:w="1"/><text x="1.1645%" y="815.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.9145%" y="789" width="0.0108%" height="15" fill="rgb(215,41,42)" fg:x="85" fg:w="1"/><text x="1.1645%" y="799.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.9145%" y="773" width="0.0108%" height="15" fill="rgb(224,123,36)" fg:x="85" fg:w="1"/><text x="1.1645%" y="783.50"></text></g><g><title>deno`bool v8::internal::(anonymous namespace)::IterativelyExecuteAndFinalizeUnoptimizedCompilationJobs&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::AccountingAllocator*, v8::internal::IsCompiledScope*, std::__1::vector&lt;v8::internal::FinalizeUnoptimizedCompilationData, std::__1::allocator&lt;v8::internal::FinalizeUnoptimizedCompilationData&gt; &gt;*, std::__1::vector&lt;v8::internal::DeferredFinalizationJobData, std::__1::allocator (1 samples, 0.01%)</title><rect x="0.9145%" y="757" width="0.0108%" height="15" fill="rgb(240,125,3)" fg:x="85" fg:w="1"/><text x="1.1645%" y="767.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ExecuteSingleUnoptimizedCompilationJob(v8::internal::ParseInfo*, v8::internal::FunctionLiteral*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::AccountingAllocator*, std::__1::vector&lt;v8::internal::FunctionLiteral*, std::__1::allocator (1 samples, 0.01%)</title><rect x="0.9145%" y="741" width="0.0108%" height="15" fill="rgb(205,98,50)" fg:x="85" fg:w="1"/><text x="1.1645%" y="751.50"></text></g><g><title>deno`v8::internal::interpreter::InterpreterCompilationJob::ExecuteJobImpl (1 samples, 0.01%)</title><rect x="0.9145%" y="725" width="0.0108%" height="15" fill="rgb(205,185,37)" fg:x="85" fg:w="1"/><text x="1.1645%" y="735.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::GenerateBytecode (1 samples, 0.01%)</title><rect x="0.9145%" y="709" width="0.0108%" height="15" fill="rgb(238,207,15)" fg:x="85" fg:w="1"/><text x="1.1645%" y="719.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::GenerateBytecodeBody (1 samples, 0.01%)</title><rect x="0.9145%" y="693" width="0.0108%" height="15" fill="rgb(213,199,42)" fg:x="85" fg:w="1"/><text x="1.1645%" y="703.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitExpressionStatement (1 samples, 0.01%)</title><rect x="0.9145%" y="677" width="0.0108%" height="15" fill="rgb(235,201,11)" fg:x="85" fg:w="1"/><text x="1.1645%" y="687.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitCall (1 samples, 0.01%)</title><rect x="0.9145%" y="661" width="0.0108%" height="15" fill="rgb(207,46,11)" fg:x="85" fg:w="1"/><text x="1.1645%" y="671.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::BuildVariableLoad (1 samples, 0.01%)</title><rect x="0.9145%" y="645" width="0.0108%" height="15" fill="rgb(241,35,35)" fg:x="85" fg:w="1"/><text x="1.1645%" y="655.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeArrayBuilder::ThrowReferenceErrorIfHole (1 samples, 0.01%)</title><rect x="0.9145%" y="629" width="0.0108%" height="15" fill="rgb(243,32,47)" fg:x="85" fg:w="1"/><text x="1.1645%" y="639.50"></text></g><g><title>deno`v8::internal::interpreter::ConstantArrayBuilder::Insert (1 samples, 0.01%)</title><rect x="0.9145%" y="613" width="0.0108%" height="15" fill="rgb(247,202,23)" fg:x="85" fg:w="1"/><text x="1.1645%" y="623.50"></text></g><g><title>deno`v8::base::TemplateHashMapImpl&lt;long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::internal::ZoneAllocationPolicy&gt;::Resize (1 samples, 0.01%)</title><rect x="0.9145%" y="597" width="0.0108%" height="15" fill="rgb(219,102,11)" fg:x="85" fg:w="1"/><text x="1.1645%" y="607.50"></text></g><g><title>deno`v8::internal::Zone::NewExpand (1 samples, 0.01%)</title><rect x="0.9145%" y="581" width="0.0108%" height="15" fill="rgb(243,110,44)" fg:x="85" fg:w="1"/><text x="1.1645%" y="591.50"></text></g><g><title>deno`v8::internal::AccountingAllocator::AllocateSegment (1 samples, 0.01%)</title><rect x="0.9145%" y="565" width="0.0108%" height="15" fill="rgb(222,74,54)" fg:x="85" fg:w="1"/><text x="1.1645%" y="575.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.10%)</title><rect x="0.8392%" y="1093" width="0.0968%" height="15" fill="rgb(216,99,12)" fg:x="78" fg:w="9"/><text x="1.0892%" y="1103.50"></text></g><g><title>deno`deno::run_command::_{{closure}} (9 samples, 0.10%)</title><rect x="0.8392%" y="1077" width="0.0968%" height="15" fill="rgb(226,22,26)" fg:x="78" fg:w="9"/><text x="1.0892%" y="1087.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.10%)</title><rect x="0.8392%" y="1061" width="0.0968%" height="15" fill="rgb(217,163,10)" fg:x="78" fg:w="9"/><text x="1.0892%" y="1071.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.10%)</title><rect x="0.8392%" y="1045" width="0.0968%" height="15" fill="rgb(213,25,53)" fg:x="78" fg:w="9"/><text x="1.0892%" y="1055.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (7 samples, 0.08%)</title><rect x="0.8607%" y="1029" width="0.0753%" height="15" fill="rgb(252,105,26)" fg:x="80" fg:w="7"/><text x="1.1107%" y="1039.50"></text></g><g><title>deno`deno_runtime::web_worker::WebWorker::execute_script (3 samples, 0.03%)</title><rect x="0.9037%" y="1013" width="0.0323%" height="15" fill="rgb(220,39,43)" fg:x="84" fg:w="3"/><text x="1.1537%" y="1023.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (3 samples, 0.03%)</title><rect x="0.9037%" y="997" width="0.0323%" height="15" fill="rgb(229,68,48)" fg:x="84" fg:w="3"/><text x="1.1537%" y="1007.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (3 samples, 0.03%)</title><rect x="0.9037%" y="981" width="0.0323%" height="15" fill="rgb(252,8,32)" fg:x="84" fg:w="3"/><text x="1.1537%" y="991.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (3 samples, 0.03%)</title><rect x="0.9037%" y="965" width="0.0323%" height="15" fill="rgb(223,20,43)" fg:x="84" fg:w="3"/><text x="1.1537%" y="975.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (3 samples, 0.03%)</title><rect x="0.9037%" y="949" width="0.0323%" height="15" fill="rgb(229,81,49)" fg:x="84" fg:w="3"/><text x="1.1537%" y="959.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (3 samples, 0.03%)</title><rect x="0.9037%" y="933" width="0.0323%" height="15" fill="rgb(236,28,36)" fg:x="84" fg:w="3"/><text x="1.1537%" y="943.50"></text></g><g><title>deno`Builtins_JSEntry (3 samples, 0.03%)</title><rect x="0.9037%" y="917" width="0.0323%" height="15" fill="rgb(249,185,26)" fg:x="84" fg:w="3"/><text x="1.1537%" y="927.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (3 samples, 0.03%)</title><rect x="0.9037%" y="901" width="0.0323%" height="15" fill="rgb(249,174,33)" fg:x="84" fg:w="3"/><text x="1.1537%" y="911.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3 samples, 0.03%)</title><rect x="0.9037%" y="885" width="0.0323%" height="15" fill="rgb(233,201,37)" fg:x="84" fg:w="3"/><text x="1.1537%" y="895.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="0.9145%" y="869" width="0.0215%" height="15" fill="rgb(221,78,26)" fg:x="85" fg:w="2"/><text x="1.1645%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="0.9145%" y="853" width="0.0215%" height="15" fill="rgb(250,127,30)" fg:x="85" fg:w="2"/><text x="1.1645%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="0.9252%" y="837" width="0.0108%" height="15" fill="rgb(230,49,44)" fg:x="86" fg:w="1"/><text x="1.1752%" y="847.50"></text></g><g><title>deno`Builtins_ConstructHandler (1 samples, 0.01%)</title><rect x="0.9252%" y="821" width="0.0108%" height="15" fill="rgb(229,67,23)" fg:x="86" fg:w="1"/><text x="1.1752%" y="831.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.01%)</title><rect x="0.9252%" y="805" width="0.0108%" height="15" fill="rgb(249,83,47)" fg:x="86" fg:w="1"/><text x="1.1752%" y="815.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="0.9252%" y="789" width="0.0108%" height="15" fill="rgb(215,43,3)" fg:x="86" fg:w="1"/><text x="1.1752%" y="799.50"></text></g><g><title>deno`v8::internal::Builtin_FunctionConstructor (1 samples, 0.01%)</title><rect x="0.9252%" y="773" width="0.0108%" height="15" fill="rgb(238,154,13)" fg:x="86" fg:w="1"/><text x="1.1752%" y="783.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CreateDynamicFunction (1 samples, 0.01%)</title><rect x="0.9252%" y="757" width="0.0108%" height="15" fill="rgb(219,56,2)" fg:x="86" fg:w="1"/><text x="1.1752%" y="767.50"></text></g><g><title>deno`v8::internal::Compiler::GetFunctionFromValidatedString(v8::internal::Handle&lt;v8::internal::Context&gt;, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.9252%" y="741" width="0.0108%" height="15" fill="rgb(233,0,4)" fg:x="86" fg:w="1"/><text x="1.1752%" y="751.50"></text></g><g><title>deno`v8::internal::Compiler::GetFunctionFromEval(v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.9252%" y="725" width="0.0108%" height="15" fill="rgb(235,30,7)" fg:x="86" fg:w="1"/><text x="1.1752%" y="735.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CompileToplevel(v8::internal::ParseInfo*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.9252%" y="709" width="0.0108%" height="15" fill="rgb(250,79,13)" fg:x="86" fg:w="1"/><text x="1.1752%" y="719.50"></text></g><g><title>deno`bool v8::internal::(anonymous namespace)::IterativelyExecuteAndFinalizeUnoptimizedCompilationJobs&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::AccountingAllocator*, v8::internal::IsCompiledScope*, std::__1::vector&lt;v8::internal::FinalizeUnoptimizedCompilationData, std::__1::allocator&lt;v8::internal::FinalizeUnoptimizedCompilationData&gt; &gt;*, std::__1::vector&lt;v8::internal::DeferredFinalizationJobData, std::__1::allocator (1 samples, 0.01%)</title><rect x="0.9252%" y="693" width="0.0108%" height="15" fill="rgb(211,146,34)" fg:x="86" fg:w="1"/><text x="1.1752%" y="703.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ExecuteSingleUnoptimizedCompilationJob(v8::internal::ParseInfo*, v8::internal::FunctionLiteral*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::AccountingAllocator*, std::__1::vector&lt;v8::internal::FunctionLiteral*, std::__1::allocator (1 samples, 0.01%)</title><rect x="0.9252%" y="677" width="0.0108%" height="15" fill="rgb(228,22,38)" fg:x="86" fg:w="1"/><text x="1.1752%" y="687.50"></text></g><g><title>deno`v8::internal::interpreter::Interpreter::NewCompilationJob(v8::internal::ParseInfo*, v8::internal::FunctionLiteral*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::AccountingAllocator*, std::__1::vector&lt;v8::internal::FunctionLiteral*, std::__1::allocator (1 samples, 0.01%)</title><rect x="0.9252%" y="661" width="0.0108%" height="15" fill="rgb(235,168,5)" fg:x="86" fg:w="1"/><text x="1.1752%" y="671.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="0.9252%" y="645" width="0.0108%" height="15" fill="rgb(221,155,16)" fg:x="86" fg:w="1"/><text x="1.1752%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="0.9252%" y="629" width="0.0108%" height="15" fill="rgb(215,215,53)" fg:x="86" fg:w="1"/><text x="1.1752%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="0.9252%" y="613" width="0.0108%" height="15" fill="rgb(223,4,10)" fg:x="86" fg:w="1"/><text x="1.1752%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="0.9252%" y="597" width="0.0108%" height="15" fill="rgb(234,103,6)" fg:x="86" fg:w="1"/><text x="1.1752%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="0.9252%" y="581" width="0.0108%" height="15" fill="rgb(227,97,0)" fg:x="86" fg:w="1"/><text x="1.1752%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="0.9252%" y="565" width="0.0108%" height="15" fill="rgb(234,150,53)" fg:x="86" fg:w="1"/><text x="1.1752%" y="575.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.11%)</title><rect x="0.8392%" y="1125" width="0.1076%" height="15" fill="rgb(228,201,54)" fg:x="78" fg:w="10"/><text x="1.0892%" y="1135.50"></text></g><g><title>deno`deno::main::_{{closure}} (10 samples, 0.11%)</title><rect x="0.8392%" y="1109" width="0.1076%" height="15" fill="rgb(222,22,37)" fg:x="78" fg:w="10"/><text x="1.0892%" y="1119.50"></text></g><g><title>deno`deno::standalone::extract_standalone::_{{closure}} (1 samples, 0.01%)</title><rect x="0.9360%" y="1093" width="0.0108%" height="15" fill="rgb(237,53,32)" fg:x="87" fg:w="1"/><text x="1.1860%" y="1103.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="0.9360%" y="1077" width="0.0108%" height="15" fill="rgb(233,25,53)" fg:x="87" fg:w="1"/><text x="1.1860%" y="1087.50"></text></g><g><title>deno`std::io::stdio::set_output_capture (1 samples, 0.01%)</title><rect x="0.9360%" y="1061" width="0.0108%" height="15" fill="rgb(210,40,34)" fg:x="87" fg:w="1"/><text x="1.1860%" y="1071.50"></text></g><g><title>deno`DYLD-STUB$$mach_absolute_time (1 samples, 0.01%)</title><rect x="0.9575%" y="1109" width="0.0108%" height="15" fill="rgb(241,220,44)" fg:x="89" fg:w="1"/><text x="1.2075%" y="1119.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (1 samples, 0.01%)</title><rect x="0.9683%" y="1109" width="0.0108%" height="15" fill="rgb(235,28,35)" fg:x="90" fg:w="1"/><text x="1.2183%" y="1119.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (1 samples, 0.01%)</title><rect x="0.9790%" y="1109" width="0.0108%" height="15" fill="rgb(210,56,17)" fg:x="91" fg:w="1"/><text x="1.2290%" y="1119.50"></text></g><g><title>deno`tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.01%)</title><rect x="1.0651%" y="1093" width="0.0108%" height="15" fill="rgb(224,130,29)" fg:x="99" fg:w="1"/><text x="1.3151%" y="1103.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule (1 samples, 0.01%)</title><rect x="1.8935%" y="1045" width="0.0108%" height="15" fill="rgb(235,212,8)" fg:x="176" fg:w="1"/><text x="2.1435%" y="1055.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule::_{{closure}} (1 samples, 0.01%)</title><rect x="1.9042%" y="1045" width="0.0108%" height="15" fill="rgb(223,33,50)" fg:x="177" fg:w="1"/><text x="2.1542%" y="1055.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule (5 samples, 0.05%)</title><rect x="1.9150%" y="1045" width="0.0538%" height="15" fill="rgb(219,149,13)" fg:x="178" fg:w="5"/><text x="2.1650%" y="1055.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule::_{{closure}} (5 samples, 0.05%)</title><rect x="1.9150%" y="1029" width="0.0538%" height="15" fill="rgb(250,156,29)" fg:x="178" fg:w="5"/><text x="2.1650%" y="1039.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_dec (2 samples, 0.02%)</title><rect x="1.9688%" y="1045" width="0.0215%" height="15" fill="rgb(216,193,19)" fg:x="183" fg:w="2"/><text x="2.2188%" y="1055.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.01%)</title><rect x="1.9903%" y="1045" width="0.0108%" height="15" fill="rgb(216,135,14)" fg:x="185" fg:w="1"/><text x="2.2403%" y="1055.50"></text></g><g><title>deno`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (65 samples, 0.70%)</title><rect x="1.3556%" y="1077" width="0.6993%" height="15" fill="rgb(241,47,5)" fg:x="126" fg:w="65"/><text x="1.6056%" y="1087.50"></text></g><g><title>deno`tokio::runtime::task::waker::wake_by_val (18 samples, 0.19%)</title><rect x="1.8612%" y="1061" width="0.1937%" height="15" fill="rgb(233,42,35)" fg:x="173" fg:w="18"/><text x="2.1112%" y="1071.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.05%)</title><rect x="2.0011%" y="1045" width="0.0538%" height="15" fill="rgb(231,13,6)" fg:x="186" fg:w="5"/><text x="2.2511%" y="1055.50"></text></g><g><title>deno`tokio::runtime::task::waker::wake_by_val (1 samples, 0.01%)</title><rect x="2.0549%" y="1077" width="0.0108%" height="15" fill="rgb(207,181,40)" fg:x="191" fg:w="1"/><text x="2.3049%" y="1087.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (724 samples, 7.79%)</title><rect x="1.0758%" y="1093" width="7.7891%" height="15" fill="rgb(254,173,49)" fg:x="100" fg:w="724"/><text x="1.3258%" y="1103.50">deno`tokio:..</text></g><g><title>libsystem_kernel.dylib`kevent (632 samples, 6.80%)</title><rect x="2.0656%" y="1077" width="6.7994%" height="15" fill="rgb(221,1,38)" fg:x="192" fg:w="632"/><text x="2.3156%" y="1087.50">libsystem..</text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.01%)</title><rect x="8.8757%" y="1077" width="0.0108%" height="15" fill="rgb(206,124,46)" fg:x="825" fg:w="1"/><text x="9.1257%" y="1087.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (4 samples, 0.04%)</title><rect x="8.8650%" y="1093" width="0.0430%" height="15" fill="rgb(249,21,11)" fg:x="824" fg:w="4"/><text x="9.1150%" y="1103.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.02%)</title><rect x="8.8865%" y="1077" width="0.0215%" height="15" fill="rgb(222,201,40)" fg:x="826" fg:w="2"/><text x="9.1365%" y="1087.50"></text></g><g><title>deno`tokio::signal::unix::driver::noop (3 samples, 0.03%)</title><rect x="8.9080%" y="1093" width="0.0323%" height="15" fill="rgb(235,61,29)" fg:x="828" fg:w="3"/><text x="9.1580%" y="1103.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (9 samples, 0.10%)</title><rect x="8.9403%" y="1093" width="0.0968%" height="15" fill="rgb(219,207,3)" fg:x="831" fg:w="9"/><text x="9.1903%" y="1103.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (5 samples, 0.05%)</title><rect x="8.9833%" y="1077" width="0.0538%" height="15" fill="rgb(222,56,46)" fg:x="835" fg:w="5"/><text x="9.2333%" y="1087.50"></text></g><g><title> 32]&gt; (5 samples, 0.05%)</title><rect x="8.9833%" y="1061" width="0.0538%" height="15" fill="rgb(239,76,54)" fg:x="835" fg:w="5"/><text x="9.2333%" y="1071.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (751 samples, 8.08%)</title><rect x="0.9898%" y="1109" width="8.0796%" height="15" fill="rgb(231,124,27)" fg:x="92" fg:w="751"/><text x="1.2398%" y="1119.50">deno`tokio:..</text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (3 samples, 0.03%)</title><rect x="9.0371%" y="1093" width="0.0323%" height="15" fill="rgb(249,195,6)" fg:x="840" fg:w="3"/><text x="9.2871%" y="1103.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (2 samples, 0.02%)</title><rect x="9.0694%" y="1109" width="0.0215%" height="15" fill="rgb(237,174,47)" fg:x="843" fg:w="2"/><text x="9.3194%" y="1119.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (2 samples, 0.02%)</title><rect x="9.0909%" y="1109" width="0.0215%" height="15" fill="rgb(206,201,31)" fg:x="845" fg:w="2"/><text x="9.3409%" y="1119.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Context::park (780 samples, 8.39%)</title><rect x="0.9467%" y="1125" width="8.3916%" height="15" fill="rgb(231,57,52)" fg:x="88" fg:w="780"/><text x="1.1967%" y="1135.50">deno`tokio::..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.23%)</title><rect x="9.1124%" y="1109" width="0.2259%" height="15" fill="rgb(248,177,22)" fg:x="847" fg:w="21"/><text x="9.3624%" y="1119.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Spawner::pop (1 samples, 0.01%)</title><rect x="9.3384%" y="1125" width="0.0108%" height="15" fill="rgb(215,211,37)" fg:x="868" fg:w="1"/><text x="9.5884%" y="1135.50"></text></g><g><title>deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2 samples, 0.02%)</title><rect x="9.3491%" y="1125" width="0.0215%" height="15" fill="rgb(241,128,51)" fg:x="869" fg:w="2"/><text x="9.5991%" y="1135.50"></text></g><g><title>deno`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::assert_owner (4 samples, 0.04%)</title><rect x="9.3706%" y="1125" width="0.0430%" height="15" fill="rgb(227,165,31)" fg:x="871" fg:w="4"/><text x="9.6206%" y="1135.50"></text></g><g><title>deno`DYLD-STUB$$malloc (3 samples, 0.03%)</title><rect x="9.4567%" y="1109" width="0.0323%" height="15" fill="rgb(228,167,24)" fg:x="879" fg:w="3"/><text x="9.7067%" y="1119.50"></text></g><g><title>deno`__rust_alloc (4 samples, 0.04%)</title><rect x="9.4890%" y="1109" width="0.0430%" height="15" fill="rgb(228,143,12)" fg:x="882" fg:w="4"/><text x="9.7390%" y="1119.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (1 samples, 0.01%)</title><rect x="9.5320%" y="1109" width="0.0108%" height="15" fill="rgb(249,149,8)" fg:x="886" fg:w="1"/><text x="9.7820%" y="1119.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::add_rc_dyn (3 samples, 0.03%)</title><rect x="9.5428%" y="1109" width="0.0323%" height="15" fill="rgb(243,35,44)" fg:x="887" fg:w="3"/><text x="9.7928%" y="1119.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (3 samples, 0.03%)</title><rect x="9.5750%" y="1109" width="0.0323%" height="15" fill="rgb(246,89,9)" fg:x="890" fg:w="3"/><text x="9.8250%" y="1119.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="10.0377%" y="1093" width="0.0215%" height="15" fill="rgb(233,213,13)" fg:x="933" fg:w="2"/><text x="10.2877%" y="1103.50"></text></g><g><title>deno`v8::Context::Exit (2 samples, 0.02%)</title><rect x="10.1560%" y="1061" width="0.0215%" height="15" fill="rgb(233,141,41)" fg:x="944" fg:w="2"/><text x="10.4060%" y="1071.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (11 samples, 0.12%)</title><rect x="10.1775%" y="1061" width="0.1183%" height="15" fill="rgb(239,167,4)" fg:x="946" fg:w="11"/><text x="10.4275%" y="1071.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (9 samples, 0.10%)</title><rect x="10.1990%" y="1045" width="0.0968%" height="15" fill="rgb(209,217,16)" fg:x="948" fg:w="9"/><text x="10.4490%" y="1055.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (22 samples, 0.24%)</title><rect x="10.1130%" y="1077" width="0.2367%" height="15" fill="rgb(219,88,35)" fg:x="940" fg:w="22"/><text x="10.3630%" y="1087.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (5 samples, 0.05%)</title><rect x="10.2959%" y="1061" width="0.0538%" height="15" fill="rgb(220,193,23)" fg:x="957" fg:w="5"/><text x="10.5459%" y="1071.50"></text></g><g><title>deno`v8::Context::Exit (6 samples, 0.06%)</title><rect x="10.3497%" y="1077" width="0.0646%" height="15" fill="rgb(230,90,52)" fg:x="962" fg:w="6"/><text x="10.5997%" y="1087.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (35 samples, 0.38%)</title><rect x="10.0592%" y="1093" width="0.3765%" height="15" fill="rgb(252,106,19)" fg:x="935" fg:w="35"/><text x="10.3092%" y="1103.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (2 samples, 0.02%)</title><rect x="10.4142%" y="1077" width="0.0215%" height="15" fill="rgb(206,74,20)" fg:x="968" fg:w="2"/><text x="10.6642%" y="1087.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (5 samples, 0.05%)</title><rect x="10.4357%" y="1093" width="0.0538%" height="15" fill="rgb(230,138,44)" fg:x="970" fg:w="5"/><text x="10.6857%" y="1103.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (1 samples, 0.01%)</title><rect x="10.4895%" y="1093" width="0.0108%" height="15" fill="rgb(235,182,43)" fg:x="975" fg:w="1"/><text x="10.7395%" y="1103.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::add_rc_dyn (11 samples, 0.12%)</title><rect x="10.5003%" y="1093" width="0.1183%" height="15" fill="rgb(242,16,51)" fg:x="976" fg:w="11"/><text x="10.7503%" y="1103.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.03%)</title><rect x="10.7585%" y="1077" width="0.0323%" height="15" fill="rgb(248,9,4)" fg:x="1000" fg:w="3"/><text x="11.0085%" y="1087.50"></text></g><g><title>deno`DYLD-STUB$$recv (2 samples, 0.02%)</title><rect x="10.7907%" y="1077" width="0.0215%" height="15" fill="rgb(210,31,22)" fg:x="1003" fg:w="2"/><text x="11.0407%" y="1087.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_inc (1 samples, 0.01%)</title><rect x="11.0490%" y="1061" width="0.0108%" height="15" fill="rgb(239,54,39)" fg:x="1027" fg:w="1"/><text x="11.2990%" y="1071.50"></text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (26 samples, 0.28%)</title><rect x="10.8123%" y="1077" width="0.2797%" height="15" fill="rgb(230,99,41)" fg:x="1005" fg:w="26"/><text x="11.0623%" y="1087.50"></text></g><g><title>deno`tokio::runtime::task::waker::clone_waker (3 samples, 0.03%)</title><rect x="11.0597%" y="1061" width="0.0323%" height="15" fill="rgb(253,106,12)" fg:x="1028" fg:w="3"/><text x="11.3097%" y="1071.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_inc (3 samples, 0.03%)</title><rect x="11.0597%" y="1045" width="0.0323%" height="15" fill="rgb(213,46,41)" fg:x="1028" fg:w="3"/><text x="11.3097%" y="1055.50"></text></g><g><title>deno`tokio::runtime::task::waker::clone_waker (3 samples, 0.03%)</title><rect x="11.0920%" y="1077" width="0.0323%" height="15" fill="rgb(215,133,35)" fg:x="1031" fg:w="3"/><text x="11.3420%" y="1087.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (30 samples, 0.32%)</title><rect x="11.1243%" y="1077" width="0.3228%" height="15" fill="rgb(213,28,5)" fg:x="1034" fg:w="30"/><text x="11.3743%" y="1087.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (2 samples, 0.02%)</title><rect x="11.4470%" y="1077" width="0.0215%" height="15" fill="rgb(215,77,49)" fg:x="1064" fg:w="2"/><text x="11.6970%" y="1087.50"></text></g><g><title>libsystem_c.dylib`recv (1 samples, 0.01%)</title><rect x="11.4685%" y="1077" width="0.0108%" height="15" fill="rgb(248,100,22)" fg:x="1066" fg:w="1"/><text x="11.7185%" y="1087.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (3,859 samples, 41.52%)</title><rect x="10.6186%" y="1093" width="41.5169%" height="15" fill="rgb(208,67,9)" fg:x="987" fg:w="3859"/><text x="10.8686%" y="1103.50">deno`tokio::net::tcp::stream::TcpStream::poll_read_priv</text></g><g><title>libsystem_kernel.dylib`__recvfrom (3,779 samples, 40.66%)</title><rect x="11.4793%" y="1077" width="40.6563%" height="15" fill="rgb(219,133,21)" fg:x="1067" fg:w="3779"/><text x="11.7293%" y="1087.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.06%)</title><rect x="52.1356%" y="1093" width="0.0646%" height="15" fill="rgb(246,46,29)" fg:x="4846" fg:w="6"/><text x="52.3856%" y="1103.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (7 samples, 0.08%)</title><rect x="52.2001%" y="1093" width="0.0753%" height="15" fill="rgb(246,185,52)" fg:x="4852" fg:w="7"/><text x="52.4501%" y="1103.50"></text></g><g><title>deno`v8::Context::Enter (3 samples, 0.03%)</title><rect x="52.2754%" y="1093" width="0.0323%" height="15" fill="rgb(252,136,11)" fg:x="4859" fg:w="3"/><text x="52.5254%" y="1103.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (1 samples, 0.01%)</title><rect x="52.2969%" y="1077" width="0.0108%" height="15" fill="rgb(219,138,53)" fg:x="4861" fg:w="1"/><text x="52.5469%" y="1087.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (1 samples, 0.01%)</title><rect x="52.3077%" y="1093" width="0.0108%" height="15" fill="rgb(211,51,23)" fg:x="4862" fg:w="1"/><text x="52.5577%" y="1103.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (8 samples, 0.09%)</title><rect x="52.6197%" y="1077" width="0.0861%" height="15" fill="rgb(247,221,28)" fg:x="4891" fg:w="8"/><text x="52.8697%" y="1087.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (5 samples, 0.05%)</title><rect x="52.7058%" y="1077" width="0.0538%" height="15" fill="rgb(251,222,45)" fg:x="4899" fg:w="5"/><text x="52.9558%" y="1087.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (4 samples, 0.04%)</title><rect x="52.7595%" y="1077" width="0.0430%" height="15" fill="rgb(217,162,53)" fg:x="4904" fg:w="4"/><text x="53.0095%" y="1087.50"></text></g><g><title>deno`Builtins_JSEntry (6 samples, 0.06%)</title><rect x="52.8671%" y="1061" width="0.0646%" height="15" fill="rgb(229,93,14)" fg:x="4914" fg:w="6"/><text x="53.1171%" y="1071.50"></text></g><g><title>0x11000b000 (2 samples, 0.02%)</title><rect x="53.4696%" y="1029" width="0.0215%" height="15" fill="rgb(209,67,49)" fg:x="4970" fg:w="2"/><text x="53.7196%" y="1039.50"></text></g><g><title>0x11000b008 (2 samples, 0.02%)</title><rect x="53.4911%" y="1029" width="0.0215%" height="15" fill="rgb(213,87,29)" fg:x="4972" fg:w="2"/><text x="53.7411%" y="1039.50"></text></g><g><title>0x11000b018 (1 samples, 0.01%)</title><rect x="53.5126%" y="1029" width="0.0108%" height="15" fill="rgb(205,151,52)" fg:x="4974" fg:w="1"/><text x="53.7626%" y="1039.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (5 samples, 0.05%)</title><rect x="53.5234%" y="1029" width="0.0538%" height="15" fill="rgb(253,215,39)" fg:x="4975" fg:w="5"/><text x="53.7734%" y="1039.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (3 samples, 0.03%)</title><rect x="53.5772%" y="1029" width="0.0323%" height="15" fill="rgb(221,220,41)" fg:x="4980" fg:w="3"/><text x="53.8272%" y="1039.50"></text></g><g><title>0x11000b030 (1 samples, 0.01%)</title><rect x="53.6955%" y="1013" width="0.0108%" height="15" fill="rgb(218,133,21)" fg:x="4991" fg:w="1"/><text x="53.9455%" y="1023.50"></text></g><g><title>0x11000b034 (1 samples, 0.01%)</title><rect x="53.7063%" y="1013" width="0.0108%" height="15" fill="rgb(221,193,43)" fg:x="4992" fg:w="1"/><text x="53.9563%" y="1023.50"></text></g><g><title>0x11000b054 (2 samples, 0.02%)</title><rect x="53.7171%" y="1013" width="0.0215%" height="15" fill="rgb(240,128,52)" fg:x="4993" fg:w="2"/><text x="53.9671%" y="1023.50"></text></g><g><title>0x11000b07c (1 samples, 0.01%)</title><rect x="53.7386%" y="1013" width="0.0108%" height="15" fill="rgb(253,114,12)" fg:x="4995" fg:w="1"/><text x="53.9886%" y="1023.50"></text></g><g><title>0x11000b0bc (1 samples, 0.01%)</title><rect x="53.7493%" y="1013" width="0.0108%" height="15" fill="rgb(215,223,47)" fg:x="4996" fg:w="1"/><text x="53.9993%" y="1023.50"></text></g><g><title>0x11000b144 (5 samples, 0.05%)</title><rect x="53.7601%" y="1013" width="0.0538%" height="15" fill="rgb(248,225,23)" fg:x="4997" fg:w="5"/><text x="54.0101%" y="1023.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write::call (5 samples, 0.05%)</title><rect x="53.8139%" y="997" width="0.0538%" height="15" fill="rgb(250,108,0)" fg:x="5002" fg:w="5"/><text x="54.0639%" y="1007.50"></text></g><g><title>deno`&lt;T as core::any::Any&gt;::type_id (2 samples, 0.02%)</title><rect x="53.8784%" y="981" width="0.0215%" height="15" fill="rgb(228,208,7)" fg:x="5008" fg:w="2"/><text x="54.1284%" y="991.50"></text></g><g><title>deno`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (7 samples, 0.08%)</title><rect x="53.8999%" y="981" width="0.0753%" height="15" fill="rgb(244,45,10)" fg:x="5010" fg:w="7"/><text x="54.1499%" y="991.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="54.2227%" y="965" width="0.0108%" height="15" fill="rgb(207,125,25)" fg:x="5040" fg:w="1"/><text x="54.4727%" y="975.50"></text></g><g><title>deno`DYLD-STUB$$memmove (2 samples, 0.02%)</title><rect x="54.2335%" y="965" width="0.0215%" height="15" fill="rgb(210,195,18)" fg:x="5041" fg:w="2"/><text x="54.4835%" y="975.50"></text></g><g><title>deno`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (12 samples, 0.13%)</title><rect x="54.2550%" y="965" width="0.1291%" height="15" fill="rgb(249,80,12)" fg:x="5043" fg:w="12"/><text x="54.5050%" y="975.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="54.4164%" y="949" width="0.0108%" height="15" fill="rgb(221,65,9)" fg:x="5058" fg:w="1"/><text x="54.6664%" y="959.50"></text></g><g><title>deno`DYLD-STUB$$send (7 samples, 0.08%)</title><rect x="54.4271%" y="949" width="0.0753%" height="15" fill="rgb(235,49,36)" fg:x="5059" fg:w="7"/><text x="54.6771%" y="959.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (7 samples, 0.08%)</title><rect x="54.5024%" y="949" width="0.0753%" height="15" fill="rgb(225,32,20)" fg:x="5066" fg:w="7"/><text x="54.7524%" y="959.50"></text></g><g><title>libsystem_c.dylib`send (1 samples, 0.01%)</title><rect x="54.5777%" y="949" width="0.0108%" height="15" fill="rgb(215,141,46)" fg:x="5073" fg:w="1"/><text x="54.8277%" y="959.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (3,937 samples, 42.36%)</title><rect x="54.3841%" y="965" width="42.3561%" height="15" fill="rgb(250,160,47)" fg:x="5055" fg:w="3937"/><text x="54.6341%" y="975.50">deno`tokio::net::tcp::stream::TcpStream::try_write</text></g><g><title>libsystem_kernel.dylib`__sendto (3,918 samples, 42.15%)</title><rect x="54.5885%" y="949" width="42.1517%" height="15" fill="rgb(216,222,40)" fg:x="5074" fg:w="3918"/><text x="54.8385%" y="959.50">libsystem_kernel.dylib`__sendto</text></g><g><title>deno`deno_flash2::op_flash_try_write::call (3,981 samples, 42.83%)</title><rect x="53.9753%" y="981" width="42.8295%" height="15" fill="rgb(234,217,39)" fg:x="5017" fg:w="3981"/><text x="54.2253%" y="991.50">deno`deno_flash2::op_flash_try_write::call</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.06%)</title><rect x="96.7402%" y="965" width="0.0646%" height="15" fill="rgb(207,178,40)" fg:x="8992" fg:w="6"/><text x="96.9902%" y="975.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (2 samples, 0.02%)</title><rect x="96.8047%" y="981" width="0.0215%" height="15" fill="rgb(221,136,13)" fg:x="8998" fg:w="2"/><text x="97.0547%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.04%)</title><rect x="96.9446%" y="965" width="0.0430%" height="15" fill="rgb(249,199,10)" fg:x="9011" fg:w="4"/><text x="97.1946%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.17%)</title><rect x="96.8263%" y="981" width="0.1721%" height="15" fill="rgb(249,222,13)" fg:x="9000" fg:w="16"/><text x="97.0763%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="96.9876%" y="965" width="0.0108%" height="15" fill="rgb(244,185,38)" fg:x="9015" fg:w="1"/><text x="97.2376%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="96.9984%" y="981" width="0.0215%" height="15" fill="rgb(236,202,9)" fg:x="9016" fg:w="2"/><text x="97.2484%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.06%)</title><rect x="97.0199%" y="981" width="0.0646%" height="15" fill="rgb(250,229,37)" fg:x="9018" fg:w="6"/><text x="97.2699%" y="991.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write_fast_fn (4,020 samples, 43.25%)</title><rect x="53.8677%" y="997" width="43.2491%" height="15" fill="rgb(206,174,23)" fg:x="5007" fg:w="4020"/><text x="54.1177%" y="1007.50">deno`deno_flash2::op_flash_try_write_fast_fn</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="97.0845%" y="981" width="0.0323%" height="15" fill="rgb(211,33,43)" fg:x="9024" fg:w="3"/><text x="97.3345%" y="991.50"></text></g><g><title>deno`v8::External::Value (4 samples, 0.04%)</title><rect x="97.1167%" y="997" width="0.0430%" height="15" fill="rgb(245,58,50)" fg:x="9027" fg:w="4"/><text x="97.3667%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="97.1598%" y="997" width="0.0215%" height="15" fill="rgb(244,68,36)" fg:x="9031" fg:w="2"/><text x="97.4098%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="97.1813%" y="997" width="0.0215%" height="15" fill="rgb(232,229,15)" fg:x="9033" fg:w="2"/><text x="97.4313%" y="1007.50"></text></g><g><title>0x11000b14c (4,035 samples, 43.41%)</title><rect x="53.8139%" y="1013" width="43.4104%" height="15" fill="rgb(254,30,23)" fg:x="5002" fg:w="4035"/><text x="54.0639%" y="1023.50">0x11000b14c</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="97.2028%" y="997" width="0.0215%" height="15" fill="rgb(235,160,14)" fg:x="9035" fg:w="2"/><text x="97.4528%" y="1007.50"></text></g><g><title>0x11000b160 (1 samples, 0.01%)</title><rect x="97.2243%" y="1013" width="0.0108%" height="15" fill="rgb(212,155,44)" fg:x="9037" fg:w="1"/><text x="97.4743%" y="1023.50"></text></g><g><title>0x11000b178 (1 samples, 0.01%)</title><rect x="97.2351%" y="1013" width="0.0108%" height="15" fill="rgb(226,2,50)" fg:x="9038" fg:w="1"/><text x="97.4851%" y="1023.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (10 samples, 0.11%)</title><rect x="97.2458%" y="997" width="0.1076%" height="15" fill="rgb(234,177,6)" fg:x="9039" fg:w="10"/><text x="97.4958%" y="1007.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (4 samples, 0.04%)</title><rect x="97.3534%" y="997" width="0.0430%" height="15" fill="rgb(217,24,9)" fg:x="9049" fg:w="4"/><text x="97.6034%" y="1007.50"></text></g><g><title>deno`Builtins_LoadIC (15 samples, 0.16%)</title><rect x="97.3964%" y="997" width="0.1614%" height="15" fill="rgb(220,13,46)" fg:x="9053" fg:w="15"/><text x="97.6464%" y="1007.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeByteLength (2 samples, 0.02%)</title><rect x="97.5363%" y="981" width="0.0215%" height="15" fill="rgb(239,221,27)" fg:x="9066" fg:w="2"/><text x="97.7863%" y="991.50"></text></g><g><title>0x11000b1a0 (31 samples, 0.33%)</title><rect x="97.2458%" y="1013" width="0.3335%" height="15" fill="rgb(222,198,25)" fg:x="9039" fg:w="31"/><text x="97.4958%" y="1023.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeByteLength (2 samples, 0.02%)</title><rect x="97.5578%" y="997" width="0.0215%" height="15" fill="rgb(211,99,13)" fg:x="9068" fg:w="2"/><text x="97.8078%" y="1007.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (16 samples, 0.17%)</title><rect x="97.5793%" y="933" width="0.1721%" height="15" fill="rgb(232,111,31)" fg:x="9070" fg:w="16"/><text x="97.8293%" y="943.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write::call (16 samples, 0.17%)</title><rect x="97.5793%" y="917" width="0.1721%" height="15" fill="rgb(245,82,37)" fg:x="9070" fg:w="16"/><text x="97.8293%" y="927.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (16 samples, 0.17%)</title><rect x="97.5793%" y="901" width="0.1721%" height="15" fill="rgb(227,149,46)" fg:x="9070" fg:w="16"/><text x="97.8293%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (16 samples, 0.17%)</title><rect x="97.5793%" y="885" width="0.1721%" height="15" fill="rgb(218,36,50)" fg:x="9070" fg:w="16"/><text x="97.8293%" y="895.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (17 samples, 0.18%)</title><rect x="97.5793%" y="1013" width="0.1829%" height="15" fill="rgb(226,80,48)" fg:x="9070" fg:w="17"/><text x="97.8293%" y="1023.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (17 samples, 0.18%)</title><rect x="97.5793%" y="997" width="0.1829%" height="15" fill="rgb(238,224,15)" fg:x="9070" fg:w="17"/><text x="97.8293%" y="1007.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (17 samples, 0.18%)</title><rect x="97.5793%" y="981" width="0.1829%" height="15" fill="rgb(241,136,10)" fg:x="9070" fg:w="17"/><text x="97.8293%" y="991.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (17 samples, 0.18%)</title><rect x="97.5793%" y="965" width="0.1829%" height="15" fill="rgb(208,32,45)" fg:x="9070" fg:w="17"/><text x="97.8293%" y="975.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (17 samples, 0.18%)</title><rect x="97.5793%" y="949" width="0.1829%" height="15" fill="rgb(207,135,9)" fg:x="9070" fg:w="17"/><text x="97.8293%" y="959.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="97.7515%" y="933" width="0.0108%" height="15" fill="rgb(206,86,44)" fg:x="9086" fg:w="1"/><text x="98.0015%" y="943.50"></text></g><g><title>deno`Builtins_LoadIC (8 samples, 0.09%)</title><rect x="97.7622%" y="1013" width="0.0861%" height="15" fill="rgb(245,177,15)" fg:x="9087" fg:w="8"/><text x="98.0122%" y="1023.50"></text></g><g><title>deno`Builtins_JSEntry (4,134 samples, 44.48%)</title><rect x="53.4158%" y="1045" width="44.4755%" height="15" fill="rgb(206,64,50)" fg:x="4965" fg:w="4134"/><text x="53.6658%" y="1055.50">deno`Builtins_JSEntry</text></g><g><title>deno`Builtins_JSEntryTrampoline (4,116 samples, 44.28%)</title><rect x="53.6095%" y="1029" width="44.2819%" height="15" fill="rgb(234,36,40)" fg:x="4983" fg:w="4116"/><text x="53.8595%" y="1039.50">deno`Builtins_JSEntryTrampoline</text></g><g><title>deno`deno_flash2::op_flash_try_write_fast_fn (4 samples, 0.04%)</title><rect x="97.8483%" y="1013" width="0.0430%" height="15" fill="rgb(213,64,8)" fg:x="9095" fg:w="4"/><text x="98.0983%" y="1023.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.01%)</title><rect x="97.8913%" y="1045" width="0.0108%" height="15" fill="rgb(210,75,36)" fg:x="9099" fg:w="1"/><text x="98.1413%" y="1055.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (4,184 samples, 45.01%)</title><rect x="52.9317%" y="1061" width="45.0134%" height="15" fill="rgb(229,88,21)" fg:x="4920" fg:w="4184"/><text x="53.1817%" y="1071.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v..</text></g><g><title>deno`v8::internal::SaveContext::SaveContext (4 samples, 0.04%)</title><rect x="97.9021%" y="1045" width="0.0430%" height="15" fill="rgb(252,204,47)" fg:x="9100" fg:w="4"/><text x="98.1521%" y="1055.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (1 samples, 0.01%)</title><rect x="97.9451%" y="1061" width="0.0108%" height="15" fill="rgb(208,77,27)" fg:x="9104" fg:w="1"/><text x="98.1951%" y="1071.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (1 samples, 0.01%)</title><rect x="97.9559%" y="1061" width="0.0108%" height="15" fill="rgb(221,76,26)" fg:x="9105" fg:w="1"/><text x="98.2059%" y="1071.50"></text></g><g><title>deno`v8::internal::DumpOnJavascriptExecution::IsAllowed (5 samples, 0.05%)</title><rect x="97.9666%" y="1061" width="0.0538%" height="15" fill="rgb(225,139,18)" fg:x="9106" fg:w="5"/><text x="98.2166%" y="1071.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (1 samples, 0.01%)</title><rect x="98.0204%" y="1061" width="0.0108%" height="15" fill="rgb(230,137,11)" fg:x="9111" fg:w="1"/><text x="98.2704%" y="1071.50"></text></g><g><title>deno`v8::internal::SaveContext::~SaveContext (1 samples, 0.01%)</title><rect x="98.0312%" y="1061" width="0.0108%" height="15" fill="rgb(212,28,1)" fg:x="9112" fg:w="1"/><text x="98.2812%" y="1071.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (1 samples, 0.01%)</title><rect x="98.0420%" y="1061" width="0.0108%" height="15" fill="rgb(248,164,17)" fg:x="9113" fg:w="1"/><text x="98.2920%" y="1071.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (4,209 samples, 45.28%)</title><rect x="52.8026%" y="1077" width="45.2824%" height="15" fill="rgb(222,171,42)" fg:x="4908" fg:w="4209"/><text x="53.0526%" y="1087.50">deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::H..</text></g><g><title>deno`v8::internal::ThrowOnJavascriptExecution::IsAllowed (3 samples, 0.03%)</title><rect x="98.0527%" y="1061" width="0.0323%" height="15" fill="rgb(243,84,45)" fg:x="9114" fg:w="3"/><text x="98.3027%" y="1071.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.01%)</title><rect x="98.0850%" y="1077" width="0.0108%" height="15" fill="rgb(252,49,23)" fg:x="9117" fg:w="1"/><text x="98.3350%" y="1087.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (1 samples, 0.01%)</title><rect x="98.1280%" y="1061" width="0.0108%" height="15" fill="rgb(215,19,7)" fg:x="9121" fg:w="1"/><text x="98.3780%" y="1071.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (13 samples, 0.14%)</title><rect x="98.1388%" y="1061" width="0.1399%" height="15" fill="rgb(238,81,41)" fg:x="9122" fg:w="13"/><text x="98.3888%" y="1071.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (9 samples, 0.10%)</title><rect x="98.1818%" y="1045" width="0.0968%" height="15" fill="rgb(210,199,37)" fg:x="9126" fg:w="9"/><text x="98.4318%" y="1055.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (20 samples, 0.22%)</title><rect x="98.0958%" y="1077" width="0.2152%" height="15" fill="rgb(244,192,49)" fg:x="9118" fg:w="20"/><text x="98.3458%" y="1087.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (3 samples, 0.03%)</title><rect x="98.2786%" y="1061" width="0.0323%" height="15" fill="rgb(226,211,11)" fg:x="9135" fg:w="3"/><text x="98.5286%" y="1071.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (4,280 samples, 46.05%)</title><rect x="52.3185%" y="1093" width="46.0463%" height="15" fill="rgb(236,162,54)" fg:x="4863" fg:w="4280"/><text x="52.5685%" y="1103.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v..</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (5 samples, 0.05%)</title><rect x="98.3109%" y="1077" width="0.0538%" height="15" fill="rgb(220,229,9)" fg:x="9138" fg:w="5"/><text x="98.5609%" y="1087.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (10 samples, 0.11%)</title><rect x="98.3647%" y="1093" width="0.1076%" height="15" fill="rgb(250,87,22)" fg:x="9143" fg:w="10"/><text x="98.6147%" y="1103.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (6 samples, 0.06%)</title><rect x="98.4077%" y="1077" width="0.0646%" height="15" fill="rgb(239,43,17)" fg:x="9147" fg:w="6"/><text x="98.6577%" y="1087.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (3 samples, 0.03%)</title><rect x="98.4723%" y="1093" width="0.0323%" height="15" fill="rgb(231,177,25)" fg:x="9153" fg:w="3"/><text x="98.7223%" y="1103.50"></text></g><g><title>deno`v8::Integer::New (16 samples, 0.17%)</title><rect x="98.5046%" y="1093" width="0.1721%" height="15" fill="rgb(219,179,1)" fg:x="9156" fg:w="16"/><text x="98.7546%" y="1103.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (6 samples, 0.06%)</title><rect x="98.6767%" y="1093" width="0.0646%" height="15" fill="rgb(238,219,53)" fg:x="9172" fg:w="6"/><text x="98.9267%" y="1103.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (6 samples, 0.06%)</title><rect x="98.7413%" y="1093" width="0.0646%" height="15" fill="rgb(232,167,36)" fg:x="9178" fg:w="6"/><text x="98.9913%" y="1103.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (2 samples, 0.02%)</title><rect x="98.8058%" y="1093" width="0.0215%" height="15" fill="rgb(244,19,51)" fg:x="9184" fg:w="2"/><text x="99.0558%" y="1103.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (5 samples, 0.05%)</title><rect x="98.8273%" y="1093" width="0.0538%" height="15" fill="rgb(224,6,22)" fg:x="9186" fg:w="5"/><text x="99.0773%" y="1103.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (6 samples, 0.06%)</title><rect x="98.8811%" y="1093" width="0.0646%" height="15" fill="rgb(224,145,5)" fg:x="9191" fg:w="6"/><text x="99.1311%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="99.0102%" y="1077" width="0.0215%" height="15" fill="rgb(234,130,49)" fg:x="9203" fg:w="2"/><text x="99.2602%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.14%)</title><rect x="99.0963%" y="1061" width="0.1399%" height="15" fill="rgb(254,6,2)" fg:x="9211" fg:w="13"/><text x="99.3463%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="99.2146%" y="1045" width="0.0215%" height="15" fill="rgb(208,96,46)" fg:x="9222" fg:w="2"/><text x="99.4646%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.30%)</title><rect x="98.9457%" y="1093" width="0.3012%" height="15" fill="rgb(239,3,39)" fg:x="9197" fg:w="28"/><text x="99.1957%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.22%)</title><rect x="99.0317%" y="1077" width="0.2152%" height="15" fill="rgb(233,210,1)" fg:x="9205" fg:w="20"/><text x="99.2817%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="99.2361%" y="1061" width="0.0108%" height="15" fill="rgb(244,137,37)" fg:x="9224" fg:w="1"/><text x="99.4861%" y="1071.50"></text></g><g><title>deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (8,333 samples, 89.65%)</title><rect x="9.6073%" y="1109" width="89.6503%" height="15" fill="rgb(240,136,2)" fg:x="893" fg:w="8333"/><text x="9.8573%" y="1119.50">deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.01%)</title><rect x="99.2469%" y="1093" width="0.0108%" height="15" fill="rgb(239,18,37)" fg:x="9225" fg:w="1"/><text x="99.4969%" y="1103.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_idle (3 samples, 0.03%)</title><rect x="99.2577%" y="1109" width="0.0323%" height="15" fill="rgb(218,185,22)" fg:x="9226" fg:w="3"/><text x="99.5077%" y="1119.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_running (2 samples, 0.02%)</title><rect x="99.2899%" y="1109" width="0.0215%" height="15" fill="rgb(225,218,4)" fg:x="9229" fg:w="2"/><text x="99.5399%" y="1119.50"></text></g><g><title>deno`v8::Context::Enter (8 samples, 0.09%)</title><rect x="99.3115%" y="1109" width="0.0861%" height="15" fill="rgb(230,182,32)" fg:x="9231" fg:w="8"/><text x="99.5615%" y="1119.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (3 samples, 0.03%)</title><rect x="99.3975%" y="1109" width="0.0323%" height="15" fill="rgb(242,56,43)" fg:x="9239" fg:w="3"/><text x="99.6475%" y="1119.50"></text></g><g><title>deno`v8::Integer::New (7 samples, 0.08%)</title><rect x="99.4298%" y="1109" width="0.0753%" height="15" fill="rgb(233,99,24)" fg:x="9242" fg:w="7"/><text x="99.6798%" y="1119.50"></text></g><g><title>deno`v8__Integer__New (4 samples, 0.04%)</title><rect x="99.5051%" y="1109" width="0.0430%" height="15" fill="rgb(234,209,42)" fg:x="9249" fg:w="4"/><text x="99.7551%" y="1119.50"></text></g><g><title>deno`v8__Undefined (4 samples, 0.04%)</title><rect x="99.5481%" y="1109" width="0.0430%" height="15" fill="rgb(227,7,12)" fg:x="9253" fg:w="4"/><text x="99.7981%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.06%)</title><rect x="99.5912%" y="1109" width="0.0646%" height="15" fill="rgb(245,203,43)" fg:x="9257" fg:w="6"/><text x="99.8412%" y="1119.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (8,389 samples, 90.25%)</title><rect x="9.4137%" y="1125" width="90.2528%" height="15" fill="rgb(238,205,33)" fg:x="875" fg:w="8389"/><text x="9.6637%" y="1135.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.01%)</title><rect x="99.6557%" y="1109" width="0.0108%" height="15" fill="rgb(231,56,7)" fg:x="9263" fg:w="1"/><text x="99.9057%" y="1119.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (1 samples, 0.01%)</title><rect x="99.6665%" y="1125" width="0.0108%" height="15" fill="rgb(244,186,29)" fg:x="9264" fg:w="1"/><text x="99.9165%" y="1135.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (9,222 samples, 99.21%)</title><rect x="0.5917%" y="1141" width="99.2146%" height="15" fill="rgb(234,111,31)" fg:x="55" fg:w="9222"/><text x="0.8417%" y="1151.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.13%)</title><rect x="99.6772%" y="1125" width="0.1291%" height="15" fill="rgb(241,149,10)" fg:x="9265" fg:w="12"/><text x="99.9272%" y="1135.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Spawner::pop (2 samples, 0.02%)</title><rect x="99.8063%" y="1141" width="0.0215%" height="15" fill="rgb(249,206,44)" fg:x="9277" fg:w="2"/><text x="100.0563%" y="1151.50"></text></g><g><title>deno`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::assert_owner (1 samples, 0.01%)</title><rect x="99.8279%" y="1141" width="0.0108%" height="15" fill="rgb(251,153,30)" fg:x="9279" fg:w="1"/><text x="100.0779%" y="1151.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (1 samples, 0.01%)</title><rect x="99.8386%" y="1141" width="0.0108%" height="15" fill="rgb(239,152,38)" fg:x="9280" fg:w="1"/><text x="100.0886%" y="1151.50"></text></g><g><title>dyld`start (9,292 samples, 99.97%)</title><rect x="0.0000%" y="1205" width="99.9677%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="9292"/><text x="0.2500%" y="1215.50">dyld`start</text></g><g><title>deno`main (9,292 samples, 99.97%)</title><rect x="0.0000%" y="1189" width="99.9677%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="9292"/><text x="0.2500%" y="1199.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (9,292 samples, 99.97%)</title><rect x="0.0000%" y="1173" width="99.9677%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="9292"/><text x="0.2500%" y="1183.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (9,292 samples, 99.97%)</title><rect x="0.0000%" y="1157" width="99.9677%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="9292"/><text x="0.2500%" y="1167.50">deno`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.12%)</title><rect x="99.8494%" y="1141" width="0.1183%" height="15" fill="rgb(249,42,33)" fg:x="9281" fg:w="11"/><text x="100.0994%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (1 samples, 0.01%)</title><rect x="99.9677%" y="1077" width="0.0108%" height="15" fill="rgb(242,149,17)" fg:x="9292" fg:w="1"/><text x="100.2177%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (1 samples, 0.01%)</title><rect x="99.9677%" y="1061" width="0.0108%" height="15" fill="rgb(244,29,21)" fg:x="9292" fg:w="1"/><text x="100.2177%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (1 samples, 0.01%)</title><rect x="99.9677%" y="1045" width="0.0108%" height="15" fill="rgb(220,130,37)" fg:x="9292" fg:w="1"/><text x="100.2177%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="99.9677%" y="1029" width="0.0108%" height="15" fill="rgb(211,67,2)" fg:x="9292" fg:w="1"/><text x="100.2177%" y="1039.50"></text></g><g><title>deno`std::__1::deque&lt;v8::internal::compiler::GraphReducer::NodeState, v8::internal::RecyclingZoneAllocator&lt;v8::internal::compiler::GraphReducer::NodeState&gt; &gt;::__add_back_capacity (1 samples, 0.01%)</title><rect x="99.9677%" y="1013" width="0.0108%" height="15" fill="rgb(235,68,52)" fg:x="9292" fg:w="1"/><text x="100.2177%" y="1023.50"></text></g><g><title>deno`v8::base::ThreadEntry (2 samples, 0.02%)</title><rect x="99.9677%" y="1173" width="0.0215%" height="15" fill="rgb(246,142,3)" fg:x="9292" fg:w="2"/><text x="100.2177%" y="1183.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (2 samples, 0.02%)</title><rect x="99.9677%" y="1157" width="0.0215%" height="15" fill="rgb(241,25,7)" fg:x="9292" fg:w="2"/><text x="100.2177%" y="1167.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (2 samples, 0.02%)</title><rect x="99.9677%" y="1141" width="0.0215%" height="15" fill="rgb(242,119,39)" fg:x="9292" fg:w="2"/><text x="100.2177%" y="1151.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (2 samples, 0.02%)</title><rect x="99.9677%" y="1125" width="0.0215%" height="15" fill="rgb(241,98,45)" fg:x="9292" fg:w="2"/><text x="100.2177%" y="1135.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (2 samples, 0.02%)</title><rect x="99.9677%" y="1109" width="0.0215%" height="15" fill="rgb(254,28,30)" fg:x="9292" fg:w="2"/><text x="100.2177%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (2 samples, 0.02%)</title><rect x="99.9677%" y="1093" width="0.0215%" height="15" fill="rgb(241,142,54)" fg:x="9292" fg:w="2"/><text x="100.2177%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (1 samples, 0.01%)</title><rect x="99.9785%" y="1077" width="0.0108%" height="15" fill="rgb(222,85,15)" fg:x="9293" fg:w="1"/><text x="100.2285%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (1 samples, 0.01%)</title><rect x="99.9785%" y="1061" width="0.0108%" height="15" fill="rgb(210,85,47)" fg:x="9293" fg:w="1"/><text x="100.2285%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (1 samples, 0.01%)</title><rect x="99.9785%" y="1045" width="0.0108%" height="15" fill="rgb(224,206,25)" fg:x="9293" fg:w="1"/><text x="100.2285%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (1 samples, 0.01%)</title><rect x="99.9785%" y="1029" width="0.0108%" height="15" fill="rgb(243,201,19)" fg:x="9293" fg:w="1"/><text x="100.2285%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (1 samples, 0.01%)</title><rect x="99.9785%" y="1013" width="0.0108%" height="15" fill="rgb(236,59,4)" fg:x="9293" fg:w="1"/><text x="100.2285%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (1 samples, 0.01%)</title><rect x="99.9785%" y="997" width="0.0108%" height="15" fill="rgb(254,179,45)" fg:x="9293" fg:w="1"/><text x="100.2285%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::SplitNode (1 samples, 0.01%)</title><rect x="99.9785%" y="981" width="0.0108%" height="15" fill="rgb(226,14,10)" fg:x="9293" fg:w="1"/><text x="100.2285%" y="991.50"></text></g><g><title>deno`std::__1::deque&lt;v8::internal::compiler::BasicBlock*, v8::internal::RecyclingZoneAllocator&lt;v8::internal::compiler::BasicBlock*&gt; &gt;::__add_back_capacity (1 samples, 0.01%)</title><rect x="99.9785%" y="965" width="0.0108%" height="15" fill="rgb(244,27,41)" fg:x="9293" fg:w="1"/><text x="100.2285%" y="975.50"></text></g><g><title>all (9,295 samples, 100%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(235,35,32)" fg:x="0" fg:w="9295"/><text x="0.2500%" y="1231.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3 samples, 0.03%)</title><rect x="99.9677%" y="1205" width="0.0323%" height="15" fill="rgb(218,68,31)" fg:x="9292" fg:w="3"/><text x="100.2177%" y="1215.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (3 samples, 0.03%)</title><rect x="99.9677%" y="1189" width="0.0323%" height="15" fill="rgb(207,120,37)" fg:x="9292" fg:w="3"/><text x="100.2177%" y="1199.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.01%)</title><rect x="99.9892%" y="1173" width="0.0108%" height="15" fill="rgb(227,98,0)" fg:x="9294" fg:w="1"/><text x="100.2392%" y="1183.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (1 samples, 0.01%)</title><rect x="99.9892%" y="1157" width="0.0108%" height="15" fill="rgb(207,7,3)" fg:x="9294" fg:w="1"/><text x="100.2392%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="99.9892%" y="1141" width="0.0108%" height="15" fill="rgb(206,98,19)" fg:x="9294" fg:w="1"/><text x="100.2392%" y="1151.50"></text></g></svg></svg>