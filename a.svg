<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="613.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="14917"><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.0000%" y="501" width="0.0134%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_17075 (2 samples, 0.01%)</title><rect x="0.0201%" y="501" width="0.0134%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="2"/><text x="0.2701%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_19448 (2 samples, 0.01%)</title><rect x="0.0335%" y="501" width="0.0134%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="2"/><text x="0.2835%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_22075 (3 samples, 0.02%)</title><rect x="0.0469%" y="501" width="0.0201%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="3"/><text x="0.2969%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3570 (2 samples, 0.01%)</title><rect x="0.0737%" y="501" width="0.0134%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="2"/><text x="0.3237%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36612 (2 samples, 0.01%)</title><rect x="0.0871%" y="501" width="0.0134%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="2"/><text x="0.3371%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_447 (2 samples, 0.01%)</title><rect x="0.1006%" y="501" width="0.0134%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="2"/><text x="0.3506%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_5949 (2 samples, 0.01%)</title><rect x="0.1140%" y="501" width="0.0134%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="2"/><text x="0.3640%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_8437 (5 samples, 0.03%)</title><rect x="0.1341%" y="501" width="0.0335%" height="15" fill="rgb(218,30,26)" fg:x="20" fg:w="5"/><text x="0.3841%" y="511.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.01%)</title><rect x="0.1810%" y="501" width="0.0134%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="2"/><text x="0.4310%" y="511.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.01%)</title><rect x="0.1944%" y="501" width="0.0134%" height="15" fill="rgb(250,228,42)" fg:x="29" fg:w="2"/><text x="0.4444%" y="511.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.03%)</title><rect x="0.3553%" y="469" width="0.0268%" height="15" fill="rgb(240,193,28)" fg:x="53" fg:w="4"/><text x="0.6053%" y="479.50"></text></g><g><title>deno`&lt;tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set::Reset as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="0.3821%" y="469" width="0.0134%" height="15" fill="rgb(216,20,37)" fg:x="57" fg:w="2"/><text x="0.6321%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.01%)</title><rect x="0.3821%" y="453" width="0.0134%" height="15" fill="rgb(206,188,39)" fg:x="57" fg:w="2"/><text x="0.6321%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6577 (2 samples, 0.01%)</title><rect x="0.4022%" y="469" width="0.0134%" height="15" fill="rgb(217,207,13)" fg:x="60" fg:w="2"/><text x="0.6522%" y="479.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.4760%" y="437" width="0.0134%" height="15" fill="rgb(231,73,38)" fg:x="71" fg:w="2"/><text x="0.7260%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_23484 (2 samples, 0.01%)</title><rect x="0.5028%" y="437" width="0.0134%" height="15" fill="rgb(225,20,46)" fg:x="75" fg:w="2"/><text x="0.7528%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6710 (2 samples, 0.01%)</title><rect x="0.5162%" y="437" width="0.0134%" height="15" fill="rgb(210,31,41)" fg:x="77" fg:w="2"/><text x="0.7662%" y="447.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="0.7106%" y="373" width="0.0134%" height="15" fill="rgb(221,200,47)" fg:x="106" fg:w="2"/><text x="0.9606%" y="383.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (2 samples, 0.01%)</title><rect x="0.7441%" y="373" width="0.0134%" height="15" fill="rgb(226,26,5)" fg:x="111" fg:w="2"/><text x="0.9941%" y="383.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (4 samples, 0.03%)</title><rect x="0.7709%" y="373" width="0.0268%" height="15" fill="rgb(249,33,26)" fg:x="115" fg:w="4"/><text x="1.0209%" y="383.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (2 samples, 0.01%)</title><rect x="0.7977%" y="373" width="0.0134%" height="15" fill="rgb(235,183,28)" fg:x="119" fg:w="2"/><text x="1.0477%" y="383.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (2 samples, 0.01%)</title><rect x="0.8112%" y="373" width="0.0134%" height="15" fill="rgb(221,5,38)" fg:x="121" fg:w="2"/><text x="1.0612%" y="383.50"></text></g><g><title>deno`v8__Global__New (2 samples, 0.01%)</title><rect x="1.1598%" y="341" width="0.0134%" height="15" fill="rgb(247,18,42)" fg:x="173" fg:w="2"/><text x="1.4098%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="1.1732%" y="341" width="0.0335%" height="15" fill="rgb(241,131,45)" fg:x="175" fg:w="5"/><text x="1.4232%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="1.1866%" y="325" width="0.0201%" height="15" fill="rgb(249,31,29)" fg:x="177" fg:w="3"/><text x="1.4366%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="1.1866%" y="309" width="0.0201%" height="15" fill="rgb(225,111,53)" fg:x="177" fg:w="3"/><text x="1.4366%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="1.1933%" y="293" width="0.0134%" height="15" fill="rgb(238,160,17)" fg:x="178" fg:w="2"/><text x="1.4433%" y="303.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.07%)</title><rect x="1.1463%" y="357" width="0.0670%" height="15" fill="rgb(214,148,48)" fg:x="171" fg:w="10"/><text x="1.3963%" y="367.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (3 samples, 0.02%)</title><rect x="1.3542%" y="341" width="0.0201%" height="15" fill="rgb(232,36,49)" fg:x="202" fg:w="3"/><text x="1.6042%" y="351.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_flash::op_flash_next_async::call::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="1.3810%" y="341" width="0.0134%" height="15" fill="rgb(209,103,24)" fg:x="206" fg:w="2"/><text x="1.6310%" y="351.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.05%)</title><rect x="1.4011%" y="341" width="0.0469%" height="15" fill="rgb(229,88,8)" fg:x="209" fg:w="7"/><text x="1.6511%" y="351.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (4 samples, 0.03%)</title><rect x="1.4212%" y="325" width="0.0268%" height="15" fill="rgb(213,181,19)" fg:x="212" fg:w="4"/><text x="1.6712%" y="335.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (9 samples, 0.06%)</title><rect x="1.4480%" y="341" width="0.0603%" height="15" fill="rgb(254,191,54)" fg:x="216" fg:w="9"/><text x="1.6980%" y="351.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (13 samples, 0.09%)</title><rect x="1.5083%" y="341" width="0.0871%" height="15" fill="rgb(241,83,37)" fg:x="225" fg:w="13"/><text x="1.7583%" y="351.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (59 samples, 0.40%)</title><rect x="1.2134%" y="357" width="0.3955%" height="15" fill="rgb(233,36,39)" fg:x="181" fg:w="59"/><text x="1.4634%" y="367.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="1.6089%" y="357" width="0.0134%" height="15" fill="rgb(226,3,54)" fg:x="240" fg:w="2"/><text x="1.8589%" y="367.50"></text></g><g><title>deno`&lt;v8::V8::GLOBAL_STATE as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="1.6223%" y="357" width="0.0134%" height="15" fill="rgb(245,192,40)" fg:x="242" fg:w="2"/><text x="1.8723%" y="367.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (4 samples, 0.03%)</title><rect x="1.6357%" y="357" width="0.0268%" height="15" fill="rgb(238,167,29)" fg:x="244" fg:w="4"/><text x="1.8857%" y="367.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (3 samples, 0.02%)</title><rect x="1.6424%" y="341" width="0.0201%" height="15" fill="rgb(232,182,51)" fg:x="245" fg:w="3"/><text x="1.8924%" y="351.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.02%)</title><rect x="1.6424%" y="325" width="0.0201%" height="15" fill="rgb(231,60,39)" fg:x="245" fg:w="3"/><text x="1.8924%" y="335.50"></text></g><g><title>deno`v8::Context::Exit (2 samples, 0.01%)</title><rect x="1.6491%" y="309" width="0.0134%" height="15" fill="rgb(208,69,12)" fg:x="246" fg:w="2"/><text x="1.8991%" y="319.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="1.6625%" y="357" width="0.0134%" height="15" fill="rgb(235,93,37)" fg:x="248" fg:w="2"/><text x="1.9125%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="1.7095%" y="309" width="0.0268%" height="15" fill="rgb(213,116,39)" fg:x="255" fg:w="4"/><text x="1.9595%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="1.7162%" y="293" width="0.0201%" height="15" fill="rgb(222,207,29)" fg:x="256" fg:w="3"/><text x="1.9662%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="1.7229%" y="277" width="0.0134%" height="15" fill="rgb(206,96,30)" fg:x="257" fg:w="2"/><text x="1.9729%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.06%)</title><rect x="1.7363%" y="309" width="0.0603%" height="15" fill="rgb(218,138,4)" fg:x="259" fg:w="9"/><text x="1.9863%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.06%)</title><rect x="1.7363%" y="293" width="0.0603%" height="15" fill="rgb(250,191,14)" fg:x="259" fg:w="9"/><text x="1.9863%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.05%)</title><rect x="1.7497%" y="277" width="0.0469%" height="15" fill="rgb(239,60,40)" fg:x="261" fg:w="7"/><text x="1.9997%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.10%)</title><rect x="1.7028%" y="325" width="0.1006%" height="15" fill="rgb(206,27,48)" fg:x="254" fg:w="15"/><text x="1.9528%" y="335.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (19 samples, 0.13%)</title><rect x="1.6826%" y="341" width="0.1274%" height="15" fill="rgb(225,35,8)" fg:x="251" fg:w="19"/><text x="1.9326%" y="351.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (20 samples, 0.13%)</title><rect x="1.6826%" y="357" width="0.1341%" height="15" fill="rgb(250,213,24)" fg:x="251" fg:w="20"/><text x="1.9326%" y="367.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (3 samples, 0.02%)</title><rect x="1.8301%" y="357" width="0.0201%" height="15" fill="rgb(247,123,22)" fg:x="273" fg:w="3"/><text x="2.0801%" y="367.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.03%)</title><rect x="1.8502%" y="357" width="0.0268%" height="15" fill="rgb(231,138,38)" fg:x="276" fg:w="4"/><text x="2.1002%" y="367.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="1.8771%" y="357" width="0.0201%" height="15" fill="rgb(231,145,46)" fg:x="280" fg:w="3"/><text x="2.1271%" y="367.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="1.8972%" y="357" width="0.0134%" height="15" fill="rgb(251,118,11)" fg:x="283" fg:w="2"/><text x="2.1472%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="1.9106%" y="357" width="0.0134%" height="15" fill="rgb(217,147,25)" fg:x="285" fg:w="2"/><text x="2.1606%" y="367.50"></text></g><g><title>deno`OUTLINED_FUNCTION_10450 (2 samples, 0.01%)</title><rect x="2.0111%" y="341" width="0.0134%" height="15" fill="rgb(247,81,37)" fg:x="300" fg:w="2"/><text x="2.2611%" y="351.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (4 samples, 0.03%)</title><rect x="2.0312%" y="341" width="0.0268%" height="15" fill="rgb(209,12,38)" fg:x="303" fg:w="4"/><text x="2.2812%" y="351.50"></text></g><g><title>deno`futures_task::waker::clone_arc_raw (5 samples, 0.03%)</title><rect x="2.0648%" y="341" width="0.0335%" height="15" fill="rgb(227,1,9)" fg:x="308" fg:w="5"/><text x="2.3148%" y="351.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (24 samples, 0.16%)</title><rect x="1.9575%" y="357" width="0.1609%" height="15" fill="rgb(248,47,43)" fg:x="292" fg:w="24"/><text x="2.2075%" y="367.50"></text></g><g><title>deno`futures_task::waker::drop_arc_raw (3 samples, 0.02%)</title><rect x="2.0983%" y="341" width="0.0201%" height="15" fill="rgb(221,10,30)" fg:x="313" fg:w="3"/><text x="2.3483%" y="351.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (7 samples, 0.05%)</title><rect x="2.1184%" y="357" width="0.0469%" height="15" fill="rgb(210,229,1)" fg:x="316" fg:w="7"/><text x="2.3684%" y="367.50"></text></g><g><title>deno`v8::context::_&lt;impl v8::data::Context&gt;::get_annex_mut (2 samples, 0.01%)</title><rect x="2.1519%" y="341" width="0.0134%" height="15" fill="rgb(222,148,37)" fg:x="321" fg:w="2"/><text x="2.4019%" y="351.50"></text></g><g><title>deno`v8::Context::GetNumberOfEmbedderDataFields (2 samples, 0.01%)</title><rect x="2.1519%" y="325" width="0.0134%" height="15" fill="rgb(234,67,33)" fg:x="321" fg:w="2"/><text x="2.4019%" y="335.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::check_promise_exceptions (5 samples, 0.03%)</title><rect x="2.1653%" y="357" width="0.0335%" height="15" fill="rgb(247,98,35)" fg:x="323" fg:w="5"/><text x="2.4153%" y="367.50"></text></g><g><title>deno`v8::Context::GetNumberOfEmbedderDataFields (2 samples, 0.01%)</title><rect x="2.2860%" y="325" width="0.0134%" height="15" fill="rgb(247,138,52)" fg:x="341" fg:w="2"/><text x="2.5360%" y="335.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (4 samples, 0.03%)</title><rect x="2.2793%" y="341" width="0.0268%" height="15" fill="rgb(213,79,30)" fg:x="340" fg:w="4"/><text x="2.5293%" y="351.50"></text></g><g><title>deno`v8::internal::wasm::GetWasmEngine (7 samples, 0.05%)</title><rect x="2.3195%" y="341" width="0.0469%" height="15" fill="rgb(246,177,23)" fg:x="346" fg:w="7"/><text x="2.5695%" y="351.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (28 samples, 0.19%)</title><rect x="2.2055%" y="357" width="0.1877%" height="15" fill="rgb(230,62,27)" fg:x="329" fg:w="28"/><text x="2.4555%" y="367.50"></text></g><g><title>deno`v8__Global__New (4 samples, 0.03%)</title><rect x="2.3664%" y="341" width="0.0268%" height="15" fill="rgb(216,154,8)" fg:x="353" fg:w="4"/><text x="2.6164%" y="351.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="2.3731%" y="325" width="0.0201%" height="15" fill="rgb(244,35,45)" fg:x="354" fg:w="3"/><text x="2.6231%" y="335.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (2 samples, 0.01%)</title><rect x="2.4335%" y="293" width="0.0134%" height="15" fill="rgb(251,115,12)" fg:x="363" fg:w="2"/><text x="2.6835%" y="303.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (2 samples, 0.01%)</title><rect x="2.4335%" y="277" width="0.0134%" height="15" fill="rgb(240,54,50)" fg:x="363" fg:w="2"/><text x="2.6835%" y="287.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (11 samples, 0.07%)</title><rect x="2.3999%" y="341" width="0.0737%" height="15" fill="rgb(233,84,52)" fg:x="358" fg:w="11"/><text x="2.6499%" y="351.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (9 samples, 0.06%)</title><rect x="2.4134%" y="325" width="0.0603%" height="15" fill="rgb(207,117,47)" fg:x="360" fg:w="9"/><text x="2.6634%" y="335.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (9 samples, 0.06%)</title><rect x="2.4134%" y="309" width="0.0603%" height="15" fill="rgb(249,43,39)" fg:x="360" fg:w="9"/><text x="2.6634%" y="319.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (4 samples, 0.03%)</title><rect x="2.4469%" y="293" width="0.0268%" height="15" fill="rgb(209,38,44)" fg:x="365" fg:w="4"/><text x="2.6969%" y="303.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (4 samples, 0.03%)</title><rect x="2.5139%" y="325" width="0.0268%" height="15" fill="rgb(236,212,23)" fg:x="375" fg:w="4"/><text x="2.7639%" y="335.50"></text></g><g><title>deno`v8__Global__New (5 samples, 0.03%)</title><rect x="2.5474%" y="325" width="0.0335%" height="15" fill="rgb(242,79,21)" fg:x="380" fg:w="5"/><text x="2.7974%" y="335.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (17 samples, 0.11%)</title><rect x="2.4737%" y="341" width="0.1140%" height="15" fill="rgb(211,96,35)" fg:x="369" fg:w="17"/><text x="2.7237%" y="351.50"></text></g><g><title>deno`v8::Context::Enter (2 samples, 0.01%)</title><rect x="2.5877%" y="341" width="0.0134%" height="15" fill="rgb(253,215,40)" fg:x="386" fg:w="2"/><text x="2.8377%" y="351.50"></text></g><g><title>deno`v8::Context::Enter (3 samples, 0.02%)</title><rect x="2.6279%" y="325" width="0.0201%" height="15" fill="rgb(211,81,21)" fg:x="392" fg:w="3"/><text x="2.8779%" y="335.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (2 samples, 0.01%)</title><rect x="2.6346%" y="309" width="0.0134%" height="15" fill="rgb(208,190,38)" fg:x="393" fg:w="2"/><text x="2.8846%" y="319.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (12 samples, 0.08%)</title><rect x="2.6480%" y="325" width="0.0804%" height="15" fill="rgb(235,213,38)" fg:x="395" fg:w="12"/><text x="2.8980%" y="335.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (7 samples, 0.05%)</title><rect x="2.6815%" y="309" width="0.0469%" height="15" fill="rgb(237,122,38)" fg:x="400" fg:w="7"/><text x="2.9315%" y="319.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (18 samples, 0.12%)</title><rect x="2.6145%" y="341" width="0.1207%" height="15" fill="rgb(244,218,35)" fg:x="390" fg:w="18"/><text x="2.8645%" y="351.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (52 samples, 0.35%)</title><rect x="2.3932%" y="357" width="0.3486%" height="15" fill="rgb(240,68,47)" fg:x="357" fg:w="52"/><text x="2.6432%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="2.7485%" y="341" width="0.0134%" height="15" fill="rgb(210,16,53)" fg:x="410" fg:w="2"/><text x="2.9985%" y="351.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (5 samples, 0.03%)</title><rect x="2.7418%" y="357" width="0.0335%" height="15" fill="rgb(235,124,12)" fg:x="409" fg:w="5"/><text x="2.9918%" y="367.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (2 samples, 0.01%)</title><rect x="2.7754%" y="357" width="0.0134%" height="15" fill="rgb(224,169,11)" fg:x="414" fg:w="2"/><text x="3.0254%" y="367.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (21 samples, 0.14%)</title><rect x="2.7888%" y="357" width="0.1408%" height="15" fill="rgb(250,166,2)" fg:x="416" fg:w="21"/><text x="3.0388%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="2.9430%" y="341" width="0.0335%" height="15" fill="rgb(242,216,29)" fg:x="439" fg:w="5"/><text x="3.1930%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="2.9631%" y="325" width="0.0134%" height="15" fill="rgb(230,116,27)" fg:x="442" fg:w="2"/><text x="3.2131%" y="335.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (9 samples, 0.06%)</title><rect x="2.9295%" y="357" width="0.0603%" height="15" fill="rgb(228,99,48)" fg:x="437" fg:w="9"/><text x="3.1795%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="2.9765%" y="341" width="0.0134%" height="15" fill="rgb(253,11,6)" fg:x="444" fg:w="2"/><text x="3.2265%" y="351.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.01%)</title><rect x="2.9899%" y="357" width="0.0134%" height="15" fill="rgb(247,143,39)" fg:x="446" fg:w="2"/><text x="3.2399%" y="367.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (2 samples, 0.01%)</title><rect x="3.0167%" y="357" width="0.0134%" height="15" fill="rgb(236,97,10)" fg:x="450" fg:w="2"/><text x="3.2667%" y="367.50"></text></g><g><title>deno`tokio::util::wake::drop_arc_raw (5 samples, 0.03%)</title><rect x="3.0301%" y="357" width="0.0335%" height="15" fill="rgb(233,208,19)" fg:x="452" fg:w="5"/><text x="3.2801%" y="367.50"></text></g><g><title>deno`DYLD-STUB$$kevent (2 samples, 0.01%)</title><rect x="3.0703%" y="341" width="0.0134%" height="15" fill="rgb(216,164,2)" fg:x="458" fg:w="2"/><text x="3.3203%" y="351.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (92 samples, 0.62%)</title><rect x="3.0636%" y="357" width="0.6167%" height="15" fill="rgb(220,129,5)" fg:x="457" fg:w="92"/><text x="3.3136%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`kevent (89 samples, 0.60%)</title><rect x="3.0837%" y="341" width="0.5966%" height="15" fill="rgb(242,17,10)" fg:x="460" fg:w="89"/><text x="3.3337%" y="351.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (4 samples, 0.03%)</title><rect x="3.6804%" y="357" width="0.0268%" height="15" fill="rgb(242,107,0)" fg:x="549" fg:w="4"/><text x="3.9304%" y="367.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (4 samples, 0.03%)</title><rect x="3.7809%" y="341" width="0.0268%" height="15" fill="rgb(251,28,31)" fg:x="564" fg:w="4"/><text x="4.0309%" y="351.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (4 samples, 0.03%)</title><rect x="3.8077%" y="341" width="0.0268%" height="15" fill="rgb(233,223,10)" fg:x="568" fg:w="4"/><text x="4.0577%" y="351.50"></text></g><g><title>0x110067b00 (4 samples, 0.03%)</title><rect x="3.9753%" y="293" width="0.0268%" height="15" fill="rgb(215,21,27)" fg:x="593" fg:w="4"/><text x="4.2253%" y="303.50"></text></g><g><title>0x1100689c0 (6 samples, 0.04%)</title><rect x="4.0021%" y="293" width="0.0402%" height="15" fill="rgb(232,23,21)" fg:x="597" fg:w="6"/><text x="4.2521%" y="303.50"></text></g><g><title>0x11006ca00 (4 samples, 0.03%)</title><rect x="4.0491%" y="293" width="0.0268%" height="15" fill="rgb(244,5,23)" fg:x="604" fg:w="4"/><text x="4.2991%" y="303.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (2 samples, 0.01%)</title><rect x="4.1563%" y="229" width="0.0134%" height="15" fill="rgb(226,81,46)" fg:x="620" fg:w="2"/><text x="4.4063%" y="239.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (14 samples, 0.09%)</title><rect x="4.1295%" y="261" width="0.0939%" height="15" fill="rgb(247,70,30)" fg:x="616" fg:w="14"/><text x="4.3795%" y="271.50"></text></g><g><title>deno`Builtins_ResolvePromise (10 samples, 0.07%)</title><rect x="4.1563%" y="245" width="0.0670%" height="15" fill="rgb(212,68,19)" fg:x="620" fg:w="10"/><text x="4.4063%" y="255.50"></text></g><g><title>deno`Builtins_FulfillPromise (8 samples, 0.05%)</title><rect x="4.1697%" y="229" width="0.0536%" height="15" fill="rgb(240,187,13)" fg:x="622" fg:w="8"/><text x="4.4197%" y="239.50"></text></g><g><title>0x110067d1c (16 samples, 0.11%)</title><rect x="4.1295%" y="277" width="0.1073%" height="15" fill="rgb(223,113,26)" fg:x="616" fg:w="16"/><text x="4.3795%" y="287.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.01%)</title><rect x="4.2234%" y="261" width="0.0134%" height="15" fill="rgb(206,192,2)" fg:x="630" fg:w="2"/><text x="4.4734%" y="271.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (2 samples, 0.01%)</title><rect x="4.2569%" y="277" width="0.0134%" height="15" fill="rgb(241,108,4)" fg:x="635" fg:w="2"/><text x="4.5069%" y="287.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNotNullOrUndefined (3 samples, 0.02%)</title><rect x="4.2703%" y="277" width="0.0201%" height="15" fill="rgb(247,173,49)" fg:x="637" fg:w="3"/><text x="4.5203%" y="287.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (70 samples, 0.47%)</title><rect x="3.8547%" y="325" width="0.4693%" height="15" fill="rgb(224,114,35)" fg:x="575" fg:w="70"/><text x="4.1047%" y="335.50"></text></g><g><title>deno`Builtins_JSEntry (54 samples, 0.36%)</title><rect x="3.9619%" y="309" width="0.3620%" height="15" fill="rgb(245,159,27)" fg:x="591" fg:w="54"/><text x="4.2119%" y="319.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (36 samples, 0.24%)</title><rect x="4.0826%" y="293" width="0.2413%" height="15" fill="rgb(245,172,44)" fg:x="609" fg:w="36"/><text x="4.3326%" y="303.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (4 samples, 0.03%)</title><rect x="4.2971%" y="277" width="0.0268%" height="15" fill="rgb(236,23,11)" fg:x="641" fg:w="4"/><text x="4.5471%" y="287.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (4 samples, 0.03%)</title><rect x="4.3239%" y="325" width="0.0268%" height="15" fill="rgb(205,117,38)" fg:x="645" fg:w="4"/><text x="4.5739%" y="335.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (81 samples, 0.54%)</title><rect x="3.8413%" y="341" width="0.5430%" height="15" fill="rgb(237,72,25)" fg:x="573" fg:w="81"/><text x="4.0913%" y="351.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (2 samples, 0.01%)</title><rect x="4.3709%" y="325" width="0.0134%" height="15" fill="rgb(244,70,9)" fg:x="652" fg:w="2"/><text x="4.6209%" y="335.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (5 samples, 0.03%)</title><rect x="4.3843%" y="341" width="0.0335%" height="15" fill="rgb(217,125,39)" fg:x="654" fg:w="5"/><text x="4.6343%" y="351.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (4 samples, 0.03%)</title><rect x="4.5317%" y="277" width="0.0268%" height="15" fill="rgb(235,36,10)" fg:x="676" fg:w="4"/><text x="4.7817%" y="287.50"></text></g><g><title>0x110068fa0 (2 samples, 0.01%)</title><rect x="4.9273%" y="213" width="0.0134%" height="15" fill="rgb(251,123,47)" fg:x="735" fg:w="2"/><text x="5.1773%" y="223.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (6 samples, 0.04%)</title><rect x="4.9407%" y="213" width="0.0402%" height="15" fill="rgb(221,13,13)" fg:x="737" fg:w="6"/><text x="5.1907%" y="223.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (5 samples, 0.03%)</title><rect x="4.9809%" y="213" width="0.0335%" height="15" fill="rgb(238,131,9)" fg:x="743" fg:w="5"/><text x="5.2309%" y="223.50"></text></g><g><title>0x11004c1f0 (2 samples, 0.01%)</title><rect x="5.1820%" y="181" width="0.0134%" height="15" fill="rgb(211,50,8)" fg:x="773" fg:w="2"/><text x="5.4320%" y="191.50"></text></g><g><title>0x11004e050 (2 samples, 0.01%)</title><rect x="5.2289%" y="181" width="0.0134%" height="15" fill="rgb(245,182,24)" fg:x="780" fg:w="2"/><text x="5.4789%" y="191.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (2 samples, 0.01%)</title><rect x="5.2423%" y="85" width="0.0134%" height="15" fill="rgb(242,14,37)" fg:x="782" fg:w="2"/><text x="5.4923%" y="95.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (2 samples, 0.01%)</title><rect x="5.2423%" y="69" width="0.0134%" height="15" fill="rgb(246,228,12)" fg:x="782" fg:w="2"/><text x="5.4923%" y="79.50"></text></g><g><title>0x11004e2c8 (3 samples, 0.02%)</title><rect x="5.2423%" y="181" width="0.0201%" height="15" fill="rgb(213,55,15)" fg:x="782" fg:w="3"/><text x="5.4923%" y="191.50"></text></g><g><title>deno`Builtins_StrictEqual_Baseline (3 samples, 0.02%)</title><rect x="5.2423%" y="165" width="0.0201%" height="15" fill="rgb(209,9,3)" fg:x="782" fg:w="3"/><text x="5.4923%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="5.2423%" y="149" width="0.0201%" height="15" fill="rgb(230,59,30)" fg:x="782" fg:w="3"/><text x="5.4923%" y="159.50"></text></g><g><title>deno`v8::internal::Runtime_StringEqual (3 samples, 0.02%)</title><rect x="5.2423%" y="133" width="0.0201%" height="15" fill="rgb(209,121,21)" fg:x="782" fg:w="3"/><text x="5.4923%" y="143.50"></text></g><g><title>deno`v8::internal::String::SlowEquals(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::Handle (3 samples, 0.02%)</title><rect x="5.2423%" y="117" width="0.0201%" height="15" fill="rgb(220,109,13)" fg:x="782" fg:w="3"/><text x="5.4923%" y="127.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (3 samples, 0.02%)</title><rect x="5.2423%" y="101" width="0.0201%" height="15" fill="rgb(232,18,1)" fg:x="782" fg:w="3"/><text x="5.4923%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (11 samples, 0.07%)</title><rect x="5.2826%" y="69" width="0.0737%" height="15" fill="rgb(215,41,42)" fg:x="788" fg:w="11"/><text x="5.5326%" y="79.50"></text></g><g><title>0x11004b17c (13 samples, 0.09%)</title><rect x="5.2759%" y="165" width="0.0871%" height="15" fill="rgb(224,123,36)" fg:x="787" fg:w="13"/><text x="5.5259%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (13 samples, 0.09%)</title><rect x="5.2759%" y="149" width="0.0871%" height="15" fill="rgb(240,125,3)" fg:x="787" fg:w="13"/><text x="5.5259%" y="159.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (13 samples, 0.09%)</title><rect x="5.2759%" y="133" width="0.0871%" height="15" fill="rgb(205,98,50)" fg:x="787" fg:w="13"/><text x="5.5259%" y="143.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (13 samples, 0.09%)</title><rect x="5.2759%" y="117" width="0.0871%" height="15" fill="rgb(205,185,37)" fg:x="787" fg:w="13"/><text x="5.5259%" y="127.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (13 samples, 0.09%)</title><rect x="5.2759%" y="101" width="0.0871%" height="15" fill="rgb(238,207,15)" fg:x="787" fg:w="13"/><text x="5.5259%" y="111.50"></text></g><g><title>deno`deno_flash::flash_respond (13 samples, 0.09%)</title><rect x="5.2759%" y="85" width="0.0871%" height="15" fill="rgb(213,199,42)" fg:x="787" fg:w="13"/><text x="5.5259%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (11 samples, 0.07%)</title><rect x="5.3630%" y="133" width="0.0737%" height="15" fill="rgb(235,201,11)" fg:x="800" fg:w="11"/><text x="5.6130%" y="143.50"></text></g><g><title>0x11004e508 (27 samples, 0.18%)</title><rect x="5.2759%" y="181" width="0.1810%" height="15" fill="rgb(207,46,11)" fg:x="787" fg:w="27"/><text x="5.5259%" y="191.50"></text></g><g><title>0x1100646b8 (14 samples, 0.09%)</title><rect x="5.3630%" y="165" width="0.0939%" height="15" fill="rgb(241,35,35)" fg:x="800" fg:w="14"/><text x="5.6130%" y="175.50"></text></g><g><title>deno`deno_flash::flash_respond (14 samples, 0.09%)</title><rect x="5.3630%" y="149" width="0.0939%" height="15" fill="rgb(243,32,47)" fg:x="800" fg:w="14"/><text x="5.6130%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.01%)</title><rect x="5.4435%" y="133" width="0.0134%" height="15" fill="rgb(247,202,23)" fg:x="812" fg:w="2"/><text x="5.6935%" y="143.50"></text></g><g><title>0x110056b40 (2 samples, 0.01%)</title><rect x="5.4569%" y="181" width="0.0134%" height="15" fill="rgb(219,102,11)" fg:x="814" fg:w="2"/><text x="5.7069%" y="191.50"></text></g><g><title>0x11005c8c0 (3 samples, 0.02%)</title><rect x="5.4770%" y="181" width="0.0201%" height="15" fill="rgb(243,110,44)" fg:x="817" fg:w="3"/><text x="5.7270%" y="191.50"></text></g><g><title>deno`deno_flash::next_request_sync (3 samples, 0.02%)</title><rect x="5.4770%" y="165" width="0.0201%" height="15" fill="rgb(222,74,54)" fg:x="817" fg:w="3"/><text x="5.7270%" y="175.50"></text></g><g><title>0x11005ce38 (8 samples, 0.05%)</title><rect x="5.5038%" y="181" width="0.0536%" height="15" fill="rgb(216,99,12)" fg:x="821" fg:w="8"/><text x="5.7538%" y="191.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (3 samples, 0.02%)</title><rect x="5.5373%" y="165" width="0.0201%" height="15" fill="rgb(226,22,26)" fg:x="826" fg:w="3"/><text x="5.7873%" y="175.50"></text></g><g><title>0x11005cf6c (4 samples, 0.03%)</title><rect x="5.5641%" y="181" width="0.0268%" height="15" fill="rgb(217,163,10)" fg:x="830" fg:w="4"/><text x="5.8141%" y="191.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (4 samples, 0.03%)</title><rect x="5.5641%" y="165" width="0.0268%" height="15" fill="rgb(213,25,53)" fg:x="830" fg:w="4"/><text x="5.8141%" y="175.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (5 samples, 0.03%)</title><rect x="5.6110%" y="69" width="0.0335%" height="15" fill="rgb(252,105,26)" fg:x="837" fg:w="5"/><text x="5.8610%" y="79.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (6 samples, 0.04%)</title><rect x="5.6110%" y="85" width="0.0402%" height="15" fill="rgb(220,39,43)" fg:x="837" fg:w="6"/><text x="5.8610%" y="95.50"></text></g><g><title>deno`v8::internal::String::SlowEquals(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::Handle (9 samples, 0.06%)</title><rect x="5.5976%" y="117" width="0.0603%" height="15" fill="rgb(229,68,48)" fg:x="835" fg:w="9"/><text x="5.8476%" y="127.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (8 samples, 0.05%)</title><rect x="5.6043%" y="101" width="0.0536%" height="15" fill="rgb(252,8,32)" fg:x="836" fg:w="8"/><text x="5.8543%" y="111.50"></text></g><g><title>deno`v8::internal::Runtime_StringEqual (11 samples, 0.07%)</title><rect x="5.5909%" y="133" width="0.0737%" height="15" fill="rgb(223,20,43)" fg:x="834" fg:w="11"/><text x="5.8409%" y="143.50"></text></g><g><title>0x11005cf88 (12 samples, 0.08%)</title><rect x="5.5909%" y="181" width="0.0804%" height="15" fill="rgb(229,81,49)" fg:x="834" fg:w="12"/><text x="5.8409%" y="191.50"></text></g><g><title>deno`Builtins_StrictEqual_WithFeedback (12 samples, 0.08%)</title><rect x="5.5909%" y="165" width="0.0804%" height="15" fill="rgb(236,28,36)" fg:x="834" fg:w="12"/><text x="5.8409%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (12 samples, 0.08%)</title><rect x="5.5909%" y="149" width="0.0804%" height="15" fill="rgb(249,185,26)" fg:x="834" fg:w="12"/><text x="5.8409%" y="159.50"></text></g><g><title>0x11005d080 (5 samples, 0.03%)</title><rect x="5.6714%" y="181" width="0.0335%" height="15" fill="rgb(249,174,33)" fg:x="846" fg:w="5"/><text x="5.9214%" y="191.50"></text></g><g><title>deno`Builtins_ArrayIndexOf (5 samples, 0.03%)</title><rect x="5.6714%" y="165" width="0.0335%" height="15" fill="rgb(233,201,37)" fg:x="846" fg:w="5"/><text x="5.9214%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (5 samples, 0.03%)</title><rect x="5.6714%" y="149" width="0.0335%" height="15" fill="rgb(221,78,26)" fg:x="846" fg:w="5"/><text x="5.9214%" y="159.50"></text></g><g><title>deno`v8::internal::Runtime_ArrayIndexOf (5 samples, 0.03%)</title><rect x="5.6714%" y="133" width="0.0335%" height="15" fill="rgb(250,127,30)" fg:x="846" fg:w="5"/><text x="5.9214%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (142 samples, 0.95%)</title><rect x="5.7183%" y="149" width="0.9519%" height="15" fill="rgb(230,49,44)" fg:x="853" fg:w="142"/><text x="5.9683%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.02%)</title><rect x="6.6702%" y="133" width="0.0201%" height="15" fill="rgb(229,67,23)" fg:x="995" fg:w="3"/><text x="6.9202%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="6.6702%" y="149" width="0.0402%" height="15" fill="rgb(249,83,47)" fg:x="995" fg:w="6"/><text x="6.9202%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="6.6904%" y="133" width="0.0201%" height="15" fill="rgb(215,43,3)" fg:x="998" fg:w="3"/><text x="6.9404%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.02%)</title><rect x="6.6904%" y="117" width="0.0201%" height="15" fill="rgb(238,154,13)" fg:x="998" fg:w="3"/><text x="6.9404%" y="127.50"></text></g><g><title>0x11005d2b4 (156 samples, 1.05%)</title><rect x="5.7049%" y="181" width="1.0458%" height="15" fill="rgb(219,56,2)" fg:x="851" fg:w="156"/><text x="5.9549%" y="191.50"></text></g><g><title>deno`deno_flash::flash_respond (156 samples, 1.05%)</title><rect x="5.7049%" y="165" width="1.0458%" height="15" fill="rgb(233,0,4)" fg:x="851" fg:w="156"/><text x="5.9549%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.04%)</title><rect x="6.7105%" y="149" width="0.0402%" height="15" fill="rgb(235,30,7)" fg:x="1001" fg:w="6"/><text x="6.9605%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="6.7373%" y="133" width="0.0134%" height="15" fill="rgb(250,79,13)" fg:x="1005" fg:w="2"/><text x="6.9873%" y="143.50"></text></g><g><title>0x11005d418 (2 samples, 0.01%)</title><rect x="6.7574%" y="181" width="0.0134%" height="15" fill="rgb(211,146,34)" fg:x="1008" fg:w="2"/><text x="7.0074%" y="191.50"></text></g><g><title>0x11005d590 (6 samples, 0.04%)</title><rect x="6.7708%" y="181" width="0.0402%" height="15" fill="rgb(228,22,38)" fg:x="1010" fg:w="6"/><text x="7.0208%" y="191.50"></text></g><g><title>0x11005dd94 (2 samples, 0.01%)</title><rect x="6.8177%" y="181" width="0.0134%" height="15" fill="rgb(235,168,5)" fg:x="1017" fg:w="2"/><text x="7.0677%" y="191.50"></text></g><g><title>0x11006097c (3 samples, 0.02%)</title><rect x="6.8378%" y="165" width="0.0201%" height="15" fill="rgb(221,155,16)" fg:x="1020" fg:w="3"/><text x="7.0878%" y="175.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (3 samples, 0.02%)</title><rect x="6.8378%" y="149" width="0.0201%" height="15" fill="rgb(215,215,53)" fg:x="1020" fg:w="3"/><text x="7.0878%" y="159.50"></text></g><g><title>0x11005de24 (6 samples, 0.04%)</title><rect x="6.8311%" y="181" width="0.0402%" height="15" fill="rgb(223,4,10)" fg:x="1019" fg:w="6"/><text x="7.0811%" y="191.50"></text></g><g><title>0x11005e054 (2 samples, 0.01%)</title><rect x="6.8781%" y="181" width="0.0134%" height="15" fill="rgb(234,103,6)" fg:x="1026" fg:w="2"/><text x="7.1281%" y="191.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (4 samples, 0.03%)</title><rect x="6.9049%" y="165" width="0.0268%" height="15" fill="rgb(227,97,0)" fg:x="1030" fg:w="4"/><text x="7.1549%" y="175.50"></text></g><g><title>deno`Builtins_ResolvePromise (4 samples, 0.03%)</title><rect x="6.9049%" y="149" width="0.0268%" height="15" fill="rgb(234,150,53)" fg:x="1030" fg:w="4"/><text x="7.1549%" y="159.50"></text></g><g><title>deno`Builtins_GetProperty (3 samples, 0.02%)</title><rect x="6.9116%" y="133" width="0.0201%" height="15" fill="rgb(228,201,54)" fg:x="1031" fg:w="3"/><text x="7.1616%" y="143.50"></text></g><g><title>0x11005e4a0 (5 samples, 0.03%)</title><rect x="6.9049%" y="181" width="0.0335%" height="15" fill="rgb(222,22,37)" fg:x="1030" fg:w="5"/><text x="7.1549%" y="191.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (2 samples, 0.01%)</title><rect x="6.9585%" y="165" width="0.0134%" height="15" fill="rgb(237,53,32)" fg:x="1038" fg:w="2"/><text x="7.2085%" y="175.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (2 samples, 0.01%)</title><rect x="7.0054%" y="149" width="0.0134%" height="15" fill="rgb(233,25,53)" fg:x="1045" fg:w="2"/><text x="7.2554%" y="159.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.06%)</title><rect x="7.0188%" y="149" width="0.0603%" height="15" fill="rgb(210,40,34)" fg:x="1047" fg:w="9"/><text x="7.2688%" y="159.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="7.0591%" y="133" width="0.0201%" height="15" fill="rgb(241,220,44)" fg:x="1053" fg:w="3"/><text x="7.3091%" y="143.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.02%)</title><rect x="7.0792%" y="149" width="0.0201%" height="15" fill="rgb(235,28,35)" fg:x="1056" fg:w="3"/><text x="7.3292%" y="159.50"></text></g><g><title>deno`deno_flash::next_request_sync (24 samples, 0.16%)</title><rect x="6.9719%" y="165" width="0.1609%" height="15" fill="rgb(210,56,17)" fg:x="1040" fg:w="24"/><text x="7.2219%" y="175.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (5 samples, 0.03%)</title><rect x="7.0993%" y="149" width="0.0335%" height="15" fill="rgb(224,130,29)" fg:x="1059" fg:w="5"/><text x="7.3493%" y="159.50"></text></g><g><title>0x110064da0 (27 samples, 0.18%)</title><rect x="6.9585%" y="181" width="0.1810%" height="15" fill="rgb(235,212,8)" fg:x="1038" fg:w="27"/><text x="7.2085%" y="191.50"></text></g><g><title>0x110056c14 (2 samples, 0.01%)</title><rect x="7.1797%" y="165" width="0.0134%" height="15" fill="rgb(223,33,50)" fg:x="1071" fg:w="2"/><text x="7.4297%" y="175.50"></text></g><g><title>0x1100652f8 (21 samples, 0.14%)</title><rect x="7.1730%" y="181" width="0.1408%" height="15" fill="rgb(219,149,13)" fg:x="1070" fg:w="21"/><text x="7.4230%" y="191.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (12 samples, 0.08%)</title><rect x="7.2334%" y="165" width="0.0804%" height="15" fill="rgb(250,156,29)" fg:x="1079" fg:w="12"/><text x="7.4834%" y="175.50"></text></g><g><title>0x110065434 (2 samples, 0.01%)</title><rect x="7.3138%" y="181" width="0.0134%" height="15" fill="rgb(216,193,19)" fg:x="1091" fg:w="2"/><text x="7.5638%" y="191.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (2 samples, 0.01%)</title><rect x="7.3138%" y="165" width="0.0134%" height="15" fill="rgb(216,135,14)" fg:x="1091" fg:w="2"/><text x="7.5638%" y="175.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (4 samples, 0.03%)</title><rect x="7.3741%" y="101" width="0.0268%" height="15" fill="rgb(241,47,5)" fg:x="1100" fg:w="4"/><text x="7.6241%" y="111.50"></text></g><g><title>deno`v8::internal::ConsString::Get (2 samples, 0.01%)</title><rect x="7.3875%" y="85" width="0.0134%" height="15" fill="rgb(233,42,35)" fg:x="1102" fg:w="2"/><text x="7.6375%" y="95.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (6 samples, 0.04%)</title><rect x="7.4479%" y="69" width="0.0402%" height="15" fill="rgb(231,13,6)" fg:x="1111" fg:w="6"/><text x="7.6979%" y="79.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (2 samples, 0.01%)</title><rect x="7.4747%" y="53" width="0.0134%" height="15" fill="rgb(207,181,40)" fg:x="1115" fg:w="2"/><text x="7.7247%" y="63.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (15 samples, 0.10%)</title><rect x="7.4077%" y="85" width="0.1006%" height="15" fill="rgb(254,173,49)" fg:x="1105" fg:w="15"/><text x="7.6577%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="7.4881%" y="69" width="0.0201%" height="15" fill="rgb(221,1,38)" fg:x="1117" fg:w="3"/><text x="7.7381%" y="79.50"></text></g><g><title>deno`v8::internal::String::SlowEquals(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::Handle (27 samples, 0.18%)</title><rect x="7.3540%" y="117" width="0.1810%" height="15" fill="rgb(206,124,46)" fg:x="1097" fg:w="27"/><text x="7.6040%" y="127.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (19 samples, 0.13%)</title><rect x="7.4077%" y="101" width="0.1274%" height="15" fill="rgb(249,21,11)" fg:x="1105" fg:w="19"/><text x="7.6577%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="7.5082%" y="85" width="0.0268%" height="15" fill="rgb(222,201,40)" fg:x="1120" fg:w="4"/><text x="7.7582%" y="95.50"></text></g><g><title>deno`Builtins_StrictEqual_WithFeedback (33 samples, 0.22%)</title><rect x="7.3272%" y="165" width="0.2212%" height="15" fill="rgb(235,61,29)" fg:x="1093" fg:w="33"/><text x="7.5772%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (32 samples, 0.21%)</title><rect x="7.3339%" y="149" width="0.2145%" height="15" fill="rgb(219,207,3)" fg:x="1094" fg:w="32"/><text x="7.5839%" y="159.50"></text></g><g><title>deno`v8::internal::Runtime_StringEqual (31 samples, 0.21%)</title><rect x="7.3406%" y="133" width="0.2078%" height="15" fill="rgb(222,56,46)" fg:x="1095" fg:w="31"/><text x="7.5906%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="7.5350%" y="117" width="0.0134%" height="15" fill="rgb(239,76,54)" fg:x="1124" fg:w="2"/><text x="7.7850%" y="127.50"></text></g><g><title>0x110065450 (34 samples, 0.23%)</title><rect x="7.3272%" y="181" width="0.2279%" height="15" fill="rgb(231,124,27)" fg:x="1093" fg:w="34"/><text x="7.5772%" y="191.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ElementsAccessorBase&lt;v8::internal::(anonymous namespace)::FastPackedSmiElementsAccessor, v8::internal::(anonymous namespace)::ElementsKindTraits&lt;(v8::internal::ElementsKind)0&gt; &gt;::IndexOfValue(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSObject&gt;, v8::internal::Handle (2 samples, 0.01%)</title><rect x="7.5820%" y="117" width="0.0134%" height="15" fill="rgb(249,195,6)" fg:x="1131" fg:w="2"/><text x="7.8320%" y="127.50"></text></g><g><title>0x110065544 (7 samples, 0.05%)</title><rect x="7.5551%" y="181" width="0.0469%" height="15" fill="rgb(237,174,47)" fg:x="1127" fg:w="7"/><text x="7.8051%" y="191.50"></text></g><g><title>deno`Builtins_ArrayIndexOf (7 samples, 0.05%)</title><rect x="7.5551%" y="165" width="0.0469%" height="15" fill="rgb(206,201,31)" fg:x="1127" fg:w="7"/><text x="7.8051%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (4 samples, 0.03%)</title><rect x="7.5752%" y="149" width="0.0268%" height="15" fill="rgb(231,57,52)" fg:x="1130" fg:w="4"/><text x="7.8252%" y="159.50"></text></g><g><title>deno`v8::internal::Runtime_ArrayIndexOf (3 samples, 0.02%)</title><rect x="7.5820%" y="133" width="0.0201%" height="15" fill="rgb(248,177,22)" fg:x="1131" fg:w="3"/><text x="7.8320%" y="143.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (3 samples, 0.02%)</title><rect x="7.6155%" y="149" width="0.0201%" height="15" fill="rgb(215,211,37)" fg:x="1136" fg:w="3"/><text x="7.8655%" y="159.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="7.6222%" y="133" width="0.0134%" height="15" fill="rgb(241,128,51)" fg:x="1137" fg:w="2"/><text x="7.8722%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (472 samples, 3.16%)</title><rect x="7.6356%" y="149" width="3.1642%" height="15" fill="rgb(227,165,31)" fg:x="1139" fg:w="472"/><text x="7.8856%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="10.7998%" y="149" width="0.0402%" height="15" fill="rgb(228,167,24)" fg:x="1611" fg:w="6"/><text x="11.0498%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="10.8266%" y="133" width="0.0134%" height="15" fill="rgb(228,143,12)" fg:x="1615" fg:w="2"/><text x="11.0766%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="10.8735%" y="133" width="0.0134%" height="15" fill="rgb(249,149,8)" fg:x="1622" fg:w="2"/><text x="11.1235%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.07%)</title><rect x="10.8400%" y="149" width="0.0670%" height="15" fill="rgb(243,35,44)" fg:x="1617" fg:w="10"/><text x="11.0900%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="10.8869%" y="133" width="0.0201%" height="15" fill="rgb(246,89,9)" fg:x="1624" fg:w="3"/><text x="11.1369%" y="143.50"></text></g><g><title>deno`deno_flash::flash_respond (495 samples, 3.32%)</title><rect x="7.6088%" y="165" width="3.3184%" height="15" fill="rgb(233,213,13)" fg:x="1135" fg:w="495"/><text x="7.8588%" y="175.50">den..</text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="10.9271%" y="165" width="0.0201%" height="15" fill="rgb(233,141,41)" fg:x="1630" fg:w="3"/><text x="11.1771%" y="175.50"></text></g><g><title>0x110065778 (501 samples, 3.36%)</title><rect x="7.6021%" y="181" width="3.3586%" height="15" fill="rgb(239,167,4)" fg:x="1134" fg:w="501"/><text x="7.8521%" y="191.50">0x1..</text></g><g><title>0x110061268 (2 samples, 0.01%)</title><rect x="10.9606%" y="165" width="0.0134%" height="15" fill="rgb(209,217,16)" fg:x="1635" fg:w="2"/><text x="11.2106%" y="175.50"></text></g><g><title>0x110065828 (6 samples, 0.04%)</title><rect x="10.9606%" y="181" width="0.0402%" height="15" fill="rgb(219,88,35)" fg:x="1635" fg:w="6"/><text x="11.2106%" y="191.50"></text></g><g><title>deno`Builtins_CompileLazy (2 samples, 0.01%)</title><rect x="10.9875%" y="165" width="0.0134%" height="15" fill="rgb(220,193,23)" fg:x="1639" fg:w="2"/><text x="11.2375%" y="175.50"></text></g><g><title>0x1100658e0 (5 samples, 0.03%)</title><rect x="11.0076%" y="181" width="0.0335%" height="15" fill="rgb(230,90,52)" fg:x="1642" fg:w="5"/><text x="11.2576%" y="191.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (5 samples, 0.03%)</title><rect x="11.0076%" y="165" width="0.0335%" height="15" fill="rgb(252,106,19)" fg:x="1642" fg:w="5"/><text x="11.2576%" y="175.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="11.0746%" y="85" width="0.0134%" height="15" fill="rgb(206,74,20)" fg:x="1652" fg:w="2"/><text x="11.3246%" y="95.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (6 samples, 0.04%)</title><rect x="11.0746%" y="101" width="0.0402%" height="15" fill="rgb(230,138,44)" fg:x="1652" fg:w="6"/><text x="11.3246%" y="111.50"></text></g><g><title>0x11006808c (13 samples, 0.09%)</title><rect x="11.0478%" y="165" width="0.0871%" height="15" fill="rgb(235,182,43)" fg:x="1648" fg:w="13"/><text x="11.2978%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (13 samples, 0.09%)</title><rect x="11.0478%" y="149" width="0.0871%" height="15" fill="rgb(242,16,51)" fg:x="1648" fg:w="13"/><text x="11.2978%" y="159.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (11 samples, 0.07%)</title><rect x="11.0612%" y="133" width="0.0737%" height="15" fill="rgb(248,9,4)" fg:x="1650" fg:w="11"/><text x="11.3112%" y="143.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (10 samples, 0.07%)</title><rect x="11.0679%" y="117" width="0.0670%" height="15" fill="rgb(210,31,22)" fg:x="1651" fg:w="10"/><text x="11.3179%" y="127.50"></text></g><g><title>0x110065a58 (17 samples, 0.11%)</title><rect x="11.0411%" y="181" width="0.1140%" height="15" fill="rgb(239,54,39)" fg:x="1647" fg:w="17"/><text x="11.2911%" y="191.50"></text></g><g><title>0x110065ffc (2 samples, 0.01%)</title><rect x="11.1551%" y="181" width="0.0134%" height="15" fill="rgb(230,99,41)" fg:x="1664" fg:w="2"/><text x="11.4051%" y="191.50"></text></g><g><title>deno`Builtins_FastNewObject (7 samples, 0.05%)</title><rect x="11.1953%" y="165" width="0.0469%" height="15" fill="rgb(253,106,12)" fg:x="1670" fg:w="7"/><text x="11.4453%" y="175.50"></text></g><g><title>0x11005b81c (5 samples, 0.03%)</title><rect x="11.2623%" y="149" width="0.0335%" height="15" fill="rgb(213,46,41)" fg:x="1680" fg:w="5"/><text x="11.5123%" y="159.50"></text></g><g><title>0x11005ba98 (2 samples, 0.01%)</title><rect x="11.3159%" y="149" width="0.0134%" height="15" fill="rgb(215,133,35)" fg:x="1688" fg:w="2"/><text x="11.5659%" y="159.50"></text></g><g><title>0x110066348 (27 samples, 0.18%)</title><rect x="11.1886%" y="181" width="0.1810%" height="15" fill="rgb(213,28,5)" fg:x="1669" fg:w="27"/><text x="11.4386%" y="191.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (19 samples, 0.13%)</title><rect x="11.2422%" y="165" width="0.1274%" height="15" fill="rgb(215,77,49)" fg:x="1677" fg:w="19"/><text x="11.4922%" y="175.50"></text></g><g><title>deno`Builtins_FulfillPromise (2 samples, 0.01%)</title><rect x="11.4098%" y="133" width="0.0134%" height="15" fill="rgb(248,100,22)" fg:x="1702" fg:w="2"/><text x="11.6598%" y="143.50"></text></g><g><title>0x11006635c (11 samples, 0.07%)</title><rect x="11.3763%" y="181" width="0.0737%" height="15" fill="rgb(208,67,9)" fg:x="1697" fg:w="11"/><text x="11.6263%" y="191.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (11 samples, 0.07%)</title><rect x="11.3763%" y="165" width="0.0737%" height="15" fill="rgb(219,133,21)" fg:x="1697" fg:w="11"/><text x="11.6263%" y="175.50"></text></g><g><title>deno`Builtins_ResolvePromise (8 samples, 0.05%)</title><rect x="11.3964%" y="149" width="0.0536%" height="15" fill="rgb(246,46,29)" fg:x="1700" fg:w="8"/><text x="11.6464%" y="159.50"></text></g><g><title>deno`Builtins_GetProperty (4 samples, 0.03%)</title><rect x="11.4232%" y="133" width="0.0268%" height="15" fill="rgb(246,185,52)" fg:x="1704" fg:w="4"/><text x="11.6732%" y="143.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.06%)</title><rect x="11.5305%" y="149" width="0.0603%" height="15" fill="rgb(252,136,11)" fg:x="1720" fg:w="9"/><text x="11.7805%" y="159.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="11.5640%" y="133" width="0.0268%" height="15" fill="rgb(219,138,53)" fg:x="1725" fg:w="4"/><text x="11.8140%" y="143.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (4 samples, 0.03%)</title><rect x="11.5908%" y="149" width="0.0268%" height="15" fill="rgb(211,51,23)" fg:x="1729" fg:w="4"/><text x="11.8408%" y="159.50"></text></g><g><title>deno`deno_flash::next_request_sync (26 samples, 0.17%)</title><rect x="11.4835%" y="165" width="0.1743%" height="15" fill="rgb(247,221,28)" fg:x="1713" fg:w="26"/><text x="11.7335%" y="175.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (6 samples, 0.04%)</title><rect x="11.6176%" y="149" width="0.0402%" height="15" fill="rgb(251,222,45)" fg:x="1733" fg:w="6"/><text x="11.8676%" y="159.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.01%)</title><rect x="11.6578%" y="165" width="0.0134%" height="15" fill="rgb(217,162,53)" fg:x="1739" fg:w="2"/><text x="11.9078%" y="175.50"></text></g><g><title>0x1100699e0 (30 samples, 0.20%)</title><rect x="11.4835%" y="181" width="0.2011%" height="15" fill="rgb(229,93,14)" fg:x="1713" fg:w="30"/><text x="11.7335%" y="191.50"></text></g><g><title>0x110069e90 (2 samples, 0.01%)</title><rect x="11.7048%" y="181" width="0.0134%" height="15" fill="rgb(209,67,49)" fg:x="1746" fg:w="2"/><text x="11.9548%" y="191.50"></text></g><g><title>0x110056bac (4 samples, 0.03%)</title><rect x="11.7249%" y="165" width="0.0268%" height="15" fill="rgb(213,87,29)" fg:x="1749" fg:w="4"/><text x="11.9749%" y="175.50"></text></g><g><title>deno`Builtins_ToString (4 samples, 0.03%)</title><rect x="11.7249%" y="149" width="0.0268%" height="15" fill="rgb(205,151,52)" fg:x="1749" fg:w="4"/><text x="11.9749%" y="159.50"></text></g><g><title>0x110069f44 (18 samples, 0.12%)</title><rect x="11.7182%" y="181" width="0.1207%" height="15" fill="rgb(253,215,39)" fg:x="1748" fg:w="18"/><text x="11.9682%" y="191.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (6 samples, 0.04%)</title><rect x="11.7986%" y="165" width="0.0402%" height="15" fill="rgb(221,220,41)" fg:x="1760" fg:w="6"/><text x="12.0486%" y="175.50"></text></g><g><title>0x11006a07c (3 samples, 0.02%)</title><rect x="11.8455%" y="181" width="0.0201%" height="15" fill="rgb(218,133,21)" fg:x="1767" fg:w="3"/><text x="12.0955%" y="191.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (3 samples, 0.02%)</title><rect x="11.8455%" y="165" width="0.0201%" height="15" fill="rgb(221,193,43)" fg:x="1767" fg:w="3"/><text x="12.0955%" y="175.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (3 samples, 0.02%)</title><rect x="11.9327%" y="101" width="0.0201%" height="15" fill="rgb(240,128,52)" fg:x="1780" fg:w="3"/><text x="12.1827%" y="111.50"></text></g><g><title>deno`v8::internal::ConsString::Get (2 samples, 0.01%)</title><rect x="11.9394%" y="85" width="0.0134%" height="15" fill="rgb(253,114,12)" fg:x="1781" fg:w="2"/><text x="12.1894%" y="95.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (3 samples, 0.02%)</title><rect x="11.9662%" y="85" width="0.0201%" height="15" fill="rgb(215,223,47)" fg:x="1785" fg:w="3"/><text x="12.2162%" y="95.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (3 samples, 0.02%)</title><rect x="11.9863%" y="85" width="0.0201%" height="15" fill="rgb(248,225,23)" fg:x="1788" fg:w="3"/><text x="12.2363%" y="95.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (3 samples, 0.02%)</title><rect x="11.9863%" y="69" width="0.0201%" height="15" fill="rgb(250,108,0)" fg:x="1788" fg:w="3"/><text x="12.2363%" y="79.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (5 samples, 0.03%)</title><rect x="12.0400%" y="69" width="0.0335%" height="15" fill="rgb(228,208,7)" fg:x="1796" fg:w="5"/><text x="12.2900%" y="79.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (11 samples, 0.07%)</title><rect x="12.0064%" y="85" width="0.0737%" height="15" fill="rgb(244,45,10)" fg:x="1791" fg:w="11"/><text x="12.2564%" y="95.50"></text></g><g><title>deno`v8::internal::String::SlowEquals(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::Handle (29 samples, 0.19%)</title><rect x="11.8925%" y="117" width="0.1944%" height="15" fill="rgb(207,125,25)" fg:x="1774" fg:w="29"/><text x="12.1425%" y="127.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (19 samples, 0.13%)</title><rect x="11.9595%" y="101" width="0.1274%" height="15" fill="rgb(210,195,18)" fg:x="1784" fg:w="19"/><text x="12.2095%" y="111.50"></text></g><g><title>deno`Builtins_StrictEqual_WithFeedback (36 samples, 0.24%)</title><rect x="11.8657%" y="165" width="0.2413%" height="15" fill="rgb(249,80,12)" fg:x="1770" fg:w="36"/><text x="12.1157%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (35 samples, 0.23%)</title><rect x="11.8724%" y="149" width="0.2346%" height="15" fill="rgb(221,65,9)" fg:x="1771" fg:w="35"/><text x="12.1224%" y="159.50"></text></g><g><title>deno`v8::internal::Runtime_StringEqual (34 samples, 0.23%)</title><rect x="11.8791%" y="133" width="0.2279%" height="15" fill="rgb(235,49,36)" fg:x="1772" fg:w="34"/><text x="12.1291%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.02%)</title><rect x="12.0869%" y="117" width="0.0201%" height="15" fill="rgb(225,32,20)" fg:x="1803" fg:w="3"/><text x="12.3369%" y="127.50"></text></g><g><title>0x11006a098 (37 samples, 0.25%)</title><rect x="11.8657%" y="181" width="0.2480%" height="15" fill="rgb(215,141,46)" fg:x="1770" fg:w="37"/><text x="12.1157%" y="191.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ElementsAccessorBase&lt;v8::internal::(anonymous namespace)::FastPackedSmiElementsAccessor, v8::internal::(anonymous namespace)::ElementsKindTraits&lt;(v8::internal::ElementsKind)0&gt; &gt;::IndexOfValue(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSObject&gt;, v8::internal::Handle (3 samples, 0.02%)</title><rect x="12.1539%" y="117" width="0.0201%" height="15" fill="rgb(250,160,47)" fg:x="1813" fg:w="3"/><text x="12.4039%" y="127.50"></text></g><g><title>deno`Builtins_ArrayIndexOf (10 samples, 0.07%)</title><rect x="12.1137%" y="165" width="0.0670%" height="15" fill="rgb(216,222,40)" fg:x="1807" fg:w="10"/><text x="12.3637%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (9 samples, 0.06%)</title><rect x="12.1204%" y="149" width="0.0603%" height="15" fill="rgb(234,217,39)" fg:x="1808" fg:w="9"/><text x="12.3704%" y="159.50"></text></g><g><title>deno`v8::internal::Runtime_ArrayIndexOf (7 samples, 0.05%)</title><rect x="12.1338%" y="133" width="0.0469%" height="15" fill="rgb(207,178,40)" fg:x="1810" fg:w="7"/><text x="12.3838%" y="143.50"></text></g><g><title>0x11006a18c (11 samples, 0.07%)</title><rect x="12.1137%" y="181" width="0.0737%" height="15" fill="rgb(221,136,13)" fg:x="1807" fg:w="11"/><text x="12.3637%" y="191.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.01%)</title><rect x="12.2075%" y="149" width="0.0134%" height="15" fill="rgb(249,199,10)" fg:x="1821" fg:w="2"/><text x="12.4575%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (476 samples, 3.19%)</title><rect x="12.2210%" y="149" width="3.1910%" height="15" fill="rgb(249,222,13)" fg:x="1823" fg:w="476"/><text x="12.4710%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.05%)</title><rect x="15.4119%" y="149" width="0.0536%" height="15" fill="rgb(244,185,38)" fg:x="2299" fg:w="8"/><text x="15.6619%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="15.4455%" y="133" width="0.0201%" height="15" fill="rgb(236,202,9)" fg:x="2304" fg:w="3"/><text x="15.6955%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.04%)</title><rect x="15.5661%" y="133" width="0.0402%" height="15" fill="rgb(250,229,37)" fg:x="2322" fg:w="6"/><text x="15.8161%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (29 samples, 0.19%)</title><rect x="15.4656%" y="149" width="0.1944%" height="15" fill="rgb(206,174,23)" fg:x="2307" fg:w="29"/><text x="15.7156%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.05%)</title><rect x="15.6131%" y="133" width="0.0469%" height="15" fill="rgb(211,33,43)" fg:x="2329" fg:w="7"/><text x="15.8631%" y="143.50"></text></g><g><title>deno`deno_flash::flash_respond (518 samples, 3.47%)</title><rect x="12.2008%" y="165" width="3.4725%" height="15" fill="rgb(245,58,50)" fg:x="1820" fg:w="518"/><text x="12.4508%" y="175.50">den..</text></g><g><title>0x11006a3c4 (520 samples, 3.49%)</title><rect x="12.1941%" y="181" width="3.4860%" height="15" fill="rgb(244,68,36)" fg:x="1819" fg:w="520"/><text x="12.4441%" y="191.50">0x1..</text></g><g><title>0x110061268 (3 samples, 0.02%)</title><rect x="15.7069%" y="165" width="0.0201%" height="15" fill="rgb(232,229,15)" fg:x="2343" fg:w="3"/><text x="15.9569%" y="175.50"></text></g><g><title>0x11006a758 (8 samples, 0.05%)</title><rect x="15.6868%" y="181" width="0.0536%" height="15" fill="rgb(254,30,23)" fg:x="2340" fg:w="8"/><text x="15.9368%" y="191.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="15.7739%" y="85" width="0.0134%" height="15" fill="rgb(235,160,14)" fg:x="2353" fg:w="2"/><text x="16.0239%" y="95.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (5 samples, 0.03%)</title><rect x="15.7739%" y="101" width="0.0335%" height="15" fill="rgb(212,155,44)" fg:x="2353" fg:w="5"/><text x="16.0239%" y="111.50"></text></g><g><title>0x11006808c (9 samples, 0.06%)</title><rect x="15.7605%" y="165" width="0.0603%" height="15" fill="rgb(226,2,50)" fg:x="2351" fg:w="9"/><text x="16.0105%" y="175.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (9 samples, 0.06%)</title><rect x="15.7605%" y="149" width="0.0603%" height="15" fill="rgb(234,177,6)" fg:x="2351" fg:w="9"/><text x="16.0105%" y="159.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (9 samples, 0.06%)</title><rect x="15.7605%" y="133" width="0.0603%" height="15" fill="rgb(217,24,9)" fg:x="2351" fg:w="9"/><text x="16.0105%" y="143.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (7 samples, 0.05%)</title><rect x="15.7739%" y="117" width="0.0469%" height="15" fill="rgb(220,13,46)" fg:x="2353" fg:w="7"/><text x="16.0239%" y="127.50"></text></g><g><title>0x11006a98c (11 samples, 0.07%)</title><rect x="15.7605%" y="181" width="0.0737%" height="15" fill="rgb(239,221,27)" fg:x="2351" fg:w="11"/><text x="16.0105%" y="191.50"></text></g><g><title>0x11006add0 (2 samples, 0.01%)</title><rect x="15.8343%" y="181" width="0.0134%" height="15" fill="rgb(222,198,25)" fg:x="2362" fg:w="2"/><text x="16.0843%" y="191.50"></text></g><g><title>deno`deno_flash::op_flash_get_method_fast (2 samples, 0.01%)</title><rect x="15.8477%" y="165" width="0.0134%" height="15" fill="rgb(211,99,13)" fg:x="2364" fg:w="2"/><text x="16.0977%" y="175.50"></text></g><g><title>0x11006add8 (3 samples, 0.02%)</title><rect x="15.8477%" y="181" width="0.0201%" height="15" fill="rgb(232,111,31)" fg:x="2364" fg:w="3"/><text x="16.0977%" y="191.50"></text></g><g><title>deno`Builtins_FastNewObject (7 samples, 0.05%)</title><rect x="15.8946%" y="165" width="0.0469%" height="15" fill="rgb(245,82,37)" fg:x="2371" fg:w="7"/><text x="16.1446%" y="175.50"></text></g><g><title>0x11005b81c (2 samples, 0.01%)</title><rect x="15.9885%" y="149" width="0.0134%" height="15" fill="rgb(227,149,46)" fg:x="2385" fg:w="2"/><text x="16.2385%" y="159.50"></text></g><g><title>0x11005ba98 (4 samples, 0.03%)</title><rect x="16.0153%" y="149" width="0.0268%" height="15" fill="rgb(218,36,50)" fg:x="2389" fg:w="4"/><text x="16.2653%" y="159.50"></text></g><g><title>0x110060560 (2 samples, 0.01%)</title><rect x="16.0287%" y="133" width="0.0134%" height="15" fill="rgb(226,80,48)" fg:x="2391" fg:w="2"/><text x="16.2787%" y="143.50"></text></g><g><title>deno`Builtins_GrowFastSmiOrObjectElements (3 samples, 0.02%)</title><rect x="16.0488%" y="149" width="0.0201%" height="15" fill="rgb(238,224,15)" fg:x="2394" fg:w="3"/><text x="16.2988%" y="159.50"></text></g><g><title>0x11006b11c (29 samples, 0.19%)</title><rect x="15.8879%" y="181" width="0.1944%" height="15" fill="rgb(241,136,10)" fg:x="2370" fg:w="29"/><text x="16.1379%" y="191.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (21 samples, 0.14%)</title><rect x="15.9415%" y="165" width="0.1408%" height="15" fill="rgb(208,32,45)" fg:x="2378" fg:w="21"/><text x="16.1915%" y="175.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (2 samples, 0.01%)</title><rect x="16.0957%" y="149" width="0.0134%" height="15" fill="rgb(207,135,9)" fg:x="2401" fg:w="2"/><text x="16.3457%" y="159.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (9 samples, 0.06%)</title><rect x="16.0823%" y="165" width="0.0603%" height="15" fill="rgb(206,86,44)" fg:x="2399" fg:w="9"/><text x="16.3323%" y="175.50"></text></g><g><title>deno`Builtins_ResolvePromise (5 samples, 0.03%)</title><rect x="16.1091%" y="149" width="0.0335%" height="15" fill="rgb(245,177,15)" fg:x="2403" fg:w="5"/><text x="16.3591%" y="159.50"></text></g><g><title>deno`Builtins_GetProperty (5 samples, 0.03%)</title><rect x="16.1091%" y="133" width="0.0335%" height="15" fill="rgb(206,64,50)" fg:x="2403" fg:w="5"/><text x="16.3591%" y="143.50"></text></g><g><title>0x11006b130 (12 samples, 0.08%)</title><rect x="16.0823%" y="181" width="0.0804%" height="15" fill="rgb(234,36,40)" fg:x="2399" fg:w="12"/><text x="16.3323%" y="191.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.01%)</title><rect x="16.1494%" y="165" width="0.0134%" height="15" fill="rgb(213,64,8)" fg:x="2409" fg:w="2"/><text x="16.3994%" y="175.50"></text></g><g><title>0x11006cf74 (2 samples, 0.01%)</title><rect x="16.1762%" y="181" width="0.0134%" height="15" fill="rgb(210,75,36)" fg:x="2413" fg:w="2"/><text x="16.4262%" y="191.50"></text></g><g><title>0x11006cf7c (2 samples, 0.01%)</title><rect x="16.1896%" y="181" width="0.0134%" height="15" fill="rgb(229,88,21)" fg:x="2415" fg:w="2"/><text x="16.4396%" y="191.50"></text></g><g><title>0x11006d398 (2 samples, 0.01%)</title><rect x="16.2365%" y="181" width="0.0134%" height="15" fill="rgb(252,204,47)" fg:x="2422" fg:w="2"/><text x="16.4865%" y="191.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (3 samples, 0.02%)</title><rect x="16.5717%" y="149" width="0.0201%" height="15" fill="rgb(208,77,27)" fg:x="2472" fg:w="3"/><text x="16.8217%" y="159.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="16.7192%" y="133" width="0.0335%" height="15" fill="rgb(221,76,26)" fg:x="2494" fg:w="5"/><text x="16.9692%" y="143.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (31 samples, 0.21%)</title><rect x="16.5918%" y="149" width="0.2078%" height="15" fill="rgb(225,139,18)" fg:x="2475" fg:w="31"/><text x="16.8418%" y="159.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (7 samples, 0.05%)</title><rect x="16.7527%" y="133" width="0.0469%" height="15" fill="rgb(230,137,11)" fg:x="2499" fg:w="7"/><text x="17.0027%" y="143.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (24 samples, 0.16%)</title><rect x="16.7996%" y="149" width="0.1609%" height="15" fill="rgb(212,28,1)" fg:x="2506" fg:w="24"/><text x="17.0496%" y="159.50"></text></g><g><title>deno`deno_flash::next_request_sync (135 samples, 0.91%)</title><rect x="16.2566%" y="165" width="0.9050%" height="15" fill="rgb(248,164,17)" fg:x="2425" fg:w="135"/><text x="16.5066%" y="175.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (30 samples, 0.20%)</title><rect x="16.9605%" y="149" width="0.2011%" height="15" fill="rgb(222,171,42)" fg:x="2530" fg:w="30"/><text x="17.2105%" y="159.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.02%)</title><rect x="17.1616%" y="165" width="0.0201%" height="15" fill="rgb(243,84,45)" fg:x="2560" fg:w="3"/><text x="17.4116%" y="175.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.02%)</title><rect x="17.1817%" y="165" width="0.0201%" height="15" fill="rgb(252,49,23)" fg:x="2563" fg:w="3"/><text x="17.4317%" y="175.50"></text></g><g><title>0x11006d3a0 (144 samples, 0.97%)</title><rect x="16.2499%" y="181" width="0.9653%" height="15" fill="rgb(215,19,7)" fg:x="2424" fg:w="144"/><text x="16.4999%" y="191.50"></text></g><g><title>deno`v8__Object__GetAlignedPointerFromInternalField (2 samples, 0.01%)</title><rect x="17.2019%" y="165" width="0.0134%" height="15" fill="rgb(238,81,41)" fg:x="2566" fg:w="2"/><text x="17.4519%" y="175.50"></text></g><g><title>0x11006d44c (3 samples, 0.02%)</title><rect x="17.2622%" y="181" width="0.0201%" height="15" fill="rgb(210,199,37)" fg:x="2575" fg:w="3"/><text x="17.5122%" y="191.50"></text></g><g><title>0x11006d520 (2 samples, 0.01%)</title><rect x="17.2823%" y="181" width="0.0134%" height="15" fill="rgb(244,192,49)" fg:x="2578" fg:w="2"/><text x="17.5323%" y="191.50"></text></g><g><title>0x11006d534 (2 samples, 0.01%)</title><rect x="17.3024%" y="181" width="0.0134%" height="15" fill="rgb(226,211,11)" fg:x="2581" fg:w="2"/><text x="17.5524%" y="191.50"></text></g><g><title>0x11006d548 (2 samples, 0.01%)</title><rect x="17.3158%" y="181" width="0.0134%" height="15" fill="rgb(236,162,54)" fg:x="2583" fg:w="2"/><text x="17.5658%" y="191.50"></text></g><g><title>0x11006d570 (10 samples, 0.07%)</title><rect x="17.3359%" y="181" width="0.0670%" height="15" fill="rgb(220,229,9)" fg:x="2586" fg:w="10"/><text x="17.5859%" y="191.50"></text></g><g><title>0x11006d5bc (2 samples, 0.01%)</title><rect x="17.4365%" y="181" width="0.0134%" height="15" fill="rgb(250,87,22)" fg:x="2601" fg:w="2"/><text x="17.6865%" y="191.50"></text></g><g><title>0x11006d5fc (2 samples, 0.01%)</title><rect x="17.4566%" y="181" width="0.0134%" height="15" fill="rgb(239,43,17)" fg:x="2604" fg:w="2"/><text x="17.7066%" y="191.50"></text></g><g><title>0x11006d610 (2 samples, 0.01%)</title><rect x="17.4767%" y="181" width="0.0134%" height="15" fill="rgb(231,177,25)" fg:x="2607" fg:w="2"/><text x="17.7267%" y="191.50"></text></g><g><title>0x11006d77c (2 samples, 0.01%)</title><rect x="17.5102%" y="181" width="0.0134%" height="15" fill="rgb(219,179,1)" fg:x="2612" fg:w="2"/><text x="17.7602%" y="191.50"></text></g><g><title>0x11006d7a4 (2 samples, 0.01%)</title><rect x="17.5236%" y="181" width="0.0134%" height="15" fill="rgb(238,219,53)" fg:x="2614" fg:w="2"/><text x="17.7736%" y="191.50"></text></g><g><title>0x11006d7d4 (3 samples, 0.02%)</title><rect x="17.5370%" y="181" width="0.0201%" height="15" fill="rgb(232,167,36)" fg:x="2616" fg:w="3"/><text x="17.7870%" y="191.50"></text></g><g><title>0x11006d83c (4 samples, 0.03%)</title><rect x="17.5773%" y="181" width="0.0268%" height="15" fill="rgb(244,19,51)" fg:x="2622" fg:w="4"/><text x="17.8273%" y="191.50"></text></g><g><title>0x11006d850 (5 samples, 0.03%)</title><rect x="17.6041%" y="181" width="0.0335%" height="15" fill="rgb(224,6,22)" fg:x="2626" fg:w="5"/><text x="17.8541%" y="191.50"></text></g><g><title>0x11006d870 (3 samples, 0.02%)</title><rect x="17.6376%" y="181" width="0.0201%" height="15" fill="rgb(224,145,5)" fg:x="2631" fg:w="3"/><text x="17.8876%" y="191.50"></text></g><g><title>0x11006d890 (6 samples, 0.04%)</title><rect x="17.6644%" y="181" width="0.0402%" height="15" fill="rgb(234,130,49)" fg:x="2635" fg:w="6"/><text x="17.9144%" y="191.50"></text></g><g><title>0x11006d8c4 (2 samples, 0.01%)</title><rect x="17.7046%" y="181" width="0.0134%" height="15" fill="rgb(254,6,2)" fg:x="2641" fg:w="2"/><text x="17.9546%" y="191.50"></text></g><g><title>0x110056b70 (2 samples, 0.01%)</title><rect x="17.7382%" y="165" width="0.0134%" height="15" fill="rgb(208,96,46)" fg:x="2646" fg:w="2"/><text x="17.9882%" y="175.50"></text></g><g><title>0x110056bac (13 samples, 0.09%)</title><rect x="17.7583%" y="165" width="0.0871%" height="15" fill="rgb(239,3,39)" fg:x="2649" fg:w="13"/><text x="18.0083%" y="175.50"></text></g><g><title>deno`Builtins_ToString (9 samples, 0.06%)</title><rect x="17.7851%" y="149" width="0.0603%" height="15" fill="rgb(233,210,1)" fg:x="2653" fg:w="9"/><text x="18.0351%" y="159.50"></text></g><g><title>0x110056c14 (2 samples, 0.01%)</title><rect x="17.8521%" y="165" width="0.0134%" height="15" fill="rgb(244,137,37)" fg:x="2663" fg:w="2"/><text x="18.1021%" y="175.50"></text></g><g><title>0x110056cec (2 samples, 0.01%)</title><rect x="17.8789%" y="165" width="0.0134%" height="15" fill="rgb(240,136,2)" fg:x="2667" fg:w="2"/><text x="18.1289%" y="175.50"></text></g><g><title>deno`Builtins_ToString (2 samples, 0.01%)</title><rect x="17.8789%" y="149" width="0.0134%" height="15" fill="rgb(239,18,37)" fg:x="2667" fg:w="2"/><text x="18.1289%" y="159.50"></text></g><g><title>0x110056e84 (3 samples, 0.02%)</title><rect x="17.9594%" y="165" width="0.0201%" height="15" fill="rgb(218,185,22)" fg:x="2679" fg:w="3"/><text x="18.2094%" y="175.50"></text></g><g><title>deno`Builtins_ToString (3 samples, 0.02%)</title><rect x="17.9594%" y="149" width="0.0201%" height="15" fill="rgb(225,218,4)" fg:x="2679" fg:w="3"/><text x="18.2094%" y="159.50"></text></g><g><title>0x110056f3c (2 samples, 0.01%)</title><rect x="17.9929%" y="165" width="0.0134%" height="15" fill="rgb(230,182,32)" fg:x="2684" fg:w="2"/><text x="18.2429%" y="175.50"></text></g><g><title>0x110056f68 (3 samples, 0.02%)</title><rect x="18.0063%" y="165" width="0.0201%" height="15" fill="rgb(242,56,43)" fg:x="2686" fg:w="3"/><text x="18.2563%" y="175.50"></text></g><g><title>0x110057334 (2 samples, 0.01%)</title><rect x="18.0800%" y="165" width="0.0134%" height="15" fill="rgb(233,99,24)" fg:x="2697" fg:w="2"/><text x="18.3300%" y="175.50"></text></g><g><title>deno`Builtins_NumberToString (7 samples, 0.05%)</title><rect x="18.1069%" y="165" width="0.0469%" height="15" fill="rgb(234,209,42)" fg:x="2701" fg:w="7"/><text x="18.3569%" y="175.50"></text></g><g><title>0x11006d904 (132 samples, 0.88%)</title><rect x="17.7382%" y="181" width="0.8849%" height="15" fill="rgb(227,7,12)" fg:x="2646" fg:w="132"/><text x="17.9882%" y="191.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (70 samples, 0.47%)</title><rect x="18.1538%" y="165" width="0.4693%" height="15" fill="rgb(245,203,43)" fg:x="2708" fg:w="70"/><text x="18.4038%" y="175.50"></text></g><g><title>0x11006da20 (4 samples, 0.03%)</title><rect x="18.6566%" y="181" width="0.0268%" height="15" fill="rgb(238,205,33)" fg:x="2783" fg:w="4"/><text x="18.9066%" y="191.50"></text></g><g><title>0x11006da3c (30 samples, 0.20%)</title><rect x="18.6834%" y="181" width="0.2011%" height="15" fill="rgb(231,56,7)" fg:x="2787" fg:w="30"/><text x="18.9334%" y="191.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (30 samples, 0.20%)</title><rect x="18.6834%" y="165" width="0.2011%" height="15" fill="rgb(244,186,29)" fg:x="2787" fg:w="30"/><text x="18.9334%" y="175.50"></text></g><g><title>0x11006da50 (3 samples, 0.02%)</title><rect x="18.8845%" y="181" width="0.0201%" height="15" fill="rgb(234,111,31)" fg:x="2817" fg:w="3"/><text x="19.1345%" y="191.50"></text></g><g><title>deno`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="19.0052%" y="117" width="0.0134%" height="15" fill="rgb(241,149,10)" fg:x="2835" fg:w="2"/><text x="19.2552%" y="127.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (2 samples, 0.01%)</title><rect x="19.0186%" y="117" width="0.0134%" height="15" fill="rgb(249,206,44)" fg:x="2837" fg:w="2"/><text x="19.2686%" y="127.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (23 samples, 0.15%)</title><rect x="19.2733%" y="101" width="0.1542%" height="15" fill="rgb(251,153,30)" fg:x="2875" fg:w="23"/><text x="19.5233%" y="111.50"></text></g><g><title>deno`v8::internal::ConsString::Get (16 samples, 0.11%)</title><rect x="19.3202%" y="85" width="0.1073%" height="15" fill="rgb(239,152,38)" fg:x="2882" fg:w="16"/><text x="19.5702%" y="95.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (4 samples, 0.03%)</title><rect x="19.4007%" y="69" width="0.0268%" height="15" fill="rgb(249,139,47)" fg:x="2894" fg:w="4"/><text x="19.6507%" y="79.50"></text></g><g><title>deno`v8::internal::ConsString::Get (3 samples, 0.02%)</title><rect x="19.4275%" y="101" width="0.0201%" height="15" fill="rgb(244,64,35)" fg:x="2898" fg:w="3"/><text x="19.6775%" y="111.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (2 samples, 0.01%)</title><rect x="19.4543%" y="101" width="0.0134%" height="15" fill="rgb(216,46,15)" fg:x="2902" fg:w="2"/><text x="19.7043%" y="111.50"></text></g><g><title>deno`DYLD-STUB$$memmove (2 samples, 0.01%)</title><rect x="19.5683%" y="85" width="0.0134%" height="15" fill="rgb(250,74,19)" fg:x="2919" fg:w="2"/><text x="19.8183%" y="95.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (4 samples, 0.03%)</title><rect x="19.5817%" y="85" width="0.0268%" height="15" fill="rgb(249,42,33)" fg:x="2921" fg:w="4"/><text x="19.8317%" y="95.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (19 samples, 0.13%)</title><rect x="19.6085%" y="85" width="0.1274%" height="15" fill="rgb(242,149,17)" fg:x="2925" fg:w="19"/><text x="19.8585%" y="95.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (11 samples, 0.07%)</title><rect x="19.6621%" y="69" width="0.0737%" height="15" fill="rgb(244,29,21)" fg:x="2933" fg:w="11"/><text x="19.9121%" y="79.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (77 samples, 0.52%)</title><rect x="20.0577%" y="69" width="0.5162%" height="15" fill="rgb(220,130,37)" fg:x="2992" fg:w="77"/><text x="20.3077%" y="79.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (12 samples, 0.08%)</title><rect x="20.4934%" y="53" width="0.0804%" height="15" fill="rgb(211,67,2)" fg:x="3057" fg:w="12"/><text x="20.7434%" y="63.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (131 samples, 0.88%)</title><rect x="19.7359%" y="85" width="0.8782%" height="15" fill="rgb(235,68,52)" fg:x="2944" fg:w="131"/><text x="19.9859%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.04%)</title><rect x="20.5738%" y="69" width="0.0402%" height="15" fill="rgb(246,142,3)" fg:x="3069" fg:w="6"/><text x="20.8238%" y="79.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (179 samples, 1.20%)</title><rect x="19.4677%" y="101" width="1.2000%" height="15" fill="rgb(241,25,7)" fg:x="2904" fg:w="179"/><text x="19.7177%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.05%)</title><rect x="20.6141%" y="85" width="0.0536%" height="15" fill="rgb(242,119,39)" fg:x="3075" fg:w="8"/><text x="20.8641%" y="95.50"></text></g><g><title>deno`v8::internal::String::SlowEquals(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::Handle (245 samples, 1.64%)</title><rect x="19.0320%" y="117" width="1.6424%" height="15" fill="rgb(241,98,45)" fg:x="2839" fg:w="245"/><text x="19.2820%" y="127.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (5 samples, 0.03%)</title><rect x="20.6744%" y="117" width="0.0335%" height="15" fill="rgb(254,28,30)" fg:x="3084" fg:w="5"/><text x="20.9244%" y="127.50"></text></g><g><title>deno`v8::internal::Runtime_StringEqual (275 samples, 1.84%)</title><rect x="18.9515%" y="133" width="1.8435%" height="15" fill="rgb(241,142,54)" fg:x="2827" fg:w="275"/><text x="19.2015%" y="143.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (13 samples, 0.09%)</title><rect x="20.7079%" y="117" width="0.0871%" height="15" fill="rgb(222,85,15)" fg:x="3089" fg:w="13"/><text x="20.9579%" y="127.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (285 samples, 1.91%)</title><rect x="18.9314%" y="149" width="1.9106%" height="15" fill="rgb(210,85,47)" fg:x="2824" fg:w="285"/><text x="19.1814%" y="159.50">d..</text></g><g><title>deno`v8::internal::String::SlowEquals(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::Handle (7 samples, 0.05%)</title><rect x="20.7951%" y="133" width="0.0469%" height="15" fill="rgb(224,206,25)" fg:x="3102" fg:w="7"/><text x="21.0451%" y="143.50"></text></g><g><title>deno`Builtins_StrictEqual_WithFeedback (292 samples, 1.96%)</title><rect x="18.9046%" y="165" width="1.9575%" height="15" fill="rgb(243,201,19)" fg:x="2820" fg:w="292"/><text x="19.1546%" y="175.50">d..</text></g><g><title>deno`v8::internal::Runtime_StringEqual (3 samples, 0.02%)</title><rect x="20.8420%" y="149" width="0.0201%" height="15" fill="rgb(236,59,4)" fg:x="3109" fg:w="3"/><text x="21.0920%" y="159.50"></text></g><g><title>0x11006da58 (294 samples, 1.97%)</title><rect x="18.9046%" y="181" width="1.9709%" height="15" fill="rgb(254,179,45)" fg:x="2820" fg:w="294"/><text x="19.1546%" y="191.50">0..</text></g><g><title>deno`Builtins_StringEqual (2 samples, 0.01%)</title><rect x="20.8621%" y="165" width="0.0134%" height="15" fill="rgb(226,14,10)" fg:x="3112" fg:w="2"/><text x="21.1121%" y="175.50"></text></g><g><title>0x11006dad0 (2 samples, 0.01%)</title><rect x="20.8822%" y="181" width="0.0134%" height="15" fill="rgb(244,27,41)" fg:x="3115" fg:w="2"/><text x="21.1322%" y="191.50"></text></g><g><title>deno`v8::internal::Object::ConvertToInteger(v8::internal::Isolate*, v8::internal::Handle (5 samples, 0.03%)</title><rect x="21.0029%" y="133" width="0.0335%" height="15" fill="rgb(235,35,32)" fg:x="3133" fg:w="5"/><text x="21.2529%" y="143.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ElementsAccessorBase&lt;v8::internal::(anonymous namespace)::FastPackedSmiElementsAccessor, v8::internal::(anonymous namespace)::ElementsKindTraits&lt;(v8::internal::ElementsKind)0&gt; &gt;::IndexOfValue(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSObject&gt;, v8::internal::Handle (4 samples, 0.03%)</title><rect x="21.1638%" y="117" width="0.0268%" height="15" fill="rgb(218,68,31)" fg:x="3157" fg:w="4"/><text x="21.4138%" y="127.50"></text></g><g><title>deno`v8::internal::Object::StrictEquals (3 samples, 0.02%)</title><rect x="21.1705%" y="101" width="0.0201%" height="15" fill="rgb(207,120,37)" fg:x="3158" fg:w="3"/><text x="21.4205%" y="111.50"></text></g><g><title>deno`v8::internal::Object::ConvertToInteger(v8::internal::Isolate*, v8::internal::Handle (5 samples, 0.03%)</title><rect x="21.1973%" y="117" width="0.0335%" height="15" fill="rgb(227,98,0)" fg:x="3162" fg:w="5"/><text x="21.4473%" y="127.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (40 samples, 0.27%)</title><rect x="20.9828%" y="149" width="0.2682%" height="15" fill="rgb(207,7,3)" fg:x="3130" fg:w="40"/><text x="21.2328%" y="159.50"></text></g><g><title>deno`v8::internal::Runtime_ArrayIndexOf (32 samples, 0.21%)</title><rect x="21.0364%" y="133" width="0.2145%" height="15" fill="rgb(206,98,19)" fg:x="3138" fg:w="32"/><text x="21.2864%" y="143.50"></text></g><g><title>deno`v8::internal::Object::StrictEquals (2 samples, 0.01%)</title><rect x="21.2375%" y="117" width="0.0134%" height="15" fill="rgb(217,5,26)" fg:x="3168" fg:w="2"/><text x="21.4875%" y="127.50"></text></g><g><title>deno`Builtins_ArrayIndexOf (53 samples, 0.36%)</title><rect x="20.9023%" y="165" width="0.3553%" height="15" fill="rgb(235,190,38)" fg:x="3118" fg:w="53"/><text x="21.1523%" y="175.50"></text></g><g><title>0x11006db4c (56 samples, 0.38%)</title><rect x="20.9023%" y="181" width="0.3754%" height="15" fill="rgb(247,86,24)" fg:x="3118" fg:w="56"/><text x="21.1523%" y="191.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="21.2576%" y="165" width="0.0201%" height="15" fill="rgb(205,101,16)" fg:x="3171" fg:w="3"/><text x="21.5076%" y="175.50"></text></g><g><title>0x11006dbfc (2 samples, 0.01%)</title><rect x="21.2911%" y="181" width="0.0134%" height="15" fill="rgb(246,168,33)" fg:x="3176" fg:w="2"/><text x="21.5411%" y="191.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.01%)</title><rect x="21.3448%" y="165" width="0.0134%" height="15" fill="rgb(231,114,1)" fg:x="3184" fg:w="2"/><text x="21.5948%" y="175.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="21.4185%" y="149" width="0.0201%" height="15" fill="rgb(207,184,53)" fg:x="3195" fg:w="3"/><text x="21.6685%" y="159.50"></text></g><g><title>deno`DYLD-STUB$$send (2 samples, 0.01%)</title><rect x="21.4386%" y="149" width="0.0134%" height="15" fill="rgb(224,95,51)" fg:x="3198" fg:w="2"/><text x="21.6886%" y="159.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="21.5258%" y="133" width="0.0201%" height="15" fill="rgb(212,188,45)" fg:x="3211" fg:w="3"/><text x="21.7758%" y="143.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (20 samples, 0.13%)</title><rect x="21.4520%" y="149" width="0.1341%" height="15" fill="rgb(223,154,38)" fg:x="3200" fg:w="20"/><text x="21.7020%" y="159.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="21.5459%" y="133" width="0.0402%" height="15" fill="rgb(251,22,52)" fg:x="3214" fg:w="6"/><text x="21.7959%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (3,436 samples, 23.03%)</title><rect x="21.5995%" y="149" width="23.0341%" height="15" fill="rgb(229,209,22)" fg:x="3222" fg:w="3436"/><text x="21.8495%" y="159.50">libsystem_kernel.dylib`__sendto</text></g><g><title>libsystem_malloc.dylib`small_size (12 samples, 0.08%)</title><rect x="44.7208%" y="133" width="0.0804%" height="15" fill="rgb(234,138,34)" fg:x="6671" fg:w="12"/><text x="44.9708%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (67 samples, 0.45%)</title><rect x="44.6336%" y="149" width="0.4492%" height="15" fill="rgb(212,95,11)" fg:x="6658" fg:w="67"/><text x="44.8836%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (42 samples, 0.28%)</title><rect x="44.8012%" y="133" width="0.2816%" height="15" fill="rgb(240,179,47)" fg:x="6683" fg:w="42"/><text x="45.0512%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (28 samples, 0.19%)</title><rect x="44.8951%" y="117" width="0.1877%" height="15" fill="rgb(240,163,11)" fg:x="6697" fg:w="28"/><text x="45.1451%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (3 samples, 0.02%)</title><rect x="45.6258%" y="133" width="0.0201%" height="15" fill="rgb(236,37,12)" fg:x="6806" fg:w="3"/><text x="45.8758%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (20 samples, 0.13%)</title><rect x="45.6459%" y="133" width="0.1341%" height="15" fill="rgb(232,164,16)" fg:x="6809" fg:w="20"/><text x="45.8959%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (3 samples, 0.02%)</title><rect x="45.7800%" y="133" width="0.0201%" height="15" fill="rgb(244,205,15)" fg:x="6829" fg:w="3"/><text x="46.0300%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (135 samples, 0.91%)</title><rect x="45.0828%" y="149" width="0.9050%" height="15" fill="rgb(223,117,47)" fg:x="6725" fg:w="135"/><text x="45.3328%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (27 samples, 0.18%)</title><rect x="45.8068%" y="133" width="0.1810%" height="15" fill="rgb(244,107,35)" fg:x="6833" fg:w="27"/><text x="46.0568%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="45.9945%" y="149" width="0.0201%" height="15" fill="rgb(205,140,8)" fg:x="6861" fg:w="3"/><text x="46.2445%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (5 samples, 0.03%)</title><rect x="46.0347%" y="149" width="0.0335%" height="15" fill="rgb(228,84,46)" fg:x="6867" fg:w="5"/><text x="46.2847%" y="159.50"></text></g><g><title>deno`deno_flash::flash_respond (3,687 samples, 24.72%)</title><rect x="21.3649%" y="165" width="24.7168%" height="15" fill="rgb(254,188,9)" fg:x="3187" fg:w="3687"/><text x="21.6149%" y="175.50">deno`deno_flash::flash_respond</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="46.0682%" y="149" width="0.0134%" height="15" fill="rgb(206,112,54)" fg:x="6872" fg:w="2"/><text x="46.3182%" y="159.50"></text></g><g><title>deno`deno_flash::op_flash_respond_fast (3 samples, 0.02%)</title><rect x="46.0817%" y="165" width="0.0201%" height="15" fill="rgb(216,84,49)" fg:x="6874" fg:w="3"/><text x="46.3317%" y="175.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (3 samples, 0.02%)</title><rect x="46.1018%" y="165" width="0.0201%" height="15" fill="rgb(214,194,35)" fg:x="6877" fg:w="3"/><text x="46.3518%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="46.1219%" y="165" width="0.0201%" height="15" fill="rgb(249,28,3)" fg:x="6880" fg:w="3"/><text x="46.3719%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="46.1420%" y="165" width="0.0134%" height="15" fill="rgb(222,56,52)" fg:x="6883" fg:w="2"/><text x="46.3920%" y="175.50"></text></g><g><title>0x11006dd84 (3,707 samples, 24.85%)</title><rect x="21.3314%" y="181" width="24.8508%" height="15" fill="rgb(245,217,50)" fg:x="3182" fg:w="3707"/><text x="21.5814%" y="191.50">0x11006dd84</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="46.1554%" y="165" width="0.0268%" height="15" fill="rgb(213,201,24)" fg:x="6885" fg:w="4"/><text x="46.4054%" y="175.50"></text></g><g><title>0x11006dda8 (5 samples, 0.03%)</title><rect x="46.1822%" y="181" width="0.0335%" height="15" fill="rgb(248,116,28)" fg:x="6889" fg:w="5"/><text x="46.4322%" y="191.50"></text></g><g><title>0x11006e088 (3 samples, 0.02%)</title><rect x="46.2157%" y="181" width="0.0201%" height="15" fill="rgb(219,72,43)" fg:x="6894" fg:w="3"/><text x="46.4657%" y="191.50"></text></g><g><title>0x11006e094 (2 samples, 0.01%)</title><rect x="46.2358%" y="181" width="0.0134%" height="15" fill="rgb(209,138,14)" fg:x="6897" fg:w="2"/><text x="46.4858%" y="191.50"></text></g><g><title>0x11006e104 (3 samples, 0.02%)</title><rect x="46.2492%" y="181" width="0.0201%" height="15" fill="rgb(222,18,33)" fg:x="6899" fg:w="3"/><text x="46.4992%" y="191.50"></text></g><g><title>0x110060d54 (4 samples, 0.03%)</title><rect x="46.2761%" y="165" width="0.0268%" height="15" fill="rgb(213,199,7)" fg:x="6903" fg:w="4"/><text x="46.5261%" y="175.50"></text></g><g><title>0x11006117c (2 samples, 0.01%)</title><rect x="46.3498%" y="165" width="0.0134%" height="15" fill="rgb(250,110,10)" fg:x="6914" fg:w="2"/><text x="46.5998%" y="175.50"></text></g><g><title>0x110061268 (18 samples, 0.12%)</title><rect x="46.3699%" y="165" width="0.1207%" height="15" fill="rgb(248,123,6)" fg:x="6917" fg:w="18"/><text x="46.6199%" y="175.50"></text></g><g><title>0x110061270 (2 samples, 0.01%)</title><rect x="46.4906%" y="165" width="0.0134%" height="15" fill="rgb(206,91,31)" fg:x="6935" fg:w="2"/><text x="46.7406%" y="175.50"></text></g><g><title>0x110061310 (4 samples, 0.03%)</title><rect x="46.5107%" y="165" width="0.0268%" height="15" fill="rgb(211,154,13)" fg:x="6938" fg:w="4"/><text x="46.7607%" y="175.50"></text></g><g><title>0x110061328 (6 samples, 0.04%)</title><rect x="46.5375%" y="165" width="0.0402%" height="15" fill="rgb(225,148,7)" fg:x="6942" fg:w="6"/><text x="46.7875%" y="175.50"></text></g><g><title>deno`Builtins_FulfillPromise (6 samples, 0.04%)</title><rect x="46.5375%" y="149" width="0.0402%" height="15" fill="rgb(220,160,43)" fg:x="6942" fg:w="6"/><text x="46.7875%" y="159.50"></text></g><g><title>deno`Builtins_CompileLazy (12 samples, 0.08%)</title><rect x="46.5911%" y="165" width="0.0804%" height="15" fill="rgb(213,52,39)" fg:x="6950" fg:w="12"/><text x="46.8411%" y="175.50"></text></g><g><title>0x11006e10c (62 samples, 0.42%)</title><rect x="46.2694%" y="181" width="0.4156%" height="15" fill="rgb(243,137,7)" fg:x="6902" fg:w="62"/><text x="46.5194%" y="191.50"></text></g><g><title>deno`Builtins_FulfillPromise (2 samples, 0.01%)</title><rect x="46.6716%" y="165" width="0.0134%" height="15" fill="rgb(230,79,13)" fg:x="6962" fg:w="2"/><text x="46.9216%" y="175.50"></text></g><g><title>0x11006e13c (2 samples, 0.01%)</title><rect x="46.6850%" y="181" width="0.0134%" height="15" fill="rgb(247,105,23)" fg:x="6964" fg:w="2"/><text x="46.9350%" y="191.50"></text></g><g><title>0x11006e1bc (2 samples, 0.01%)</title><rect x="46.7051%" y="181" width="0.0134%" height="15" fill="rgb(223,179,41)" fg:x="6967" fg:w="2"/><text x="46.9551%" y="191.50"></text></g><g><title>0x11006e1c4 (11 samples, 0.07%)</title><rect x="46.7185%" y="181" width="0.0737%" height="15" fill="rgb(218,9,34)" fg:x="6969" fg:w="11"/><text x="46.9685%" y="191.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (10 samples, 0.07%)</title><rect x="46.7252%" y="165" width="0.0670%" height="15" fill="rgb(222,106,8)" fg:x="6970" fg:w="10"/><text x="46.9752%" y="175.50"></text></g><g><title>0x11006e200 (8 samples, 0.05%)</title><rect x="46.7990%" y="181" width="0.0536%" height="15" fill="rgb(211,220,0)" fg:x="6981" fg:w="8"/><text x="47.0490%" y="191.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::FunctionCallbackArguments (2 samples, 0.01%)</title><rect x="46.9464%" y="117" width="0.0134%" height="15" fill="rgb(229,52,16)" fg:x="7003" fg:w="2"/><text x="47.1964%" y="127.50"></text></g><g><title>deno`&lt;T as core::any::Any&gt;::type_id (4 samples, 0.03%)</title><rect x="47.0738%" y="69" width="0.0268%" height="15" fill="rgb(212,155,18)" fg:x="7022" fg:w="4"/><text x="47.3238%" y="79.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11426 (3 samples, 0.02%)</title><rect x="47.1006%" y="69" width="0.0201%" height="15" fill="rgb(242,21,14)" fg:x="7026" fg:w="3"/><text x="47.3506%" y="79.50"></text></g><g><title>deno`deno_core::async_cancel::internal::_::_&lt;impl deno_core::async_cancel::internal::Registration&gt;::project_replace (2 samples, 0.01%)</title><rect x="47.1274%" y="69" width="0.0134%" height="15" fill="rgb(222,19,48)" fg:x="7030" fg:w="2"/><text x="47.3774%" y="79.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (17 samples, 0.11%)</title><rect x="47.1543%" y="69" width="0.1140%" height="15" fill="rgb(232,45,27)" fg:x="7034" fg:w="17"/><text x="47.4043%" y="79.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.23%)</title><rect x="47.0470%" y="85" width="0.2279%" height="15" fill="rgb(249,103,42)" fg:x="7018" fg:w="34"/><text x="47.2970%" y="95.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (3 samples, 0.02%)</title><rect x="47.2883%" y="85" width="0.0201%" height="15" fill="rgb(246,81,33)" fg:x="7054" fg:w="3"/><text x="47.5383%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="47.2950%" y="69" width="0.0134%" height="15" fill="rgb(252,33,42)" fg:x="7055" fg:w="2"/><text x="47.5450%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="47.2950%" y="53" width="0.0134%" height="15" fill="rgb(209,212,41)" fg:x="7055" fg:w="2"/><text x="47.5450%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="47.2950%" y="37" width="0.0134%" height="15" fill="rgb(207,154,6)" fg:x="7055" fg:w="2"/><text x="47.5450%" y="47.50"></text></g><g><title>deno`v8::Value::IsInt32 (3 samples, 0.02%)</title><rect x="47.3218%" y="85" width="0.0201%" height="15" fill="rgb(223,64,47)" fg:x="7059" fg:w="3"/><text x="47.5718%" y="95.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (2 samples, 0.01%)</title><rect x="47.3554%" y="85" width="0.0134%" height="15" fill="rgb(211,161,38)" fg:x="7064" fg:w="2"/><text x="47.6054%" y="95.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (59 samples, 0.40%)</title><rect x="47.0269%" y="101" width="0.3955%" height="15" fill="rgb(219,138,40)" fg:x="7015" fg:w="59"/><text x="47.2769%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="47.3889%" y="85" width="0.0335%" height="15" fill="rgb(241,228,46)" fg:x="7069" fg:w="5"/><text x="47.6389%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="47.4090%" y="69" width="0.0134%" height="15" fill="rgb(223,209,38)" fg:x="7072" fg:w="2"/><text x="47.6590%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="47.4090%" y="53" width="0.0134%" height="15" fill="rgb(236,164,45)" fg:x="7072" fg:w="2"/><text x="47.6590%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="47.4090%" y="37" width="0.0134%" height="15" fill="rgb(231,15,5)" fg:x="7072" fg:w="2"/><text x="47.6590%" y="47.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="47.4224%" y="101" width="0.0134%" height="15" fill="rgb(252,35,15)" fg:x="7074" fg:w="2"/><text x="47.6724%" y="111.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (3 samples, 0.02%)</title><rect x="47.4425%" y="101" width="0.0201%" height="15" fill="rgb(248,181,18)" fg:x="7077" fg:w="3"/><text x="47.6925%" y="111.50"></text></g><g><title>deno`serde_v8::de::from_v8 (3 samples, 0.02%)</title><rect x="47.4626%" y="101" width="0.0201%" height="15" fill="rgb(233,39,42)" fg:x="7080" fg:w="3"/><text x="47.7126%" y="111.50"></text></g><g><title>deno`v8::External::Value (6 samples, 0.04%)</title><rect x="47.4827%" y="101" width="0.0402%" height="15" fill="rgb(238,110,33)" fg:x="7083" fg:w="6"/><text x="47.7327%" y="111.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (2 samples, 0.01%)</title><rect x="47.5297%" y="101" width="0.0134%" height="15" fill="rgb(233,195,10)" fg:x="7090" fg:w="2"/><text x="47.7797%" y="111.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::~ExternalCallbackScope (4 samples, 0.03%)</title><rect x="47.5565%" y="101" width="0.0268%" height="15" fill="rgb(254,105,3)" fg:x="7094" fg:w="4"/><text x="47.8065%" y="111.50"></text></g><g><title>deno`v8__External__Value (2 samples, 0.01%)</title><rect x="47.5833%" y="101" width="0.0134%" height="15" fill="rgb(221,225,9)" fg:x="7098" fg:w="2"/><text x="47.8333%" y="111.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (105 samples, 0.70%)</title><rect x="46.9062%" y="133" width="0.7039%" height="15" fill="rgb(224,227,45)" fg:x="6997" fg:w="105"/><text x="47.1562%" y="143.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (97 samples, 0.65%)</title><rect x="46.9598%" y="117" width="0.6503%" height="15" fill="rgb(229,198,43)" fg:x="7005" fg:w="97"/><text x="47.2098%" y="127.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (108 samples, 0.72%)</title><rect x="46.8928%" y="149" width="0.7240%" height="15" fill="rgb(206,209,35)" fg:x="6995" fg:w="108"/><text x="47.1428%" y="159.50"></text></g><g><title>0x11006808c (112 samples, 0.75%)</title><rect x="46.8928%" y="165" width="0.7508%" height="15" fill="rgb(245,195,53)" fg:x="6995" fg:w="112"/><text x="47.1428%" y="175.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (4 samples, 0.03%)</title><rect x="47.6168%" y="149" width="0.0268%" height="15" fill="rgb(240,92,26)" fg:x="7103" fg:w="4"/><text x="47.8668%" y="159.50"></text></g><g><title>deno`Builtins_CallForwardVarargs (5 samples, 0.03%)</title><rect x="47.6771%" y="165" width="0.0335%" height="15" fill="rgb(207,40,23)" fg:x="7112" fg:w="5"/><text x="47.9271%" y="175.50"></text></g><g><title>0x11006e344 (127 samples, 0.85%)</title><rect x="46.8727%" y="181" width="0.8514%" height="15" fill="rgb(223,111,35)" fg:x="6992" fg:w="127"/><text x="47.1227%" y="191.50"></text></g><g><title>0x11006e358 (2 samples, 0.01%)</title><rect x="47.7241%" y="181" width="0.0134%" height="15" fill="rgb(229,147,28)" fg:x="7119" fg:w="2"/><text x="47.9741%" y="191.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (2 samples, 0.01%)</title><rect x="47.7241%" y="165" width="0.0134%" height="15" fill="rgb(211,29,28)" fg:x="7119" fg:w="2"/><text x="47.9741%" y="175.50"></text></g><g><title>0x11006e680 (3 samples, 0.02%)</title><rect x="47.7375%" y="181" width="0.0201%" height="15" fill="rgb(228,72,33)" fg:x="7121" fg:w="3"/><text x="47.9875%" y="191.50"></text></g><g><title>0x11006e6c8 (2 samples, 0.01%)</title><rect x="47.7777%" y="181" width="0.0134%" height="15" fill="rgb(205,214,31)" fg:x="7127" fg:w="2"/><text x="48.0277%" y="191.50"></text></g><g><title>0x11006e6ec (2 samples, 0.01%)</title><rect x="47.7911%" y="181" width="0.0134%" height="15" fill="rgb(224,111,15)" fg:x="7129" fg:w="2"/><text x="48.0411%" y="191.50"></text></g><g><title>0x11006e6fc (2 samples, 0.01%)</title><rect x="47.8045%" y="181" width="0.0134%" height="15" fill="rgb(253,21,26)" fg:x="7131" fg:w="2"/><text x="48.0545%" y="191.50"></text></g><g><title>0x11006e788 (7 samples, 0.05%)</title><rect x="47.8380%" y="181" width="0.0469%" height="15" fill="rgb(245,139,43)" fg:x="7136" fg:w="7"/><text x="48.0880%" y="191.50"></text></g><g><title>deno`deno_flash::get_method (2 samples, 0.01%)</title><rect x="47.8917%" y="165" width="0.0134%" height="15" fill="rgb(252,170,7)" fg:x="7144" fg:w="2"/><text x="48.1417%" y="175.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.05%)</title><rect x="47.9118%" y="149" width="0.0536%" height="15" fill="rgb(231,118,14)" fg:x="7147" fg:w="8"/><text x="48.1618%" y="159.50"></text></g><g><title>deno`deno_flash::op_flash_get_method_fast (17 samples, 0.11%)</title><rect x="47.9051%" y="165" width="0.1140%" height="15" fill="rgb(238,83,0)" fg:x="7146" fg:w="17"/><text x="48.1551%" y="175.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (8 samples, 0.05%)</title><rect x="47.9654%" y="149" width="0.0536%" height="15" fill="rgb(221,39,39)" fg:x="7155" fg:w="8"/><text x="48.2154%" y="159.50"></text></g><g><title>0x11006e790 (22 samples, 0.15%)</title><rect x="47.8850%" y="181" width="0.1475%" height="15" fill="rgb(222,119,46)" fg:x="7143" fg:w="22"/><text x="48.1350%" y="191.50"></text></g><g><title>deno`v8__Object__GetAlignedPointerFromInternalField (2 samples, 0.01%)</title><rect x="48.0190%" y="165" width="0.0134%" height="15" fill="rgb(222,165,49)" fg:x="7163" fg:w="2"/><text x="48.2690%" y="175.50"></text></g><g><title>0x11006e8f8 (3 samples, 0.02%)</title><rect x="48.0794%" y="181" width="0.0201%" height="15" fill="rgb(219,113,52)" fg:x="7172" fg:w="3"/><text x="48.3294%" y="191.50"></text></g><g><title>0x11006e900 (2 samples, 0.01%)</title><rect x="48.0995%" y="181" width="0.0134%" height="15" fill="rgb(214,7,15)" fg:x="7175" fg:w="2"/><text x="48.3495%" y="191.50"></text></g><g><title>0x11006e92c (2 samples, 0.01%)</title><rect x="48.1129%" y="181" width="0.0134%" height="15" fill="rgb(235,32,4)" fg:x="7177" fg:w="2"/><text x="48.3629%" y="191.50"></text></g><g><title>0x11006e96c (3 samples, 0.02%)</title><rect x="48.1397%" y="181" width="0.0201%" height="15" fill="rgb(238,90,54)" fg:x="7181" fg:w="3"/><text x="48.3897%" y="191.50"></text></g><g><title>0x11006e9c4 (2 samples, 0.01%)</title><rect x="48.1665%" y="181" width="0.0134%" height="15" fill="rgb(213,208,19)" fg:x="7185" fg:w="2"/><text x="48.4165%" y="191.50"></text></g><g><title>0x11006e9f0 (4 samples, 0.03%)</title><rect x="48.1866%" y="181" width="0.0268%" height="15" fill="rgb(233,156,4)" fg:x="7188" fg:w="4"/><text x="48.4366%" y="191.50"></text></g><g><title>0x11006e9f4 (2 samples, 0.01%)</title><rect x="48.2134%" y="181" width="0.0134%" height="15" fill="rgb(207,194,5)" fg:x="7192" fg:w="2"/><text x="48.4634%" y="191.50"></text></g><g><title>0x11006ea88 (3 samples, 0.02%)</title><rect x="48.2403%" y="181" width="0.0201%" height="15" fill="rgb(206,111,30)" fg:x="7196" fg:w="3"/><text x="48.4903%" y="191.50"></text></g><g><title>deno`Builtins_FastNewObject (62 samples, 0.42%)</title><rect x="48.2738%" y="165" width="0.4156%" height="15" fill="rgb(243,70,54)" fg:x="7201" fg:w="62"/><text x="48.5238%" y="175.50"></text></g><g><title>0x110060068 (4 samples, 0.03%)</title><rect x="48.8704%" y="133" width="0.0268%" height="15" fill="rgb(242,28,8)" fg:x="7290" fg:w="4"/><text x="49.1204%" y="143.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (3 samples, 0.02%)</title><rect x="48.8771%" y="117" width="0.0201%" height="15" fill="rgb(219,106,18)" fg:x="7291" fg:w="3"/><text x="49.1271%" y="127.50"></text></g><g><title>0x1100600a0 (4 samples, 0.03%)</title><rect x="48.9039%" y="133" width="0.0268%" height="15" fill="rgb(244,222,10)" fg:x="7295" fg:w="4"/><text x="49.1539%" y="143.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (4 samples, 0.03%)</title><rect x="48.9039%" y="117" width="0.0268%" height="15" fill="rgb(236,179,52)" fg:x="7295" fg:w="4"/><text x="49.1539%" y="127.50"></text></g><g><title>0x1100600d8 (10 samples, 0.07%)</title><rect x="48.9442%" y="133" width="0.0670%" height="15" fill="rgb(213,23,39)" fg:x="7301" fg:w="10"/><text x="49.1942%" y="143.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (9 samples, 0.06%)</title><rect x="48.9509%" y="117" width="0.0603%" height="15" fill="rgb(238,48,10)" fg:x="7302" fg:w="9"/><text x="49.2009%" y="127.50"></text></g><g><title>0x110060110 (4 samples, 0.03%)</title><rect x="49.0246%" y="133" width="0.0268%" height="15" fill="rgb(251,196,23)" fg:x="7313" fg:w="4"/><text x="49.2746%" y="143.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (4 samples, 0.03%)</title><rect x="49.0246%" y="117" width="0.0268%" height="15" fill="rgb(250,152,24)" fg:x="7313" fg:w="4"/><text x="49.2746%" y="127.50"></text></g><g><title>0x110060144 (2 samples, 0.01%)</title><rect x="49.0514%" y="133" width="0.0134%" height="15" fill="rgb(209,150,17)" fg:x="7317" fg:w="2"/><text x="49.3014%" y="143.50"></text></g><g><title>deno`Builtins_LoadIC (8 samples, 0.05%)</title><rect x="49.0782%" y="133" width="0.0536%" height="15" fill="rgb(234,202,34)" fg:x="7321" fg:w="8"/><text x="49.3282%" y="143.50"></text></g><g><title>0x11005b81c (46 samples, 0.31%)</title><rect x="48.8503%" y="149" width="0.3084%" height="15" fill="rgb(253,148,53)" fg:x="7287" fg:w="46"/><text x="49.1003%" y="159.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (4 samples, 0.03%)</title><rect x="49.1319%" y="133" width="0.0268%" height="15" fill="rgb(218,129,16)" fg:x="7329" fg:w="4"/><text x="49.3819%" y="143.50"></text></g><g><title>0x11005b8c4 (2 samples, 0.01%)</title><rect x="49.1654%" y="149" width="0.0134%" height="15" fill="rgb(216,85,19)" fg:x="7334" fg:w="2"/><text x="49.4154%" y="159.50"></text></g><g><title>0x11005b970 (3 samples, 0.02%)</title><rect x="49.1855%" y="149" width="0.0201%" height="15" fill="rgb(235,228,7)" fg:x="7337" fg:w="3"/><text x="49.4355%" y="159.50"></text></g><g><title>0x11005ba3c (2 samples, 0.01%)</title><rect x="49.2324%" y="149" width="0.0134%" height="15" fill="rgb(245,175,0)" fg:x="7344" fg:w="2"/><text x="49.4824%" y="159.50"></text></g><g><title>0x11005ba90 (2 samples, 0.01%)</title><rect x="49.2592%" y="149" width="0.0134%" height="15" fill="rgb(208,168,36)" fg:x="7348" fg:w="2"/><text x="49.5092%" y="159.50"></text></g><g><title>0x11006045c (6 samples, 0.04%)</title><rect x="49.2726%" y="133" width="0.0402%" height="15" fill="rgb(246,171,24)" fg:x="7350" fg:w="6"/><text x="49.5226%" y="143.50"></text></g><g><title>0x110060500 (2 samples, 0.01%)</title><rect x="49.3263%" y="133" width="0.0134%" height="15" fill="rgb(215,142,24)" fg:x="7358" fg:w="2"/><text x="49.5763%" y="143.50"></text></g><g><title>0x110060560 (7 samples, 0.05%)</title><rect x="49.3397%" y="133" width="0.0469%" height="15" fill="rgb(250,187,7)" fg:x="7360" fg:w="7"/><text x="49.5897%" y="143.50"></text></g><g><title>0x11005ba98 (21 samples, 0.14%)</title><rect x="49.2726%" y="149" width="0.1408%" height="15" fill="rgb(228,66,33)" fg:x="7350" fg:w="21"/><text x="49.5226%" y="159.50"></text></g><g><title>deno`Builtins_SameValueNumbersOnly (3 samples, 0.02%)</title><rect x="49.3933%" y="133" width="0.0201%" height="15" fill="rgb(234,215,21)" fg:x="7368" fg:w="3"/><text x="49.6433%" y="143.50"></text></g><g><title>0x11005bc0c (4 samples, 0.03%)</title><rect x="49.4402%" y="149" width="0.0268%" height="15" fill="rgb(222,191,20)" fg:x="7375" fg:w="4"/><text x="49.6902%" y="159.50"></text></g><g><title>0x11005bc34 (2 samples, 0.01%)</title><rect x="49.4738%" y="149" width="0.0134%" height="15" fill="rgb(245,79,54)" fg:x="7380" fg:w="2"/><text x="49.7238%" y="159.50"></text></g><g><title>0x110060000 (2 samples, 0.01%)</title><rect x="49.5073%" y="149" width="0.0134%" height="15" fill="rgb(240,10,37)" fg:x="7385" fg:w="2"/><text x="49.7573%" y="159.50"></text></g><g><title>deno`Builtins_GrowFastSmiOrObjectElements (14 samples, 0.09%)</title><rect x="49.5341%" y="149" width="0.0939%" height="15" fill="rgb(214,192,32)" fg:x="7389" fg:w="14"/><text x="49.7841%" y="159.50"></text></g><g><title>deno`Builtins_LoadIC (17 samples, 0.11%)</title><rect x="49.6279%" y="149" width="0.1140%" height="15" fill="rgb(209,36,54)" fg:x="7403" fg:w="17"/><text x="49.8779%" y="159.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (3 samples, 0.02%)</title><rect x="49.7419%" y="149" width="0.0201%" height="15" fill="rgb(220,10,11)" fg:x="7420" fg:w="3"/><text x="49.9919%" y="159.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (162 samples, 1.09%)</title><rect x="48.6894%" y="165" width="1.0860%" height="15" fill="rgb(221,106,17)" fg:x="7263" fg:w="162"/><text x="48.9394%" y="175.50"></text></g><g><title>deno`Builtins_SameValueNumbersOnly (2 samples, 0.01%)</title><rect x="49.7620%" y="149" width="0.0134%" height="15" fill="rgb(251,142,44)" fg:x="7423" fg:w="2"/><text x="50.0120%" y="159.50"></text></g><g><title>0x11006ead4 (229 samples, 1.54%)</title><rect x="48.2604%" y="181" width="1.5352%" height="15" fill="rgb(238,13,15)" fg:x="7199" fg:w="229"/><text x="48.5104%" y="191.50"></text></g><g><title>deno`construct_stub_invoke_deopt_addr (3 samples, 0.02%)</title><rect x="49.7754%" y="165" width="0.0201%" height="15" fill="rgb(208,107,27)" fg:x="7425" fg:w="3"/><text x="50.0254%" y="175.50"></text></g><g><title>0x11006eae0 (2 samples, 0.01%)</title><rect x="49.7955%" y="181" width="0.0134%" height="15" fill="rgb(205,136,37)" fg:x="7428" fg:w="2"/><text x="50.0455%" y="191.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (9 samples, 0.06%)</title><rect x="49.9899%" y="149" width="0.0603%" height="15" fill="rgb(250,205,27)" fg:x="7457" fg:w="9"/><text x="50.2399%" y="159.50"></text></g><g><title>deno`Builtins_FulfillPromise (2 samples, 0.01%)</title><rect x="50.0838%" y="133" width="0.0134%" height="15" fill="rgb(210,80,43)" fg:x="7471" fg:w="2"/><text x="50.3338%" y="143.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (81 samples, 0.54%)</title><rect x="49.8089%" y="165" width="0.5430%" height="15" fill="rgb(247,160,36)" fg:x="7430" fg:w="81"/><text x="50.0589%" y="175.50"></text></g><g><title>deno`Builtins_ResolvePromise (45 samples, 0.30%)</title><rect x="50.0503%" y="149" width="0.3017%" height="15" fill="rgb(234,13,49)" fg:x="7466" fg:w="45"/><text x="50.3003%" y="159.50"></text></g><g><title>deno`Builtins_GetProperty (38 samples, 0.25%)</title><rect x="50.0972%" y="133" width="0.2547%" height="15" fill="rgb(234,122,0)" fg:x="7473" fg:w="38"/><text x="50.3472%" y="143.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (2 samples, 0.01%)</title><rect x="50.3519%" y="165" width="0.0134%" height="15" fill="rgb(207,146,38)" fg:x="7511" fg:w="2"/><text x="50.6019%" y="175.50"></text></g><g><title>0x11006eae8 (88 samples, 0.59%)</title><rect x="49.8089%" y="181" width="0.5899%" height="15" fill="rgb(207,177,25)" fg:x="7430" fg:w="88"/><text x="50.0589%" y="191.50"></text></g><g><title>deno`Builtins_ResolvePromise (5 samples, 0.03%)</title><rect x="50.3654%" y="165" width="0.0335%" height="15" fill="rgb(211,178,42)" fg:x="7513" fg:w="5"/><text x="50.6154%" y="175.50"></text></g><g><title>0x11006eb00 (2 samples, 0.01%)</title><rect x="50.3989%" y="181" width="0.0134%" height="15" fill="rgb(230,69,54)" fg:x="7518" fg:w="2"/><text x="50.6489%" y="191.50"></text></g><g><title>0x11006f87c (2 samples, 0.01%)</title><rect x="50.4391%" y="181" width="0.0134%" height="15" fill="rgb(214,135,41)" fg:x="7524" fg:w="2"/><text x="50.6891%" y="191.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (2 samples, 0.01%)</title><rect x="50.4391%" y="165" width="0.0134%" height="15" fill="rgb(237,67,25)" fg:x="7524" fg:w="2"/><text x="50.6891%" y="175.50"></text></g><g><title>0x11006f8a0 (3 samples, 0.02%)</title><rect x="50.4525%" y="181" width="0.0201%" height="15" fill="rgb(222,189,50)" fg:x="7526" fg:w="3"/><text x="50.7025%" y="191.50"></text></g><g><title>0x11006f8a8 (7 samples, 0.05%)</title><rect x="50.4726%" y="181" width="0.0469%" height="15" fill="rgb(245,148,34)" fg:x="7529" fg:w="7"/><text x="50.7226%" y="191.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (7 samples, 0.05%)</title><rect x="50.4726%" y="165" width="0.0469%" height="15" fill="rgb(222,29,6)" fg:x="7529" fg:w="7"/><text x="50.7226%" y="175.50"></text></g><g><title>0x11006f8b8 (3 samples, 0.02%)</title><rect x="50.5262%" y="181" width="0.0201%" height="15" fill="rgb(221,189,43)" fg:x="7537" fg:w="3"/><text x="50.7762%" y="191.50"></text></g><g><title>0x11006f8d4 (6 samples, 0.04%)</title><rect x="50.5464%" y="181" width="0.0402%" height="15" fill="rgb(207,36,27)" fg:x="7540" fg:w="6"/><text x="50.7964%" y="191.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (6 samples, 0.04%)</title><rect x="50.5464%" y="165" width="0.0402%" height="15" fill="rgb(217,90,24)" fg:x="7540" fg:w="6"/><text x="50.7964%" y="175.50"></text></g><g><title>0x11006f910 (2 samples, 0.01%)</title><rect x="50.5866%" y="181" width="0.0134%" height="15" fill="rgb(224,66,35)" fg:x="7546" fg:w="2"/><text x="50.8366%" y="191.50"></text></g><g><title>deno`Builtins_CompileLazy (3 samples, 0.02%)</title><rect x="50.6268%" y="181" width="0.0201%" height="15" fill="rgb(221,13,50)" fg:x="7552" fg:w="3"/><text x="50.8768%" y="191.50"></text></g><g><title>deno`Builtins_JSConstructStubGeneric (2 samples, 0.01%)</title><rect x="50.6603%" y="181" width="0.0134%" height="15" fill="rgb(236,68,49)" fg:x="7557" fg:w="2"/><text x="50.9103%" y="191.50"></text></g><g><title>deno`Builtins_KeyedLoadICTrampoline_Megamorphic (4 samples, 0.03%)</title><rect x="50.6737%" y="181" width="0.0268%" height="15" fill="rgb(229,146,28)" fg:x="7559" fg:w="4"/><text x="50.9237%" y="191.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (3 samples, 0.02%)</title><rect x="50.7005%" y="181" width="0.0201%" height="15" fill="rgb(225,31,38)" fg:x="7563" fg:w="3"/><text x="50.9505%" y="191.50"></text></g><g><title>deno`Builtins_LoadIC (4 samples, 0.03%)</title><rect x="50.7207%" y="181" width="0.0268%" height="15" fill="rgb(250,208,3)" fg:x="7566" fg:w="4"/><text x="50.9707%" y="191.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (2 samples, 0.01%)</title><rect x="50.7475%" y="181" width="0.0134%" height="15" fill="rgb(246,54,23)" fg:x="7570" fg:w="2"/><text x="50.9975%" y="191.50"></text></g><g><title>deno`Builtins_StrictEqual_WithFeedback (35 samples, 0.23%)</title><rect x="50.7609%" y="181" width="0.2346%" height="15" fill="rgb(243,76,11)" fg:x="7572" fg:w="35"/><text x="51.0109%" y="191.50"></text></g><g><title>deno`Builtins_SuspendGeneratorBaseline (2 samples, 0.01%)</title><rect x="50.9955%" y="181" width="0.0134%" height="15" fill="rgb(245,21,50)" fg:x="7607" fg:w="2"/><text x="51.2455%" y="191.50"></text></g><g><title>deno`deno_flash::next_request_sync (4 samples, 0.03%)</title><rect x="51.0290%" y="181" width="0.0268%" height="15" fill="rgb(228,9,43)" fg:x="7612" fg:w="4"/><text x="51.2790%" y="191.50"></text></g><g><title>deno`deno_flash::op_flash_get_method_fast (2 samples, 0.01%)</title><rect x="51.0558%" y="181" width="0.0134%" height="15" fill="rgb(208,100,47)" fg:x="7616" fg:w="2"/><text x="51.3058%" y="191.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (6,855 samples, 45.95%)</title><rect x="5.1284%" y="197" width="45.9543%" height="15" fill="rgb(232,26,8)" fg:x="765" fg:w="6855"/><text x="5.3784%" y="207.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`deno_flash::op_flash_next_fast (2 samples, 0.01%)</title><rect x="51.0692%" y="181" width="0.0134%" height="15" fill="rgb(216,166,38)" fg:x="7618" fg:w="2"/><text x="51.3192%" y="191.50"></text></g><g><title>deno`Builtins_ResolvePromise (10 samples, 0.07%)</title><rect x="51.0827%" y="197" width="0.0670%" height="15" fill="rgb(251,202,51)" fg:x="7620" fg:w="10"/><text x="51.3327%" y="207.50"></text></g><g><title>deno`Builtins_FulfillPromise (9 samples, 0.06%)</title><rect x="51.0894%" y="181" width="0.0603%" height="15" fill="rgb(254,216,34)" fg:x="7621" fg:w="9"/><text x="51.3394%" y="191.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (6,896 samples, 46.23%)</title><rect x="5.0211%" y="213" width="46.2291%" height="15" fill="rgb(251,32,27)" fg:x="749" fg:w="6896"/><text x="5.2711%" y="223.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (15 samples, 0.10%)</title><rect x="51.1497%" y="197" width="0.1006%" height="15" fill="rgb(208,127,28)" fg:x="7630" fg:w="15"/><text x="51.3997%" y="207.50"></text></g><g><title>deno`Builtins_RecordWriteIgnoreFP (11 samples, 0.07%)</title><rect x="51.1765%" y="181" width="0.0737%" height="15" fill="rgb(224,137,22)" fg:x="7634" fg:w="11"/><text x="51.4265%" y="191.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (6,966 samples, 46.70%)</title><rect x="4.5854%" y="261" width="46.6984%" height="15" fill="rgb(254,70,32)" fg:x="684" fg:w="6966"/><text x="4.8354%" y="271.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::..</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (6,961 samples, 46.66%)</title><rect x="4.6189%" y="245" width="46.6649%" height="15" fill="rgb(229,75,37)" fg:x="689" fg:w="6961"/><text x="4.8689%" y="255.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (6,958 samples, 46.64%)</title><rect x="4.6390%" y="229" width="46.6448%" height="15" fill="rgb(252,64,23)" fg:x="692" fg:w="6958"/><text x="4.8890%" y="239.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_ResolvePromise (5 samples, 0.03%)</title><rect x="51.2503%" y="213" width="0.0335%" height="15" fill="rgb(232,162,48)" fg:x="7645" fg:w="5"/><text x="51.5003%" y="223.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (6,992 samples, 46.87%)</title><rect x="4.4178%" y="341" width="46.8727%" height="15" fill="rgb(246,160,12)" fg:x="659" fg:w="6992"/><text x="4.6678%" y="351.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (6,991 samples, 46.87%)</title><rect x="4.4245%" y="325" width="46.8660%" height="15" fill="rgb(247,166,0)" fg:x="660" fg:w="6991"/><text x="4.6745%" y="335.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (6,986 samples, 46.83%)</title><rect x="4.4580%" y="309" width="46.8325%" height="15" fill="rgb(249,219,21)" fg:x="665" fg:w="6986"/><text x="4.7080%" y="319.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*, v8::internal::MaybeHandle (6,978 samples, 46.78%)</title><rect x="4.5116%" y="293" width="46.7788%" height="15" fill="rgb(205,209,3)" fg:x="673" fg:w="6978"/><text x="4.7616%" y="303.50">deno`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::in..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (6,970 samples, 46.73%)</title><rect x="4.5653%" y="277" width="46.7252%" height="15" fill="rgb(243,44,1)" fg:x="681" fg:w="6970"/><text x="4.8153%" y="287.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Is..</text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (7,098 samples, 47.58%)</title><rect x="3.7139%" y="357" width="47.5833%" height="15" fill="rgb(206,159,16)" fg:x="554" fg:w="7098"/><text x="3.9639%" y="367.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8:..</text></g><g><title>deno`v8::HandleScope::HandleScope (2 samples, 0.01%)</title><rect x="51.2972%" y="357" width="0.0134%" height="15" fill="rgb(244,77,30)" fg:x="7652" fg:w="2"/><text x="51.5472%" y="367.50"></text></g><g><title>deno`v8::TryCatch::Exception (3 samples, 0.02%)</title><rect x="51.3173%" y="357" width="0.0201%" height="15" fill="rgb(218,69,12)" fg:x="7655" fg:w="3"/><text x="51.5673%" y="367.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (4 samples, 0.03%)</title><rect x="51.3374%" y="357" width="0.0268%" height="15" fill="rgb(212,87,7)" fg:x="7658" fg:w="4"/><text x="51.5874%" y="367.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (3 samples, 0.02%)</title><rect x="51.3642%" y="357" width="0.0201%" height="15" fill="rgb(245,114,25)" fg:x="7662" fg:w="3"/><text x="51.6142%" y="367.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call (3 samples, 0.02%)</title><rect x="51.3843%" y="357" width="0.0201%" height="15" fill="rgb(210,61,42)" fg:x="7665" fg:w="3"/><text x="51.6343%" y="367.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (2 samples, 0.01%)</title><rect x="51.4111%" y="357" width="0.0134%" height="15" fill="rgb(211,52,33)" fg:x="7669" fg:w="2"/><text x="51.6611%" y="367.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (6 samples, 0.04%)</title><rect x="51.4313%" y="357" width="0.0402%" height="15" fill="rgb(234,58,33)" fg:x="7672" fg:w="6"/><text x="51.6813%" y="367.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (3 samples, 0.02%)</title><rect x="51.4715%" y="357" width="0.0201%" height="15" fill="rgb(220,115,36)" fg:x="7678" fg:w="3"/><text x="51.7215%" y="367.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (3 samples, 0.02%)</title><rect x="51.4916%" y="357" width="0.0201%" height="15" fill="rgb(243,153,54)" fg:x="7681" fg:w="3"/><text x="51.7416%" y="367.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (5 samples, 0.03%)</title><rect x="51.5251%" y="357" width="0.0335%" height="15" fill="rgb(251,47,18)" fg:x="7686" fg:w="5"/><text x="51.7751%" y="367.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.01%)</title><rect x="51.5452%" y="341" width="0.0134%" height="15" fill="rgb(242,102,42)" fg:x="7689" fg:w="2"/><text x="51.7952%" y="351.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (4 samples, 0.03%)</title><rect x="51.5653%" y="357" width="0.0268%" height="15" fill="rgb(234,31,38)" fg:x="7692" fg:w="4"/><text x="51.8153%" y="367.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (3 samples, 0.02%)</title><rect x="51.5921%" y="357" width="0.0201%" height="15" fill="rgb(221,117,51)" fg:x="7696" fg:w="3"/><text x="51.8421%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="51.6123%" y="341" width="0.0134%" height="15" fill="rgb(212,20,18)" fg:x="7699" fg:w="2"/><text x="51.8623%" y="351.50"></text></g><g><title>deno`v8::isolate::Isolate::is_execution_terminating (6 samples, 0.04%)</title><rect x="51.6123%" y="357" width="0.0402%" height="15" fill="rgb(245,133,36)" fg:x="7699" fg:w="6"/><text x="51.8623%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.03%)</title><rect x="51.6257%" y="341" width="0.0268%" height="15" fill="rgb(212,6,19)" fg:x="7701" fg:w="4"/><text x="51.8757%" y="351.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (4 samples, 0.03%)</title><rect x="51.6525%" y="357" width="0.0268%" height="15" fill="rgb(218,1,36)" fg:x="7705" fg:w="4"/><text x="51.9025%" y="367.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (3 samples, 0.02%)</title><rect x="51.6860%" y="309" width="0.0201%" height="15" fill="rgb(246,84,54)" fg:x="7710" fg:w="3"/><text x="51.9360%" y="319.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (3 samples, 0.02%)</title><rect x="51.6860%" y="293" width="0.0201%" height="15" fill="rgb(242,110,6)" fg:x="7710" fg:w="3"/><text x="51.9360%" y="303.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (3 samples, 0.02%)</title><rect x="51.6860%" y="277" width="0.0201%" height="15" fill="rgb(214,47,5)" fg:x="7710" fg:w="3"/><text x="51.9360%" y="287.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (3 samples, 0.02%)</title><rect x="51.6860%" y="261" width="0.0201%" height="15" fill="rgb(218,159,25)" fg:x="7710" fg:w="3"/><text x="51.9360%" y="271.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (3 samples, 0.02%)</title><rect x="51.6860%" y="245" width="0.0201%" height="15" fill="rgb(215,211,28)" fg:x="7710" fg:w="3"/><text x="51.9360%" y="255.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (3 samples, 0.02%)</title><rect x="51.6860%" y="229" width="0.0201%" height="15" fill="rgb(238,59,32)" fg:x="7710" fg:w="3"/><text x="51.9360%" y="239.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (11 samples, 0.07%)</title><rect x="51.7195%" y="245" width="0.0737%" height="15" fill="rgb(226,82,3)" fg:x="7715" fg:w="11"/><text x="51.9695%" y="255.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (13 samples, 0.09%)</title><rect x="51.7195%" y="261" width="0.0871%" height="15" fill="rgb(240,164,32)" fg:x="7715" fg:w="13"/><text x="51.9695%" y="271.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (2 samples, 0.01%)</title><rect x="51.7933%" y="245" width="0.0134%" height="15" fill="rgb(232,46,7)" fg:x="7726" fg:w="2"/><text x="52.0433%" y="255.50"></text></g><g><title>deno`v8::internal::CompactionSpaceCollection::CompactionSpaceCollection (2 samples, 0.01%)</title><rect x="51.8201%" y="245" width="0.0134%" height="15" fill="rgb(229,129,53)" fg:x="7730" fg:w="2"/><text x="52.0701%" y="255.50"></text></g><g><title>deno`v8::internal::FreeList::CreateFreeList (2 samples, 0.01%)</title><rect x="51.8201%" y="229" width="0.0134%" height="15" fill="rgb(234,188,29)" fg:x="7730" fg:w="2"/><text x="52.0701%" y="239.50"></text></g><g><title>deno`v8::internal::FreeListManyCached::FreeListManyCached (2 samples, 0.01%)</title><rect x="51.8201%" y="213" width="0.0134%" height="15" fill="rgb(246,141,4)" fg:x="7730" fg:w="2"/><text x="52.0701%" y="223.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (3 samples, 0.02%)</title><rect x="51.8201%" y="261" width="0.0201%" height="15" fill="rgb(229,23,39)" fg:x="7730" fg:w="3"/><text x="52.0701%" y="271.50"></text></g><g><title>deno`v8::internal::Scavenger::~Scavenger (3 samples, 0.02%)</title><rect x="51.8402%" y="261" width="0.0201%" height="15" fill="rgb(206,12,3)" fg:x="7733" fg:w="3"/><text x="52.0902%" y="271.50"></text></g><g><title>deno`v8::internal::PagedSpace::~PagedSpace (3 samples, 0.02%)</title><rect x="51.8402%" y="245" width="0.0201%" height="15" fill="rgb(252,226,20)" fg:x="7733" fg:w="3"/><text x="52.0902%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="51.8469%" y="229" width="0.0134%" height="15" fill="rgb(216,123,35)" fg:x="7734" fg:w="2"/><text x="52.0969%" y="239.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (3 samples, 0.02%)</title><rect x="51.8603%" y="245" width="0.0201%" height="15" fill="rgb(212,68,40)" fg:x="7736" fg:w="3"/><text x="52.1103%" y="255.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (3 samples, 0.02%)</title><rect x="51.8603%" y="229" width="0.0201%" height="15" fill="rgb(254,125,32)" fg:x="7736" fg:w="3"/><text x="52.1103%" y="239.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (2 samples, 0.01%)</title><rect x="51.8670%" y="213" width="0.0134%" height="15" fill="rgb(253,97,22)" fg:x="7737" fg:w="2"/><text x="52.1170%" y="223.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (4 samples, 0.03%)</title><rect x="51.8603%" y="261" width="0.0268%" height="15" fill="rgb(241,101,14)" fg:x="7736" fg:w="4"/><text x="52.1103%" y="271.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (28 samples, 0.19%)</title><rect x="51.7061%" y="277" width="0.1877%" height="15" fill="rgb(238,103,29)" fg:x="7713" fg:w="28"/><text x="51.9561%" y="287.50"></text></g><g><title>deno`v8::internal::ScavengeJob::Task::RunInternal (38 samples, 0.25%)</title><rect x="51.6860%" y="341" width="0.2547%" height="15" fill="rgb(233,195,47)" fg:x="7710" fg:w="38"/><text x="51.9360%" y="351.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (38 samples, 0.25%)</title><rect x="51.6860%" y="325" width="0.2547%" height="15" fill="rgb(246,218,30)" fg:x="7710" fg:w="38"/><text x="51.9360%" y="335.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (35 samples, 0.23%)</title><rect x="51.7061%" y="309" width="0.2346%" height="15" fill="rgb(219,145,47)" fg:x="7713" fg:w="35"/><text x="51.9561%" y="319.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (35 samples, 0.23%)</title><rect x="51.7061%" y="293" width="0.2346%" height="15" fill="rgb(243,12,26)" fg:x="7713" fg:w="35"/><text x="51.9561%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.03%)</title><rect x="51.9072%" y="277" width="0.0335%" height="15" fill="rgb(214,87,16)" fg:x="7743" fg:w="5"/><text x="52.1572%" y="287.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::MoveExpiredDelayedTasks(v8::base::LockGuard&lt;v8::base::Mutex, (2 samples, 0.01%)</title><rect x="51.9407%" y="341" width="0.0134%" height="15" fill="rgb(208,99,42)" fg:x="7748" fg:w="2"/><text x="52.1907%" y="351.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::MoveExpiredDelayedTasks(v8::base::LockGuard&lt;v8::base::Mutex,  (8 samples, 0.05%)</title><rect x="51.9541%" y="325" width="0.0536%" height="15" fill="rgb(253,99,2)" fg:x="7750" fg:w="8"/><text x="52.2041%" y="335.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromDelayedQueueLocked(v8::base::LockGuard&lt;v8::base::Mutex,  (8 samples, 0.05%)</title><rect x="51.9541%" y="309" width="0.0536%" height="15" fill="rgb(220,168,23)" fg:x="7750" fg:w="8"/><text x="52.2041%" y="319.50"></text></g><g><title>deno`v8::platform::(anonymous namespace)::DefaultTimeFunction (8 samples, 0.05%)</title><rect x="51.9541%" y="293" width="0.0536%" height="15" fill="rgb(242,38,24)" fg:x="7750" fg:w="8"/><text x="52.2041%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (8 samples, 0.05%)</title><rect x="51.9541%" y="277" width="0.0536%" height="15" fill="rgb(225,182,9)" fg:x="7750" fg:w="8"/><text x="52.2041%" y="287.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (9 samples, 0.06%)</title><rect x="51.9541%" y="341" width="0.0603%" height="15" fill="rgb(243,178,37)" fg:x="7750" fg:w="9"/><text x="52.2041%" y="351.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (52 samples, 0.35%)</title><rect x="51.6793%" y="357" width="0.3486%" height="15" fill="rgb(232,139,19)" fg:x="7709" fg:w="52"/><text x="51.9293%" y="367.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_try_catch (2 samples, 0.01%)</title><rect x="52.0346%" y="357" width="0.0134%" height="15" fill="rgb(225,201,24)" fg:x="7762" fg:w="2"/><text x="52.2846%" y="367.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (2 samples, 0.01%)</title><rect x="52.0480%" y="357" width="0.0134%" height="15" fill="rgb(221,47,46)" fg:x="7764" fg:w="2"/><text x="52.2980%" y="367.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (2 samples, 0.01%)</title><rect x="52.0480%" y="341" width="0.0134%" height="15" fill="rgb(249,23,13)" fg:x="7764" fg:w="2"/><text x="52.2980%" y="351.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (3 samples, 0.02%)</title><rect x="52.0815%" y="341" width="0.0201%" height="15" fill="rgb(219,9,5)" fg:x="7769" fg:w="3"/><text x="52.3315%" y="351.50"></text></g><g><title>deno`v8::internal::GetCurrentStackPosition (2 samples, 0.01%)</title><rect x="52.0882%" y="325" width="0.0134%" height="15" fill="rgb(254,171,16)" fg:x="7770" fg:w="2"/><text x="52.3382%" y="335.50"></text></g><g><title>deno`v8::internal::GetCurrentStackPosition (2 samples, 0.01%)</title><rect x="52.1016%" y="341" width="0.0134%" height="15" fill="rgb(230,171,20)" fg:x="7772" fg:w="2"/><text x="52.3516%" y="351.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (9 samples, 0.06%)</title><rect x="52.0614%" y="357" width="0.0603%" height="15" fill="rgb(210,71,41)" fg:x="7766" fg:w="9"/><text x="52.3114%" y="367.50"></text></g><g><title>deno`v8__Global__New (3 samples, 0.02%)</title><rect x="52.1284%" y="357" width="0.0201%" height="15" fill="rgb(206,173,20)" fg:x="7776" fg:w="3"/><text x="52.3784%" y="367.50"></text></g><g><title>deno`v8__Isolate__SetData (2 samples, 0.01%)</title><rect x="52.1620%" y="357" width="0.0134%" height="15" fill="rgb(233,88,34)" fg:x="7781" fg:w="2"/><text x="52.4120%" y="367.50"></text></g><g><title>deno`v8__Undefined (2 samples, 0.01%)</title><rect x="52.1754%" y="357" width="0.0134%" height="15" fill="rgb(223,209,46)" fg:x="7783" fg:w="2"/><text x="52.4254%" y="367.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.03%)</title><rect x="52.1888%" y="357" width="0.0335%" height="15" fill="rgb(250,43,18)" fg:x="7785" fg:w="5"/><text x="52.4388%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="52.2223%" y="357" width="0.0536%" height="15" fill="rgb(208,13,10)" fg:x="7790" fg:w="8"/><text x="52.4723%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="52.2491%" y="341" width="0.0268%" height="15" fill="rgb(212,200,36)" fg:x="7794" fg:w="4"/><text x="52.4991%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="52.2491%" y="325" width="0.0268%" height="15" fill="rgb(225,90,30)" fg:x="7794" fg:w="4"/><text x="52.4991%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="52.2558%" y="309" width="0.0201%" height="15" fill="rgb(236,182,39)" fg:x="7795" fg:w="3"/><text x="52.5058%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="52.2759%" y="357" width="0.0134%" height="15" fill="rgb(212,144,35)" fg:x="7798" fg:w="2"/><text x="52.5259%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.07%)</title><rect x="52.2893%" y="357" width="0.0670%" height="15" fill="rgb(228,63,44)" fg:x="7800" fg:w="10"/><text x="52.5393%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.05%)</title><rect x="52.3094%" y="341" width="0.0469%" height="15" fill="rgb(228,109,6)" fg:x="7803" fg:w="7"/><text x="52.5594%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.04%)</title><rect x="52.3564%" y="357" width="0.0402%" height="15" fill="rgb(238,117,24)" fg:x="7810" fg:w="6"/><text x="52.6064%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.03%)</title><rect x="52.3631%" y="341" width="0.0335%" height="15" fill="rgb(242,26,26)" fg:x="7811" fg:w="5"/><text x="52.6131%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="52.4100%" y="357" width="0.0134%" height="15" fill="rgb(221,92,48)" fg:x="7818" fg:w="2"/><text x="52.6600%" y="367.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (7,700 samples, 51.62%)</title><rect x="0.8246%" y="373" width="51.6190%" height="15" fill="rgb(209,209,32)" fg:x="123" fg:w="7700"/><text x="1.0746%" y="383.50">deno`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="52.4234%" y="357" width="0.0201%" height="15" fill="rgb(221,70,22)" fg:x="7820" fg:w="3"/><text x="52.6734%" y="367.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (2 samples, 0.01%)</title><rect x="52.4502%" y="373" width="0.0134%" height="15" fill="rgb(248,145,5)" fg:x="7824" fg:w="2"/><text x="52.7002%" y="383.50"></text></g><g><title>deno`v8::Isolate::PerformMicrotaskCheckpoint (2 samples, 0.01%)</title><rect x="52.4636%" y="373" width="0.0134%" height="15" fill="rgb(226,116,26)" fg:x="7826" fg:w="2"/><text x="52.7136%" y="383.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (10 samples, 0.07%)</title><rect x="52.5039%" y="373" width="0.0670%" height="15" fill="rgb(244,5,17)" fg:x="7832" fg:w="10"/><text x="52.7539%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="52.6312%" y="373" width="0.0134%" height="15" fill="rgb(252,159,33)" fg:x="7851" fg:w="2"/><text x="52.8812%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="52.6446%" y="373" width="0.0268%" height="15" fill="rgb(206,71,0)" fg:x="7853" fg:w="4"/><text x="52.8946%" y="383.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,764 samples, 52.05%)</title><rect x="0.6503%" y="389" width="52.0480%" height="15" fill="rgb(233,118,54)" fg:x="97" fg:w="7764"/><text x="0.9003%" y="399.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="52.6849%" y="373" width="0.0134%" height="15" fill="rgb(234,83,48)" fg:x="7859" fg:w="2"/><text x="52.9349%" y="383.50"></text></g><g><title>deno`OUTLINED_FUNCTION_37654 (4 samples, 0.03%)</title><rect x="52.6983%" y="389" width="0.0268%" height="15" fill="rgb(228,3,54)" fg:x="7861" fg:w="4"/><text x="52.9483%" y="399.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,781 samples, 52.16%)</title><rect x="0.5765%" y="421" width="52.1620%" height="15" fill="rgb(226,155,13)" fg:x="86" fg:w="7781"/><text x="0.8265%" y="431.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,779 samples, 52.15%)</title><rect x="0.5899%" y="405" width="52.1486%" height="15" fill="rgb(241,28,37)" fg:x="88" fg:w="7779"/><text x="0.8399%" y="415.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (2 samples, 0.01%)</title><rect x="52.7251%" y="389" width="0.0134%" height="15" fill="rgb(233,93,10)" fg:x="7865" fg:w="2"/><text x="52.9751%" y="399.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.01%)</title><rect x="52.7452%" y="373" width="0.0134%" height="15" fill="rgb(225,113,19)" fg:x="7868" fg:w="2"/><text x="52.9952%" y="383.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.03%)</title><rect x="52.7452%" y="389" width="0.0268%" height="15" fill="rgb(241,2,18)" fg:x="7868" fg:w="4"/><text x="52.9952%" y="399.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.01%)</title><rect x="52.7586%" y="373" width="0.0134%" height="15" fill="rgb(228,207,21)" fg:x="7870" fg:w="2"/><text x="53.0086%" y="383.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.01%)</title><rect x="52.7586%" y="357" width="0.0134%" height="15" fill="rgb(213,211,35)" fg:x="7870" fg:w="2"/><text x="53.0086%" y="367.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.01%)</title><rect x="52.7586%" y="341" width="0.0134%" height="15" fill="rgb(209,83,10)" fg:x="7870" fg:w="2"/><text x="53.0086%" y="351.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.01%)</title><rect x="52.7586%" y="325" width="0.0134%" height="15" fill="rgb(209,164,1)" fg:x="7870" fg:w="2"/><text x="53.0086%" y="335.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.01%)</title><rect x="52.7586%" y="309" width="0.0134%" height="15" fill="rgb(213,184,43)" fg:x="7870" fg:w="2"/><text x="53.0086%" y="319.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,805 samples, 52.32%)</title><rect x="0.4626%" y="453" width="52.3229%" height="15" fill="rgb(231,61,34)" fg:x="69" fg:w="7805"/><text x="0.7126%" y="463.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (7,795 samples, 52.26%)</title><rect x="0.5296%" y="437" width="52.2558%" height="15" fill="rgb(235,75,3)" fg:x="79" fg:w="7795"/><text x="0.7796%" y="447.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`deno::worker::create_main_worker (6 samples, 0.04%)</title><rect x="52.7452%" y="421" width="0.0402%" height="15" fill="rgb(220,106,47)" fg:x="7868" fg:w="6"/><text x="52.9952%" y="431.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (6 samples, 0.04%)</title><rect x="52.7452%" y="405" width="0.0402%" height="15" fill="rgb(210,196,33)" fg:x="7868" fg:w="6"/><text x="52.9952%" y="415.50"></text></g><g><title>deno`OUTLINED_FUNCTION_15630 (4 samples, 0.03%)</title><rect x="52.7854%" y="453" width="0.0268%" height="15" fill="rgb(229,154,42)" fg:x="7874" fg:w="4"/><text x="53.0354%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_21340 (2 samples, 0.01%)</title><rect x="52.8122%" y="453" width="0.0134%" height="15" fill="rgb(228,114,26)" fg:x="7878" fg:w="2"/><text x="53.0622%" y="463.50"></text></g><g><title>deno`deno::main::_{{closure}} (7,819 samples, 52.42%)</title><rect x="0.4156%" y="469" width="52.4167%" height="15" fill="rgb(208,144,1)" fg:x="62" fg:w="7819"/><text x="0.6656%" y="479.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`tokio::task::local::CURRENT::FOO::__getit (2 samples, 0.01%)</title><rect x="52.8390%" y="469" width="0.0134%" height="15" fill="rgb(239,112,37)" fg:x="7882" fg:w="2"/><text x="53.0890%" y="479.50"></text></g><g><title>deno`tokio::task::local::LocalSet::tick (2 samples, 0.01%)</title><rect x="52.8525%" y="469" width="0.0134%" height="15" fill="rgb(210,96,50)" fg:x="7884" fg:w="2"/><text x="53.1025%" y="479.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,848 samples, 52.61%)</title><rect x="0.2883%" y="485" width="52.6111%" height="15" fill="rgb(222,178,2)" fg:x="43" fg:w="7848"/><text x="0.5383%" y="495.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.03%)</title><rect x="52.8726%" y="469" width="0.0268%" height="15" fill="rgb(226,74,18)" fg:x="7887" fg:w="4"/><text x="53.1226%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18150 (5 samples, 0.03%)</title><rect x="52.9195%" y="485" width="0.0335%" height="15" fill="rgb(225,67,54)" fg:x="7894" fg:w="5"/><text x="53.1695%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_21571 (3 samples, 0.02%)</title><rect x="52.9530%" y="485" width="0.0201%" height="15" fill="rgb(251,92,32)" fg:x="7899" fg:w="3"/><text x="53.2030%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_33800 (4 samples, 0.03%)</title><rect x="52.9865%" y="485" width="0.0268%" height="15" fill="rgb(228,149,22)" fg:x="7904" fg:w="4"/><text x="53.2365%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36406 (2 samples, 0.01%)</title><rect x="53.0133%" y="485" width="0.0134%" height="15" fill="rgb(243,54,13)" fg:x="7908" fg:w="2"/><text x="53.2633%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_5155 (2 samples, 0.01%)</title><rect x="53.0267%" y="485" width="0.0134%" height="15" fill="rgb(243,180,28)" fg:x="7910" fg:w="2"/><text x="53.2767%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9910 (2 samples, 0.01%)</title><rect x="53.0536%" y="485" width="0.0134%" height="15" fill="rgb(208,167,24)" fg:x="7914" fg:w="2"/><text x="53.3036%" y="495.50"></text></g><g><title>deno`deno::main::_{{closure}} (2 samples, 0.01%)</title><rect x="53.0670%" y="485" width="0.0134%" height="15" fill="rgb(245,73,45)" fg:x="7916" fg:w="2"/><text x="53.3170%" y="495.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (3 samples, 0.02%)</title><rect x="53.1206%" y="469" width="0.0201%" height="15" fill="rgb(237,203,48)" fg:x="7924" fg:w="3"/><text x="53.3706%" y="479.50"></text></g><g><title>deno`tokio::io::driver::Driver::turn (292 samples, 1.96%)</title><rect x="53.2212%" y="453" width="1.9575%" height="15" fill="rgb(211,197,16)" fg:x="7939" fg:w="292"/><text x="53.4712%" y="463.50">d..</text></g><g><title>libsystem_kernel.dylib`kevent (286 samples, 1.92%)</title><rect x="53.2614%" y="437" width="1.9173%" height="15" fill="rgb(243,99,51)" fg:x="7945" fg:w="286"/><text x="53.5114%" y="447.50">l..</text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_ready (4 samples, 0.03%)</title><rect x="55.1787%" y="453" width="0.0268%" height="15" fill="rgb(215,123,29)" fg:x="8231" fg:w="4"/><text x="55.4287%" y="463.50"></text></g><g><title>deno`tokio::process::imp::GlobalOrphanQueue::reap_orphans (6 samples, 0.04%)</title><rect x="55.2055%" y="453" width="0.0402%" height="15" fill="rgb(239,186,37)" fg:x="8235" fg:w="6"/><text x="55.4555%" y="463.50"></text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_ready (5 samples, 0.03%)</title><rect x="55.2457%" y="437" width="0.0335%" height="15" fill="rgb(252,136,39)" fg:x="8241" fg:w="5"/><text x="55.4957%" y="447.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (11 samples, 0.07%)</title><rect x="55.2457%" y="453" width="0.0737%" height="15" fill="rgb(223,213,32)" fg:x="8241" fg:w="11"/><text x="55.4957%" y="463.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.04%)</title><rect x="55.2792%" y="437" width="0.0402%" height="15" fill="rgb(233,115,5)" fg:x="8246" fg:w="6"/><text x="55.5292%" y="447.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (10 samples, 0.07%)</title><rect x="55.3328%" y="437" width="0.0670%" height="15" fill="rgb(207,226,44)" fg:x="8254" fg:w="10"/><text x="55.5828%" y="447.50"></text></g><g><title> 32]&gt; (10 samples, 0.07%)</title><rect x="55.3328%" y="421" width="0.0670%" height="15" fill="rgb(208,126,0)" fg:x="8254" fg:w="10"/><text x="55.5828%" y="431.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (12 samples, 0.08%)</title><rect x="55.3261%" y="453" width="0.0804%" height="15" fill="rgb(244,66,21)" fg:x="8253" fg:w="12"/><text x="55.5761%" y="463.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (345 samples, 2.31%)</title><rect x="53.1407%" y="469" width="2.3128%" height="15" fill="rgb(222,97,12)" fg:x="7927" fg:w="345"/><text x="53.3907%" y="479.50">d..</text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (7 samples, 0.05%)</title><rect x="55.4066%" y="453" width="0.0469%" height="15" fill="rgb(219,213,19)" fg:x="8265" fg:w="7"/><text x="55.6566%" y="463.50"></text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::park (381 samples, 2.55%)</title><rect x="53.0804%" y="485" width="2.5541%" height="15" fill="rgb(252,169,30)" fg:x="7918" fg:w="381"/><text x="53.3304%" y="495.50">de..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (26 samples, 0.17%)</title><rect x="55.4602%" y="469" width="0.1743%" height="15" fill="rgb(206,32,51)" fg:x="8273" fg:w="26"/><text x="55.7102%" y="479.50"></text></g><g><title>deno`tokio::task::local::LocalSet::tick (8 samples, 0.05%)</title><rect x="55.6412%" y="485" width="0.0536%" height="15" fill="rgb(250,172,42)" fg:x="8300" fg:w="8"/><text x="55.8912%" y="495.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.01%)</title><rect x="55.6948%" y="485" width="0.0134%" height="15" fill="rgb(209,34,43)" fg:x="8308" fg:w="2"/><text x="55.9448%" y="495.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.14%)</title><rect x="55.7083%" y="485" width="0.1408%" height="15" fill="rgb(223,11,35)" fg:x="8310" fg:w="21"/><text x="55.9583%" y="495.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (8,300 samples, 55.64%)</title><rect x="0.2145%" y="501" width="55.6412%" height="15" fill="rgb(251,219,26)" fg:x="32" fg:w="8300"/><text x="0.4645%" y="511.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (5 samples, 0.03%)</title><rect x="55.8557%" y="501" width="0.0335%" height="15" fill="rgb(231,119,3)" fg:x="8332" fg:w="5"/><text x="56.1057%" y="511.50"></text></g><g><title>dyld`start (8,338 samples, 55.90%)</title><rect x="0.0000%" y="565" width="55.8960%" height="15" fill="rgb(216,97,11)" fg:x="0" fg:w="8338"/><text x="0.2500%" y="575.50">dyld`start</text></g><g><title>deno`main (8,338 samples, 55.90%)</title><rect x="0.0000%" y="549" width="55.8960%" height="15" fill="rgb(223,59,9)" fg:x="0" fg:w="8338"/><text x="0.2500%" y="559.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (8,338 samples, 55.90%)</title><rect x="0.0000%" y="533" width="55.8960%" height="15" fill="rgb(233,93,31)" fg:x="0" fg:w="8338"/><text x="0.2500%" y="543.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (8,338 samples, 55.90%)</title><rect x="0.0000%" y="517" width="55.8960%" height="15" fill="rgb(239,81,33)" fg:x="0" fg:w="8338"/><text x="0.2500%" y="527.50">deno`deno::main</text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="55.8960%" y="469" width="0.0134%" height="15" fill="rgb(213,120,34)" fg:x="8338" fg:w="2"/><text x="56.1460%" y="479.50"></text></g><g><title>deno`&lt;tokio::runtime::enter::Enter as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="55.9228%" y="469" width="0.0134%" height="15" fill="rgb(243,49,53)" fg:x="8342" fg:w="2"/><text x="56.1728%" y="479.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="55.9362%" y="469" width="0.0201%" height="15" fill="rgb(247,216,33)" fg:x="8344" fg:w="3"/><text x="56.1862%" y="479.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="55.9563%" y="469" width="0.0201%" height="15" fill="rgb(226,26,14)" fg:x="8347" fg:w="3"/><text x="56.2063%" y="479.50"></text></g><g><title>deno`DYLD-STUB$$calloc (3 samples, 0.02%)</title><rect x="55.9764%" y="469" width="0.0201%" height="15" fill="rgb(215,49,53)" fg:x="8350" fg:w="3"/><text x="56.2264%" y="479.50"></text></g><g><title>deno`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="55.9965%" y="469" width="0.0134%" height="15" fill="rgb(245,162,40)" fg:x="8353" fg:w="2"/><text x="56.2465%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_138 (2 samples, 0.01%)</title><rect x="56.0166%" y="469" width="0.0134%" height="15" fill="rgb(229,68,17)" fg:x="8356" fg:w="2"/><text x="56.2666%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_548 (4 samples, 0.03%)</title><rect x="56.0300%" y="469" width="0.0268%" height="15" fill="rgb(213,182,10)" fg:x="8358" fg:w="4"/><text x="56.2800%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_88 (2 samples, 0.01%)</title><rect x="56.0568%" y="469" width="0.0134%" height="15" fill="rgb(245,125,30)" fg:x="8362" fg:w="2"/><text x="56.3068%" y="479.50"></text></g><g><title>deno`__rust_alloc_zeroed (5 samples, 0.03%)</title><rect x="56.0703%" y="469" width="0.0335%" height="15" fill="rgb(232,202,2)" fg:x="8364" fg:w="5"/><text x="56.3203%" y="479.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="56.1038%" y="469" width="0.0201%" height="15" fill="rgb(237,140,51)" fg:x="8369" fg:w="3"/><text x="56.3538%" y="479.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (2 samples, 0.01%)</title><rect x="57.6188%" y="453" width="0.0134%" height="15" fill="rgb(236,157,25)" fg:x="8595" fg:w="2"/><text x="57.8688%" y="463.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.08%)</title><rect x="57.6322%" y="453" width="0.0804%" height="15" fill="rgb(219,209,0)" fg:x="8597" fg:w="12"/><text x="57.8822%" y="463.50"></text></g><g><title>deno`&lt;tokio::runtime::enter::Enter as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="57.7127%" y="453" width="0.0201%" height="15" fill="rgb(240,116,54)" fg:x="8609" fg:w="3"/><text x="57.9627%" y="463.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (41 samples, 0.27%)</title><rect x="57.7328%" y="453" width="0.2749%" height="15" fill="rgb(216,10,36)" fg:x="8612" fg:w="41"/><text x="57.9828%" y="463.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="58.0076%" y="453" width="0.0134%" height="15" fill="rgb(222,72,44)" fg:x="8653" fg:w="2"/><text x="58.2576%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11088 (8 samples, 0.05%)</title><rect x="58.0278%" y="453" width="0.0536%" height="15" fill="rgb(232,159,9)" fg:x="8656" fg:w="8"/><text x="58.2778%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_162 (5 samples, 0.03%)</title><rect x="58.0814%" y="453" width="0.0335%" height="15" fill="rgb(210,39,32)" fg:x="8664" fg:w="5"/><text x="58.3314%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_210 (4 samples, 0.03%)</title><rect x="58.1149%" y="453" width="0.0268%" height="15" fill="rgb(216,194,45)" fg:x="8669" fg:w="4"/><text x="58.3649%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_25124 (3 samples, 0.02%)</title><rect x="58.1484%" y="453" width="0.0201%" height="15" fill="rgb(218,18,35)" fg:x="8674" fg:w="3"/><text x="58.3984%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2527 (5 samples, 0.03%)</title><rect x="58.1685%" y="453" width="0.0335%" height="15" fill="rgb(207,83,51)" fg:x="8677" fg:w="5"/><text x="58.4185%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_28329 (4 samples, 0.03%)</title><rect x="58.2021%" y="453" width="0.0268%" height="15" fill="rgb(225,63,43)" fg:x="8682" fg:w="4"/><text x="58.4521%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_34799 (2 samples, 0.01%)</title><rect x="58.2289%" y="453" width="0.0134%" height="15" fill="rgb(207,57,36)" fg:x="8686" fg:w="2"/><text x="58.4789%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_37769 (3 samples, 0.02%)</title><rect x="58.2423%" y="453" width="0.0201%" height="15" fill="rgb(216,99,33)" fg:x="8688" fg:w="3"/><text x="58.4923%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_447 (2 samples, 0.01%)</title><rect x="58.2624%" y="453" width="0.0134%" height="15" fill="rgb(225,42,16)" fg:x="8691" fg:w="2"/><text x="58.5124%" y="463.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="58.2825%" y="453" width="0.0201%" height="15" fill="rgb(220,201,45)" fg:x="8694" fg:w="3"/><text x="58.5325%" y="463.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::request::Request&gt;::send::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="58.3026%" y="453" width="0.0134%" height="15" fill="rgb(225,33,4)" fg:x="8697" fg:w="2"/><text x="58.5526%" y="463.50"></text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.01%)</title><rect x="58.3160%" y="405" width="0.0134%" height="15" fill="rgb(224,33,50)" fg:x="8699" fg:w="2"/><text x="58.5660%" y="415.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (152 samples, 1.02%)</title><rect x="58.3160%" y="437" width="1.0190%" height="15" fill="rgb(246,198,51)" fg:x="8699" fg:w="152"/><text x="58.5660%" y="447.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (152 samples, 1.02%)</title><rect x="58.3160%" y="421" width="1.0190%" height="15" fill="rgb(205,22,4)" fg:x="8699" fg:w="152"/><text x="58.5660%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`kevent (149 samples, 1.00%)</title><rect x="58.3361%" y="405" width="0.9989%" height="15" fill="rgb(206,3,8)" fg:x="8702" fg:w="149"/><text x="58.5861%" y="415.50"></text></g><g><title>deno`futures_task::waker::wake_arc_raw (157 samples, 1.05%)</title><rect x="58.3160%" y="453" width="1.0525%" height="15" fill="rgb(251,23,15)" fg:x="8699" fg:w="157"/><text x="58.5660%" y="463.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (3 samples, 0.02%)</title><rect x="59.3484%" y="437" width="0.0201%" height="15" fill="rgb(252,88,28)" fg:x="8853" fg:w="3"/><text x="59.5984%" y="447.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (6 samples, 0.04%)</title><rect x="59.3685%" y="453" width="0.0402%" height="15" fill="rgb(212,127,14)" fg:x="8856" fg:w="6"/><text x="59.6185%" y="463.50"></text></g><g><title>deno`http::header::name::parse_hdr (12 samples, 0.08%)</title><rect x="59.4087%" y="453" width="0.0804%" height="15" fill="rgb(247,145,37)" fg:x="8862" fg:w="12"/><text x="59.6587%" y="463.50"></text></g><g><title>deno`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.25%)</title><rect x="59.6501%" y="437" width="0.2547%" height="15" fill="rgb(209,117,53)" fg:x="8898" fg:w="38"/><text x="59.9001%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_13256 (2 samples, 0.01%)</title><rect x="59.9048%" y="437" width="0.0134%" height="15" fill="rgb(212,90,42)" fg:x="8936" fg:w="2"/><text x="60.1548%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_19462 (5 samples, 0.03%)</title><rect x="59.9182%" y="437" width="0.0335%" height="15" fill="rgb(218,164,37)" fg:x="8938" fg:w="5"/><text x="60.1682%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_22986 (4 samples, 0.03%)</title><rect x="59.9584%" y="437" width="0.0268%" height="15" fill="rgb(246,65,34)" fg:x="8944" fg:w="4"/><text x="60.2084%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_31619 (5 samples, 0.03%)</title><rect x="59.9853%" y="437" width="0.0335%" height="15" fill="rgb(231,100,33)" fg:x="8948" fg:w="5"/><text x="60.2353%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_542 (5 samples, 0.03%)</title><rect x="60.0188%" y="437" width="0.0335%" height="15" fill="rgb(228,126,14)" fg:x="8953" fg:w="5"/><text x="60.2688%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_7546 (3 samples, 0.02%)</title><rect x="60.0590%" y="437" width="0.0201%" height="15" fill="rgb(215,173,21)" fg:x="8959" fg:w="3"/><text x="60.3090%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_8803 (4 samples, 0.03%)</title><rect x="60.0791%" y="437" width="0.0268%" height="15" fill="rgb(210,6,40)" fg:x="8962" fg:w="4"/><text x="60.3291%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9860 (5 samples, 0.03%)</title><rect x="60.1059%" y="437" width="0.0335%" height="15" fill="rgb(212,48,18)" fg:x="8966" fg:w="5"/><text x="60.3559%" y="447.50"></text></g><g><title>deno`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="60.1394%" y="437" width="0.0134%" height="15" fill="rgb(230,214,11)" fg:x="8971" fg:w="2"/><text x="60.3894%" y="447.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (2 samples, 0.01%)</title><rect x="60.1595%" y="437" width="0.0134%" height="15" fill="rgb(254,105,39)" fg:x="8974" fg:w="2"/><text x="60.4095%" y="447.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (45 samples, 0.30%)</title><rect x="60.1730%" y="437" width="0.3017%" height="15" fill="rgb(245,158,5)" fg:x="8976" fg:w="45"/><text x="60.4230%" y="447.50"></text></g><g><title>deno`httparse::parse_version (11 samples, 0.07%)</title><rect x="60.4746%" y="437" width="0.0737%" height="15" fill="rgb(249,208,11)" fg:x="9021" fg:w="11"/><text x="60.7246%" y="447.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (165 samples, 1.11%)</title><rect x="59.4892%" y="453" width="1.1061%" height="15" fill="rgb(210,39,28)" fg:x="8874" fg:w="165"/><text x="59.7392%" y="463.50"></text></g><g><title>deno`httparse::skip_empty_lines (7 samples, 0.05%)</title><rect x="60.5484%" y="437" width="0.0469%" height="15" fill="rgb(211,56,53)" fg:x="9032" fg:w="7"/><text x="60.7984%" y="447.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (4 samples, 0.03%)</title><rect x="60.6020%" y="453" width="0.0268%" height="15" fill="rgb(226,201,30)" fg:x="9040" fg:w="4"/><text x="60.8520%" y="463.50"></text></g><g><title>deno`mio::poll::Poll::poll (2 samples, 0.01%)</title><rect x="60.6355%" y="453" width="0.0134%" height="15" fill="rgb(239,101,34)" fg:x="9045" fg:w="2"/><text x="60.8855%" y="463.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (3 samples, 0.02%)</title><rect x="60.6489%" y="453" width="0.0201%" height="15" fill="rgb(226,209,5)" fg:x="9047" fg:w="3"/><text x="60.8989%" y="463.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (20 samples, 0.13%)</title><rect x="60.6757%" y="453" width="0.1341%" height="15" fill="rgb(250,105,47)" fg:x="9051" fg:w="20"/><text x="60.9257%" y="463.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (15 samples, 0.10%)</title><rect x="60.7093%" y="437" width="0.1006%" height="15" fill="rgb(230,72,3)" fg:x="9056" fg:w="15"/><text x="60.9593%" y="447.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (5 samples, 0.03%)</title><rect x="60.8165%" y="453" width="0.0335%" height="15" fill="rgb(232,218,39)" fg:x="9072" fg:w="5"/><text x="61.0665%" y="463.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.23%)</title><rect x="60.8500%" y="453" width="0.2346%" height="15" fill="rgb(248,166,6)" fg:x="9077" fg:w="35"/><text x="61.1000%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (4,111 samples, 27.56%)</title><rect x="61.0914%" y="453" width="27.5592%" height="15" fill="rgb(247,89,20)" fg:x="9113" fg:w="4111"/><text x="61.3414%" y="463.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>libsystem_kernel.dylib`kevent (1,177 samples, 7.89%)</title><rect x="88.6505%" y="453" width="7.8903%" height="15" fill="rgb(248,130,54)" fg:x="13224" fg:w="1177"/><text x="88.9005%" y="463.50">libsystem_k..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.03%)</title><rect x="96.5811%" y="437" width="0.0268%" height="15" fill="rgb(234,196,4)" fg:x="14407" fg:w="4"/><text x="96.8311%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (3 samples, 0.02%)</title><rect x="96.6079%" y="437" width="0.0201%" height="15" fill="rgb(250,143,31)" fg:x="14411" fg:w="3"/><text x="96.8579%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (6 samples, 0.04%)</title><rect x="96.6682%" y="421" width="0.0402%" height="15" fill="rgb(211,110,34)" fg:x="14420" fg:w="6"/><text x="96.9182%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (16 samples, 0.11%)</title><rect x="97.1241%" y="389" width="0.1073%" height="15" fill="rgb(215,124,48)" fg:x="14488" fg:w="16"/><text x="97.3741%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.02%)</title><rect x="97.2313%" y="389" width="0.0201%" height="15" fill="rgb(216,46,13)" fg:x="14504" fg:w="3"/><text x="97.4813%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (100 samples, 0.67%)</title><rect x="96.7152%" y="421" width="0.6704%" height="15" fill="rgb(205,184,25)" fg:x="14427" fg:w="100"/><text x="96.9652%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (75 samples, 0.50%)</title><rect x="96.8828%" y="405" width="0.5028%" height="15" fill="rgb(228,1,10)" fg:x="14452" fg:w="75"/><text x="97.1328%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (20 samples, 0.13%)</title><rect x="97.2515%" y="389" width="0.1341%" height="15" fill="rgb(213,116,27)" fg:x="14507" fg:w="20"/><text x="97.5015%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.17%)</title><rect x="97.3855%" y="421" width="0.1676%" height="15" fill="rgb(241,95,50)" fg:x="14527" fg:w="25"/><text x="97.6355%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (152 samples, 1.02%)</title><rect x="96.5409%" y="453" width="1.0190%" height="15" fill="rgb(238,48,32)" fg:x="14401" fg:w="152"/><text x="96.7909%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (139 samples, 0.93%)</title><rect x="96.6280%" y="437" width="0.9318%" height="15" fill="rgb(235,113,49)" fg:x="14414" fg:w="139"/><text x="96.8780%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="97.6202%" y="437" width="0.0268%" height="15" fill="rgb(205,127,43)" fg:x="14562" fg:w="4"/><text x="97.8702%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.02%)</title><rect x="97.6470%" y="437" width="0.0201%" height="15" fill="rgb(250,162,2)" fg:x="14566" fg:w="3"/><text x="97.8970%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.02%)</title><rect x="97.6671%" y="421" width="0.0201%" height="15" fill="rgb(220,13,41)" fg:x="14569" fg:w="3"/><text x="97.9171%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="97.8749%" y="405" width="0.0134%" height="15" fill="rgb(249,221,25)" fg:x="14600" fg:w="2"/><text x="98.1249%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="97.8883%" y="405" width="0.0201%" height="15" fill="rgb(215,208,19)" fg:x="14602" fg:w="3"/><text x="98.1383%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (16 samples, 0.11%)</title><rect x="98.0626%" y="389" width="0.1073%" height="15" fill="rgb(236,175,2)" fg:x="14628" fg:w="16"/><text x="98.3126%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (5 samples, 0.03%)</title><rect x="98.1699%" y="389" width="0.0335%" height="15" fill="rgb(241,52,2)" fg:x="14644" fg:w="5"/><text x="98.4199%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (133 samples, 0.89%)</title><rect x="97.5598%" y="453" width="0.8916%" height="15" fill="rgb(248,140,14)" fg:x="14553" fg:w="133"/><text x="97.8098%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (117 samples, 0.78%)</title><rect x="97.6671%" y="437" width="0.7843%" height="15" fill="rgb(253,22,42)" fg:x="14569" fg:w="117"/><text x="97.9171%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (114 samples, 0.76%)</title><rect x="97.6872%" y="421" width="0.7642%" height="15" fill="rgb(234,61,47)" fg:x="14572" fg:w="114"/><text x="97.9372%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (81 samples, 0.54%)</title><rect x="97.9084%" y="405" width="0.5430%" height="15" fill="rgb(208,226,15)" fg:x="14605" fg:w="81"/><text x="98.1584%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (37 samples, 0.25%)</title><rect x="98.2034%" y="389" width="0.2480%" height="15" fill="rgb(217,221,4)" fg:x="14649" fg:w="37"/><text x="98.4534%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (5 samples, 0.03%)</title><rect x="98.4514%" y="453" width="0.0335%" height="15" fill="rgb(212,174,34)" fg:x="14686" fg:w="5"/><text x="98.7014%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (5 samples, 0.03%)</title><rect x="98.4850%" y="453" width="0.0335%" height="15" fill="rgb(253,83,4)" fg:x="14691" fg:w="5"/><text x="98.7350%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="98.5185%" y="453" width="0.0134%" height="15" fill="rgb(250,195,49)" fg:x="14696" fg:w="2"/><text x="98.7685%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (5 samples, 0.03%)</title><rect x="98.5319%" y="453" width="0.0335%" height="15" fill="rgb(241,192,25)" fg:x="14698" fg:w="5"/><text x="98.7819%" y="463.50"></text></g><g><title>deno`deno_flash::run_server (6,337 samples, 42.48%)</title><rect x="56.1239%" y="469" width="42.4817%" height="15" fill="rgb(208,124,10)" fg:x="8372" fg:w="6337"/><text x="56.3739%" y="479.50">deno`deno_flash::run_server</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.04%)</title><rect x="98.5654%" y="453" width="0.0402%" height="15" fill="rgb(222,33,0)" fg:x="14703" fg:w="6"/><text x="98.8154%" y="463.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (3 samples, 0.02%)</title><rect x="98.6123%" y="469" width="0.0201%" height="15" fill="rgb(234,209,28)" fg:x="14710" fg:w="3"/><text x="98.8623%" y="479.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (3 samples, 0.02%)</title><rect x="98.6391%" y="469" width="0.0201%" height="15" fill="rgb(224,11,23)" fg:x="14714" fg:w="3"/><text x="98.8891%" y="479.50"></text></g><g><title>deno`tokio::park::thread::drop_waker (2 samples, 0.01%)</title><rect x="98.6592%" y="469" width="0.0134%" height="15" fill="rgb(232,99,1)" fg:x="14717" fg:w="2"/><text x="98.9092%" y="479.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (8 samples, 0.05%)</title><rect x="98.6727%" y="469" width="0.0536%" height="15" fill="rgb(237,95,45)" fg:x="14719" fg:w="8"/><text x="98.9227%" y="479.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::wake (21 samples, 0.14%)</title><rect x="98.7330%" y="469" width="0.1408%" height="15" fill="rgb(208,109,11)" fg:x="14728" fg:w="21"/><text x="98.9830%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.09%)</title><rect x="98.8738%" y="469" width="0.0871%" height="15" fill="rgb(216,190,48)" fg:x="14749" fg:w="13"/><text x="99.1238%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="98.9609%" y="469" width="0.0201%" height="15" fill="rgb(251,171,36)" fg:x="14762" fg:w="3"/><text x="99.2109%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="98.9810%" y="469" width="0.0134%" height="15" fill="rgb(230,62,22)" fg:x="14765" fg:w="2"/><text x="99.2310%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="98.9944%" y="469" width="0.0134%" height="15" fill="rgb(225,114,35)" fg:x="14767" fg:w="2"/><text x="99.2444%" y="479.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (6,464 samples, 43.33%)</title><rect x="55.8960%" y="533" width="43.3331%" height="15" fill="rgb(215,118,42)" fg:x="8338" fg:w="6464"/><text x="56.1460%" y="543.50">deno`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,464 samples, 43.33%)</title><rect x="55.8960%" y="517" width="43.3331%" height="15" fill="rgb(243,119,21)" fg:x="8338" fg:w="6464"/><text x="56.1460%" y="527.50">deno`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (6,464 samples, 43.33%)</title><rect x="55.8960%" y="501" width="43.3331%" height="15" fill="rgb(252,177,53)" fg:x="8338" fg:w="6464"/><text x="56.1460%" y="511.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`tokio::runtime::task::raw::poll (6,464 samples, 43.33%)</title><rect x="55.8960%" y="485" width="43.3331%" height="15" fill="rgb(237,209,29)" fg:x="8338" fg:w="6464"/><text x="56.1460%" y="495.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove (33 samples, 0.22%)</title><rect x="99.0078%" y="469" width="0.2212%" height="15" fill="rgb(212,65,23)" fg:x="14769" fg:w="33"/><text x="99.2578%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleArchInstruction (3 samples, 0.02%)</title><rect x="99.2425%" y="389" width="0.0201%" height="15" fill="rgb(230,222,46)" fg:x="14804" fg:w="3"/><text x="99.4925%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AssembleCode (5 samples, 0.03%)</title><rect x="99.2425%" y="437" width="0.0335%" height="15" fill="rgb(215,135,32)" fg:x="14804" fg:w="5"/><text x="99.4925%" y="447.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleCode (5 samples, 0.03%)</title><rect x="99.2425%" y="421" width="0.0335%" height="15" fill="rgb(246,101,22)" fg:x="14804" fg:w="5"/><text x="99.4925%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleInstruction (5 samples, 0.03%)</title><rect x="99.2425%" y="405" width="0.0335%" height="15" fill="rgb(206,107,13)" fg:x="14804" fg:w="5"/><text x="99.4925%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::BuildTranslation (2 samples, 0.01%)</title><rect x="99.2626%" y="389" width="0.0134%" height="15" fill="rgb(250,100,44)" fg:x="14807" fg:w="2"/><text x="99.5126%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::BuildTranslationForFrameStateDescriptor (2 samples, 0.01%)</title><rect x="99.2626%" y="373" width="0.0134%" height="15" fill="rgb(231,147,38)" fg:x="14807" fg:w="2"/><text x="99.5126%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::CreateGraph (2 samples, 0.01%)</title><rect x="99.2827%" y="373" width="0.0134%" height="15" fill="rgb(229,8,40)" fg:x="14810" fg:w="2"/><text x="99.5327%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitBytecodes (2 samples, 0.01%)</title><rect x="99.2827%" y="357" width="0.0134%" height="15" fill="rgb(221,135,30)" fg:x="14810" fg:w="2"/><text x="99.5327%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (4 samples, 0.03%)</title><rect x="99.2760%" y="421" width="0.0268%" height="15" fill="rgb(249,193,18)" fg:x="14809" fg:w="4"/><text x="99.5260%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::GraphBuilderPhase::Run (4 samples, 0.03%)</title><rect x="99.2760%" y="405" width="0.0268%" height="15" fill="rgb(209,133,39)" fg:x="14809" fg:w="4"/><text x="99.5260%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, int, v8::internal::CodeKind, v8::base::Flags (4 samples, 0.03%)</title><rect x="99.2760%" y="389" width="0.0268%" height="15" fill="rgb(232,100,14)" fg:x="14809" fg:w="4"/><text x="99.5260%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (6 samples, 0.04%)</title><rect x="99.2760%" y="437" width="0.0402%" height="15" fill="rgb(224,185,1)" fg:x="14809" fg:w="6"/><text x="99.5260%" y="447.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (2 samples, 0.01%)</title><rect x="99.3028%" y="421" width="0.0134%" height="15" fill="rgb(223,139,8)" fg:x="14813" fg:w="2"/><text x="99.5528%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (2 samples, 0.01%)</title><rect x="99.3028%" y="405" width="0.0134%" height="15" fill="rgb(232,213,38)" fg:x="14813" fg:w="2"/><text x="99.5528%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.01%)</title><rect x="99.3028%" y="389" width="0.0134%" height="15" fill="rgb(207,94,22)" fg:x="14813" fg:w="2"/><text x="99.5528%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.01%)</title><rect x="99.3028%" y="373" width="0.0134%" height="15" fill="rgb(219,183,54)" fg:x="14813" fg:w="2"/><text x="99.5528%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="99.3028%" y="357" width="0.0134%" height="15" fill="rgb(216,185,54)" fg:x="14813" fg:w="2"/><text x="99.5528%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::PrepareUses (2 samples, 0.01%)</title><rect x="99.3229%" y="389" width="0.0134%" height="15" fill="rgb(254,217,39)" fg:x="14816" fg:w="2"/><text x="99.5729%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::Run (2 samples, 0.01%)</title><rect x="99.3229%" y="373" width="0.0134%" height="15" fill="rgb(240,178,23)" fg:x="14816" fg:w="2"/><text x="99.5729%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::VisitInputs (2 samples, 0.01%)</title><rect x="99.3229%" y="357" width="0.0134%" height="15" fill="rgb(218,11,47)" fg:x="14816" fg:w="2"/><text x="99.5729%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (4 samples, 0.03%)</title><rect x="99.3363%" y="389" width="0.0268%" height="15" fill="rgb(218,51,51)" fg:x="14818" fg:w="4"/><text x="99.5863%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (4 samples, 0.03%)</title><rect x="99.3363%" y="373" width="0.0268%" height="15" fill="rgb(238,126,27)" fg:x="14818" fg:w="4"/><text x="99.5863%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (4 samples, 0.03%)</title><rect x="99.3363%" y="357" width="0.0268%" height="15" fill="rgb(249,202,22)" fg:x="14818" fg:w="4"/><text x="99.5863%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (8 samples, 0.05%)</title><rect x="99.3162%" y="421" width="0.0536%" height="15" fill="rgb(254,195,49)" fg:x="14815" fg:w="8"/><text x="99.5662%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (8 samples, 0.05%)</title><rect x="99.3162%" y="405" width="0.0536%" height="15" fill="rgb(208,123,14)" fg:x="14815" fg:w="8"/><text x="99.5662%" y="415.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyGraphTrimmingPhase&gt; (3 samples, 0.02%)</title><rect x="99.3698%" y="421" width="0.0201%" height="15" fill="rgb(224,200,8)" fg:x="14823" fg:w="3"/><text x="99.6198%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::EarlyGraphTrimmingPhase::Run (3 samples, 0.02%)</title><rect x="99.3698%" y="405" width="0.0201%" height="15" fill="rgb(217,61,36)" fg:x="14823" fg:w="3"/><text x="99.6198%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (3 samples, 0.02%)</title><rect x="99.3698%" y="389" width="0.0201%" height="15" fill="rgb(206,35,45)" fg:x="14823" fg:w="3"/><text x="99.6198%" y="399.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (8 samples, 0.05%)</title><rect x="99.3900%" y="421" width="0.0536%" height="15" fill="rgb(217,65,33)" fg:x="14826" fg:w="8"/><text x="99.6400%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::EarlyOptimizationPhase::Run (8 samples, 0.05%)</title><rect x="99.3900%" y="405" width="0.0536%" height="15" fill="rgb(222,158,48)" fg:x="14826" fg:w="8"/><text x="99.6400%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (8 samples, 0.05%)</title><rect x="99.3900%" y="389" width="0.0536%" height="15" fill="rgb(254,2,54)" fg:x="14826" fg:w="8"/><text x="99.6400%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (8 samples, 0.05%)</title><rect x="99.3900%" y="373" width="0.0536%" height="15" fill="rgb(250,143,38)" fg:x="14826" fg:w="8"/><text x="99.6400%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (5 samples, 0.03%)</title><rect x="99.4101%" y="357" width="0.0335%" height="15" fill="rgb(248,25,0)" fg:x="14829" fg:w="5"/><text x="99.6601%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (2 samples, 0.01%)</title><rect x="99.4302%" y="341" width="0.0134%" height="15" fill="rgb(206,152,27)" fg:x="14832" fg:w="2"/><text x="99.6802%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.01%)</title><rect x="99.4436%" y="389" width="0.0134%" height="15" fill="rgb(240,77,30)" fg:x="14834" fg:w="2"/><text x="99.6936%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.01%)</title><rect x="99.4436%" y="373" width="0.0134%" height="15" fill="rgb(231,5,3)" fg:x="14834" fg:w="2"/><text x="99.6936%" y="383.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (4 samples, 0.03%)</title><rect x="99.4436%" y="421" width="0.0268%" height="15" fill="rgb(207,226,32)" fg:x="14834" fg:w="4"/><text x="99.6936%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (4 samples, 0.03%)</title><rect x="99.4436%" y="405" width="0.0268%" height="15" fill="rgb(222,207,47)" fg:x="14834" fg:w="4"/><text x="99.6936%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (2 samples, 0.01%)</title><rect x="99.4570%" y="389" width="0.0134%" height="15" fill="rgb(229,115,45)" fg:x="14836" fg:w="2"/><text x="99.7070%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysis::Reduce (2 samples, 0.01%)</title><rect x="99.4704%" y="373" width="0.0134%" height="15" fill="rgb(224,191,6)" fg:x="14838" fg:w="2"/><text x="99.7204%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::VariableTracker::Scope::~Scope (2 samples, 0.01%)</title><rect x="99.4704%" y="357" width="0.0134%" height="15" fill="rgb(230,227,24)" fg:x="14838" fg:w="2"/><text x="99.7204%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::operator==(v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash (2 samples, 0.01%)</title><rect x="99.4704%" y="341" width="0.0134%" height="15" fill="rgb(228,80,19)" fg:x="14838" fg:w="2"/><text x="99.7204%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::EffectGraphReducer::ReduceFrom (3 samples, 0.02%)</title><rect x="99.4704%" y="389" width="0.0201%" height="15" fill="rgb(247,229,0)" fg:x="14838" fg:w="3"/><text x="99.7204%" y="399.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (5 samples, 0.03%)</title><rect x="99.4704%" y="421" width="0.0335%" height="15" fill="rgb(237,194,15)" fg:x="14838" fg:w="5"/><text x="99.7204%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (5 samples, 0.03%)</title><rect x="99.4704%" y="405" width="0.0335%" height="15" fill="rgb(219,203,20)" fg:x="14838" fg:w="5"/><text x="99.7204%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.01%)</title><rect x="99.4905%" y="389" width="0.0134%" height="15" fill="rgb(234,128,8)" fg:x="14841" fg:w="2"/><text x="99.7405%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.01%)</title><rect x="99.4905%" y="373" width="0.0134%" height="15" fill="rgb(248,202,8)" fg:x="14841" fg:w="2"/><text x="99.7405%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="99.4905%" y="357" width="0.0134%" height="15" fill="rgb(206,104,37)" fg:x="14841" fg:w="2"/><text x="99.7405%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisReducer::Reduce (2 samples, 0.01%)</title><rect x="99.4905%" y="341" width="0.0134%" height="15" fill="rgb(223,8,27)" fg:x="14841" fg:w="2"/><text x="99.7405%" y="351.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisReducer::ReduceFrameStateInputs (2 samples, 0.01%)</title><rect x="99.4905%" y="325" width="0.0134%" height="15" fill="rgb(216,217,28)" fg:x="14841" fg:w="2"/><text x="99.7405%" y="335.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (5 samples, 0.03%)</title><rect x="99.5039%" y="421" width="0.0335%" height="15" fill="rgb(249,199,1)" fg:x="14843" fg:w="5"/><text x="99.7539%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (5 samples, 0.03%)</title><rect x="99.5039%" y="405" width="0.0335%" height="15" fill="rgb(240,85,17)" fg:x="14843" fg:w="5"/><text x="99.7539%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (5 samples, 0.03%)</title><rect x="99.5039%" y="389" width="0.0335%" height="15" fill="rgb(206,108,45)" fg:x="14843" fg:w="5"/><text x="99.7539%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (5 samples, 0.03%)</title><rect x="99.5039%" y="373" width="0.0335%" height="15" fill="rgb(245,210,41)" fg:x="14843" fg:w="5"/><text x="99.7539%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (3 samples, 0.02%)</title><rect x="99.5173%" y="357" width="0.0201%" height="15" fill="rgb(206,13,37)" fg:x="14845" fg:w="3"/><text x="99.7673%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (2 samples, 0.01%)</title><rect x="99.5240%" y="341" width="0.0134%" height="15" fill="rgb(250,61,18)" fg:x="14846" fg:w="2"/><text x="99.7740%" y="351.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (11 samples, 0.07%)</title><rect x="99.5374%" y="421" width="0.0737%" height="15" fill="rgb(235,172,48)" fg:x="14848" fg:w="11"/><text x="99.7874%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (11 samples, 0.07%)</title><rect x="99.5374%" y="405" width="0.0737%" height="15" fill="rgb(249,201,17)" fg:x="14848" fg:w="11"/><text x="99.7874%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (10 samples, 0.07%)</title><rect x="99.5441%" y="389" width="0.0670%" height="15" fill="rgb(219,208,6)" fg:x="14849" fg:w="10"/><text x="99.7941%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (9 samples, 0.06%)</title><rect x="99.5508%" y="373" width="0.0603%" height="15" fill="rgb(248,31,23)" fg:x="14850" fg:w="9"/><text x="99.8008%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (6 samples, 0.04%)</title><rect x="99.5710%" y="357" width="0.0402%" height="15" fill="rgb(245,15,42)" fg:x="14853" fg:w="6"/><text x="99.8210%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoopPeelingPhase&gt; (2 samples, 0.01%)</title><rect x="99.6112%" y="421" width="0.0134%" height="15" fill="rgb(222,217,39)" fg:x="14859" fg:w="2"/><text x="99.8612%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::LoopPeelingPhase::Run (2 samples, 0.01%)</title><rect x="99.6112%" y="405" width="0.0134%" height="15" fill="rgb(210,219,27)" fg:x="14859" fg:w="2"/><text x="99.8612%" y="415.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MachineOperatorOptimizationPhase&gt; (3 samples, 0.02%)</title><rect x="99.6246%" y="421" width="0.0201%" height="15" fill="rgb(252,166,36)" fg:x="14861" fg:w="3"/><text x="99.8746%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::MachineOperatorOptimizationPhase::Run (3 samples, 0.02%)</title><rect x="99.6246%" y="405" width="0.0201%" height="15" fill="rgb(245,132,34)" fg:x="14861" fg:w="3"/><text x="99.8746%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="99.6246%" y="389" width="0.0201%" height="15" fill="rgb(236,54,3)" fg:x="14861" fg:w="3"/><text x="99.8746%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="99.6246%" y="373" width="0.0201%" height="15" fill="rgb(241,173,43)" fg:x="14861" fg:w="3"/><text x="99.8746%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLoweringPhase::Run (3 samples, 0.02%)</title><rect x="99.6514%" y="405" width="0.0201%" height="15" fill="rgb(215,190,9)" fg:x="14865" fg:w="3"/><text x="99.9014%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (3 samples, 0.02%)</title><rect x="99.6514%" y="389" width="0.0201%" height="15" fill="rgb(242,101,16)" fg:x="14865" fg:w="3"/><text x="99.9014%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunPropagatePhase (2 samples, 0.01%)</title><rect x="99.6581%" y="373" width="0.0134%" height="15" fill="rgb(223,190,21)" fg:x="14866" fg:w="2"/><text x="99.9081%" y="383.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (4 samples, 0.03%)</title><rect x="99.6514%" y="421" width="0.0268%" height="15" fill="rgb(215,228,25)" fg:x="14865" fg:w="4"/><text x="99.9014%" y="431.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::StoreStoreEliminationPhase&gt; (3 samples, 0.02%)</title><rect x="99.6782%" y="421" width="0.0201%" height="15" fill="rgb(225,36,22)" fg:x="14869" fg:w="3"/><text x="99.9282%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::StoreStoreEliminationPhase::Run (3 samples, 0.02%)</title><rect x="99.6782%" y="405" width="0.0201%" height="15" fill="rgb(251,106,46)" fg:x="14869" fg:w="3"/><text x="99.9282%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (3 samples, 0.02%)</title><rect x="99.6782%" y="389" width="0.0201%" height="15" fill="rgb(208,90,1)" fg:x="14869" fg:w="3"/><text x="99.9282%" y="399.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TypedLoweringPhase&gt; (4 samples, 0.03%)</title><rect x="99.6983%" y="421" width="0.0268%" height="15" fill="rgb(243,10,4)" fg:x="14872" fg:w="4"/><text x="99.9483%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::TypedLoweringPhase::Run (4 samples, 0.03%)</title><rect x="99.6983%" y="405" width="0.0268%" height="15" fill="rgb(212,137,27)" fg:x="14872" fg:w="4"/><text x="99.9483%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (4 samples, 0.03%)</title><rect x="99.6983%" y="389" width="0.0268%" height="15" fill="rgb(231,220,49)" fg:x="14872" fg:w="4"/><text x="99.9483%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (4 samples, 0.03%)</title><rect x="99.6983%" y="373" width="0.0268%" height="15" fill="rgb(237,96,20)" fg:x="14872" fg:w="4"/><text x="99.9483%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (4 samples, 0.03%)</title><rect x="99.6983%" y="357" width="0.0268%" height="15" fill="rgb(239,229,30)" fg:x="14872" fg:w="4"/><text x="99.9483%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InstructionSelectionPhase, v8::internal::compiler::Linkage*&amp;&gt; (4 samples, 0.03%)</title><rect x="99.7318%" y="405" width="0.0268%" height="15" fill="rgb(219,65,33)" fg:x="14877" fg:w="4"/><text x="99.9818%" y="415.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelectionPhase::Run (4 samples, 0.03%)</title><rect x="99.7318%" y="389" width="0.0268%" height="15" fill="rgb(243,134,7)" fg:x="14877" fg:w="4"/><text x="99.9818%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::SelectInstructions (4 samples, 0.03%)</title><rect x="99.7318%" y="373" width="0.0268%" height="15" fill="rgb(216,177,54)" fg:x="14877" fg:w="4"/><text x="99.9818%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitBlock (4 samples, 0.03%)</title><rect x="99.7318%" y="357" width="0.0268%" height="15" fill="rgb(211,160,20)" fg:x="14877" fg:w="4"/><text x="99.9818%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (2 samples, 0.01%)</title><rect x="99.7587%" y="357" width="0.0134%" height="15" fill="rgb(239,85,39)" fg:x="14881" fg:w="2"/><text x="100.0087%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateFPRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (3 samples, 0.02%)</title><rect x="99.7587%" y="389" width="0.0201%" height="15" fill="rgb(232,125,22)" fg:x="14881" fg:w="3"/><text x="100.0087%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (3 samples, 0.02%)</title><rect x="99.7587%" y="373" width="0.0201%" height="15" fill="rgb(244,57,34)" fg:x="14881" fg:w="3"/><text x="100.0087%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateBlockedReg (2 samples, 0.01%)</title><rect x="99.7989%" y="357" width="0.0134%" height="15" fill="rgb(214,203,32)" fg:x="14887" fg:w="2"/><text x="100.0489%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::FindFreeRegistersForRange(v8::internal::compiler::LiveRange*, v8::base::Vector (2 samples, 0.01%)</title><rect x="99.8123%" y="357" width="0.0134%" height="15" fill="rgb(207,58,43)" fg:x="14889" fg:w="2"/><text x="100.0623%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (4 samples, 0.03%)</title><rect x="99.8257%" y="357" width="0.0268%" height="15" fill="rgb(215,193,15)" fg:x="14891" fg:w="4"/><text x="100.0757%" y="367.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (14 samples, 0.09%)</title><rect x="99.7788%" y="389" width="0.0939%" height="15" fill="rgb(232,15,44)" fg:x="14884" fg:w="14"/><text x="100.0288%" y="399.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (14 samples, 0.09%)</title><rect x="99.7788%" y="373" width="0.0939%" height="15" fill="rgb(212,3,48)" fg:x="14884" fg:w="14"/><text x="100.0288%" y="383.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges (2 samples, 0.01%)</title><rect x="99.8592%" y="357" width="0.0134%" height="15" fill="rgb(218,128,7)" fg:x="14896" fg:w="2"/><text x="100.1092%" y="367.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator() (2 samples, 0.01%)</title><rect x="99.8592%" y="341" width="0.0134%" height="15" fill="rgb(226,216,39)" fg:x="14896" fg:w="2"/><text x="100.1092%" y="351.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (100 samples, 0.67%)</title><rect x="99.2358%" y="501" width="0.6704%" height="15" fill="rgb(243,47,51)" fg:x="14803" fg:w="100"/><text x="99.4858%" y="511.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (99 samples, 0.66%)</title><rect x="99.2425%" y="485" width="0.6637%" height="15" fill="rgb(241,183,40)" fg:x="14804" fg:w="99"/><text x="99.4925%" y="495.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (99 samples, 0.66%)</title><rect x="99.2425%" y="469" width="0.6637%" height="15" fill="rgb(231,217,32)" fg:x="14804" fg:w="99"/><text x="99.4925%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (99 samples, 0.66%)</title><rect x="99.2425%" y="453" width="0.6637%" height="15" fill="rgb(229,61,38)" fg:x="14804" fg:w="99"/><text x="99.4925%" y="463.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (88 samples, 0.59%)</title><rect x="99.3162%" y="437" width="0.5899%" height="15" fill="rgb(225,210,5)" fg:x="14815" fg:w="88"/><text x="99.5662%" y="447.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (26 samples, 0.17%)</title><rect x="99.7318%" y="421" width="0.1743%" height="15" fill="rgb(231,79,45)" fg:x="14877" fg:w="26"/><text x="99.9818%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (22 samples, 0.15%)</title><rect x="99.7587%" y="405" width="0.1475%" height="15" fill="rgb(224,100,7)" fg:x="14881" fg:w="22"/><text x="100.0087%" y="415.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (2 samples, 0.01%)</title><rect x="99.9330%" y="437" width="0.0134%" height="15" fill="rgb(241,198,18)" fg:x="14907" fg:w="2"/><text x="100.1830%" y="447.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.01%)</title><rect x="99.9330%" y="421" width="0.0134%" height="15" fill="rgb(252,97,53)" fg:x="14907" fg:w="2"/><text x="100.1830%" y="431.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (7 samples, 0.05%)</title><rect x="99.9061%" y="453" width="0.0469%" height="15" fill="rgb(220,88,7)" fg:x="14903" fg:w="7"/><text x="100.1561%" y="463.50"></text></g><g><title>deno`v8::platform::DefaultJobWorker::Run (8 samples, 0.05%)</title><rect x="99.9061%" y="501" width="0.0536%" height="15" fill="rgb(213,176,14)" fg:x="14903" fg:w="8"/><text x="100.1561%" y="511.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::Run (8 samples, 0.05%)</title><rect x="99.9061%" y="485" width="0.0536%" height="15" fill="rgb(246,73,7)" fg:x="14903" fg:w="8"/><text x="100.1561%" y="495.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (8 samples, 0.05%)</title><rect x="99.9061%" y="469" width="0.0536%" height="15" fill="rgb(245,64,36)" fg:x="14903" fg:w="8"/><text x="100.1561%" y="479.50"></text></g><g><title>all (14,917 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(245,80,10)" fg:x="0" fg:w="14917"/><text x="0.2500%" y="591.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (6,579 samples, 44.10%)</title><rect x="55.8960%" y="565" width="44.1040%" height="15" fill="rgb(232,107,50)" fg:x="8338" fg:w="6579"/><text x="56.1460%" y="575.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (6,579 samples, 44.10%)</title><rect x="55.8960%" y="549" width="44.1040%" height="15" fill="rgb(253,3,0)" fg:x="8338" fg:w="6579"/><text x="56.1460%" y="559.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>deno`v8::base::ThreadEntry (115 samples, 0.77%)</title><rect x="99.2291%" y="533" width="0.7709%" height="15" fill="rgb(212,99,53)" fg:x="14802" fg:w="115"/><text x="99.4791%" y="543.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (114 samples, 0.76%)</title><rect x="99.2358%" y="517" width="0.7642%" height="15" fill="rgb(249,111,54)" fg:x="14803" fg:w="114"/><text x="99.4858%" y="527.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (6 samples, 0.04%)</title><rect x="99.9598%" y="501" width="0.0402%" height="15" fill="rgb(249,55,30)" fg:x="14911" fg:w="6"/><text x="100.2098%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (6 samples, 0.04%)</title><rect x="99.9598%" y="485" width="0.0402%" height="15" fill="rgb(237,47,42)" fg:x="14911" fg:w="6"/><text x="100.2098%" y="495.50"></text></g></svg></svg>