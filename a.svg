<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1430" onload="init(evt)" viewBox="0 0 1200 1430" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1430" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1413.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1413.00"> </text><svg id="frames" x="10" width="1180" total_samples="9656"><g><title>deno`OUTLINED_FUNCTION_10435 (4 samples, 0.04%)</title><rect x="0.0000%" y="1301" width="0.0414%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11477 (1 samples, 0.01%)</title><rect x="0.0414%" y="1301" width="0.0104%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.2914%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11848 (1 samples, 0.01%)</title><rect x="0.0518%" y="1301" width="0.0104%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.3018%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11849 (2 samples, 0.02%)</title><rect x="0.0621%" y="1301" width="0.0207%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="2"/><text x="0.3121%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18310 (3 samples, 0.03%)</title><rect x="0.0829%" y="1301" width="0.0311%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="3"/><text x="0.3329%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_26225 (5 samples, 0.05%)</title><rect x="0.1139%" y="1301" width="0.0518%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="5"/><text x="0.3639%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36057 (1 samples, 0.01%)</title><rect x="0.1657%" y="1301" width="0.0104%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="1"/><text x="0.4157%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_37659 (1 samples, 0.01%)</title><rect x="0.1761%" y="1301" width="0.0104%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="1"/><text x="0.4261%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_37941 (1 samples, 0.01%)</title><rect x="0.1864%" y="1301" width="0.0104%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="1"/><text x="0.4364%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_449 (1 samples, 0.01%)</title><rect x="0.1968%" y="1301" width="0.0104%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="1"/><text x="0.4468%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_4765 (5 samples, 0.05%)</title><rect x="0.2071%" y="1301" width="0.0518%" height="15" fill="rgb(250,228,42)" fg:x="20" fg:w="5"/><text x="0.4571%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6345 (2 samples, 0.02%)</title><rect x="0.2589%" y="1301" width="0.0207%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="2"/><text x="0.5089%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_907 (2 samples, 0.02%)</title><rect x="0.2796%" y="1301" width="0.0207%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="2"/><text x="0.5296%" y="1311.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9863 (1 samples, 0.01%)</title><rect x="0.3003%" y="1301" width="0.0104%" height="15" fill="rgb(206,188,39)" fg:x="29" fg:w="1"/><text x="0.5503%" y="1311.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (4 samples, 0.04%)</title><rect x="0.3107%" y="1301" width="0.0414%" height="15" fill="rgb(217,207,13)" fg:x="30" fg:w="4"/><text x="0.5607%" y="1311.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.03%)</title><rect x="0.3521%" y="1301" width="0.0311%" height="15" fill="rgb(231,73,38)" fg:x="34" fg:w="3"/><text x="0.6021%" y="1311.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::current_thread::Core&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="0.3832%" y="1301" width="0.0311%" height="15" fill="rgb(225,20,46)" fg:x="37" fg:w="3"/><text x="0.6332%" y="1311.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (1 samples, 0.01%)</title><rect x="0.4143%" y="1301" width="0.0104%" height="15" fill="rgb(210,31,41)" fg:x="40" fg:w="1"/><text x="0.6643%" y="1311.50"></text></g><g><title>deno`deno::js::deno_isolate_init (1 samples, 0.01%)</title><rect x="0.6214%" y="1189" width="0.0104%" height="15" fill="rgb(221,200,47)" fg:x="60" fg:w="1"/><text x="0.8714%" y="1199.50"></text></g><g><title>deno`&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="0.6214%" y="1173" width="0.0104%" height="15" fill="rgb(226,26,5)" fg:x="60" fg:w="1"/><text x="0.8714%" y="1183.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.01%)</title><rect x="0.6214%" y="1157" width="0.0104%" height="15" fill="rgb(249,33,26)" fg:x="60" fg:w="1"/><text x="0.8714%" y="1167.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.01%)</title><rect x="0.6214%" y="1141" width="0.0104%" height="15" fill="rgb(235,183,28)" fg:x="60" fg:w="1"/><text x="0.8714%" y="1151.50"></text></g><g><title>deno`deno::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.01%)</title><rect x="0.6214%" y="1125" width="0.0104%" height="15" fill="rgb(221,5,38)" fg:x="60" fg:w="1"/><text x="0.8714%" y="1135.50"></text></g><g><title>deno`lzzzz::lz4::block::decompress (1 samples, 0.01%)</title><rect x="0.6214%" y="1109" width="0.0104%" height="15" fill="rgb(247,18,42)" fg:x="60" fg:w="1"/><text x="0.8714%" y="1119.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.01%)</title><rect x="0.6214%" y="1093" width="0.0104%" height="15" fill="rgb(241,131,45)" fg:x="60" fg:w="1"/><text x="0.8714%" y="1103.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (1 samples, 0.01%)</title><rect x="0.6317%" y="1189" width="0.0104%" height="15" fill="rgb(249,31,29)" fg:x="61" fg:w="1"/><text x="0.8817%" y="1199.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (1 samples, 0.01%)</title><rect x="0.6317%" y="1173" width="0.0104%" height="15" fill="rgb(225,111,53)" fg:x="61" fg:w="1"/><text x="0.8817%" y="1183.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (1 samples, 0.01%)</title><rect x="0.6317%" y="1157" width="0.0104%" height="15" fill="rgb(238,160,17)" fg:x="61" fg:w="1"/><text x="0.8817%" y="1167.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.01%)</title><rect x="0.6317%" y="1141" width="0.0104%" height="15" fill="rgb(214,148,48)" fg:x="61" fg:w="1"/><text x="0.8817%" y="1151.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.01%)</title><rect x="0.6317%" y="1125" width="0.0104%" height="15" fill="rgb(232,36,49)" fg:x="61" fg:w="1"/><text x="0.8817%" y="1135.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="1045" width="0.0104%" height="15" fill="rgb(209,103,24)" fg:x="62" fg:w="1"/><text x="0.8921%" y="1055.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.6421%" y="1029" width="0.0104%" height="15" fill="rgb(229,88,8)" fg:x="62" fg:w="1"/><text x="0.8921%" y="1039.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="1013" width="0.0104%" height="15" fill="rgb(213,181,19)" fg:x="62" fg:w="1"/><text x="0.8921%" y="1023.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="997" width="0.0104%" height="15" fill="rgb(254,191,54)" fg:x="62" fg:w="1"/><text x="0.8921%" y="1007.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="981" width="0.0104%" height="15" fill="rgb(241,83,37)" fg:x="62" fg:w="1"/><text x="0.8921%" y="991.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.6421%" y="965" width="0.0104%" height="15" fill="rgb(233,36,39)" fg:x="62" fg:w="1"/><text x="0.8921%" y="975.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="949" width="0.0104%" height="15" fill="rgb(226,3,54)" fg:x="62" fg:w="1"/><text x="0.8921%" y="959.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="933" width="0.0104%" height="15" fill="rgb(245,192,40)" fg:x="62" fg:w="1"/><text x="0.8921%" y="943.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="917" width="0.0104%" height="15" fill="rgb(238,167,29)" fg:x="62" fg:w="1"/><text x="0.8921%" y="927.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.6421%" y="901" width="0.0104%" height="15" fill="rgb(232,182,51)" fg:x="62" fg:w="1"/><text x="0.8921%" y="911.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="885" width="0.0104%" height="15" fill="rgb(231,60,39)" fg:x="62" fg:w="1"/><text x="0.8921%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="869" width="0.0104%" height="15" fill="rgb(208,69,12)" fg:x="62" fg:w="1"/><text x="0.8921%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="853" width="0.0104%" height="15" fill="rgb(235,93,37)" fg:x="62" fg:w="1"/><text x="0.8921%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.01%)</title><rect x="0.6421%" y="837" width="0.0104%" height="15" fill="rgb(213,116,39)" fg:x="62" fg:w="1"/><text x="0.8921%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="821" width="0.0104%" height="15" fill="rgb(222,207,29)" fg:x="62" fg:w="1"/><text x="0.8921%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="805" width="0.0104%" height="15" fill="rgb(206,96,30)" fg:x="62" fg:w="1"/><text x="0.8921%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="789" width="0.0104%" height="15" fill="rgb(218,138,4)" fg:x="62" fg:w="1"/><text x="0.8921%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="773" width="0.0104%" height="15" fill="rgb(250,191,14)" fg:x="62" fg:w="1"/><text x="0.8921%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="757" width="0.0104%" height="15" fill="rgb(239,60,40)" fg:x="62" fg:w="1"/><text x="0.8921%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="741" width="0.0104%" height="15" fill="rgb(206,27,48)" fg:x="62" fg:w="1"/><text x="0.8921%" y="751.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="725" width="0.0104%" height="15" fill="rgb(225,35,8)" fg:x="62" fg:w="1"/><text x="0.8921%" y="735.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="709" width="0.0104%" height="15" fill="rgb(250,213,24)" fg:x="62" fg:w="1"/><text x="0.8921%" y="719.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="693" width="0.0104%" height="15" fill="rgb(247,123,22)" fg:x="62" fg:w="1"/><text x="0.8921%" y="703.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="677" width="0.0104%" height="15" fill="rgb(231,138,38)" fg:x="62" fg:w="1"/><text x="0.8921%" y="687.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="661" width="0.0104%" height="15" fill="rgb(231,145,46)" fg:x="62" fg:w="1"/><text x="0.8921%" y="671.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="645" width="0.0104%" height="15" fill="rgb(251,118,11)" fg:x="62" fg:w="1"/><text x="0.8921%" y="655.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="629" width="0.0104%" height="15" fill="rgb(217,147,25)" fg:x="62" fg:w="1"/><text x="0.8921%" y="639.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="613" width="0.0104%" height="15" fill="rgb(247,81,37)" fg:x="62" fg:w="1"/><text x="0.8921%" y="623.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="597" width="0.0104%" height="15" fill="rgb(209,12,38)" fg:x="62" fg:w="1"/><text x="0.8921%" y="607.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="581" width="0.0104%" height="15" fill="rgb(227,1,9)" fg:x="62" fg:w="1"/><text x="0.8921%" y="591.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="565" width="0.0104%" height="15" fill="rgb(248,47,43)" fg:x="62" fg:w="1"/><text x="0.8921%" y="575.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="549" width="0.0104%" height="15" fill="rgb(221,10,30)" fg:x="62" fg:w="1"/><text x="0.8921%" y="559.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="533" width="0.0104%" height="15" fill="rgb(210,229,1)" fg:x="62" fg:w="1"/><text x="0.8921%" y="543.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="517" width="0.0104%" height="15" fill="rgb(222,148,37)" fg:x="62" fg:w="1"/><text x="0.8921%" y="527.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="501" width="0.0104%" height="15" fill="rgb(234,67,33)" fg:x="62" fg:w="1"/><text x="0.8921%" y="511.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="485" width="0.0104%" height="15" fill="rgb(247,98,35)" fg:x="62" fg:w="1"/><text x="0.8921%" y="495.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="469" width="0.0104%" height="15" fill="rgb(247,138,52)" fg:x="62" fg:w="1"/><text x="0.8921%" y="479.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="453" width="0.0104%" height="15" fill="rgb(213,79,30)" fg:x="62" fg:w="1"/><text x="0.8921%" y="463.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="437" width="0.0104%" height="15" fill="rgb(246,177,23)" fg:x="62" fg:w="1"/><text x="0.8921%" y="447.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="421" width="0.0104%" height="15" fill="rgb(230,62,27)" fg:x="62" fg:w="1"/><text x="0.8921%" y="431.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="405" width="0.0104%" height="15" fill="rgb(216,154,8)" fg:x="62" fg:w="1"/><text x="0.8921%" y="415.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="389" width="0.0104%" height="15" fill="rgb(244,35,45)" fg:x="62" fg:w="1"/><text x="0.8921%" y="399.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="373" width="0.0104%" height="15" fill="rgb(251,115,12)" fg:x="62" fg:w="1"/><text x="0.8921%" y="383.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="357" width="0.0104%" height="15" fill="rgb(240,54,50)" fg:x="62" fg:w="1"/><text x="0.8921%" y="367.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="341" width="0.0104%" height="15" fill="rgb(233,84,52)" fg:x="62" fg:w="1"/><text x="0.8921%" y="351.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="325" width="0.0104%" height="15" fill="rgb(207,117,47)" fg:x="62" fg:w="1"/><text x="0.8921%" y="335.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="309" width="0.0104%" height="15" fill="rgb(249,43,39)" fg:x="62" fg:w="1"/><text x="0.8921%" y="319.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="293" width="0.0104%" height="15" fill="rgb(209,38,44)" fg:x="62" fg:w="1"/><text x="0.8921%" y="303.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="277" width="0.0104%" height="15" fill="rgb(236,212,23)" fg:x="62" fg:w="1"/><text x="0.8921%" y="287.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="261" width="0.0104%" height="15" fill="rgb(242,79,21)" fg:x="62" fg:w="1"/><text x="0.8921%" y="271.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="245" width="0.0104%" height="15" fill="rgb(211,96,35)" fg:x="62" fg:w="1"/><text x="0.8921%" y="255.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="229" width="0.0104%" height="15" fill="rgb(253,215,40)" fg:x="62" fg:w="1"/><text x="0.8921%" y="239.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="213" width="0.0104%" height="15" fill="rgb(211,81,21)" fg:x="62" fg:w="1"/><text x="0.8921%" y="223.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="197" width="0.0104%" height="15" fill="rgb(208,190,38)" fg:x="62" fg:w="1"/><text x="0.8921%" y="207.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="181" width="0.0104%" height="15" fill="rgb(235,213,38)" fg:x="62" fg:w="1"/><text x="0.8921%" y="191.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="165" width="0.0104%" height="15" fill="rgb(237,122,38)" fg:x="62" fg:w="1"/><text x="0.8921%" y="175.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="149" width="0.0104%" height="15" fill="rgb(244,218,35)" fg:x="62" fg:w="1"/><text x="0.8921%" y="159.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="133" width="0.0104%" height="15" fill="rgb(240,68,47)" fg:x="62" fg:w="1"/><text x="0.8921%" y="143.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="117" width="0.0104%" height="15" fill="rgb(210,16,53)" fg:x="62" fg:w="1"/><text x="0.8921%" y="127.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="101" width="0.0104%" height="15" fill="rgb(235,124,12)" fg:x="62" fg:w="1"/><text x="0.8921%" y="111.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="85" width="0.0104%" height="15" fill="rgb(224,169,11)" fg:x="62" fg:w="1"/><text x="0.8921%" y="95.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="69" width="0.0104%" height="15" fill="rgb(250,166,2)" fg:x="62" fg:w="1"/><text x="0.8921%" y="79.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6421%" y="53" width="0.0104%" height="15" fill="rgb(242,216,29)" fg:x="62" fg:w="1"/><text x="0.8921%" y="63.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6421%" y="37" width="0.0104%" height="15" fill="rgb(230,116,27)" fg:x="62" fg:w="1"/><text x="0.8921%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.02%)</title><rect x="0.6421%" y="1157" width="0.0207%" height="15" fill="rgb(228,99,48)" fg:x="62" fg:w="2"/><text x="0.8921%" y="1167.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.02%)</title><rect x="0.6421%" y="1141" width="0.0207%" height="15" fill="rgb(253,11,6)" fg:x="62" fg:w="2"/><text x="0.8921%" y="1151.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.02%)</title><rect x="0.6421%" y="1125" width="0.0207%" height="15" fill="rgb(247,143,39)" fg:x="62" fg:w="2"/><text x="0.8921%" y="1135.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.02%)</title><rect x="0.6421%" y="1109" width="0.0207%" height="15" fill="rgb(236,97,10)" fg:x="62" fg:w="2"/><text x="0.8921%" y="1119.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.02%)</title><rect x="0.6421%" y="1093" width="0.0207%" height="15" fill="rgb(233,208,19)" fg:x="62" fg:w="2"/><text x="0.8921%" y="1103.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.02%)</title><rect x="0.6421%" y="1077" width="0.0207%" height="15" fill="rgb(216,164,2)" fg:x="62" fg:w="2"/><text x="0.8921%" y="1087.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.02%)</title><rect x="0.6421%" y="1061" width="0.0207%" height="15" fill="rgb(220,129,5)" fg:x="62" fg:w="2"/><text x="0.8921%" y="1071.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.01%)</title><rect x="0.6524%" y="1045" width="0.0104%" height="15" fill="rgb(242,17,10)" fg:x="63" fg:w="1"/><text x="0.9024%" y="1055.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.01%)</title><rect x="0.6524%" y="1029" width="0.0104%" height="15" fill="rgb(242,107,0)" fg:x="63" fg:w="1"/><text x="0.9024%" y="1039.50"></text></g><g><title>deno`v8::internal::HashTable&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Rehash (1 samples, 0.01%)</title><rect x="0.6524%" y="1013" width="0.0104%" height="15" fill="rgb(251,28,31)" fg:x="63" fg:w="1"/><text x="0.9024%" y="1023.50"></text></g><g><title>deno`v8::internal::ReadOnlyHeap::SetUp (1 samples, 0.01%)</title><rect x="0.6628%" y="1077" width="0.0104%" height="15" fill="rgb(233,223,10)" fg:x="64" fg:w="1"/><text x="0.9128%" y="1087.50"></text></g><g><title>deno`v8::internal::ReadOnlyDeserializer::DeserializeIntoIsolate (1 samples, 0.01%)</title><rect x="0.6628%" y="1061" width="0.0104%" height="15" fill="rgb(215,21,27)" fg:x="64" fg:w="1"/><text x="0.9128%" y="1071.50"></text></g><g><title>deno`v8::internal::ReadOnlyRoots::Iterate (1 samples, 0.01%)</title><rect x="0.6628%" y="1045" width="0.0104%" height="15" fill="rgb(232,23,21)" fg:x="64" fg:w="1"/><text x="0.9128%" y="1055.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.01%)</title><rect x="0.6628%" y="1029" width="0.0104%" height="15" fill="rgb(244,5,23)" fg:x="64" fg:w="1"/><text x="0.9128%" y="1039.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.01%)</title><rect x="0.6628%" y="1013" width="0.0104%" height="15" fill="rgb(226,81,46)" fg:x="64" fg:w="1"/><text x="0.9128%" y="1023.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6628%" y="997" width="0.0104%" height="15" fill="rgb(247,70,30)" fg:x="64" fg:w="1"/><text x="0.9128%" y="1007.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::PostProcessNewObject(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.6628%" y="981" width="0.0104%" height="15" fill="rgb(212,68,19)" fg:x="64" fg:w="1"/><text x="0.9128%" y="991.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.04%)</title><rect x="0.6421%" y="1173" width="0.0414%" height="15" fill="rgb(240,187,13)" fg:x="62" fg:w="4"/><text x="0.8921%" y="1183.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.02%)</title><rect x="0.6628%" y="1157" width="0.0207%" height="15" fill="rgb(223,113,26)" fg:x="64" fg:w="2"/><text x="0.9128%" y="1167.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.02%)</title><rect x="0.6628%" y="1141" width="0.0207%" height="15" fill="rgb(206,192,2)" fg:x="64" fg:w="2"/><text x="0.9128%" y="1151.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.02%)</title><rect x="0.6628%" y="1125" width="0.0207%" height="15" fill="rgb(241,108,4)" fg:x="64" fg:w="2"/><text x="0.9128%" y="1135.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.02%)</title><rect x="0.6628%" y="1109" width="0.0207%" height="15" fill="rgb(247,173,49)" fg:x="64" fg:w="2"/><text x="0.9128%" y="1119.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.02%)</title><rect x="0.6628%" y="1093" width="0.0207%" height="15" fill="rgb(224,114,35)" fg:x="64" fg:w="2"/><text x="0.9128%" y="1103.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.01%)</title><rect x="0.6732%" y="1077" width="0.0104%" height="15" fill="rgb(245,159,27)" fg:x="65" fg:w="1"/><text x="0.9232%" y="1087.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.01%)</title><rect x="0.6732%" y="1061" width="0.0104%" height="15" fill="rgb(245,172,44)" fg:x="65" fg:w="1"/><text x="0.9232%" y="1071.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.01%)</title><rect x="0.6732%" y="1045" width="0.0104%" height="15" fill="rgb(236,23,11)" fg:x="65" fg:w="1"/><text x="0.9232%" y="1055.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.01%)</title><rect x="0.6732%" y="1029" width="0.0104%" height="15" fill="rgb(205,117,38)" fg:x="65" fg:w="1"/><text x="0.9232%" y="1039.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6732%" y="1013" width="0.0104%" height="15" fill="rgb(237,72,25)" fg:x="65" fg:w="1"/><text x="0.9232%" y="1023.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6732%" y="997" width="0.0104%" height="15" fill="rgb(244,70,9)" fg:x="65" fg:w="1"/><text x="0.9232%" y="1007.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6732%" y="981" width="0.0104%" height="15" fill="rgb(217,125,39)" fg:x="65" fg:w="1"/><text x="0.9232%" y="991.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6732%" y="965" width="0.0104%" height="15" fill="rgb(235,36,10)" fg:x="65" fg:w="1"/><text x="0.9232%" y="975.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.01%)</title><rect x="0.6732%" y="949" width="0.0104%" height="15" fill="rgb(251,123,47)" fg:x="65" fg:w="1"/><text x="0.9232%" y="959.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.01%)</title><rect x="0.6732%" y="933" width="0.0104%" height="15" fill="rgb(221,13,13)" fg:x="65" fg:w="1"/><text x="0.9232%" y="943.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="0.6835%" y="997" width="0.0104%" height="15" fill="rgb(238,131,9)" fg:x="66" fg:w="1"/><text x="0.9335%" y="1007.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.01%)</title><rect x="0.6835%" y="981" width="0.0104%" height="15" fill="rgb(211,50,8)" fg:x="66" fg:w="1"/><text x="0.9335%" y="991.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.6835%" y="965" width="0.0104%" height="15" fill="rgb(245,182,24)" fg:x="66" fg:w="1"/><text x="0.9335%" y="975.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::CallbackScope&gt; (1 samples, 0.01%)</title><rect x="0.6835%" y="949" width="0.0104%" height="15" fill="rgb(242,14,37)" fg:x="66" fg:w="1"/><text x="0.9335%" y="959.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="0.6835%" y="1013" width="0.0207%" height="15" fill="rgb(246,228,12)" fg:x="66" fg:w="2"/><text x="0.9335%" y="1023.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="0.6939%" y="997" width="0.0104%" height="15" fill="rgb(213,55,15)" fg:x="67" fg:w="1"/><text x="0.9439%" y="1007.50"></text></g><g><title>deno`Builtins_ConstructHandler (1 samples, 0.01%)</title><rect x="0.6939%" y="981" width="0.0104%" height="15" fill="rgb(209,9,3)" fg:x="67" fg:w="1"/><text x="0.9439%" y="991.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.01%)</title><rect x="0.6939%" y="965" width="0.0104%" height="15" fill="rgb(230,59,30)" fg:x="67" fg:w="1"/><text x="0.9439%" y="975.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="0.6939%" y="949" width="0.0104%" height="15" fill="rgb(209,121,21)" fg:x="67" fg:w="1"/><text x="0.9439%" y="959.50"></text></g><g><title>deno`v8::internal::Builtin_FunctionConstructor (1 samples, 0.01%)</title><rect x="0.6939%" y="933" width="0.0104%" height="15" fill="rgb(220,109,13)" fg:x="67" fg:w="1"/><text x="0.9439%" y="943.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CreateDynamicFunction (1 samples, 0.01%)</title><rect x="0.6939%" y="917" width="0.0104%" height="15" fill="rgb(232,18,1)" fg:x="67" fg:w="1"/><text x="0.9439%" y="927.50"></text></g><g><title>deno`v8::internal::Compiler::GetFunctionFromValidatedString(v8::internal::Handle&lt;v8::internal::Context&gt;, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.6939%" y="901" width="0.0104%" height="15" fill="rgb(215,41,42)" fg:x="67" fg:w="1"/><text x="0.9439%" y="911.50"></text></g><g><title>deno`v8::internal::Compiler::GetFunctionFromEval(v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.6939%" y="885" width="0.0104%" height="15" fill="rgb(224,123,36)" fg:x="67" fg:w="1"/><text x="0.9439%" y="895.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CompileToplevel(v8::internal::ParseInfo*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.6939%" y="869" width="0.0104%" height="15" fill="rgb(240,125,3)" fg:x="67" fg:w="1"/><text x="0.9439%" y="879.50"></text></g><g><title>deno`v8::internal::parsing::ParseProgram(v8::internal::ParseInfo*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.6939%" y="853" width="0.0104%" height="15" fill="rgb(205,98,50)" fg:x="67" fg:w="1"/><text x="0.9439%" y="863.50"></text></g><g><title>deno`v8::internal::Parser::ParseProgram(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::MaybeHandle (1 samples, 0.01%)</title><rect x="0.6939%" y="837" width="0.0104%" height="15" fill="rgb(205,185,37)" fg:x="67" fg:w="1"/><text x="0.9439%" y="847.50"></text></g><g><title>deno`v8::internal::Parser::DoParseProgram (1 samples, 0.01%)</title><rect x="0.6939%" y="821" width="0.0104%" height="15" fill="rgb(238,207,15)" fg:x="67" fg:w="1"/><text x="0.9439%" y="831.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseExpressionOrLabelledStatement(v8::internal::ZoneList&lt;v8::internal::AstRawString const*&gt;*, v8::internal::ZoneList (1 samples, 0.01%)</title><rect x="0.6939%" y="805" width="0.0104%" height="15" fill="rgb(213,199,42)" fg:x="67" fg:w="1"/><text x="0.9439%" y="815.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseExpressionCoverGrammar (1 samples, 0.01%)</title><rect x="0.6939%" y="789" width="0.0104%" height="15" fill="rgb(235,201,11)" fg:x="67" fg:w="1"/><text x="0.9439%" y="799.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseAssignmentExpressionCoverGrammar (1 samples, 0.01%)</title><rect x="0.6939%" y="773" width="0.0104%" height="15" fill="rgb(207,46,11)" fg:x="67" fg:w="1"/><text x="0.9439%" y="783.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseLogicalExpression (1 samples, 0.01%)</title><rect x="0.6939%" y="757" width="0.0104%" height="15" fill="rgb(241,35,35)" fg:x="67" fg:w="1"/><text x="0.9439%" y="767.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParsePrimaryExpression (1 samples, 0.01%)</title><rect x="0.6939%" y="741" width="0.0104%" height="15" fill="rgb(243,32,47)" fg:x="67" fg:w="1"/><text x="0.9439%" y="751.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseExpressionCoverGrammar (1 samples, 0.01%)</title><rect x="0.6939%" y="725" width="0.0104%" height="15" fill="rgb(247,202,23)" fg:x="67" fg:w="1"/><text x="0.9439%" y="735.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseAssignmentExpressionCoverGrammar (1 samples, 0.01%)</title><rect x="0.6939%" y="709" width="0.0104%" height="15" fill="rgb(219,102,11)" fg:x="67" fg:w="1"/><text x="0.9439%" y="719.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseLogicalExpression (1 samples, 0.01%)</title><rect x="0.6939%" y="693" width="0.0104%" height="15" fill="rgb(243,110,44)" fg:x="67" fg:w="1"/><text x="0.9439%" y="703.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseFunctionExpression (1 samples, 0.01%)</title><rect x="0.6939%" y="677" width="0.0104%" height="15" fill="rgb(222,74,54)" fg:x="67" fg:w="1"/><text x="0.9439%" y="687.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunctionLiteral(v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::FunctionNameValidity, v8::internal::FunctionKind, int, v8::internal::FunctionSyntaxKind, v8::internal::LanguageMode, v8::internal::ZoneList (1 samples, 0.01%)</title><rect x="0.6939%" y="661" width="0.0104%" height="15" fill="rgb(216,99,12)" fg:x="67" fg:w="1"/><text x="0.9439%" y="671.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::ScopedList&lt;v8::internal::Statement*, void*&gt;*, v8::internal::AstRawString const*, int, v8::internal::FunctionKind, v8::internal::FunctionSyntaxKind, v8::internal::DeclarationScope*, int*, int*, bool*, int*, int*, v8::internal::ZoneList (1 samples, 0.01%)</title><rect x="0.6939%" y="645" width="0.0104%" height="15" fill="rgb(226,22,26)" fg:x="67" fg:w="1"/><text x="0.9439%" y="655.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseFunctionBody(v8::internal::ScopedList&lt;v8::internal::Statement*, void*&gt;*, v8::internal::AstRawString const*, int, v8::internal::ParserFormalParameters const&amp;, v8::internal::FunctionKind, v8::internal::FunctionSyntaxKind, v8::internal::ParserBase (1 samples, 0.01%)</title><rect x="0.6939%" y="629" width="0.0104%" height="15" fill="rgb(217,163,10)" fg:x="67" fg:w="1"/><text x="0.9439%" y="639.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseReturnStatement (1 samples, 0.01%)</title><rect x="0.6939%" y="613" width="0.0104%" height="15" fill="rgb(213,25,53)" fg:x="67" fg:w="1"/><text x="0.9439%" y="623.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseExpressionCoverGrammar (1 samples, 0.01%)</title><rect x="0.6939%" y="597" width="0.0104%" height="15" fill="rgb(252,105,26)" fg:x="67" fg:w="1"/><text x="0.9439%" y="607.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseAssignmentExpressionCoverGrammar (1 samples, 0.01%)</title><rect x="0.6939%" y="581" width="0.0104%" height="15" fill="rgb(220,39,43)" fg:x="67" fg:w="1"/><text x="0.9439%" y="591.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseLogicalExpression (1 samples, 0.01%)</title><rect x="0.6939%" y="565" width="0.0104%" height="15" fill="rgb(229,68,48)" fg:x="67" fg:w="1"/><text x="0.9439%" y="575.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseFunctionExpression (1 samples, 0.01%)</title><rect x="0.6939%" y="549" width="0.0104%" height="15" fill="rgb(252,8,32)" fg:x="67" fg:w="1"/><text x="0.9439%" y="559.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunctionLiteral(v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::FunctionNameValidity, v8::internal::FunctionKind, int, v8::internal::FunctionSyntaxKind, v8::internal::LanguageMode, v8::internal::ZoneList (1 samples, 0.01%)</title><rect x="0.6939%" y="533" width="0.0104%" height="15" fill="rgb(223,20,43)" fg:x="67" fg:w="1"/><text x="0.9439%" y="543.50"></text></g><g><title>deno`v8::internal::Parser::SkipFunction (1 samples, 0.01%)</title><rect x="0.6939%" y="517" width="0.0104%" height="15" fill="rgb(229,81,49)" fg:x="67" fg:w="1"/><text x="0.9439%" y="527.50"></text></g><g><title>deno`v8::internal::PreParser::PreParseFunction (1 samples, 0.01%)</title><rect x="0.6939%" y="501" width="0.0104%" height="15" fill="rgb(236,28,36)" fg:x="67" fg:w="1"/><text x="0.9439%" y="511.50"></text></g><g><title>deno`v8::internal::PreParser::ParseStatementListAndLogFunction (1 samples, 0.01%)</title><rect x="0.6939%" y="485" width="0.0104%" height="15" fill="rgb(249,185,26)" fg:x="67" fg:w="1"/><text x="0.9439%" y="495.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::PreParser&gt;::ParseStatementListItem (1 samples, 0.01%)</title><rect x="0.6939%" y="469" width="0.0104%" height="15" fill="rgb(249,174,33)" fg:x="67" fg:w="1"/><text x="0.9439%" y="479.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.09%)</title><rect x="0.6214%" y="1285" width="0.0932%" height="15" fill="rgb(233,201,37)" fg:x="60" fg:w="9"/><text x="0.8714%" y="1295.50"></text></g><g><title>deno`deno::main::_{{closure}} (9 samples, 0.09%)</title><rect x="0.6214%" y="1269" width="0.0932%" height="15" fill="rgb(221,78,26)" fg:x="60" fg:w="9"/><text x="0.8714%" y="1279.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.09%)</title><rect x="0.6214%" y="1253" width="0.0932%" height="15" fill="rgb(250,127,30)" fg:x="60" fg:w="9"/><text x="0.8714%" y="1263.50"></text></g><g><title>deno`deno::run_command::_{{closure}} (9 samples, 0.09%)</title><rect x="0.6214%" y="1237" width="0.0932%" height="15" fill="rgb(230,49,44)" fg:x="60" fg:w="9"/><text x="0.8714%" y="1247.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.09%)</title><rect x="0.6214%" y="1221" width="0.0932%" height="15" fill="rgb(229,67,23)" fg:x="60" fg:w="9"/><text x="0.8714%" y="1231.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.09%)</title><rect x="0.6214%" y="1205" width="0.0932%" height="15" fill="rgb(249,83,47)" fg:x="60" fg:w="9"/><text x="0.8714%" y="1215.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (7 samples, 0.07%)</title><rect x="0.6421%" y="1189" width="0.0725%" height="15" fill="rgb(215,43,3)" fg:x="62" fg:w="7"/><text x="0.8921%" y="1199.50"></text></g><g><title>deno`deno_runtime::web_worker::WebWorker::execute_script (3 samples, 0.03%)</title><rect x="0.6835%" y="1173" width="0.0311%" height="15" fill="rgb(238,154,13)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1183.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (3 samples, 0.03%)</title><rect x="0.6835%" y="1157" width="0.0311%" height="15" fill="rgb(219,56,2)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1167.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (3 samples, 0.03%)</title><rect x="0.6835%" y="1141" width="0.0311%" height="15" fill="rgb(233,0,4)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1151.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (3 samples, 0.03%)</title><rect x="0.6835%" y="1125" width="0.0311%" height="15" fill="rgb(235,30,7)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1135.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (3 samples, 0.03%)</title><rect x="0.6835%" y="1109" width="0.0311%" height="15" fill="rgb(250,79,13)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1119.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (3 samples, 0.03%)</title><rect x="0.6835%" y="1093" width="0.0311%" height="15" fill="rgb(211,146,34)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1103.50"></text></g><g><title>deno`Builtins_JSEntry (3 samples, 0.03%)</title><rect x="0.6835%" y="1077" width="0.0311%" height="15" fill="rgb(228,22,38)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1087.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (3 samples, 0.03%)</title><rect x="0.6835%" y="1061" width="0.0311%" height="15" fill="rgb(235,168,5)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1071.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3 samples, 0.03%)</title><rect x="0.6835%" y="1045" width="0.0311%" height="15" fill="rgb(221,155,16)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1055.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3 samples, 0.03%)</title><rect x="0.6835%" y="1029" width="0.0311%" height="15" fill="rgb(215,215,53)" fg:x="66" fg:w="3"/><text x="0.9335%" y="1039.50"></text></g><g><title>deno`Builtins_InvokeIntrinsicHandler (1 samples, 0.01%)</title><rect x="0.7042%" y="1013" width="0.0104%" height="15" fill="rgb(223,4,10)" fg:x="68" fg:w="1"/><text x="0.9542%" y="1023.50"></text></g><g><title>deno`Builtins_CopyDataProperties (1 samples, 0.01%)</title><rect x="0.7042%" y="997" width="0.0104%" height="15" fill="rgb(234,103,6)" fg:x="68" fg:w="1"/><text x="0.9542%" y="1007.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="0.7042%" y="981" width="0.0104%" height="15" fill="rgb(227,97,0)" fg:x="68" fg:w="1"/><text x="0.9542%" y="991.50"></text></g><g><title>deno`v8::internal::Runtime_DefineKeyedOwnPropertyInLiteral_Simple (1 samples, 0.01%)</title><rect x="0.7042%" y="965" width="0.0104%" height="15" fill="rgb(234,150,53)" fg:x="68" fg:w="1"/><text x="0.9542%" y="975.50"></text></g><g><title>deno`v8::internal::JSObject::DefineOwnPropertyIgnoreAttributes(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (1 samples, 0.01%)</title><rect x="0.7042%" y="949" width="0.0104%" height="15" fill="rgb(228,201,54)" fg:x="68" fg:w="1"/><text x="0.9542%" y="959.50"></text></g><g><title>deno`v8::internal::Object::TransitionAndWriteDataProperty(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (1 samples, 0.01%)</title><rect x="0.7042%" y="933" width="0.0104%" height="15" fill="rgb(222,22,37)" fg:x="68" fg:w="1"/><text x="0.9542%" y="943.50"></text></g><g><title>deno`v8::internal::LookupIterator::PrepareTransitionToDataProperty(v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.7042%" y="917" width="0.0104%" height="15" fill="rgb(237,53,32)" fg:x="68" fg:w="1"/><text x="0.9542%" y="927.50"></text></g><g><title>deno`v8::internal::Map::TransitionToDataProperty(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.7042%" y="901" width="0.0104%" height="15" fill="rgb(233,25,53)" fg:x="68" fg:w="1"/><text x="0.9542%" y="911.50"></text></g><g><title>deno`v8::internal::Map::CopyWithField(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.7042%" y="885" width="0.0104%" height="15" fill="rgb(210,40,34)" fg:x="68" fg:w="1"/><text x="0.9542%" y="895.50"></text></g><g><title>deno`v8::internal::Map::ShareDescriptor(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.7042%" y="869" width="0.0104%" height="15" fill="rgb(241,220,44)" fg:x="68" fg:w="1"/><text x="0.9542%" y="879.50"></text></g><g><title>deno`v8::internal::Map::RawCopy(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="0.7042%" y="853" width="0.0104%" height="15" fill="rgb(235,28,35)" fg:x="68" fg:w="1"/><text x="0.9542%" y="863.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="0.7146%" y="1285" width="0.0104%" height="15" fill="rgb(210,56,17)" fg:x="69" fg:w="1"/><text x="0.9646%" y="1295.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (3 samples, 0.03%)</title><rect x="0.7249%" y="1269" width="0.0311%" height="15" fill="rgb(224,130,29)" fg:x="70" fg:w="3"/><text x="0.9749%" y="1279.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (1 samples, 0.01%)</title><rect x="0.7560%" y="1269" width="0.0104%" height="15" fill="rgb(235,212,8)" fg:x="73" fg:w="1"/><text x="1.0060%" y="1279.50"></text></g><g><title>deno`OUTLINED_FUNCTION_116 (1 samples, 0.01%)</title><rect x="0.7767%" y="1253" width="0.0104%" height="15" fill="rgb(223,33,50)" fg:x="75" fg:w="1"/><text x="1.0267%" y="1263.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule (2 samples, 0.02%)</title><rect x="1.4188%" y="1205" width="0.0207%" height="15" fill="rgb(219,149,13)" fg:x="137" fg:w="2"/><text x="1.6688%" y="1215.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule::_{{closure}} (1 samples, 0.01%)</title><rect x="1.4395%" y="1205" width="0.0104%" height="15" fill="rgb(250,156,29)" fg:x="139" fg:w="1"/><text x="1.6895%" y="1215.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule (2 samples, 0.02%)</title><rect x="1.4499%" y="1205" width="0.0207%" height="15" fill="rgb(216,193,19)" fg:x="140" fg:w="2"/><text x="1.6999%" y="1215.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Shared&gt;&gt;::schedule::_{{closure}} (2 samples, 0.02%)</title><rect x="1.4499%" y="1189" width="0.0207%" height="15" fill="rgb(216,135,14)" fg:x="140" fg:w="2"/><text x="1.6999%" y="1199.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_dec (2 samples, 0.02%)</title><rect x="1.4706%" y="1205" width="0.0207%" height="15" fill="rgb(241,47,5)" fg:x="142" fg:w="2"/><text x="1.7206%" y="1215.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_notified_by_val (3 samples, 0.03%)</title><rect x="1.4913%" y="1205" width="0.0311%" height="15" fill="rgb(233,42,35)" fg:x="144" fg:w="3"/><text x="1.7413%" y="1215.50"></text></g><g><title>deno`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (52 samples, 0.54%)</title><rect x="1.0460%" y="1237" width="0.5385%" height="15" fill="rgb(231,13,6)" fg:x="101" fg:w="52"/><text x="1.2960%" y="1247.50"></text></g><g><title>deno`tokio::runtime::task::waker::wake_by_val (16 samples, 0.17%)</title><rect x="1.4188%" y="1221" width="0.1657%" height="15" fill="rgb(207,181,40)" fg:x="137" fg:w="16"/><text x="1.6688%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.06%)</title><rect x="1.5224%" y="1205" width="0.0621%" height="15" fill="rgb(254,173,49)" fg:x="147" fg:w="6"/><text x="1.7724%" y="1215.50"></text></g><g><title>deno`tokio::runtime::task::waker::wake_by_val (6 samples, 0.06%)</title><rect x="1.5845%" y="1237" width="0.0621%" height="15" fill="rgb(221,1,38)" fg:x="153" fg:w="6"/><text x="1.8345%" y="1247.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (684 samples, 7.08%)</title><rect x="0.7871%" y="1253" width="7.0837%" height="15" fill="rgb(206,124,46)" fg:x="76" fg:w="684"/><text x="1.0371%" y="1263.50">deno`tokio..</text></g><g><title>libsystem_kernel.dylib`kevent (601 samples, 6.22%)</title><rect x="1.6466%" y="1237" width="6.2241%" height="15" fill="rgb(249,21,11)" fg:x="159" fg:w="601"/><text x="1.8966%" y="1247.50">libsyste..</text></g><g><title>deno`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (5 samples, 0.05%)</title><rect x="7.8708%" y="1253" width="0.0518%" height="15" fill="rgb(222,201,40)" fg:x="760" fg:w="5"/><text x="8.1208%" y="1263.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (4 samples, 0.04%)</title><rect x="7.9225%" y="1253" width="0.0414%" height="15" fill="rgb(235,61,29)" fg:x="765" fg:w="4"/><text x="8.1725%" y="1263.50"></text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (4 samples, 0.04%)</title><rect x="7.9225%" y="1237" width="0.0414%" height="15" fill="rgb(219,207,3)" fg:x="765" fg:w="4"/><text x="8.1725%" y="1247.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (6 samples, 0.06%)</title><rect x="7.9640%" y="1253" width="0.0621%" height="15" fill="rgb(222,56,46)" fg:x="769" fg:w="6"/><text x="8.2140%" y="1263.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (6 samples, 0.06%)</title><rect x="7.9640%" y="1237" width="0.0621%" height="15" fill="rgb(239,76,54)" fg:x="769" fg:w="6"/><text x="8.2140%" y="1247.50"></text></g><g><title> 32]&gt; (6 samples, 0.06%)</title><rect x="7.9640%" y="1221" width="0.0621%" height="15" fill="rgb(231,124,27)" fg:x="769" fg:w="6"/><text x="8.2140%" y="1231.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (703 samples, 7.28%)</title><rect x="0.7664%" y="1269" width="7.2804%" height="15" fill="rgb(249,195,6)" fg:x="74" fg:w="703"/><text x="1.0164%" y="1279.50">deno`tokio..</text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (2 samples, 0.02%)</title><rect x="8.0261%" y="1253" width="0.0207%" height="15" fill="rgb(237,174,47)" fg:x="775" fg:w="2"/><text x="8.2761%" y="1263.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.01%)</title><rect x="8.0468%" y="1269" width="0.0104%" height="15" fill="rgb(206,201,31)" fg:x="777" fg:w="1"/><text x="8.2968%" y="1279.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Context::park (718 samples, 7.44%)</title><rect x="0.7249%" y="1285" width="7.4358%" height="15" fill="rgb(231,57,52)" fg:x="70" fg:w="718"/><text x="0.9749%" y="1295.50">deno`tokio..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.10%)</title><rect x="8.0572%" y="1269" width="0.1036%" height="15" fill="rgb(248,177,22)" fg:x="778" fg:w="10"/><text x="8.3072%" y="1279.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Spawner::pop (1 samples, 0.01%)</title><rect x="8.1607%" y="1285" width="0.0104%" height="15" fill="rgb(215,211,37)" fg:x="788" fg:w="1"/><text x="8.4107%" y="1295.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (3 samples, 0.03%)</title><rect x="8.2125%" y="1269" width="0.0311%" height="15" fill="rgb(241,128,51)" fg:x="793" fg:w="3"/><text x="8.4625%" y="1279.50"></text></g><g><title>deno`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="8.2436%" y="1269" width="0.0207%" height="15" fill="rgb(227,165,31)" fg:x="796" fg:w="2"/><text x="8.4936%" y="1279.50"></text></g><g><title>deno`__rust_alloc (1 samples, 0.01%)</title><rect x="8.2643%" y="1269" width="0.0104%" height="15" fill="rgb(228,167,24)" fg:x="798" fg:w="1"/><text x="8.5143%" y="1279.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (24 samples, 0.25%)</title><rect x="8.2746%" y="1269" width="0.2486%" height="15" fill="rgb(228,143,12)" fg:x="799" fg:w="24"/><text x="8.5246%" y="1279.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::add_rc_dyn (4 samples, 0.04%)</title><rect x="8.5232%" y="1269" width="0.0414%" height="15" fill="rgb(249,149,8)" fg:x="823" fg:w="4"/><text x="8.7732%" y="1279.50"></text></g><g><title>deno`httparse::Request::parse (2 samples, 0.02%)</title><rect x="8.5646%" y="1269" width="0.0207%" height="15" fill="rgb(243,35,44)" fg:x="827" fg:w="2"/><text x="8.8146%" y="1279.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (4 samples, 0.04%)</title><rect x="8.5853%" y="1269" width="0.0414%" height="15" fill="rgb(246,89,9)" fg:x="829" fg:w="4"/><text x="8.8353%" y="1279.50"></text></g><g><title>deno`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.01%)</title><rect x="9.2067%" y="1253" width="0.0104%" height="15" fill="rgb(233,213,13)" fg:x="889" fg:w="1"/><text x="9.4567%" y="1263.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (4 samples, 0.04%)</title><rect x="9.2171%" y="1253" width="0.0414%" height="15" fill="rgb(233,141,41)" fg:x="890" fg:w="4"/><text x="9.4671%" y="1263.50"></text></g><g><title>deno`v8::Context::Exit (2 samples, 0.02%)</title><rect x="9.3931%" y="1221" width="0.0207%" height="15" fill="rgb(239,167,4)" fg:x="907" fg:w="2"/><text x="9.6431%" y="1231.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (8 samples, 0.08%)</title><rect x="9.4138%" y="1221" width="0.0829%" height="15" fill="rgb(209,217,16)" fg:x="909" fg:w="8"/><text x="9.6638%" y="1231.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (6 samples, 0.06%)</title><rect x="9.4345%" y="1205" width="0.0621%" height="15" fill="rgb(219,88,35)" fg:x="911" fg:w="6"/><text x="9.6845%" y="1215.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (17 samples, 0.18%)</title><rect x="9.3517%" y="1237" width="0.1761%" height="15" fill="rgb(220,193,23)" fg:x="903" fg:w="17"/><text x="9.6017%" y="1247.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (3 samples, 0.03%)</title><rect x="9.4967%" y="1221" width="0.0311%" height="15" fill="rgb(230,90,52)" fg:x="917" fg:w="3"/><text x="9.7467%" y="1231.50"></text></g><g><title>deno`v8::Context::Exit (5 samples, 0.05%)</title><rect x="9.5278%" y="1237" width="0.0518%" height="15" fill="rgb(252,106,19)" fg:x="920" fg:w="5"/><text x="9.7778%" y="1247.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (3 samples, 0.03%)</title><rect x="9.5795%" y="1237" width="0.0311%" height="15" fill="rgb(206,74,20)" fg:x="925" fg:w="3"/><text x="9.8295%" y="1247.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (35 samples, 0.36%)</title><rect x="9.2585%" y="1253" width="0.3625%" height="15" fill="rgb(230,138,44)" fg:x="894" fg:w="35"/><text x="9.5085%" y="1263.50"></text></g><g><title>deno`v8__Context__Exit (1 samples, 0.01%)</title><rect x="9.6106%" y="1237" width="0.0104%" height="15" fill="rgb(235,182,43)" fg:x="928" fg:w="1"/><text x="9.8606%" y="1247.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (6 samples, 0.06%)</title><rect x="9.6210%" y="1253" width="0.0621%" height="15" fill="rgb(242,16,51)" fg:x="929" fg:w="6"/><text x="9.8710%" y="1263.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.03%)</title><rect x="9.6831%" y="1253" width="0.0311%" height="15" fill="rgb(248,9,4)" fg:x="935" fg:w="3"/><text x="9.9331%" y="1263.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::add_rc_dyn (10 samples, 0.10%)</title><rect x="9.7142%" y="1253" width="0.1036%" height="15" fill="rgb(210,31,22)" fg:x="938" fg:w="10"/><text x="9.9642%" y="1263.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (37 samples, 0.38%)</title><rect x="9.8592%" y="1237" width="0.3832%" height="15" fill="rgb(239,54,39)" fg:x="952" fg:w="37"/><text x="10.1092%" y="1247.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (29 samples, 0.30%)</title><rect x="9.9420%" y="1221" width="0.3003%" height="15" fill="rgb(230,99,41)" fg:x="960" fg:w="29"/><text x="10.1920%" y="1231.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (3 samples, 0.03%)</title><rect x="10.2423%" y="1237" width="0.0311%" height="15" fill="rgb(253,106,12)" fg:x="989" fg:w="3"/><text x="10.4923%" y="1247.50"></text></g><g><title>deno`httparse::Request::parse (48 samples, 0.50%)</title><rect x="9.8177%" y="1253" width="0.4971%" height="15" fill="rgb(213,46,41)" fg:x="948" fg:w="48"/><text x="10.0677%" y="1263.50"></text></g><g><title>deno`httparse::parse_version (4 samples, 0.04%)</title><rect x="10.2734%" y="1237" width="0.0414%" height="15" fill="rgb(215,133,35)" fg:x="992" fg:w="4"/><text x="10.5234%" y="1247.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.01%)</title><rect x="10.5220%" y="1237" width="0.0104%" height="15" fill="rgb(213,28,5)" fg:x="1016" fg:w="1"/><text x="10.7720%" y="1247.50"></text></g><g><title>deno`DYLD-STUB$$recv (3 samples, 0.03%)</title><rect x="10.5323%" y="1237" width="0.0311%" height="15" fill="rgb(215,77,49)" fg:x="1017" fg:w="3"/><text x="10.7823%" y="1247.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_inc (2 samples, 0.02%)</title><rect x="10.8741%" y="1221" width="0.0207%" height="15" fill="rgb(248,100,22)" fg:x="1050" fg:w="2"/><text x="11.1241%" y="1231.50"></text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (58 samples, 0.60%)</title><rect x="10.5634%" y="1237" width="0.6007%" height="15" fill="rgb(208,67,9)" fg:x="1020" fg:w="58"/><text x="10.8134%" y="1247.50"></text></g><g><title>deno`tokio::runtime::task::waker::clone_waker (26 samples, 0.27%)</title><rect x="10.8948%" y="1221" width="0.2693%" height="15" fill="rgb(219,133,21)" fg:x="1052" fg:w="26"/><text x="11.1448%" y="1231.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_inc (1 samples, 0.01%)</title><rect x="11.1537%" y="1205" width="0.0104%" height="15" fill="rgb(246,46,29)" fg:x="1077" fg:w="1"/><text x="11.4037%" y="1215.50"></text></g><g><title>deno`tokio::runtime::task::waker::clone_waker (1 samples, 0.01%)</title><rect x="11.1640%" y="1237" width="0.0104%" height="15" fill="rgb(246,185,52)" fg:x="1078" fg:w="1"/><text x="11.4140%" y="1247.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.19%)</title><rect x="11.1744%" y="1237" width="0.1864%" height="15" fill="rgb(252,136,11)" fg:x="1079" fg:w="18"/><text x="11.4244%" y="1247.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (3 samples, 0.03%)</title><rect x="11.3608%" y="1237" width="0.0311%" height="15" fill="rgb(219,138,53)" fg:x="1097" fg:w="3"/><text x="11.6108%" y="1247.50"></text></g><g><title>libsystem_c.dylib`recv (1 samples, 0.01%)</title><rect x="11.3919%" y="1237" width="0.0104%" height="15" fill="rgb(211,51,23)" fg:x="1100" fg:w="1"/><text x="11.6419%" y="1247.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (3,320 samples, 34.38%)</title><rect x="10.3148%" y="1253" width="34.3828%" height="15" fill="rgb(247,221,28)" fg:x="996" fg:w="3320"/><text x="10.5648%" y="1263.50">deno`tokio::net::tcp::stream::TcpStream::poll_read_priv</text></g><g><title>libsystem_kernel.dylib`__recvfrom (3,215 samples, 33.30%)</title><rect x="11.4022%" y="1237" width="33.2954%" height="15" fill="rgb(251,222,45)" fg:x="1101" fg:w="3215"/><text x="11.6522%" y="1247.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.01%)</title><rect x="44.6976%" y="1253" width="0.0104%" height="15" fill="rgb(217,162,53)" fg:x="4316" fg:w="1"/><text x="44.9476%" y="1263.50"></text></g><g><title>deno`v8::Context::Enter (14 samples, 0.14%)</title><rect x="44.7080%" y="1253" width="0.1450%" height="15" fill="rgb(229,93,14)" fg:x="4317" fg:w="14"/><text x="44.9580%" y="1263.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (6 samples, 0.06%)</title><rect x="44.7908%" y="1237" width="0.0621%" height="15" fill="rgb(209,67,49)" fg:x="4325" fg:w="6"/><text x="45.0408%" y="1247.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (12 samples, 0.12%)</title><rect x="45.0186%" y="1237" width="0.1243%" height="15" fill="rgb(213,87,29)" fg:x="4347" fg:w="12"/><text x="45.2686%" y="1247.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (3 samples, 0.03%)</title><rect x="45.1118%" y="1221" width="0.0311%" height="15" fill="rgb(205,151,52)" fg:x="4356" fg:w="3"/><text x="45.3618%" y="1231.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (3 samples, 0.03%)</title><rect x="45.1429%" y="1237" width="0.0311%" height="15" fill="rgb(253,215,39)" fg:x="4359" fg:w="3"/><text x="45.3929%" y="1247.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.01%)</title><rect x="45.1740%" y="1237" width="0.0104%" height="15" fill="rgb(221,220,41)" fg:x="4362" fg:w="1"/><text x="45.4240%" y="1247.50"></text></g><g><title>deno`Builtins_JSEntry (4 samples, 0.04%)</title><rect x="45.2361%" y="1221" width="0.0414%" height="15" fill="rgb(218,133,21)" fg:x="4368" fg:w="4"/><text x="45.4861%" y="1231.50"></text></g><g><title>0x110011900 (4 samples, 0.04%)</title><rect x="45.6504%" y="1189" width="0.0414%" height="15" fill="rgb(221,193,43)" fg:x="4408" fg:w="4"/><text x="45.9004%" y="1199.50"></text></g><g><title>0x1100120e0 (2 samples, 0.02%)</title><rect x="45.6918%" y="1189" width="0.0207%" height="15" fill="rgb(240,128,52)" fg:x="4412" fg:w="2"/><text x="45.9418%" y="1199.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (7 samples, 0.07%)</title><rect x="45.7125%" y="1189" width="0.0725%" height="15" fill="rgb(253,114,12)" fg:x="4414" fg:w="7"/><text x="45.9625%" y="1199.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (2 samples, 0.02%)</title><rect x="45.7850%" y="1189" width="0.0207%" height="15" fill="rgb(215,223,47)" fg:x="4421" fg:w="2"/><text x="46.0350%" y="1199.50"></text></g><g><title>0x11000ddd4 (1 samples, 0.01%)</title><rect x="45.8471%" y="1157" width="0.0104%" height="15" fill="rgb(248,225,23)" fg:x="4427" fg:w="1"/><text x="46.0971%" y="1167.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="45.8471%" y="1141" width="0.0104%" height="15" fill="rgb(250,108,0)" fg:x="4427" fg:w="1"/><text x="46.0971%" y="1151.50"></text></g><g><title>deno`v8::internal::Runtime_NewClosure_Tenured (1 samples, 0.01%)</title><rect x="45.8471%" y="1125" width="0.0104%" height="15" fill="rgb(228,208,7)" fg:x="4427" fg:w="1"/><text x="46.0971%" y="1135.50"></text></g><g><title>deno`v8::internal::Factory::JSFunctionBuilder::Build (1 samples, 0.01%)</title><rect x="45.8471%" y="1109" width="0.0104%" height="15" fill="rgb(244,45,10)" fg:x="4427" fg:w="1"/><text x="46.0971%" y="1119.50"></text></g><g><title>deno`v8::internal::Compiler::PostInstantiation(v8::internal::Handle (1 samples, 0.01%)</title><rect x="45.8471%" y="1093" width="0.0104%" height="15" fill="rgb(207,125,25)" fg:x="4427" fg:w="1"/><text x="46.0971%" y="1103.50"></text></g><g><title>0x11000d964 (2 samples, 0.02%)</title><rect x="45.8471%" y="1173" width="0.0207%" height="15" fill="rgb(210,195,18)" fg:x="4427" fg:w="2"/><text x="46.0971%" y="1183.50"></text></g><g><title>deno`Builtins_DefineNamedOwnICBaseline (1 samples, 0.01%)</title><rect x="45.8575%" y="1157" width="0.0104%" height="15" fill="rgb(249,80,12)" fg:x="4428" fg:w="1"/><text x="46.1075%" y="1167.50"></text></g><g><title>0x11000d1dc (1 samples, 0.01%)</title><rect x="45.8679%" y="1093" width="0.0104%" height="15" fill="rgb(221,65,9)" fg:x="4429" fg:w="1"/><text x="46.1179%" y="1103.50"></text></g><g><title>0x11000c310 (2 samples, 0.02%)</title><rect x="45.8679%" y="1125" width="0.0207%" height="15" fill="rgb(235,49,36)" fg:x="4429" fg:w="2"/><text x="46.1179%" y="1135.50"></text></g><g><title>0x11000dfe0 (2 samples, 0.02%)</title><rect x="45.8679%" y="1109" width="0.0207%" height="15" fill="rgb(225,32,20)" fg:x="4429" fg:w="2"/><text x="46.1179%" y="1119.50"></text></g><g><title>deno`Builtins_FunctionPrototypeCall (1 samples, 0.01%)</title><rect x="45.8782%" y="1093" width="0.0104%" height="15" fill="rgb(215,141,46)" fg:x="4430" fg:w="1"/><text x="46.1282%" y="1103.50"></text></g><g><title>0x11000c46c (2 samples, 0.02%)</title><rect x="45.8886%" y="1125" width="0.0207%" height="15" fill="rgb(250,160,47)" fg:x="4431" fg:w="2"/><text x="46.1386%" y="1135.50"></text></g><g><title>0x11000bcd8 (2 samples, 0.02%)</title><rect x="45.8886%" y="1109" width="0.0207%" height="15" fill="rgb(216,222,40)" fg:x="4431" fg:w="2"/><text x="46.1386%" y="1119.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.02%)</title><rect x="45.8886%" y="1093" width="0.0207%" height="15" fill="rgb(234,217,39)" fg:x="4431" fg:w="2"/><text x="46.1386%" y="1103.50"></text></g><g><title>deno`v8::internal::Runtime_CreateObjectLiteral (2 samples, 0.02%)</title><rect x="45.8886%" y="1077" width="0.0207%" height="15" fill="rgb(207,178,40)" fg:x="4431" fg:w="2"/><text x="46.1386%" y="1087.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::JSObjectWalkVisitor&lt;v8::internal::AllocationSiteUsageContext&gt;::StructureWalk(v8::internal::Handle (1 samples, 0.01%)</title><rect x="45.8989%" y="1061" width="0.0104%" height="15" fill="rgb(221,136,13)" fg:x="4432" fg:w="1"/><text x="46.1489%" y="1071.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::JSObjectWalkVisitor&lt;v8::internal::AllocationSiteUsageContext&gt;::StructureWalk(v8::internal::Handle (1 samples, 0.01%)</title><rect x="45.8989%" y="1045" width="0.0104%" height="15" fill="rgb(249,199,10)" fg:x="4432" fg:w="1"/><text x="46.1489%" y="1055.50"></text></g><g><title>deno`v8::internal::Factory::CopyJSObjectWithAllocationSite(v8::internal::Handle&lt;v8::internal::JSObject&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="45.8989%" y="1029" width="0.0104%" height="15" fill="rgb(249,222,13)" fg:x="4432" fg:w="1"/><text x="46.1489%" y="1039.50"></text></g><g><title>0x11000c5b8 (2 samples, 0.02%)</title><rect x="45.9093%" y="1125" width="0.0207%" height="15" fill="rgb(244,185,38)" fg:x="4433" fg:w="2"/><text x="46.1593%" y="1135.50"></text></g><g><title>0x11000bf78 (2 samples, 0.02%)</title><rect x="45.9093%" y="1109" width="0.0207%" height="15" fill="rgb(236,202,9)" fg:x="4433" fg:w="2"/><text x="46.1593%" y="1119.50"></text></g><g><title>deno`Builtins_KeyedStoreIC (2 samples, 0.02%)</title><rect x="45.9093%" y="1093" width="0.0207%" height="15" fill="rgb(250,229,37)" fg:x="4433" fg:w="2"/><text x="46.1593%" y="1103.50"></text></g><g><title>0x11000c5cc (1 samples, 0.01%)</title><rect x="45.9300%" y="1125" width="0.0104%" height="15" fill="rgb(206,174,23)" fg:x="4435" fg:w="1"/><text x="46.1800%" y="1135.50"></text></g><g><title>deno`Builtins_KeyedStoreIC (1 samples, 0.01%)</title><rect x="45.9300%" y="1109" width="0.0104%" height="15" fill="rgb(211,33,43)" fg:x="4435" fg:w="1"/><text x="46.1800%" y="1119.50"></text></g><g><title>0x11000d994 (9 samples, 0.09%)</title><rect x="45.8679%" y="1173" width="0.0932%" height="15" fill="rgb(245,58,50)" fg:x="4429" fg:w="9"/><text x="46.1179%" y="1183.50"></text></g><g><title>0x11000c95c (9 samples, 0.09%)</title><rect x="45.8679%" y="1157" width="0.0932%" height="15" fill="rgb(244,68,36)" fg:x="4429" fg:w="9"/><text x="46.1179%" y="1167.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (9 samples, 0.09%)</title><rect x="45.8679%" y="1141" width="0.0932%" height="15" fill="rgb(232,229,15)" fg:x="4429" fg:w="9"/><text x="46.1179%" y="1151.50"></text></g><g><title>0x11000c668 (2 samples, 0.02%)</title><rect x="45.9403%" y="1125" width="0.0207%" height="15" fill="rgb(254,30,23)" fg:x="4436" fg:w="2"/><text x="46.1903%" y="1135.50"></text></g><g><title>0x11000e9fc (2 samples, 0.02%)</title><rect x="45.9403%" y="1109" width="0.0207%" height="15" fill="rgb(235,160,14)" fg:x="4436" fg:w="2"/><text x="46.1903%" y="1119.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeSlice (2 samples, 0.02%)</title><rect x="45.9403%" y="1093" width="0.0207%" height="15" fill="rgb(212,155,44)" fg:x="4436" fg:w="2"/><text x="46.1903%" y="1103.50"></text></g><g><title>deno`Builtins_CreateTypedArray (1 samples, 0.01%)</title><rect x="45.9507%" y="1077" width="0.0104%" height="15" fill="rgb(226,2,50)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="1087.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.01%)</title><rect x="45.9507%" y="1061" width="0.0104%" height="15" fill="rgb(234,177,6)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="1071.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="45.9507%" y="1045" width="0.0104%" height="15" fill="rgb(217,24,9)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="1055.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (1 samples, 0.01%)</title><rect x="45.9507%" y="1029" width="0.0104%" height="15" fill="rgb(220,13,46)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="1039.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="45.9507%" y="1013" width="0.0104%" height="15" fill="rgb(239,221,27)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="1023.50"></text></g><g><title>deno`v8::internal::BackingStore::Allocate (1 samples, 0.01%)</title><rect x="45.9507%" y="997" width="0.0104%" height="15" fill="rgb(222,198,25)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="1007.50"></text></g><g><title>deno`v8::internal::Heap::AllocateExternalBackingStore(std::__1::function&lt;void*  (1 samples, 0.01%)</title><rect x="45.9507%" y="981" width="0.0104%" height="15" fill="rgb(211,99,13)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.01%)</title><rect x="45.9507%" y="965" width="0.0104%" height="15" fill="rgb(232,111,31)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.01%)</title><rect x="45.9507%" y="949" width="0.0104%" height="15" fill="rgb(245,82,37)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="45.9507%" y="933" width="0.0104%" height="15" fill="rgb(227,149,46)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="45.9507%" y="917" width="0.0104%" height="15" fill="rgb(218,36,50)" fg:x="4437" fg:w="1"/><text x="46.2007%" y="927.50"></text></g><g><title>0x11000d9d4 (4 samples, 0.04%)</title><rect x="45.9611%" y="1173" width="0.0414%" height="15" fill="rgb(226,80,48)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1183.50"></text></g><g><title>0x11000d7cc (4 samples, 0.04%)</title><rect x="45.9611%" y="1157" width="0.0414%" height="15" fill="rgb(238,224,15)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1167.50"></text></g><g><title>0x11000e0dc (4 samples, 0.04%)</title><rect x="45.9611%" y="1141" width="0.0414%" height="15" fill="rgb(241,136,10)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1151.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (4 samples, 0.04%)</title><rect x="45.9611%" y="1125" width="0.0414%" height="15" fill="rgb(208,32,45)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1135.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (4 samples, 0.04%)</title><rect x="45.9611%" y="1109" width="0.0414%" height="15" fill="rgb(207,135,9)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1119.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (4 samples, 0.04%)</title><rect x="45.9611%" y="1093" width="0.0414%" height="15" fill="rgb(206,86,44)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1103.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (4 samples, 0.04%)</title><rect x="45.9611%" y="1077" width="0.0414%" height="15" fill="rgb(245,177,15)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1087.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write::call (4 samples, 0.04%)</title><rect x="45.9611%" y="1061" width="0.0414%" height="15" fill="rgb(206,64,50)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1071.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (4 samples, 0.04%)</title><rect x="45.9611%" y="1045" width="0.0414%" height="15" fill="rgb(234,36,40)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (4 samples, 0.04%)</title><rect x="45.9611%" y="1029" width="0.0414%" height="15" fill="rgb(213,64,8)" fg:x="4438" fg:w="4"/><text x="46.2111%" y="1039.50"></text></g><g><title>0x110011930 (5 samples, 0.05%)</title><rect x="46.0025%" y="1173" width="0.0518%" height="15" fill="rgb(210,75,36)" fg:x="4442" fg:w="5"/><text x="46.2525%" y="1183.50"></text></g><g><title>0x110011934 (1 samples, 0.01%)</title><rect x="46.0543%" y="1173" width="0.0104%" height="15" fill="rgb(229,88,21)" fg:x="4447" fg:w="1"/><text x="46.3043%" y="1183.50"></text></g><g><title>0x11001194c (2 samples, 0.02%)</title><rect x="46.0646%" y="1173" width="0.0207%" height="15" fill="rgb(252,204,47)" fg:x="4448" fg:w="2"/><text x="46.3146%" y="1183.50"></text></g><g><title>0x1100119b8 (1 samples, 0.01%)</title><rect x="46.0853%" y="1173" width="0.0104%" height="15" fill="rgb(208,77,27)" fg:x="4450" fg:w="1"/><text x="46.3353%" y="1183.50"></text></g><g><title>0x1100119d4 (4 samples, 0.04%)</title><rect x="46.0957%" y="1173" width="0.0414%" height="15" fill="rgb(221,76,26)" fg:x="4451" fg:w="4"/><text x="46.3457%" y="1183.50"></text></g><g><title>0x110011a28 (1 samples, 0.01%)</title><rect x="46.1371%" y="1173" width="0.0104%" height="15" fill="rgb(225,139,18)" fg:x="4455" fg:w="1"/><text x="46.3871%" y="1183.50"></text></g><g><title>0x110011a74 (1 samples, 0.01%)</title><rect x="46.1475%" y="1173" width="0.0104%" height="15" fill="rgb(230,137,11)" fg:x="4456" fg:w="1"/><text x="46.3975%" y="1183.50"></text></g><g><title>0x110011aac (1 samples, 0.01%)</title><rect x="46.1578%" y="1173" width="0.0104%" height="15" fill="rgb(212,28,1)" fg:x="4457" fg:w="1"/><text x="46.4078%" y="1183.50"></text></g><g><title>0x110011acc (1 samples, 0.01%)</title><rect x="46.1682%" y="1173" width="0.0104%" height="15" fill="rgb(248,164,17)" fg:x="4458" fg:w="1"/><text x="46.4182%" y="1183.50"></text></g><g><title>0x110011b08 (2 samples, 0.02%)</title><rect x="46.1785%" y="1173" width="0.0207%" height="15" fill="rgb(222,171,42)" fg:x="4459" fg:w="2"/><text x="46.4285%" y="1183.50"></text></g><g><title>0x110011b24 (8 samples, 0.08%)</title><rect x="46.1993%" y="1173" width="0.0829%" height="15" fill="rgb(243,84,45)" fg:x="4461" fg:w="8"/><text x="46.4493%" y="1183.50"></text></g><g><title>deno`Builtins_LoadIC (8 samples, 0.08%)</title><rect x="46.1993%" y="1157" width="0.0829%" height="15" fill="rgb(252,49,23)" fg:x="4461" fg:w="8"/><text x="46.4493%" y="1167.50"></text></g><g><title>0x110011b28 (7 samples, 0.07%)</title><rect x="46.2821%" y="1173" width="0.0725%" height="15" fill="rgb(215,19,7)" fg:x="4469" fg:w="7"/><text x="46.5321%" y="1183.50"></text></g><g><title>0x110011b30 (1 samples, 0.01%)</title><rect x="46.3546%" y="1173" width="0.0104%" height="15" fill="rgb(238,81,41)" fg:x="4476" fg:w="1"/><text x="46.6046%" y="1183.50"></text></g><g><title>0x110011b68 (2 samples, 0.02%)</title><rect x="46.3650%" y="1173" width="0.0207%" height="15" fill="rgb(210,199,37)" fg:x="4477" fg:w="2"/><text x="46.6150%" y="1183.50"></text></g><g><title>0x110011bb4 (3 samples, 0.03%)</title><rect x="46.3857%" y="1173" width="0.0311%" height="15" fill="rgb(244,192,49)" fg:x="4479" fg:w="3"/><text x="46.6357%" y="1183.50"></text></g><g><title>0x110012650 (1 samples, 0.01%)</title><rect x="46.4167%" y="1157" width="0.0104%" height="15" fill="rgb(226,211,11)" fg:x="4482" fg:w="1"/><text x="46.6667%" y="1167.50"></text></g><g><title>0x110012670 (4 samples, 0.04%)</title><rect x="46.4271%" y="1157" width="0.0414%" height="15" fill="rgb(236,162,54)" fg:x="4483" fg:w="4"/><text x="46.6771%" y="1167.50"></text></g><g><title>0x110012684 (1 samples, 0.01%)</title><rect x="46.4685%" y="1157" width="0.0104%" height="15" fill="rgb(220,229,9)" fg:x="4487" fg:w="1"/><text x="46.7185%" y="1167.50"></text></g><g><title>0x11001268c (18 samples, 0.19%)</title><rect x="46.4789%" y="1157" width="0.1864%" height="15" fill="rgb(250,87,22)" fg:x="4488" fg:w="18"/><text x="46.7289%" y="1167.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (18 samples, 0.19%)</title><rect x="46.4789%" y="1141" width="0.1864%" height="15" fill="rgb(239,43,17)" fg:x="4488" fg:w="18"/><text x="46.7289%" y="1151.50"></text></g><g><title>0x1100126c4 (6 samples, 0.06%)</title><rect x="46.6653%" y="1157" width="0.0621%" height="15" fill="rgb(231,177,25)" fg:x="4506" fg:w="6"/><text x="46.9153%" y="1167.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (5 samples, 0.05%)</title><rect x="46.6756%" y="1141" width="0.0518%" height="15" fill="rgb(219,179,1)" fg:x="4507" fg:w="5"/><text x="46.9256%" y="1151.50"></text></g><g><title>0x1100126f4 (1 samples, 0.01%)</title><rect x="46.7274%" y="1157" width="0.0104%" height="15" fill="rgb(238,219,53)" fg:x="4512" fg:w="1"/><text x="46.9774%" y="1167.50"></text></g><g><title>0x1100126fc (10 samples, 0.10%)</title><rect x="46.7378%" y="1157" width="0.1036%" height="15" fill="rgb(232,167,36)" fg:x="4513" fg:w="10"/><text x="46.9878%" y="1167.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (10 samples, 0.10%)</title><rect x="46.7378%" y="1141" width="0.1036%" height="15" fill="rgb(244,19,51)" fg:x="4513" fg:w="10"/><text x="46.9878%" y="1151.50"></text></g><g><title>0x11001272c (1 samples, 0.01%)</title><rect x="46.8413%" y="1157" width="0.0104%" height="15" fill="rgb(224,6,22)" fg:x="4523" fg:w="1"/><text x="47.0913%" y="1167.50"></text></g><g><title>0x110012734 (11 samples, 0.11%)</title><rect x="46.8517%" y="1157" width="0.1139%" height="15" fill="rgb(224,145,5)" fg:x="4524" fg:w="11"/><text x="47.1017%" y="1167.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (11 samples, 0.11%)</title><rect x="46.8517%" y="1141" width="0.1139%" height="15" fill="rgb(234,130,49)" fg:x="4524" fg:w="11"/><text x="47.1017%" y="1151.50"></text></g><g><title>0x110012750 (1 samples, 0.01%)</title><rect x="46.9656%" y="1157" width="0.0104%" height="15" fill="rgb(254,6,2)" fg:x="4535" fg:w="1"/><text x="47.2156%" y="1167.50"></text></g><g><title>0x11001275c (4 samples, 0.04%)</title><rect x="46.9760%" y="1157" width="0.0414%" height="15" fill="rgb(208,96,46)" fg:x="4536" fg:w="4"/><text x="47.2260%" y="1167.50"></text></g><g><title>0x110012784 (2 samples, 0.02%)</title><rect x="47.0174%" y="1157" width="0.0207%" height="15" fill="rgb(239,3,39)" fg:x="4540" fg:w="2"/><text x="47.2674%" y="1167.50"></text></g><g><title>0x110012798 (4 samples, 0.04%)</title><rect x="47.0381%" y="1157" width="0.0414%" height="15" fill="rgb(233,210,1)" fg:x="4542" fg:w="4"/><text x="47.2881%" y="1167.50"></text></g><g><title>0x1100127ac (1 samples, 0.01%)</title><rect x="47.0795%" y="1157" width="0.0104%" height="15" fill="rgb(244,137,37)" fg:x="4546" fg:w="1"/><text x="47.3295%" y="1167.50"></text></g><g><title>0x1100127b8 (2 samples, 0.02%)</title><rect x="47.0899%" y="1157" width="0.0207%" height="15" fill="rgb(240,136,2)" fg:x="4547" fg:w="2"/><text x="47.3399%" y="1167.50"></text></g><g><title>0x1100127bc (1 samples, 0.01%)</title><rect x="47.1106%" y="1157" width="0.0104%" height="15" fill="rgb(239,18,37)" fg:x="4549" fg:w="1"/><text x="47.3606%" y="1167.50"></text></g><g><title>0x1100127d8 (4 samples, 0.04%)</title><rect x="47.1210%" y="1157" width="0.0414%" height="15" fill="rgb(218,185,22)" fg:x="4550" fg:w="4"/><text x="47.3710%" y="1167.50"></text></g><g><title>0x1100127ec (5 samples, 0.05%)</title><rect x="47.1624%" y="1157" width="0.0518%" height="15" fill="rgb(225,218,4)" fg:x="4554" fg:w="5"/><text x="47.4124%" y="1167.50"></text></g><g><title>0x1100127f8 (2 samples, 0.02%)</title><rect x="47.2142%" y="1157" width="0.0207%" height="15" fill="rgb(230,182,32)" fg:x="4559" fg:w="2"/><text x="47.4642%" y="1167.50"></text></g><g><title>0x110012808 (2 samples, 0.02%)</title><rect x="47.2349%" y="1157" width="0.0207%" height="15" fill="rgb(242,56,43)" fg:x="4561" fg:w="2"/><text x="47.4849%" y="1167.50"></text></g><g><title>0x11001283c (2 samples, 0.02%)</title><rect x="47.2556%" y="1157" width="0.0207%" height="15" fill="rgb(233,99,24)" fg:x="4563" fg:w="2"/><text x="47.5056%" y="1167.50"></text></g><g><title>0x110012844 (5 samples, 0.05%)</title><rect x="47.2763%" y="1157" width="0.0518%" height="15" fill="rgb(234,209,42)" fg:x="4565" fg:w="5"/><text x="47.5263%" y="1167.50"></text></g><g><title>deno`Builtins_LoadIC (5 samples, 0.05%)</title><rect x="47.2763%" y="1141" width="0.0518%" height="15" fill="rgb(227,7,12)" fg:x="4565" fg:w="5"/><text x="47.5263%" y="1151.50"></text></g><g><title>0x110012858 (1 samples, 0.01%)</title><rect x="47.3281%" y="1157" width="0.0104%" height="15" fill="rgb(245,203,43)" fg:x="4570" fg:w="1"/><text x="47.5781%" y="1167.50"></text></g><g><title>0x1100128ec (4 samples, 0.04%)</title><rect x="47.3384%" y="1157" width="0.0414%" height="15" fill="rgb(238,205,33)" fg:x="4571" fg:w="4"/><text x="47.5884%" y="1167.50"></text></g><g><title>deno`Builtins_AdaptorWithBuiltinExitFrame (3 samples, 0.03%)</title><rect x="47.3799%" y="1141" width="0.0311%" height="15" fill="rgb(231,56,7)" fg:x="4575" fg:w="3"/><text x="47.6299%" y="1151.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="47.4109%" y="1141" width="0.0104%" height="15" fill="rgb(244,186,29)" fg:x="4578" fg:w="1"/><text x="47.6609%" y="1151.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (4 samples, 0.04%)</title><rect x="47.4213%" y="1141" width="0.0414%" height="15" fill="rgb(234,111,31)" fg:x="4579" fg:w="4"/><text x="47.6713%" y="1151.50"></text></g><g><title>deno`v8::internal::Builtin_TypedArrayPrototypeBuffer (13 samples, 0.13%)</title><rect x="47.6077%" y="1109" width="0.1346%" height="15" fill="rgb(241,149,10)" fg:x="4597" fg:w="13"/><text x="47.8577%" y="1119.50"></text></g><g><title>deno`v8::internal::JSTypedArray::GetBuffer (5 samples, 0.05%)</title><rect x="47.6906%" y="1093" width="0.0518%" height="15" fill="rgb(249,206,44)" fg:x="4605" fg:w="5"/><text x="47.9406%" y="1103.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (23 samples, 0.24%)</title><rect x="47.5352%" y="1125" width="0.2382%" height="15" fill="rgb(251,153,30)" fg:x="4590" fg:w="23"/><text x="47.7852%" y="1135.50"></text></g><g><title>deno`v8::internal::JSTypedArray::GetBuffer (3 samples, 0.03%)</title><rect x="47.7423%" y="1109" width="0.0311%" height="15" fill="rgb(239,152,38)" fg:x="4610" fg:w="3"/><text x="47.9923%" y="1119.50"></text></g><g><title>deno`Builtins_LoadIC (36 samples, 0.37%)</title><rect x="47.4627%" y="1141" width="0.3728%" height="15" fill="rgb(249,139,47)" fg:x="4583" fg:w="36"/><text x="47.7127%" y="1151.50"></text></g><g><title>deno`v8::internal::Builtin_TypedArrayPrototypeBuffer (6 samples, 0.06%)</title><rect x="47.7734%" y="1125" width="0.0621%" height="15" fill="rgb(244,64,35)" fg:x="4613" fg:w="6"/><text x="48.0234%" y="1135.50"></text></g><g><title>0x1100128f4 (45 samples, 0.47%)</title><rect x="47.3799%" y="1157" width="0.4660%" height="15" fill="rgb(216,46,15)" fg:x="4575" fg:w="45"/><text x="47.6299%" y="1167.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeBuffer (1 samples, 0.01%)</title><rect x="47.8355%" y="1141" width="0.0104%" height="15" fill="rgb(250,74,19)" fg:x="4619" fg:w="1"/><text x="48.0855%" y="1151.50"></text></g><g><title>0x110012908 (2 samples, 0.02%)</title><rect x="47.8459%" y="1157" width="0.0207%" height="15" fill="rgb(249,42,33)" fg:x="4620" fg:w="2"/><text x="48.0959%" y="1167.50"></text></g><g><title>0x11001291c (1 samples, 0.01%)</title><rect x="47.8666%" y="1157" width="0.0104%" height="15" fill="rgb(242,149,17)" fg:x="4622" fg:w="1"/><text x="48.1166%" y="1167.50"></text></g><g><title>0x110012928 (2 samples, 0.02%)</title><rect x="47.8770%" y="1157" width="0.0207%" height="15" fill="rgb(244,29,21)" fg:x="4623" fg:w="2"/><text x="48.1270%" y="1167.50"></text></g><g><title>0x110012930 (1 samples, 0.01%)</title><rect x="47.8977%" y="1157" width="0.0104%" height="15" fill="rgb(220,130,37)" fg:x="4625" fg:w="1"/><text x="48.1477%" y="1167.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (1 samples, 0.01%)</title><rect x="47.9080%" y="1157" width="0.0104%" height="15" fill="rgb(211,67,2)" fg:x="4626" fg:w="1"/><text x="48.1580%" y="1167.50"></text></g><g><title>deno`Builtins_LoadIC (7 samples, 0.07%)</title><rect x="47.9184%" y="1157" width="0.0725%" height="15" fill="rgb(235,68,52)" fg:x="4627" fg:w="7"/><text x="48.1684%" y="1167.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (1 samples, 0.01%)</title><rect x="47.9909%" y="1157" width="0.0104%" height="15" fill="rgb(246,142,3)" fg:x="4634" fg:w="1"/><text x="48.2409%" y="1167.50"></text></g><g><title>0x110011bbc (158 samples, 1.64%)</title><rect x="46.4167%" y="1173" width="1.6363%" height="15" fill="rgb(241,25,7)" fg:x="4482" fg:w="158"/><text x="46.6667%" y="1183.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (5 samples, 0.05%)</title><rect x="48.0012%" y="1157" width="0.0518%" height="15" fill="rgb(242,119,39)" fg:x="4635" fg:w="5"/><text x="48.2512%" y="1167.50"></text></g><g><title>0x110011bd4 (2 samples, 0.02%)</title><rect x="48.0530%" y="1173" width="0.0207%" height="15" fill="rgb(241,98,45)" fg:x="4640" fg:w="2"/><text x="48.3030%" y="1183.50"></text></g><g><title>0x110011bdc (4 samples, 0.04%)</title><rect x="48.0737%" y="1173" width="0.0414%" height="15" fill="rgb(254,28,30)" fg:x="4642" fg:w="4"/><text x="48.3237%" y="1183.50"></text></g><g><title>deno`Builtins_LoadIC (4 samples, 0.04%)</title><rect x="48.0737%" y="1157" width="0.0414%" height="15" fill="rgb(241,142,54)" fg:x="4642" fg:w="4"/><text x="48.3237%" y="1167.50"></text></g><g><title>0x110011c30 (1 samples, 0.01%)</title><rect x="48.1152%" y="1173" width="0.0104%" height="15" fill="rgb(222,85,15)" fg:x="4646" fg:w="1"/><text x="48.3652%" y="1183.50"></text></g><g><title>0x110011c98 (2 samples, 0.02%)</title><rect x="48.1255%" y="1173" width="0.0207%" height="15" fill="rgb(210,85,47)" fg:x="4647" fg:w="2"/><text x="48.3755%" y="1183.50"></text></g><g><title>0x110011c9c (2 samples, 0.02%)</title><rect x="48.1462%" y="1173" width="0.0207%" height="15" fill="rgb(224,206,25)" fg:x="4649" fg:w="2"/><text x="48.3962%" y="1183.50"></text></g><g><title>0x110011cc4 (1 samples, 0.01%)</title><rect x="48.1669%" y="1173" width="0.0104%" height="15" fill="rgb(243,201,19)" fg:x="4651" fg:w="1"/><text x="48.4169%" y="1183.50"></text></g><g><title>0x110011cd0 (2 samples, 0.02%)</title><rect x="48.1773%" y="1173" width="0.0207%" height="15" fill="rgb(236,59,4)" fg:x="4652" fg:w="2"/><text x="48.4273%" y="1183.50"></text></g><g><title>0x110011cf4 (1 samples, 0.01%)</title><rect x="48.1980%" y="1173" width="0.0104%" height="15" fill="rgb(254,179,45)" fg:x="4654" fg:w="1"/><text x="48.4480%" y="1183.50"></text></g><g><title>0x110011cf8 (1 samples, 0.01%)</title><rect x="48.2084%" y="1173" width="0.0104%" height="15" fill="rgb(226,14,10)" fg:x="4655" fg:w="1"/><text x="48.4584%" y="1183.50"></text></g><g><title>0x110011cfc (1 samples, 0.01%)</title><rect x="48.2187%" y="1173" width="0.0104%" height="15" fill="rgb(244,27,41)" fg:x="4656" fg:w="1"/><text x="48.4687%" y="1183.50"></text></g><g><title>0x110011d0c (2 samples, 0.02%)</title><rect x="48.2291%" y="1173" width="0.0207%" height="15" fill="rgb(235,35,32)" fg:x="4657" fg:w="2"/><text x="48.4791%" y="1183.50"></text></g><g><title>0x110011d10 (2 samples, 0.02%)</title><rect x="48.2498%" y="1173" width="0.0207%" height="15" fill="rgb(218,68,31)" fg:x="4659" fg:w="2"/><text x="48.4998%" y="1183.50"></text></g><g><title>0x110011d1c (1 samples, 0.01%)</title><rect x="48.2705%" y="1173" width="0.0104%" height="15" fill="rgb(207,120,37)" fg:x="4661" fg:w="1"/><text x="48.5205%" y="1183.50"></text></g><g><title>0x110011d20 (2 samples, 0.02%)</title><rect x="48.2809%" y="1173" width="0.0207%" height="15" fill="rgb(227,98,0)" fg:x="4662" fg:w="2"/><text x="48.5309%" y="1183.50"></text></g><g><title>0x110011d48 (1 samples, 0.01%)</title><rect x="48.3016%" y="1173" width="0.0104%" height="15" fill="rgb(207,7,3)" fg:x="4664" fg:w="1"/><text x="48.5516%" y="1183.50"></text></g><g><title>0x110011d94 (4 samples, 0.04%)</title><rect x="48.3119%" y="1173" width="0.0414%" height="15" fill="rgb(206,98,19)" fg:x="4665" fg:w="4"/><text x="48.5619%" y="1183.50"></text></g><g><title>0x110011de0 (2 samples, 0.02%)</title><rect x="48.3534%" y="1173" width="0.0207%" height="15" fill="rgb(217,5,26)" fg:x="4669" fg:w="2"/><text x="48.6034%" y="1183.50"></text></g><g><title>0x11000e9fc (1 samples, 0.01%)</title><rect x="48.3741%" y="1157" width="0.0104%" height="15" fill="rgb(235,190,38)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1167.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeSlice (1 samples, 0.01%)</title><rect x="48.3741%" y="1141" width="0.0104%" height="15" fill="rgb(247,86,24)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1151.50"></text></g><g><title>deno`Builtins_CreateTypedArray (1 samples, 0.01%)</title><rect x="48.3741%" y="1125" width="0.0104%" height="15" fill="rgb(205,101,16)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1135.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.01%)</title><rect x="48.3741%" y="1109" width="0.0104%" height="15" fill="rgb(246,168,33)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1119.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="48.3741%" y="1093" width="0.0104%" height="15" fill="rgb(231,114,1)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1103.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (1 samples, 0.01%)</title><rect x="48.3741%" y="1077" width="0.0104%" height="15" fill="rgb(207,184,53)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1087.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="48.3741%" y="1061" width="0.0104%" height="15" fill="rgb(224,95,51)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1071.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Attach(std::__1::shared_ptr (1 samples, 0.01%)</title><rect x="48.3741%" y="1045" width="0.0104%" height="15" fill="rgb(212,188,45)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1055.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (1 samples, 0.01%)</title><rect x="48.3741%" y="1029" width="0.0104%" height="15" fill="rgb(223,154,38)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1039.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (1 samples, 0.01%)</title><rect x="48.3741%" y="1013" width="0.0104%" height="15" fill="rgb(251,22,52)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="48.3741%" y="997" width="0.0104%" height="15" fill="rgb(229,209,22)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="48.3741%" y="981" width="0.0104%" height="15" fill="rgb(234,138,34)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="48.3741%" y="965" width="0.0104%" height="15" fill="rgb(212,95,11)" fg:x="4671" fg:w="1"/><text x="48.6241%" y="975.50"></text></g><g><title>0x110013460 (26 samples, 0.27%)</title><rect x="48.3844%" y="1157" width="0.2693%" height="15" fill="rgb(240,179,47)" fg:x="4672" fg:w="26"/><text x="48.6344%" y="1167.50"></text></g><g><title>0x1100134a0 (1 samples, 0.01%)</title><rect x="48.6537%" y="1157" width="0.0104%" height="15" fill="rgb(240,163,11)" fg:x="4698" fg:w="1"/><text x="48.9037%" y="1167.50"></text></g><g><title>0x1100134a8 (29 samples, 0.30%)</title><rect x="48.6640%" y="1157" width="0.3003%" height="15" fill="rgb(236,37,12)" fg:x="4699" fg:w="29"/><text x="48.9140%" y="1167.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (28 samples, 0.29%)</title><rect x="48.6744%" y="1141" width="0.2900%" height="15" fill="rgb(232,164,16)" fg:x="4700" fg:w="28"/><text x="48.9244%" y="1151.50"></text></g><g><title>0x1100134dc (2 samples, 0.02%)</title><rect x="48.9644%" y="1157" width="0.0207%" height="15" fill="rgb(244,205,15)" fg:x="4728" fg:w="2"/><text x="49.2144%" y="1167.50"></text></g><g><title>0x110013504 (1 samples, 0.01%)</title><rect x="48.9851%" y="1157" width="0.0104%" height="15" fill="rgb(223,117,47)" fg:x="4730" fg:w="1"/><text x="49.2351%" y="1167.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (2 samples, 0.02%)</title><rect x="48.9954%" y="1141" width="0.0207%" height="15" fill="rgb(244,107,35)" fg:x="4731" fg:w="2"/><text x="49.2454%" y="1151.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (1 samples, 0.01%)</title><rect x="49.0162%" y="1141" width="0.0104%" height="15" fill="rgb(205,140,8)" fg:x="4733" fg:w="1"/><text x="49.2662%" y="1151.50"></text></g><g><title>0x11001350c (20 samples, 0.21%)</title><rect x="48.9954%" y="1157" width="0.2071%" height="15" fill="rgb(228,84,46)" fg:x="4731" fg:w="20"/><text x="49.2454%" y="1167.50"></text></g><g><title>deno`Builtins_LoadIC (17 samples, 0.18%)</title><rect x="49.0265%" y="1141" width="0.1761%" height="15" fill="rgb(254,188,9)" fg:x="4734" fg:w="17"/><text x="49.2765%" y="1151.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeByteLength (6 samples, 0.06%)</title><rect x="49.1404%" y="1125" width="0.0621%" height="15" fill="rgb(206,112,54)" fg:x="4745" fg:w="6"/><text x="49.3904%" y="1135.50"></text></g><g><title>deno`Builtins_Construct (12 samples, 0.12%)</title><rect x="49.7722%" y="1125" width="0.1243%" height="15" fill="rgb(216,84,49)" fg:x="4806" fg:w="12"/><text x="50.0222%" y="1135.50"></text></g><g><title>deno`Builtins_ConstructFunction (4 samples, 0.04%)</title><rect x="49.8964%" y="1125" width="0.0414%" height="15" fill="rgb(214,194,35)" fg:x="4818" fg:w="4"/><text x="50.1464%" y="1135.50"></text></g><g><title>deno`Builtins_AdaptorWithBuiltinExitFrame (1 samples, 0.01%)</title><rect x="50.5178%" y="1109" width="0.0104%" height="15" fill="rgb(249,28,3)" fg:x="4878" fg:w="1"/><text x="50.7678%" y="1119.50"></text></g><g><title>deno`Builtins_ArrayBufferConstructor (2 samples, 0.02%)</title><rect x="50.5282%" y="1109" width="0.0207%" height="15" fill="rgb(222,56,52)" fg:x="4879" fg:w="2"/><text x="50.7782%" y="1119.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.01%)</title><rect x="50.5489%" y="1109" width="0.0104%" height="15" fill="rgb(245,217,50)" fg:x="4881" fg:w="1"/><text x="50.7989%" y="1119.50"></text></g><g><title>libsystem_c.dylib`__sfvwrite (1 samples, 0.01%)</title><rect x="50.5592%" y="917" width="0.0104%" height="15" fill="rgb(213,201,24)" fg:x="4882" fg:w="1"/><text x="50.8092%" y="927.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (2 samples, 0.02%)</title><rect x="50.5592%" y="1013" width="0.0207%" height="15" fill="rgb(248,116,28)" fg:x="4882" fg:w="2"/><text x="50.8092%" y="1023.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (2 samples, 0.02%)</title><rect x="50.5592%" y="997" width="0.0207%" height="15" fill="rgb(219,72,43)" fg:x="4882" fg:w="2"/><text x="50.8092%" y="1007.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (2 samples, 0.02%)</title><rect x="50.5592%" y="981" width="0.0207%" height="15" fill="rgb(209,138,14)" fg:x="4882" fg:w="2"/><text x="50.8092%" y="991.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (2 samples, 0.02%)</title><rect x="50.5592%" y="965" width="0.0207%" height="15" fill="rgb(222,18,33)" fg:x="4882" fg:w="2"/><text x="50.8092%" y="975.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (2 samples, 0.02%)</title><rect x="50.5592%" y="949" width="0.0207%" height="15" fill="rgb(213,199,7)" fg:x="4882" fg:w="2"/><text x="50.8092%" y="959.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (2 samples, 0.02%)</title><rect x="50.5592%" y="933" width="0.0207%" height="15" fill="rgb(250,110,10)" fg:x="4882" fg:w="2"/><text x="50.8092%" y="943.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="50.5696%" y="917" width="0.0104%" height="15" fill="rgb(248,123,6)" fg:x="4883" fg:w="1"/><text x="50.8196%" y="927.50"></text></g><g><title>deno`v8::internal::PauseAllocationObserversScope::~PauseAllocationObserversScope (1 samples, 0.01%)</title><rect x="50.5800%" y="981" width="0.0104%" height="15" fill="rgb(206,91,31)" fg:x="4884" fg:w="1"/><text x="50.8300%" y="991.50"></text></g><g><title>deno`v8::internal::SpaceWithLinearArea::ResumeAllocationObservers (1 samples, 0.01%)</title><rect x="50.5800%" y="965" width="0.0104%" height="15" fill="rgb(211,154,13)" fg:x="4884" fg:w="1"/><text x="50.8300%" y="975.50"></text></g><g><title>deno`std::__1::__shared_mutex_base::unlock (1 samples, 0.01%)</title><rect x="50.5800%" y="949" width="0.0104%" height="15" fill="rgb(225,148,7)" fg:x="4884" fg:w="1"/><text x="50.8300%" y="959.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="50.5800%" y="933" width="0.0104%" height="15" fill="rgb(220,160,43)" fg:x="4884" fg:w="1"/><text x="50.8300%" y="943.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::RequestSweep (1 samples, 0.01%)</title><rect x="50.6110%" y="965" width="0.0104%" height="15" fill="rgb(213,52,39)" fg:x="4887" fg:w="1"/><text x="50.8610%" y="975.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::PostTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (1 samples, 0.01%)</title><rect x="50.6110%" y="949" width="0.0104%" height="15" fill="rgb(243,137,7)" fg:x="4887" fg:w="1"/><text x="50.8610%" y="959.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::Append(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (1 samples, 0.01%)</title><rect x="50.6110%" y="933" width="0.0104%" height="15" fill="rgb(230,79,13)" fg:x="4887" fg:w="1"/><text x="50.8610%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.01%)</title><rect x="50.6110%" y="917" width="0.0104%" height="15" fill="rgb(247,105,23)" fg:x="4887" fg:w="1"/><text x="50.8610%" y="927.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::ClearMemoryChunkData (1 samples, 0.01%)</title><rect x="50.6214%" y="965" width="0.0104%" height="15" fill="rgb(223,179,41)" fg:x="4888" fg:w="1"/><text x="50.8714%" y="975.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (4 samples, 0.04%)</title><rect x="50.6317%" y="949" width="0.0414%" height="15" fill="rgb(218,9,34)" fg:x="4889" fg:w="4"/><text x="50.8817%" y="959.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (8 samples, 0.08%)</title><rect x="50.6317%" y="965" width="0.0829%" height="15" fill="rgb(222,106,8)" fg:x="4889" fg:w="8"/><text x="50.8817%" y="975.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (4 samples, 0.04%)</title><rect x="50.6732%" y="949" width="0.0414%" height="15" fill="rgb(211,220,0)" fg:x="4893" fg:w="4"/><text x="50.9232%" y="959.50"></text></g><g><title>deno`v8::internal::PretenturingHandler::MergeAllocationSitePretenuringFeedback(std::__1::unordered_map&lt;v8::internal::AllocationSite, unsigned long, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, std::__1::allocator&lt;std::__1::pair (1 samples, 0.01%)</title><rect x="50.7146%" y="965" width="0.0104%" height="15" fill="rgb(229,52,16)" fg:x="4897" fg:w="1"/><text x="50.9646%" y="975.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (1 samples, 0.01%)</title><rect x="50.7249%" y="917" width="0.0104%" height="15" fill="rgb(212,155,18)" fg:x="4898" fg:w="1"/><text x="50.9749%" y="927.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (1 samples, 0.01%)</title><rect x="50.7249%" y="901" width="0.0104%" height="15" fill="rgb(242,21,14)" fg:x="4898" fg:w="1"/><text x="50.9749%" y="911.50"></text></g><g><title>deno`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.01%)</title><rect x="50.7249%" y="885" width="0.0104%" height="15" fill="rgb(222,19,48)" fg:x="4898" fg:w="1"/><text x="50.9749%" y="895.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.02%)</title><rect x="50.7249%" y="949" width="0.0207%" height="15" fill="rgb(232,45,27)" fg:x="4898" fg:w="2"/><text x="50.9749%" y="959.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.02%)</title><rect x="50.7249%" y="933" width="0.0207%" height="15" fill="rgb(249,103,42)" fg:x="4898" fg:w="2"/><text x="50.9749%" y="943.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (1 samples, 0.01%)</title><rect x="50.7353%" y="917" width="0.0104%" height="15" fill="rgb(246,81,33)" fg:x="4899" fg:w="1"/><text x="50.9853%" y="927.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (2 samples, 0.02%)</title><rect x="50.7457%" y="917" width="0.0207%" height="15" fill="rgb(252,33,42)" fg:x="4900" fg:w="2"/><text x="50.9957%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (1 samples, 0.01%)</title><rect x="50.7560%" y="901" width="0.0104%" height="15" fill="rgb(209,212,41)" fg:x="4901" fg:w="1"/><text x="51.0060%" y="911.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (21 samples, 0.22%)</title><rect x="50.5592%" y="1061" width="0.2175%" height="15" fill="rgb(207,154,6)" fg:x="4882" fg:w="21"/><text x="50.8092%" y="1071.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (21 samples, 0.22%)</title><rect x="50.5592%" y="1045" width="0.2175%" height="15" fill="rgb(223,64,47)" fg:x="4882" fg:w="21"/><text x="50.8092%" y="1055.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (21 samples, 0.22%)</title><rect x="50.5592%" y="1029" width="0.2175%" height="15" fill="rgb(211,161,38)" fg:x="4882" fg:w="21"/><text x="50.8092%" y="1039.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (19 samples, 0.20%)</title><rect x="50.5800%" y="1013" width="0.1968%" height="15" fill="rgb(219,138,40)" fg:x="4884" fg:w="19"/><text x="50.8300%" y="1023.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (19 samples, 0.20%)</title><rect x="50.5800%" y="997" width="0.1968%" height="15" fill="rgb(241,228,46)" fg:x="4884" fg:w="19"/><text x="50.8300%" y="1007.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (18 samples, 0.19%)</title><rect x="50.5903%" y="981" width="0.1864%" height="15" fill="rgb(223,209,38)" fg:x="4885" fg:w="18"/><text x="50.8403%" y="991.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (5 samples, 0.05%)</title><rect x="50.7249%" y="965" width="0.0518%" height="15" fill="rgb(236,164,45)" fg:x="4898" fg:w="5"/><text x="50.9749%" y="975.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (3 samples, 0.03%)</title><rect x="50.7457%" y="949" width="0.0311%" height="15" fill="rgb(231,15,5)" fg:x="4900" fg:w="3"/><text x="50.9957%" y="959.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (3 samples, 0.03%)</title><rect x="50.7457%" y="933" width="0.0311%" height="15" fill="rgb(252,35,15)" fg:x="4900" fg:w="3"/><text x="50.9957%" y="943.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.01%)</title><rect x="50.7664%" y="917" width="0.0104%" height="15" fill="rgb(248,181,18)" fg:x="4902" fg:w="1"/><text x="51.0164%" y="927.50"></text></g><g><title>deno`std::__1::__shared_mutex_base::lock (1 samples, 0.01%)</title><rect x="50.7767%" y="1029" width="0.0104%" height="15" fill="rgb(233,39,42)" fg:x="4903" fg:w="1"/><text x="51.0267%" y="1039.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.01%)</title><rect x="50.7767%" y="1013" width="0.0104%" height="15" fill="rgb(238,110,33)" fg:x="4903" fg:w="1"/><text x="51.0267%" y="1023.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (23 samples, 0.24%)</title><rect x="50.5592%" y="1109" width="0.2382%" height="15" fill="rgb(233,195,10)" fg:x="4882" fg:w="23"/><text x="50.8092%" y="1119.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (23 samples, 0.24%)</title><rect x="50.5592%" y="1093" width="0.2382%" height="15" fill="rgb(254,105,3)" fg:x="4882" fg:w="23"/><text x="50.8092%" y="1103.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (23 samples, 0.24%)</title><rect x="50.5592%" y="1077" width="0.2382%" height="15" fill="rgb(221,225,9)" fg:x="4882" fg:w="23"/><text x="50.8092%" y="1087.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (2 samples, 0.02%)</title><rect x="50.7767%" y="1061" width="0.0207%" height="15" fill="rgb(224,227,45)" fg:x="4903" fg:w="2"/><text x="51.0267%" y="1071.50"></text></g><g><title>deno`v8::internal::SpaceWithLinearArea::AdvanceAllocationObservers (2 samples, 0.02%)</title><rect x="50.7767%" y="1045" width="0.0207%" height="15" fill="rgb(229,198,43)" fg:x="4903" fg:w="2"/><text x="51.0267%" y="1055.50"></text></g><g><title>deno`std::__1::mutex::lock (1 samples, 0.01%)</title><rect x="50.7871%" y="1029" width="0.0104%" height="15" fill="rgb(206,209,35)" fg:x="4904" fg:w="1"/><text x="51.0371%" y="1039.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (14 samples, 0.14%)</title><rect x="50.9838%" y="1077" width="0.1450%" height="15" fill="rgb(245,195,53)" fg:x="4923" fg:w="14"/><text x="51.2338%" y="1087.50"></text></g><g><title>deno`operator new(unsigned long) (3 samples, 0.03%)</title><rect x="51.1599%" y="1061" width="0.0311%" height="15" fill="rgb(240,92,26)" fg:x="4940" fg:w="3"/><text x="51.4099%" y="1071.50"></text></g><g><title>deno`v8::Isolate::AdjustAmountOfExternalAllocatedMemory (4 samples, 0.04%)</title><rect x="51.1910%" y="1061" width="0.0414%" height="15" fill="rgb(207,40,23)" fg:x="4943" fg:w="4"/><text x="51.4410%" y="1071.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="51.3256%" y="1045" width="0.0104%" height="15" fill="rgb(223,111,35)" fg:x="4956" fg:w="1"/><text x="51.5756%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="51.4602%" y="1013" width="0.0104%" height="15" fill="rgb(229,147,28)" fg:x="4969" fg:w="1"/><text x="51.7102%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.12%)</title><rect x="51.5120%" y="997" width="0.1243%" height="15" fill="rgb(211,29,28)" fg:x="4974" fg:w="12"/><text x="51.7620%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.05%)</title><rect x="51.5845%" y="981" width="0.0518%" height="15" fill="rgb(228,72,33)" fg:x="4981" fg:w="5"/><text x="51.8345%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.27%)</title><rect x="51.3877%" y="1029" width="0.2693%" height="15" fill="rgb(205,214,31)" fg:x="4962" fg:w="26"/><text x="51.6377%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.19%)</title><rect x="51.4706%" y="1013" width="0.1864%" height="15" fill="rgb(224,111,15)" fg:x="4970" fg:w="18"/><text x="51.7206%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="51.6363%" y="997" width="0.0207%" height="15" fill="rgb(253,21,26)" fg:x="4986" fg:w="2"/><text x="51.8863%" y="1007.50"></text></g><g><title>deno`operator new(unsigned long) (33 samples, 0.34%)</title><rect x="51.3360%" y="1045" width="0.3418%" height="15" fill="rgb(245,139,43)" fg:x="4957" fg:w="33"/><text x="51.5860%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="51.6570%" y="1029" width="0.0207%" height="15" fill="rgb(252,170,7)" fg:x="4988" fg:w="2"/><text x="51.9070%" y="1039.50"></text></g><g><title>deno`v8::Isolate::AdjustAmountOfExternalAllocatedMemory (1 samples, 0.01%)</title><rect x="51.6777%" y="1045" width="0.0104%" height="15" fill="rgb(231,118,14)" fg:x="4990" fg:w="1"/><text x="51.9277%" y="1055.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::Append (6 samples, 0.06%)</title><rect x="51.6881%" y="1045" width="0.0621%" height="15" fill="rgb(238,83,0)" fg:x="4991" fg:w="6"/><text x="51.9381%" y="1055.50"></text></g><g><title>deno`DYLD-STUB$$calloc (3 samples, 0.03%)</title><rect x="51.8848%" y="1029" width="0.0311%" height="15" fill="rgb(221,39,39)" fg:x="5010" fg:w="3"/><text x="52.1348%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.16%)</title><rect x="52.0298%" y="981" width="0.1553%" height="15" fill="rgb(222,119,46)" fg:x="5024" fg:w="15"/><text x="52.2798%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.03%)</title><rect x="52.1541%" y="965" width="0.0311%" height="15" fill="rgb(222,165,49)" fg:x="5036" fg:w="3"/><text x="52.4041%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.28%)</title><rect x="51.9159%" y="1013" width="0.2796%" height="15" fill="rgb(219,113,52)" fg:x="5013" fg:w="27"/><text x="52.1659%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.19%)</title><rect x="52.0091%" y="997" width="0.1864%" height="15" fill="rgb(214,7,15)" fg:x="5022" fg:w="18"/><text x="52.2591%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="52.1852%" y="981" width="0.0104%" height="15" fill="rgb(235,32,4)" fg:x="5039" fg:w="1"/><text x="52.4352%" y="991.50"></text></g><g><title>deno`operator new(unsigned long) (28 samples, 0.29%)</title><rect x="51.9159%" y="1029" width="0.2900%" height="15" fill="rgb(238,90,54)" fg:x="5013" fg:w="28"/><text x="52.1659%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="52.1955%" y="1013" width="0.0104%" height="15" fill="rgb(213,208,19)" fg:x="5040" fg:w="1"/><text x="52.4455%" y="1023.50"></text></g><g><title>deno`v8::(anonymous namespace)::ArrayBufferAllocator::Allocate (1 samples, 0.01%)</title><rect x="52.2059%" y="1029" width="0.0104%" height="15" fill="rgb(233,156,4)" fg:x="5041" fg:w="1"/><text x="52.4559%" y="1039.50"></text></g><g><title>deno`v8::internal::Heap::AllocateExternalBackingStore(std::__1::function&lt;void* (8 samples, 0.08%)</title><rect x="52.2162%" y="1029" width="0.0829%" height="15" fill="rgb(207,194,5)" fg:x="5042" fg:w="8"/><text x="52.4662%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="52.3509%" y="997" width="0.0414%" height="15" fill="rgb(206,111,30)" fg:x="5055" fg:w="4"/><text x="52.6009%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.08%)</title><rect x="52.5166%" y="965" width="0.0829%" height="15" fill="rgb(243,70,54)" fg:x="5071" fg:w="8"/><text x="52.7666%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.21%)</title><rect x="52.4130%" y="981" width="0.2071%" height="15" fill="rgb(242,28,8)" fg:x="5061" fg:w="20"/><text x="52.6630%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.02%)</title><rect x="52.5994%" y="965" width="0.0207%" height="15" fill="rgb(219,106,18)" fg:x="5079" fg:w="2"/><text x="52.8494%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="52.6201%" y="981" width="0.0207%" height="15" fill="rgb(244,222,10)" fg:x="5081" fg:w="2"/><text x="52.8701%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (44 samples, 0.46%)</title><rect x="52.2991%" y="1013" width="0.4557%" height="15" fill="rgb(236,179,52)" fg:x="5050" fg:w="44"/><text x="52.5491%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (35 samples, 0.36%)</title><rect x="52.3923%" y="997" width="0.3625%" height="15" fill="rgb(213,23,39)" fg:x="5059" fg:w="35"/><text x="52.6423%" y="1007.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.11%)</title><rect x="52.6408%" y="981" width="0.1139%" height="15" fill="rgb(238,48,10)" fg:x="5083" fg:w="11"/><text x="52.8908%" y="991.50"></text></g><g><title>deno`v8::internal::Heap::AllocateExternalBackingStore(std::__1::function&lt;void*  (45 samples, 0.47%)</title><rect x="52.2991%" y="1029" width="0.4660%" height="15" fill="rgb(251,196,23)" fg:x="5050" fg:w="45"/><text x="52.5491%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (1 samples, 0.01%)</title><rect x="52.7548%" y="1013" width="0.0104%" height="15" fill="rgb(250,152,24)" fg:x="5094" fg:w="1"/><text x="53.0048%" y="1023.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::ExternalBackingStoreBytes (5 samples, 0.05%)</title><rect x="52.7651%" y="1029" width="0.0518%" height="15" fill="rgb(209,150,17)" fg:x="5095" fg:w="5"/><text x="53.0151%" y="1039.50"></text></g><g><title>deno`void* std::__1::__function::__policy_invoker&lt;void* (unsigned long)&gt;::__call_impl&lt;std::__1::__function::__default_alloc_func&lt;v8::internal::BackingStore::Allocate(v8::internal::Isolate*, unsigned long, v8::internal::SharedFlag, v8::internal::InitializedFlag)::$_0, void* (unsigned long)&gt; &gt; (5 samples, 0.05%)</title><rect x="52.8169%" y="1029" width="0.0518%" height="15" fill="rgb(234,202,34)" fg:x="5100" fg:w="5"/><text x="53.0669%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.02%)</title><rect x="52.8687%" y="1029" width="0.0207%" height="15" fill="rgb(253,148,53)" fg:x="5105" fg:w="2"/><text x="53.1187%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="52.8894%" y="1029" width="0.0104%" height="15" fill="rgb(218,129,16)" fg:x="5107" fg:w="1"/><text x="53.1394%" y="1039.50"></text></g><g><title>deno`v8::internal::BackingStore::Allocate (112 samples, 1.16%)</title><rect x="51.7502%" y="1045" width="1.1599%" height="15" fill="rgb(216,85,19)" fg:x="4997" fg:w="112"/><text x="52.0002%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`calloc (1 samples, 0.01%)</title><rect x="52.8998%" y="1029" width="0.0104%" height="15" fill="rgb(235,228,7)" fg:x="5108" fg:w="1"/><text x="53.1498%" y="1039.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (7 samples, 0.07%)</title><rect x="52.9101%" y="1045" width="0.0725%" height="15" fill="rgb(245,175,0)" fg:x="5109" fg:w="7"/><text x="53.1601%" y="1055.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (3 samples, 0.03%)</title><rect x="52.9826%" y="1045" width="0.0311%" height="15" fill="rgb(208,168,36)" fg:x="5116" fg:w="3"/><text x="53.2326%" y="1055.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (6 samples, 0.06%)</title><rect x="53.0137%" y="1045" width="0.0621%" height="15" fill="rgb(246,171,24)" fg:x="5119" fg:w="6"/><text x="53.2637%" y="1055.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (8 samples, 0.08%)</title><rect x="53.1172%" y="1029" width="0.0829%" height="15" fill="rgb(215,142,24)" fg:x="5129" fg:w="8"/><text x="53.3672%" y="1039.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (16 samples, 0.17%)</title><rect x="53.3036%" y="1013" width="0.1657%" height="15" fill="rgb(250,187,7)" fg:x="5147" fg:w="16"/><text x="53.5536%" y="1023.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (47 samples, 0.49%)</title><rect x="53.2001%" y="1029" width="0.4867%" height="15" fill="rgb(228,66,33)" fg:x="5137" fg:w="47"/><text x="53.4501%" y="1039.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (21 samples, 0.22%)</title><rect x="53.4693%" y="1013" width="0.2175%" height="15" fill="rgb(234,215,21)" fg:x="5163" fg:w="21"/><text x="53.7193%" y="1023.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (5 samples, 0.05%)</title><rect x="53.6868%" y="1029" width="0.0518%" height="15" fill="rgb(222,191,20)" fg:x="5184" fg:w="5"/><text x="53.9368%" y="1039.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (3 samples, 0.03%)</title><rect x="53.7386%" y="1029" width="0.0311%" height="15" fill="rgb(245,79,54)" fg:x="5189" fg:w="3"/><text x="53.9886%" y="1039.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObjectFromMap(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (76 samples, 0.79%)</title><rect x="53.0758%" y="1045" width="0.7871%" height="15" fill="rgb(240,10,37)" fg:x="5125" fg:w="76"/><text x="53.3258%" y="1055.50"></text></g><g><title>deno`v8::internal::ReadOnlyRoots::one_pointer_filler_map_word (9 samples, 0.09%)</title><rect x="53.7697%" y="1029" width="0.0932%" height="15" fill="rgb(214,192,32)" fg:x="5192" fg:w="9"/><text x="54.0197%" y="1039.50"></text></g><g><title>deno`v8::internal::Heap::AllocateExternalBackingStore(std::__1::function&lt;void* (1 samples, 0.01%)</title><rect x="53.8629%" y="1045" width="0.0104%" height="15" fill="rgb(209,36,54)" fg:x="5201" fg:w="1"/><text x="54.1129%" y="1055.50"></text></g><g><title>deno`v8::internal::Heap::external_memory_limit (3 samples, 0.03%)</title><rect x="53.8732%" y="1045" width="0.0311%" height="15" fill="rgb(220,10,11)" fg:x="5202" fg:w="3"/><text x="54.1232%" y="1055.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="53.9768%" y="1013" width="0.0104%" height="15" fill="rgb(221,106,17)" fg:x="5212" fg:w="1"/><text x="54.2268%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.18%)</title><rect x="54.0597%" y="965" width="0.1761%" height="15" fill="rgb(251,142,44)" fg:x="5220" fg:w="17"/><text x="54.3097%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.08%)</title><rect x="54.1529%" y="949" width="0.0829%" height="15" fill="rgb(238,13,15)" fg:x="5229" fg:w="8"/><text x="54.4029%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="54.2357%" y="965" width="0.0104%" height="15" fill="rgb(208,107,27)" fg:x="5237" fg:w="1"/><text x="54.4857%" y="975.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (27 samples, 0.28%)</title><rect x="53.9768%" y="1029" width="0.2796%" height="15" fill="rgb(205,136,37)" fg:x="5212" fg:w="27"/><text x="54.2268%" y="1039.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (26 samples, 0.27%)</title><rect x="53.9872%" y="1013" width="0.2693%" height="15" fill="rgb(250,205,27)" fg:x="5213" fg:w="26"/><text x="54.2372%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.27%)</title><rect x="53.9872%" y="997" width="0.2693%" height="15" fill="rgb(210,80,43)" fg:x="5213" fg:w="26"/><text x="54.2372%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.23%)</title><rect x="54.0286%" y="981" width="0.2278%" height="15" fill="rgb(247,160,36)" fg:x="5217" fg:w="22"/><text x="54.2786%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="54.2461%" y="965" width="0.0104%" height="15" fill="rgb(234,13,49)" fg:x="5238" fg:w="1"/><text x="54.4961%" y="975.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Attach(std::__1::shared_ptr (37 samples, 0.38%)</title><rect x="53.9043%" y="1045" width="0.3832%" height="15" fill="rgb(234,122,0)" fg:x="5205" fg:w="37"/><text x="54.1543%" y="1055.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (3 samples, 0.03%)</title><rect x="54.2564%" y="1029" width="0.0311%" height="15" fill="rgb(207,146,38)" fg:x="5239" fg:w="3"/><text x="54.5064%" y="1039.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (1 samples, 0.01%)</title><rect x="54.2875%" y="1045" width="0.0104%" height="15" fill="rgb(207,177,25)" fg:x="5242" fg:w="1"/><text x="54.5375%" y="1055.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Setup(v8::internal::SharedFlag, v8::internal::ResizableFlag, std::__1::shared_ptr (6 samples, 0.06%)</title><rect x="54.2978%" y="1045" width="0.0621%" height="15" fill="rgb(211,178,42)" fg:x="5243" fg:w="6"/><text x="54.5478%" y="1055.50"></text></g><g><title>deno`v8::internal::JSFunction::GetDerivedMap(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle (2 samples, 0.02%)</title><rect x="54.3600%" y="1045" width="0.0207%" height="15" fill="rgb(230,69,54)" fg:x="5249" fg:w="2"/><text x="54.6100%" y="1055.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (8 samples, 0.08%)</title><rect x="54.3807%" y="1045" width="0.0829%" height="15" fill="rgb(214,135,41)" fg:x="5251" fg:w="8"/><text x="54.6307%" y="1055.50"></text></g><g><title>deno`v8::internal::JSFunction::EnsureHasInitialMap(v8::internal::Handle (2 samples, 0.02%)</title><rect x="54.5050%" y="1029" width="0.0207%" height="15" fill="rgb(237,67,25)" fg:x="5263" fg:w="2"/><text x="54.7550%" y="1039.50"></text></g><g><title>deno`v8::internal::JSObject::New(v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle (13 samples, 0.13%)</title><rect x="54.4635%" y="1045" width="0.1346%" height="15" fill="rgb(222,189,50)" fg:x="5259" fg:w="13"/><text x="54.7135%" y="1055.50"></text></g><g><title>deno`v8::internal::JSFunction::GetDerivedMap(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle (7 samples, 0.07%)</title><rect x="54.5257%" y="1029" width="0.0725%" height="15" fill="rgb(245,148,34)" fg:x="5265" fg:w="7"/><text x="54.7757%" y="1039.50"></text></g><g><title>deno`v8::internal::JSFunction::EnsureHasInitialMap(v8::internal::Handle (1 samples, 0.01%)</title><rect x="54.5878%" y="1013" width="0.0104%" height="15" fill="rgb(222,29,6)" fg:x="5271" fg:w="1"/><text x="54.8378%" y="1023.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (326 samples, 3.38%)</title><rect x="51.2324%" y="1061" width="3.3761%" height="15" fill="rgb(221,189,43)" fg:x="4947" fg:w="326"/><text x="51.4824%" y="1071.50">den..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="54.5982%" y="1045" width="0.0104%" height="15" fill="rgb(207,36,27)" fg:x="5272" fg:w="1"/><text x="54.8482%" y="1055.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::Append (3 samples, 0.03%)</title><rect x="54.6085%" y="1061" width="0.0311%" height="15" fill="rgb(217,90,24)" fg:x="5273" fg:w="3"/><text x="54.8585%" y="1071.50"></text></g><g><title>deno`v8::internal::BackingStore::Allocate (3 samples, 0.03%)</title><rect x="54.6396%" y="1061" width="0.0311%" height="15" fill="rgb(224,66,35)" fg:x="5276" fg:w="3"/><text x="54.8896%" y="1071.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (364 samples, 3.77%)</title><rect x="50.9424%" y="1093" width="3.7697%" height="15" fill="rgb(221,13,50)" fg:x="4919" fg:w="364"/><text x="51.1924%" y="1103.50">deno..</text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (346 samples, 3.58%)</title><rect x="51.1288%" y="1077" width="3.5833%" height="15" fill="rgb(236,68,49)" fg:x="4937" fg:w="346"/><text x="51.3788%" y="1087.50">deno..</text></g><g><title>deno`v8::internal::Factory::NewJSObjectFromMap(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (4 samples, 0.04%)</title><rect x="54.6707%" y="1061" width="0.0414%" height="15" fill="rgb(229,146,28)" fg:x="5279" fg:w="4"/><text x="54.9207%" y="1071.50"></text></g><g><title>deno`Builtins_CreateTypedArray (464 samples, 4.81%)</title><rect x="49.9379%" y="1125" width="4.8053%" height="15" fill="rgb(225,31,38)" fg:x="4822" fg:w="464"/><text x="50.1879%" y="1135.50">deno`B..</text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (381 samples, 3.95%)</title><rect x="50.7974%" y="1109" width="3.9457%" height="15" fill="rgb(250,208,3)" fg:x="4905" fg:w="381"/><text x="51.0474%" y="1119.50">deno..</text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (3 samples, 0.03%)</title><rect x="54.7121%" y="1093" width="0.0311%" height="15" fill="rgb(246,54,23)" fg:x="5283" fg:w="3"/><text x="54.9621%" y="1103.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeSlice (539 samples, 5.58%)</title><rect x="49.2026%" y="1141" width="5.5820%" height="15" fill="rgb(243,76,11)" fg:x="4751" fg:w="539"/><text x="49.4526%" y="1151.50">deno`Bu..</text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (4 samples, 0.04%)</title><rect x="54.7432%" y="1125" width="0.0414%" height="15" fill="rgb(245,21,50)" fg:x="5286" fg:w="4"/><text x="54.9932%" y="1135.50"></text></g><g><title>deno`DYLD-STUB$$memmove (1 samples, 0.01%)</title><rect x="54.7846%" y="1141" width="0.0104%" height="15" fill="rgb(228,9,43)" fg:x="5290" fg:w="1"/><text x="55.0346%" y="1151.50"></text></g><g><title>deno`v8::internal::libc_memmove (1 samples, 0.01%)</title><rect x="54.7949%" y="1141" width="0.0104%" height="15" fill="rgb(208,100,47)" fg:x="5291" fg:w="1"/><text x="55.0449%" y="1151.50"></text></g><g><title>0x110013540 (546 samples, 5.65%)</title><rect x="49.2026%" y="1157" width="5.6545%" height="15" fill="rgb(232,26,8)" fg:x="4751" fg:w="546"/><text x="49.4526%" y="1167.50">0x11001..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.05%)</title><rect x="54.8053%" y="1141" width="0.0518%" height="15" fill="rgb(216,166,38)" fg:x="5292" fg:w="5"/><text x="55.0553%" y="1151.50"></text></g><g><title>0x110013568 (1 samples, 0.01%)</title><rect x="54.8571%" y="1157" width="0.0104%" height="15" fill="rgb(251,202,51)" fg:x="5297" fg:w="1"/><text x="55.1071%" y="1167.50"></text></g><g><title>0x110013578 (1 samples, 0.01%)</title><rect x="54.8674%" y="1157" width="0.0104%" height="15" fill="rgb(254,216,34)" fg:x="5298" fg:w="1"/><text x="55.1174%" y="1167.50"></text></g><g><title>0x110013598 (1 samples, 0.01%)</title><rect x="54.8778%" y="1157" width="0.0104%" height="15" fill="rgb(251,32,27)" fg:x="5299" fg:w="1"/><text x="55.1278%" y="1167.50"></text></g><g><title>0x1100135a0 (1 samples, 0.01%)</title><rect x="54.8882%" y="1157" width="0.0104%" height="15" fill="rgb(208,127,28)" fg:x="5300" fg:w="1"/><text x="55.1382%" y="1167.50"></text></g><g><title>0x1100135b8 (1 samples, 0.01%)</title><rect x="54.8985%" y="1157" width="0.0104%" height="15" fill="rgb(224,137,22)" fg:x="5301" fg:w="1"/><text x="55.1485%" y="1167.50"></text></g><g><title>0x1100135f4 (1 samples, 0.01%)</title><rect x="54.9089%" y="1157" width="0.0104%" height="15" fill="rgb(254,70,32)" fg:x="5302" fg:w="1"/><text x="55.1589%" y="1167.50"></text></g><g><title>0x11001362c (1 samples, 0.01%)</title><rect x="54.9192%" y="1157" width="0.0104%" height="15" fill="rgb(229,75,37)" fg:x="5303" fg:w="1"/><text x="55.1692%" y="1167.50"></text></g><g><title>0x110013634 (1 samples, 0.01%)</title><rect x="54.9296%" y="1157" width="0.0104%" height="15" fill="rgb(252,64,23)" fg:x="5304" fg:w="1"/><text x="55.1796%" y="1167.50"></text></g><g><title>0x110013664 (8 samples, 0.08%)</title><rect x="54.9399%" y="1157" width="0.0829%" height="15" fill="rgb(232,162,48)" fg:x="5305" fg:w="8"/><text x="55.1899%" y="1167.50"></text></g><g><title>deno`Builtins_LoadIC (7 samples, 0.07%)</title><rect x="54.9503%" y="1141" width="0.0725%" height="15" fill="rgb(246,160,12)" fg:x="5306" fg:w="7"/><text x="55.2003%" y="1151.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeByteLength (4 samples, 0.04%)</title><rect x="54.9814%" y="1125" width="0.0414%" height="15" fill="rgb(247,166,0)" fg:x="5309" fg:w="4"/><text x="55.2314%" y="1135.50"></text></g><g><title>0x1100136c4 (1 samples, 0.01%)</title><rect x="55.0228%" y="1157" width="0.0104%" height="15" fill="rgb(249,219,21)" fg:x="5313" fg:w="1"/><text x="55.2728%" y="1167.50"></text></g><g><title>0x1100136d4 (1 samples, 0.01%)</title><rect x="55.0331%" y="1157" width="0.0104%" height="15" fill="rgb(205,209,3)" fg:x="5314" fg:w="1"/><text x="55.2831%" y="1167.50"></text></g><g><title>0x1100136f4 (1 samples, 0.01%)</title><rect x="55.0435%" y="1157" width="0.0104%" height="15" fill="rgb(243,44,1)" fg:x="5315" fg:w="1"/><text x="55.2935%" y="1167.50"></text></g><g><title>0x11001371c (2 samples, 0.02%)</title><rect x="55.0539%" y="1157" width="0.0207%" height="15" fill="rgb(206,159,16)" fg:x="5316" fg:w="2"/><text x="55.3039%" y="1167.50"></text></g><g><title>0x11001373c (1 samples, 0.01%)</title><rect x="55.0746%" y="1157" width="0.0104%" height="15" fill="rgb(244,77,30)" fg:x="5318" fg:w="1"/><text x="55.3246%" y="1167.50"></text></g><g><title>0x110013744 (4 samples, 0.04%)</title><rect x="55.0849%" y="1157" width="0.0414%" height="15" fill="rgb(218,69,12)" fg:x="5319" fg:w="4"/><text x="55.3349%" y="1167.50"></text></g><g><title>0x1100138bc (1 samples, 0.01%)</title><rect x="55.1263%" y="1157" width="0.0104%" height="15" fill="rgb(212,87,7)" fg:x="5323" fg:w="1"/><text x="55.3763%" y="1167.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="55.1263%" y="1141" width="0.0104%" height="15" fill="rgb(245,114,25)" fg:x="5323" fg:w="1"/><text x="55.3763%" y="1151.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.01%)</title><rect x="55.1263%" y="1125" width="0.0104%" height="15" fill="rgb(210,61,42)" fg:x="5323" fg:w="1"/><text x="55.3763%" y="1135.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.01%)</title><rect x="55.1263%" y="1109" width="0.0104%" height="15" fill="rgb(211,52,33)" fg:x="5323" fg:w="1"/><text x="55.3763%" y="1119.50"></text></g><g><title>deno`v8::internal::AllocationObserver::GetNextStepSize (1 samples, 0.01%)</title><rect x="55.1263%" y="1093" width="0.0104%" height="15" fill="rgb(234,58,33)" fg:x="5323" fg:w="1"/><text x="55.3763%" y="1103.50"></text></g><g><title>deno`Builtins_AllocateRegularInYoungGeneration (1 samples, 0.01%)</title><rect x="55.1367%" y="1157" width="0.0104%" height="15" fill="rgb(220,115,36)" fg:x="5324" fg:w="1"/><text x="55.3867%" y="1167.50"></text></g><g><title>deno`Builtins_LoadIC (5 samples, 0.05%)</title><rect x="55.1471%" y="1157" width="0.0518%" height="15" fill="rgb(243,153,54)" fg:x="5325" fg:w="5"/><text x="55.3971%" y="1167.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (3 samples, 0.03%)</title><rect x="55.1988%" y="1157" width="0.0311%" height="15" fill="rgb(251,47,18)" fg:x="5330" fg:w="3"/><text x="55.4488%" y="1167.50"></text></g><g><title>0x110011de8 (664 samples, 6.88%)</title><rect x="48.3741%" y="1173" width="6.8766%" height="15" fill="rgb(242,102,42)" fg:x="4671" fg:w="664"/><text x="48.6241%" y="1183.50">0x110011d..</text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (2 samples, 0.02%)</title><rect x="55.2299%" y="1157" width="0.0207%" height="15" fill="rgb(234,31,38)" fg:x="5333" fg:w="2"/><text x="55.4799%" y="1167.50"></text></g><g><title>0x110011e10 (1 samples, 0.01%)</title><rect x="55.2506%" y="1173" width="0.0104%" height="15" fill="rgb(221,117,51)" fg:x="5335" fg:w="1"/><text x="55.5006%" y="1183.50"></text></g><g><title>0x110011e20 (1 samples, 0.01%)</title><rect x="55.2610%" y="1173" width="0.0104%" height="15" fill="rgb(212,20,18)" fg:x="5336" fg:w="1"/><text x="55.5110%" y="1183.50"></text></g><g><title>0x110012e10 (1 samples, 0.01%)</title><rect x="55.2713%" y="1157" width="0.0104%" height="15" fill="rgb(245,133,36)" fg:x="5337" fg:w="1"/><text x="55.5213%" y="1167.50"></text></g><g><title>0x110012e1c (1 samples, 0.01%)</title><rect x="55.2817%" y="1157" width="0.0104%" height="15" fill="rgb(212,6,19)" fg:x="5338" fg:w="1"/><text x="55.5317%" y="1167.50"></text></g><g><title>0x110012e68 (1 samples, 0.01%)</title><rect x="55.2920%" y="1157" width="0.0104%" height="15" fill="rgb(218,1,36)" fg:x="5339" fg:w="1"/><text x="55.5420%" y="1167.50"></text></g><g><title>0x110012efc (2 samples, 0.02%)</title><rect x="55.3024%" y="1157" width="0.0207%" height="15" fill="rgb(246,84,54)" fg:x="5340" fg:w="2"/><text x="55.5524%" y="1167.50"></text></g><g><title>0x110012f44 (1 samples, 0.01%)</title><rect x="55.3231%" y="1157" width="0.0104%" height="15" fill="rgb(242,110,6)" fg:x="5342" fg:w="1"/><text x="55.5731%" y="1167.50"></text></g><g><title>0x110012fbc (2 samples, 0.02%)</title><rect x="55.3335%" y="1157" width="0.0207%" height="15" fill="rgb(214,47,5)" fg:x="5343" fg:w="2"/><text x="55.5835%" y="1167.50"></text></g><g><title>0x110013004 (4 samples, 0.04%)</title><rect x="55.3542%" y="1157" width="0.0414%" height="15" fill="rgb(218,159,25)" fg:x="5345" fg:w="4"/><text x="55.6042%" y="1167.50"></text></g><g><title>0x110011e28 (13 samples, 0.13%)</title><rect x="55.2713%" y="1173" width="0.1346%" height="15" fill="rgb(215,211,28)" fg:x="5337" fg:w="13"/><text x="55.5213%" y="1183.50"></text></g><g><title>deno`Builtins_SameValueNumbersOnly (1 samples, 0.01%)</title><rect x="55.3956%" y="1157" width="0.0104%" height="15" fill="rgb(238,59,32)" fg:x="5349" fg:w="1"/><text x="55.6456%" y="1167.50"></text></g><g><title>0x110011e5c (3 samples, 0.03%)</title><rect x="55.4060%" y="1173" width="0.0311%" height="15" fill="rgb(226,82,3)" fg:x="5350" fg:w="3"/><text x="55.6560%" y="1183.50"></text></g><g><title>0x110011e78 (8 samples, 0.08%)</title><rect x="55.4370%" y="1173" width="0.0829%" height="15" fill="rgb(240,164,32)" fg:x="5353" fg:w="8"/><text x="55.6870%" y="1183.50"></text></g><g><title>0x110011e80 (1 samples, 0.01%)</title><rect x="55.5199%" y="1173" width="0.0104%" height="15" fill="rgb(232,46,7)" fg:x="5361" fg:w="1"/><text x="55.7699%" y="1183.50"></text></g><g><title>0x110011e90 (1 samples, 0.01%)</title><rect x="55.5302%" y="1173" width="0.0104%" height="15" fill="rgb(229,129,53)" fg:x="5362" fg:w="1"/><text x="55.7802%" y="1183.50"></text></g><g><title>0x110011ee0 (1 samples, 0.01%)</title><rect x="55.5406%" y="1173" width="0.0104%" height="15" fill="rgb(234,188,29)" fg:x="5363" fg:w="1"/><text x="55.7906%" y="1183.50"></text></g><g><title>0x110011eec (2 samples, 0.02%)</title><rect x="55.5510%" y="1173" width="0.0207%" height="15" fill="rgb(246,141,4)" fg:x="5364" fg:w="2"/><text x="55.8010%" y="1183.50"></text></g><g><title>0x110011f48 (1 samples, 0.01%)</title><rect x="55.5717%" y="1173" width="0.0104%" height="15" fill="rgb(229,23,39)" fg:x="5366" fg:w="1"/><text x="55.8217%" y="1183.50"></text></g><g><title>0x110011f70 (7 samples, 0.07%)</title><rect x="55.5820%" y="1173" width="0.0725%" height="15" fill="rgb(206,12,3)" fg:x="5367" fg:w="7"/><text x="55.8320%" y="1183.50"></text></g><g><title>deno`Builtins_LoadIC (7 samples, 0.07%)</title><rect x="55.5820%" y="1157" width="0.0725%" height="15" fill="rgb(252,226,20)" fg:x="5367" fg:w="7"/><text x="55.8320%" y="1167.50"></text></g><g><title>0x110011f98 (2 samples, 0.02%)</title><rect x="55.6545%" y="1173" width="0.0207%" height="15" fill="rgb(216,123,35)" fg:x="5374" fg:w="2"/><text x="55.9045%" y="1183.50"></text></g><g><title>0x110011fc4 (2 samples, 0.02%)</title><rect x="55.6752%" y="1173" width="0.0207%" height="15" fill="rgb(212,68,40)" fg:x="5376" fg:w="2"/><text x="55.9252%" y="1183.50"></text></g><g><title>0x110011ffc (1 samples, 0.01%)</title><rect x="55.6959%" y="1173" width="0.0104%" height="15" fill="rgb(254,125,32)" fg:x="5378" fg:w="1"/><text x="55.9459%" y="1183.50"></text></g><g><title>0x110012048 (2 samples, 0.02%)</title><rect x="55.7063%" y="1173" width="0.0207%" height="15" fill="rgb(253,97,22)" fg:x="5379" fg:w="2"/><text x="55.9563%" y="1183.50"></text></g><g><title>deno`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="55.7270%" y="1157" width="0.0207%" height="15" fill="rgb(241,101,14)" fg:x="5381" fg:w="2"/><text x="55.9770%" y="1167.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write::call (3 samples, 0.03%)</title><rect x="55.7477%" y="1157" width="0.0311%" height="15" fill="rgb(238,103,29)" fg:x="5383" fg:w="3"/><text x="55.9977%" y="1167.50"></text></g><g><title>deno`&lt;T as core::any::Any&gt;::type_id (3 samples, 0.03%)</title><rect x="55.8202%" y="1141" width="0.0311%" height="15" fill="rgb(233,195,47)" fg:x="5390" fg:w="3"/><text x="56.0702%" y="1151.50"></text></g><g><title>deno`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (2 samples, 0.02%)</title><rect x="55.8513%" y="1141" width="0.0207%" height="15" fill="rgb(246,218,30)" fg:x="5393" fg:w="2"/><text x="56.1013%" y="1151.50"></text></g><g><title>deno`DYLD-STUB$$memmove (5 samples, 0.05%)</title><rect x="56.2241%" y="1125" width="0.0518%" height="15" fill="rgb(219,145,47)" fg:x="5429" fg:w="5"/><text x="56.4741%" y="1135.50"></text></g><g><title>deno`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (5 samples, 0.05%)</title><rect x="56.2759%" y="1125" width="0.0518%" height="15" fill="rgb(243,12,26)" fg:x="5434" fg:w="5"/><text x="56.5259%" y="1135.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="56.4312%" y="1109" width="0.0207%" height="15" fill="rgb(214,87,16)" fg:x="5449" fg:w="2"/><text x="56.6812%" y="1119.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (3,670 samples, 38.01%)</title><rect x="56.3277%" y="1125" width="38.0075%" height="15" fill="rgb(208,99,42)" fg:x="5439" fg:w="3670"/><text x="56.5777%" y="1135.50">deno`tokio::net::tcp::stream::TcpStream::try_write</text></g><g><title>libsystem_kernel.dylib`__sendto (3,658 samples, 37.88%)</title><rect x="56.4519%" y="1109" width="37.8832%" height="15" fill="rgb(253,99,2)" fg:x="5451" fg:w="3658"/><text x="56.7019%" y="1119.50">libsystem_kernel.dylib`__sendto</text></g><g><title>deno`deno_flash2::op_flash_try_write::call (3,722 samples, 38.55%)</title><rect x="55.8720%" y="1141" width="38.5460%" height="15" fill="rgb(220,168,23)" fg:x="5395" fg:w="3722"/><text x="56.1220%" y="1151.50">deno`deno_flash2::op_flash_try_write::call</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.08%)</title><rect x="94.3351%" y="1125" width="0.0829%" height="15" fill="rgb(242,38,24)" fg:x="9109" fg:w="8"/><text x="94.5851%" y="1135.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::try_write (1 samples, 0.01%)</title><rect x="94.4180%" y="1141" width="0.0104%" height="15" fill="rgb(225,182,9)" fg:x="9117" fg:w="1"/><text x="94.6680%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.08%)</title><rect x="94.5423%" y="1125" width="0.0829%" height="15" fill="rgb(243,178,37)" fg:x="9129" fg:w="8"/><text x="94.7923%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.21%)</title><rect x="94.4283%" y="1141" width="0.2071%" height="15" fill="rgb(232,139,19)" fg:x="9118" fg:w="20"/><text x="94.6783%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="94.6251%" y="1125" width="0.0104%" height="15" fill="rgb(225,201,24)" fg:x="9137" fg:w="1"/><text x="94.8751%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="94.6355%" y="1141" width="0.0207%" height="15" fill="rgb(221,47,46)" fg:x="9138" fg:w="2"/><text x="94.8855%" y="1151.50"></text></g><g><title>deno`deno_flash2::op_flash_try_write_fast_fn (3,759 samples, 38.93%)</title><rect x="55.7788%" y="1157" width="38.9292%" height="15" fill="rgb(249,23,13)" fg:x="5386" fg:w="3759"/><text x="56.0288%" y="1167.50">deno`deno_flash2::op_flash_try_write_fast_fn</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.05%)</title><rect x="94.6562%" y="1141" width="0.0518%" height="15" fill="rgb(219,9,5)" fg:x="9140" fg:w="5"/><text x="94.9062%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="94.7080%" y="1157" width="0.0207%" height="15" fill="rgb(254,171,16)" fg:x="9145" fg:w="2"/><text x="94.9580%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="94.7287%" y="1157" width="0.0311%" height="15" fill="rgb(230,171,20)" fg:x="9147" fg:w="3"/><text x="94.9787%" y="1167.50"></text></g><g><title>0x110012050 (3,770 samples, 39.04%)</title><rect x="55.7270%" y="1173" width="39.0431%" height="15" fill="rgb(210,71,41)" fg:x="5381" fg:w="3770"/><text x="55.9770%" y="1183.50">0x110012050</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="94.7597%" y="1157" width="0.0104%" height="15" fill="rgb(206,173,20)" fg:x="9150" fg:w="1"/><text x="95.0097%" y="1167.50"></text></g><g><title>0x110012064 (1 samples, 0.01%)</title><rect x="94.7701%" y="1173" width="0.0104%" height="15" fill="rgb(233,88,34)" fg:x="9151" fg:w="1"/><text x="95.0201%" y="1183.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (4 samples, 0.04%)</title><rect x="94.7804%" y="1157" width="0.0414%" height="15" fill="rgb(223,209,46)" fg:x="9152" fg:w="4"/><text x="95.0304%" y="1167.50"></text></g><g><title>deno`Builtins_LoadIC (16 samples, 0.17%)</title><rect x="94.8219%" y="1157" width="0.1657%" height="15" fill="rgb(250,43,18)" fg:x="9156" fg:w="16"/><text x="95.0719%" y="1167.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeByteLength (6 samples, 0.06%)</title><rect x="94.9254%" y="1141" width="0.0621%" height="15" fill="rgb(208,13,10)" fg:x="9166" fg:w="6"/><text x="95.1754%" y="1151.50"></text></g><g><title>0x1100120a4 (21 samples, 0.22%)</title><rect x="94.7804%" y="1173" width="0.2175%" height="15" fill="rgb(212,200,36)" fg:x="9152" fg:w="21"/><text x="95.0304%" y="1183.50"></text></g><g><title>deno`Builtins_TypedArrayPrototypeByteLength (1 samples, 0.01%)</title><rect x="94.9876%" y="1157" width="0.0104%" height="15" fill="rgb(225,90,30)" fg:x="9172" fg:w="1"/><text x="95.2376%" y="1167.50"></text></g><g><title>0x1100120d0 (1 samples, 0.01%)</title><rect x="94.9979%" y="1173" width="0.0104%" height="15" fill="rgb(236,182,39)" fg:x="9173" fg:w="1"/><text x="95.2479%" y="1183.50"></text></g><g><title>deno`std::__1::__shared_mutex_base::unlock (1 samples, 0.01%)</title><rect x="95.0083%" y="1109" width="0.0104%" height="15" fill="rgb(212,144,35)" fg:x="9174" fg:w="1"/><text x="95.2583%" y="1119.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.01%)</title><rect x="95.0186%" y="1109" width="0.0104%" height="15" fill="rgb(228,63,44)" fg:x="9175" fg:w="1"/><text x="95.2686%" y="1119.50"></text></g><g><title>deno`v8::internal::SpaceWithLinearArea::AdvanceAllocationObservers (1 samples, 0.01%)</title><rect x="95.0186%" y="1093" width="0.0104%" height="15" fill="rgb(228,109,6)" fg:x="9175" fg:w="1"/><text x="95.2686%" y="1103.50"></text></g><g><title>deno`std::__1::mutex::lock (1 samples, 0.01%)</title><rect x="95.0186%" y="1077" width="0.0104%" height="15" fill="rgb(238,117,24)" fg:x="9175" fg:w="1"/><text x="95.2686%" y="1087.50"></text></g><g><title>0x11001212c (3 samples, 0.03%)</title><rect x="95.0083%" y="1173" width="0.0311%" height="15" fill="rgb(242,26,26)" fg:x="9174" fg:w="3"/><text x="95.2583%" y="1183.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.03%)</title><rect x="95.0083%" y="1157" width="0.0311%" height="15" fill="rgb(221,92,48)" fg:x="9174" fg:w="3"/><text x="95.2583%" y="1167.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.03%)</title><rect x="95.0083%" y="1141" width="0.0311%" height="15" fill="rgb(209,209,32)" fg:x="9174" fg:w="3"/><text x="95.2583%" y="1151.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (3 samples, 0.03%)</title><rect x="95.0083%" y="1125" width="0.0311%" height="15" fill="rgb(221,70,22)" fg:x="9174" fg:w="3"/><text x="95.2583%" y="1135.50"></text></g><g><title>deno`v8::internal::SpaceWithLinearArea::InvokeAllocationObservers (1 samples, 0.01%)</title><rect x="95.0290%" y="1109" width="0.0104%" height="15" fill="rgb(248,145,5)" fg:x="9176" fg:w="1"/><text x="95.2790%" y="1119.50"></text></g><g><title>0x110012144 (1 samples, 0.01%)</title><rect x="95.0394%" y="1173" width="0.0104%" height="15" fill="rgb(226,116,26)" fg:x="9177" fg:w="1"/><text x="95.2894%" y="1183.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="95.0394%" y="1157" width="0.0104%" height="15" fill="rgb(244,5,17)" fg:x="9177" fg:w="1"/><text x="95.2894%" y="1167.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.01%)</title><rect x="95.0394%" y="1141" width="0.0104%" height="15" fill="rgb(252,159,33)" fg:x="9177" fg:w="1"/><text x="95.2894%" y="1151.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.01%)</title><rect x="95.0394%" y="1125" width="0.0104%" height="15" fill="rgb(206,71,0)" fg:x="9177" fg:w="1"/><text x="95.2894%" y="1135.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.01%)</title><rect x="95.0394%" y="1109" width="0.0104%" height="15" fill="rgb(233,118,54)" fg:x="9177" fg:w="1"/><text x="95.2894%" y="1119.50"></text></g><g><title>deno`v8::base::SharedMutex::LockExclusive (1 samples, 0.01%)</title><rect x="95.0394%" y="1093" width="0.0104%" height="15" fill="rgb(234,83,48)" fg:x="9177" fg:w="1"/><text x="95.2894%" y="1103.50"></text></g><g><title>libsystem_c.dylib`__Bfree_D2A (1 samples, 0.01%)</title><rect x="95.0497%" y="965" width="0.0104%" height="15" fill="rgb(228,3,54)" fg:x="9178" fg:w="1"/><text x="95.2997%" y="975.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (3 samples, 0.03%)</title><rect x="95.0497%" y="1061" width="0.0311%" height="15" fill="rgb(226,155,13)" fg:x="9178" fg:w="3"/><text x="95.2997%" y="1071.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (3 samples, 0.03%)</title><rect x="95.0497%" y="1045" width="0.0311%" height="15" fill="rgb(241,28,37)" fg:x="9178" fg:w="3"/><text x="95.2997%" y="1055.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (3 samples, 0.03%)</title><rect x="95.0497%" y="1029" width="0.0311%" height="15" fill="rgb(233,93,10)" fg:x="9178" fg:w="3"/><text x="95.2997%" y="1039.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (3 samples, 0.03%)</title><rect x="95.0497%" y="1013" width="0.0311%" height="15" fill="rgb(225,113,19)" fg:x="9178" fg:w="3"/><text x="95.2997%" y="1023.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (3 samples, 0.03%)</title><rect x="95.0497%" y="997" width="0.0311%" height="15" fill="rgb(241,2,18)" fg:x="9178" fg:w="3"/><text x="95.2997%" y="1007.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (3 samples, 0.03%)</title><rect x="95.0497%" y="981" width="0.0311%" height="15" fill="rgb(228,207,21)" fg:x="9178" fg:w="3"/><text x="95.2997%" y="991.50"></text></g><g><title>libsystem_c.dylib`__dtoa (2 samples, 0.02%)</title><rect x="95.0601%" y="965" width="0.0207%" height="15" fill="rgb(213,211,35)" fg:x="9179" fg:w="2"/><text x="95.3101%" y="975.50"></text></g><g><title>deno`v8::internal::Scavenger::Finalize (1 samples, 0.01%)</title><rect x="95.0808%" y="1029" width="0.0104%" height="15" fill="rgb(209,83,10)" fg:x="9181" fg:w="1"/><text x="95.3308%" y="1039.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::RequestSweep (2 samples, 0.02%)</title><rect x="95.1015%" y="1013" width="0.0207%" height="15" fill="rgb(209,164,1)" fg:x="9183" fg:w="2"/><text x="95.3515%" y="1023.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::PostTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (2 samples, 0.02%)</title><rect x="95.1015%" y="997" width="0.0207%" height="15" fill="rgb(213,184,43)" fg:x="9183" fg:w="2"/><text x="95.3515%" y="1007.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::Append(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (2 samples, 0.02%)</title><rect x="95.1015%" y="981" width="0.0207%" height="15" fill="rgb(231,61,34)" fg:x="9183" fg:w="2"/><text x="95.3515%" y="991.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.02%)</title><rect x="95.1015%" y="965" width="0.0207%" height="15" fill="rgb(235,75,3)" fg:x="9183" fg:w="2"/><text x="95.3515%" y="975.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (8 samples, 0.08%)</title><rect x="95.1222%" y="997" width="0.0829%" height="15" fill="rgb(220,106,47)" fg:x="9185" fg:w="8"/><text x="95.3722%" y="1007.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::IterateThis (1 samples, 0.01%)</title><rect x="95.2051%" y="997" width="0.0104%" height="15" fill="rgb(210,196,33)" fg:x="9193" fg:w="1"/><text x="95.4551%" y="1007.50"></text></g><g><title>deno`v8::internal::Isolate::Iterate (1 samples, 0.01%)</title><rect x="95.2154%" y="997" width="0.0104%" height="15" fill="rgb(229,154,42)" fg:x="9194" fg:w="1"/><text x="95.4654%" y="1007.50"></text></g><g><title>deno`v8::internal::StackFrameIterator::Advance (1 samples, 0.01%)</title><rect x="95.2154%" y="981" width="0.0104%" height="15" fill="rgb(228,114,26)" fg:x="9194" fg:w="1"/><text x="95.4654%" y="991.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (14 samples, 0.14%)</title><rect x="95.1222%" y="1013" width="0.1450%" height="15" fill="rgb(208,144,1)" fg:x="9185" fg:w="14"/><text x="95.3722%" y="1023.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (4 samples, 0.04%)</title><rect x="95.2258%" y="997" width="0.0414%" height="15" fill="rgb(239,112,37)" fg:x="9195" fg:w="4"/><text x="95.4758%" y="1007.50"></text></g><g><title>deno`std::__1::__deque_base&lt;std::__1::pair&lt;unsigned long, unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::~__deque_base (1 samples, 0.01%)</title><rect x="95.2672%" y="981" width="0.0104%" height="15" fill="rgb(210,96,50)" fg:x="9199" fg:w="1"/><text x="95.5172%" y="991.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (22 samples, 0.23%)</title><rect x="95.0808%" y="1061" width="0.2278%" height="15" fill="rgb(222,178,2)" fg:x="9181" fg:w="22"/><text x="95.3308%" y="1071.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (22 samples, 0.23%)</title><rect x="95.0808%" y="1045" width="0.2278%" height="15" fill="rgb(226,74,18)" fg:x="9181" fg:w="22"/><text x="95.3308%" y="1055.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (21 samples, 0.22%)</title><rect x="95.0911%" y="1029" width="0.2175%" height="15" fill="rgb(225,67,54)" fg:x="9182" fg:w="21"/><text x="95.3411%" y="1039.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (4 samples, 0.04%)</title><rect x="95.2672%" y="1013" width="0.0414%" height="15" fill="rgb(251,92,32)" fg:x="9199" fg:w="4"/><text x="95.5172%" y="1023.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (4 samples, 0.04%)</title><rect x="95.2672%" y="997" width="0.0414%" height="15" fill="rgb(228,149,22)" fg:x="9199" fg:w="4"/><text x="95.5172%" y="1007.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (3 samples, 0.03%)</title><rect x="95.2775%" y="981" width="0.0311%" height="15" fill="rgb(243,54,13)" fg:x="9200" fg:w="3"/><text x="95.5275%" y="991.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.03%)</title><rect x="95.2775%" y="965" width="0.0311%" height="15" fill="rgb(243,180,28)" fg:x="9200" fg:w="3"/><text x="95.5275%" y="975.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (26 samples, 0.27%)</title><rect x="95.0497%" y="1077" width="0.2693%" height="15" fill="rgb(208,167,24)" fg:x="9178" fg:w="26"/><text x="95.2997%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.01%)</title><rect x="95.3086%" y="1061" width="0.0104%" height="15" fill="rgb(245,73,45)" fg:x="9203" fg:w="1"/><text x="95.5586%" y="1071.50"></text></g><g><title>0x11001215c (27 samples, 0.28%)</title><rect x="95.0497%" y="1173" width="0.2796%" height="15" fill="rgb(237,203,48)" fg:x="9178" fg:w="27"/><text x="95.2997%" y="1183.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (27 samples, 0.28%)</title><rect x="95.0497%" y="1157" width="0.2796%" height="15" fill="rgb(211,197,16)" fg:x="9178" fg:w="27"/><text x="95.2997%" y="1167.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (27 samples, 0.28%)</title><rect x="95.0497%" y="1141" width="0.2796%" height="15" fill="rgb(243,99,51)" fg:x="9178" fg:w="27"/><text x="95.2997%" y="1151.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (27 samples, 0.28%)</title><rect x="95.0497%" y="1125" width="0.2796%" height="15" fill="rgb(215,123,29)" fg:x="9178" fg:w="27"/><text x="95.2997%" y="1135.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (27 samples, 0.28%)</title><rect x="95.0497%" y="1109" width="0.2796%" height="15" fill="rgb(239,186,37)" fg:x="9178" fg:w="27"/><text x="95.2997%" y="1119.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (27 samples, 0.28%)</title><rect x="95.0497%" y="1093" width="0.2796%" height="15" fill="rgb(252,136,39)" fg:x="9178" fg:w="27"/><text x="95.2997%" y="1103.50"></text></g><g><title>deno`v8::internal::Heap::SelectGarbageCollector (1 samples, 0.01%)</title><rect x="95.3190%" y="1077" width="0.0104%" height="15" fill="rgb(223,213,32)" fg:x="9204" fg:w="1"/><text x="95.5690%" y="1087.50"></text></g><g><title>0x110012628 (4 samples, 0.04%)</title><rect x="95.3293%" y="1173" width="0.0414%" height="15" fill="rgb(233,115,5)" fg:x="9205" fg:w="4"/><text x="95.5793%" y="1183.50"></text></g><g><title>0x110012954 (1 samples, 0.01%)</title><rect x="95.3708%" y="1173" width="0.0104%" height="15" fill="rgb(207,226,44)" fg:x="9209" fg:w="1"/><text x="95.6208%" y="1183.50"></text></g><g><title>0x11000c95c (1 samples, 0.01%)</title><rect x="95.3811%" y="1157" width="0.0104%" height="15" fill="rgb(208,126,0)" fg:x="9210" fg:w="1"/><text x="95.6311%" y="1167.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (1 samples, 0.01%)</title><rect x="95.3811%" y="1141" width="0.0104%" height="15" fill="rgb(244,66,21)" fg:x="9210" fg:w="1"/><text x="95.6311%" y="1151.50"></text></g><g><title>0x11000c310 (1 samples, 0.01%)</title><rect x="95.3811%" y="1125" width="0.0104%" height="15" fill="rgb(222,97,12)" fg:x="9210" fg:w="1"/><text x="95.6311%" y="1135.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="95.3811%" y="1109" width="0.0104%" height="15" fill="rgb(219,213,19)" fg:x="9210" fg:w="1"/><text x="95.6311%" y="1119.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="95.3811%" y="1093" width="0.0104%" height="15" fill="rgb(252,169,30)" fg:x="9210" fg:w="1"/><text x="95.6311%" y="1103.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="95.3811%" y="1077" width="0.0104%" height="15" fill="rgb(206,32,51)" fg:x="9210" fg:w="1"/><text x="95.6311%" y="1087.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.01%)</title><rect x="95.3915%" y="1157" width="0.0104%" height="15" fill="rgb(250,172,42)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1167.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="95.3915%" y="1141" width="0.0104%" height="15" fill="rgb(209,34,43)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1151.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.01%)</title><rect x="95.3915%" y="1125" width="0.0104%" height="15" fill="rgb(223,11,35)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1135.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.3915%" y="1109" width="0.0104%" height="15" fill="rgb(251,219,26)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1119.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.3915%" y="1093" width="0.0104%" height="15" fill="rgb(231,119,3)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1103.50"></text></g><g><title>deno`bool v8::internal::(anonymous namespace)::IterativelyExecuteAndFinalizeUnoptimizedCompilationJobs&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::AccountingAllocator*, v8::internal::IsCompiledScope*, std::__1::vector&lt;v8::internal::FinalizeUnoptimizedCompilationData, std::__1::allocator&lt;v8::internal::FinalizeUnoptimizedCompilationData&gt; &gt;*, std::__1::vector&lt;v8::internal::DeferredFinalizationJobData, std::__1::allocator (1 samples, 0.01%)</title><rect x="95.3915%" y="1077" width="0.0104%" height="15" fill="rgb(216,97,11)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1087.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ExecuteSingleUnoptimizedCompilationJob(v8::internal::ParseInfo*, v8::internal::FunctionLiteral*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::AccountingAllocator*, std::__1::vector&lt;v8::internal::FunctionLiteral*, std::__1::allocator (1 samples, 0.01%)</title><rect x="95.3915%" y="1061" width="0.0104%" height="15" fill="rgb(223,59,9)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1071.50"></text></g><g><title>deno`v8::internal::interpreter::Interpreter::NewCompilationJob(v8::internal::ParseInfo*, v8::internal::FunctionLiteral*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::AccountingAllocator*, std::__1::vector&lt;v8::internal::FunctionLiteral*, std::__1::allocator (1 samples, 0.01%)</title><rect x="95.3915%" y="1045" width="0.0104%" height="15" fill="rgb(233,93,31)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1055.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="95.3915%" y="1029" width="0.0104%" height="15" fill="rgb(239,81,33)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="95.3915%" y="1013" width="0.0104%" height="15" fill="rgb(213,120,34)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="95.3915%" y="997" width="0.0104%" height="15" fill="rgb(243,49,53)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="95.3915%" y="981" width="0.0104%" height="15" fill="rgb(247,216,33)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="95.3915%" y="965" width="0.0104%" height="15" fill="rgb(226,26,14)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="95.3915%" y="949" width="0.0104%" height="15" fill="rgb(215,49,53)" fg:x="9211" fg:w="1"/><text x="95.6415%" y="959.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3 samples, 0.03%)</title><rect x="95.3811%" y="1173" width="0.0311%" height="15" fill="rgb(245,162,40)" fg:x="9210" fg:w="3"/><text x="95.6311%" y="1183.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.01%)</title><rect x="95.4018%" y="1157" width="0.0104%" height="15" fill="rgb(229,68,17)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1167.50"></text></g><g><title>deno`Builtins_ConstructHandler (1 samples, 0.01%)</title><rect x="95.4018%" y="1141" width="0.0104%" height="15" fill="rgb(213,182,10)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1151.50"></text></g><g><title>deno`Builtins_JSConstructStubGeneric (1 samples, 0.01%)</title><rect x="95.4018%" y="1125" width="0.0104%" height="15" fill="rgb(245,125,30)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1135.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.01%)</title><rect x="95.4018%" y="1109" width="0.0104%" height="15" fill="rgb(232,202,2)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1119.50"></text></g><g><title>deno`v8::internal::Runtime_NewObject (1 samples, 0.01%)</title><rect x="95.4018%" y="1093" width="0.0104%" height="15" fill="rgb(237,140,51)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1103.50"></text></g><g><title>deno`v8::internal::JSObject::New(v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.4018%" y="1077" width="0.0104%" height="15" fill="rgb(236,157,25)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1087.50"></text></g><g><title>deno`v8::internal::JSFunction::GetDerivedMap(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.4018%" y="1061" width="0.0104%" height="15" fill="rgb(219,209,0)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1071.50"></text></g><g><title>deno`v8::internal::JSFunction::EnsureHasInitialMap(v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.4018%" y="1045" width="0.0104%" height="15" fill="rgb(240,116,54)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1055.50"></text></g><g><title>deno`v8::internal::JSFunction::CalculateExpectedNofProperties(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.4018%" y="1029" width="0.0104%" height="15" fill="rgb(216,10,36)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1039.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.4018%" y="1013" width="0.0104%" height="15" fill="rgb(222,72,44)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1023.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.4018%" y="997" width="0.0104%" height="15" fill="rgb(232,159,9)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="1007.50"></text></g><g><title>deno`v8::internal::parsing::ParseFunction(v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.4018%" y="981" width="0.0104%" height="15" fill="rgb(210,39,32)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="991.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::Isolate*, v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.01%)</title><rect x="95.4018%" y="965" width="0.0104%" height="15" fill="rgb(216,194,45)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="975.50"></text></g><g><title>deno`v8::internal::DeclarationScope::Analyze (1 samples, 0.01%)</title><rect x="95.4018%" y="949" width="0.0104%" height="15" fill="rgb(218,18,35)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="959.50"></text></g><g><title>deno`v8::internal::DeclarationScope::AllocateVariables (1 samples, 0.01%)</title><rect x="95.4018%" y="933" width="0.0104%" height="15" fill="rgb(207,83,51)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="943.50"></text></g><g><title>deno`v8::internal::Scope::ResolveVariablesRecursively (1 samples, 0.01%)</title><rect x="95.4018%" y="917" width="0.0104%" height="15" fill="rgb(225,63,43)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="927.50"></text></g><g><title>deno`v8::internal::Scope::ResolveTo (1 samples, 0.01%)</title><rect x="95.4018%" y="901" width="0.0104%" height="15" fill="rgb(207,57,36)" fg:x="9212" fg:w="1"/><text x="95.6518%" y="911.50"></text></g><g><title>deno`Builtins_JSEntry (4,821 samples, 49.93%)</title><rect x="45.5675%" y="1205" width="49.9275%" height="15" fill="rgb(216,99,33)" fg:x="4400" fg:w="4821"/><text x="45.8175%" y="1215.50">deno`Builtins_JSEntry</text></g><g><title>deno`Builtins_JSEntryTrampoline (4,798 samples, 49.69%)</title><rect x="45.8057%" y="1189" width="49.6893%" height="15" fill="rgb(225,42,16)" fg:x="4423" fg:w="4798"/><text x="46.0557%" y="1199.50">deno`Builtins_JSEntryTrampoline</text></g><g><title>deno`Builtins_LoadIC (8 samples, 0.08%)</title><rect x="95.4122%" y="1173" width="0.0829%" height="15" fill="rgb(220,201,45)" fg:x="9213" fg:w="8"/><text x="95.6622%" y="1183.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.01%)</title><rect x="95.4950%" y="1205" width="0.0104%" height="15" fill="rgb(225,33,4)" fg:x="9221" fg:w="1"/><text x="95.7450%" y="1215.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (4,853 samples, 50.26%)</title><rect x="45.2775%" y="1221" width="50.2589%" height="15" fill="rgb(224,33,50)" fg:x="4372" fg:w="4853"/><text x="45.5275%" y="1231.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::intern..</text></g><g><title>deno`v8::internal::SaveContext::SaveContext (3 samples, 0.03%)</title><rect x="95.5054%" y="1205" width="0.0311%" height="15" fill="rgb(246,198,51)" fg:x="9222" fg:w="3"/><text x="95.7554%" y="1215.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (2 samples, 0.02%)</title><rect x="95.5365%" y="1221" width="0.0207%" height="15" fill="rgb(205,22,4)" fg:x="9225" fg:w="2"/><text x="95.7865%" y="1231.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (5 samples, 0.05%)</title><rect x="95.5572%" y="1221" width="0.0518%" height="15" fill="rgb(206,3,8)" fg:x="9227" fg:w="5"/><text x="95.8072%" y="1231.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (3 samples, 0.03%)</title><rect x="95.6089%" y="1221" width="0.0311%" height="15" fill="rgb(251,23,15)" fg:x="9232" fg:w="3"/><text x="95.8589%" y="1231.50"></text></g><g><title>deno`v8::internal::SaveContext::~SaveContext (1 samples, 0.01%)</title><rect x="95.6400%" y="1221" width="0.0104%" height="15" fill="rgb(252,88,28)" fg:x="9235" fg:w="1"/><text x="95.8900%" y="1231.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (2 samples, 0.02%)</title><rect x="95.6504%" y="1221" width="0.0207%" height="15" fill="rgb(212,127,14)" fg:x="9236" fg:w="2"/><text x="95.9004%" y="1231.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (4,876 samples, 50.50%)</title><rect x="45.1843%" y="1237" width="50.4971%" height="15" fill="rgb(247,145,37)" fg:x="4363" fg:w="4876"/><text x="45.4343%" y="1247.50">deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8:..</text></g><g><title>deno`v8::internal::ThrowOnJavascriptExecution::IsAllowed (1 samples, 0.01%)</title><rect x="95.6711%" y="1221" width="0.0104%" height="15" fill="rgb(209,117,53)" fg:x="9238" fg:w="1"/><text x="95.9211%" y="1231.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (2 samples, 0.02%)</title><rect x="95.7229%" y="1221" width="0.0207%" height="15" fill="rgb(212,90,42)" fg:x="9243" fg:w="2"/><text x="95.9729%" y="1231.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (5 samples, 0.05%)</title><rect x="95.7436%" y="1221" width="0.0518%" height="15" fill="rgb(218,164,37)" fg:x="9245" fg:w="5"/><text x="95.9936%" y="1231.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.02%)</title><rect x="95.7746%" y="1205" width="0.0207%" height="15" fill="rgb(246,65,34)" fg:x="9248" fg:w="2"/><text x="96.0246%" y="1215.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (12 samples, 0.12%)</title><rect x="95.6814%" y="1237" width="0.1243%" height="15" fill="rgb(231,100,33)" fg:x="9239" fg:w="12"/><text x="95.9314%" y="1247.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (1 samples, 0.01%)</title><rect x="95.7954%" y="1221" width="0.0104%" height="15" fill="rgb(228,126,14)" fg:x="9250" fg:w="1"/><text x="96.0454%" y="1231.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (4,924 samples, 50.99%)</title><rect x="44.8529%" y="1253" width="50.9942%" height="15" fill="rgb(215,173,21)" fg:x="4331" fg:w="4924"/><text x="45.1029%" y="1263.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (4 samples, 0.04%)</title><rect x="95.8057%" y="1237" width="0.0414%" height="15" fill="rgb(210,6,40)" fg:x="9251" fg:w="4"/><text x="96.0557%" y="1247.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (13 samples, 0.13%)</title><rect x="95.8471%" y="1253" width="0.1346%" height="15" fill="rgb(212,48,18)" fg:x="9255" fg:w="13"/><text x="96.0971%" y="1263.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (9 samples, 0.09%)</title><rect x="95.8886%" y="1237" width="0.0932%" height="15" fill="rgb(230,214,11)" fg:x="9259" fg:w="9"/><text x="96.1386%" y="1247.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (6 samples, 0.06%)</title><rect x="95.9818%" y="1253" width="0.0621%" height="15" fill="rgb(254,105,39)" fg:x="9268" fg:w="6"/><text x="96.2318%" y="1263.50"></text></g><g><title>deno`v8::Integer::New (25 samples, 0.26%)</title><rect x="96.0439%" y="1253" width="0.2589%" height="15" fill="rgb(245,158,5)" fg:x="9274" fg:w="25"/><text x="96.2939%" y="1263.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (4 samples, 0.04%)</title><rect x="96.3028%" y="1253" width="0.0414%" height="15" fill="rgb(249,208,11)" fg:x="9299" fg:w="4"/><text x="96.5528%" y="1263.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (2 samples, 0.02%)</title><rect x="96.3442%" y="1253" width="0.0207%" height="15" fill="rgb(210,39,28)" fg:x="9303" fg:w="2"/><text x="96.5942%" y="1263.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (1 samples, 0.01%)</title><rect x="96.3650%" y="1253" width="0.0104%" height="15" fill="rgb(211,56,53)" fg:x="9305" fg:w="1"/><text x="96.6150%" y="1263.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (11 samples, 0.11%)</title><rect x="96.3753%" y="1253" width="0.1139%" height="15" fill="rgb(226,201,30)" fg:x="9306" fg:w="11"/><text x="96.6253%" y="1263.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (5 samples, 0.05%)</title><rect x="96.4892%" y="1253" width="0.0518%" height="15" fill="rgb(239,101,34)" fg:x="9317" fg:w="5"/><text x="96.7392%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="96.6239%" y="1237" width="0.0414%" height="15" fill="rgb(226,209,5)" fg:x="9330" fg:w="4"/><text x="96.8739%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.12%)</title><rect x="96.6964%" y="1221" width="0.1243%" height="15" fill="rgb(250,105,47)" fg:x="9337" fg:w="12"/><text x="96.9464%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.04%)</title><rect x="96.7792%" y="1205" width="0.0414%" height="15" fill="rgb(230,72,3)" fg:x="9345" fg:w="4"/><text x="97.0292%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.29%)</title><rect x="96.5410%" y="1253" width="0.2900%" height="15" fill="rgb(232,218,39)" fg:x="9322" fg:w="28"/><text x="96.7910%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.17%)</title><rect x="96.6653%" y="1237" width="0.1657%" height="15" fill="rgb(248,166,6)" fg:x="9334" fg:w="16"/><text x="96.9153%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="96.8206%" y="1221" width="0.0104%" height="15" fill="rgb(247,89,20)" fg:x="9349" fg:w="1"/><text x="97.0706%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="96.8310%" y="1253" width="0.0207%" height="15" fill="rgb(248,130,54)" fg:x="9350" fg:w="2"/><text x="97.0810%" y="1263.50"></text></g><g><title>deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (8,521 samples, 88.25%)</title><rect x="8.6268%" y="1269" width="88.2457%" height="15" fill="rgb(234,196,4)" fg:x="833" fg:w="8521"/><text x="8.8768%" y="1279.50">deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="96.8517%" y="1253" width="0.0207%" height="15" fill="rgb(250,143,31)" fg:x="9352" fg:w="2"/><text x="97.1017%" y="1263.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_idle (3 samples, 0.03%)</title><rect x="96.8724%" y="1269" width="0.0311%" height="15" fill="rgb(211,110,34)" fg:x="9354" fg:w="3"/><text x="97.1224%" y="1279.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_running (2 samples, 0.02%)</title><rect x="96.9035%" y="1269" width="0.0207%" height="15" fill="rgb(215,124,48)" fg:x="9357" fg:w="2"/><text x="97.1535%" y="1279.50"></text></g><g><title>deno`v8::Context::Enter (3 samples, 0.03%)</title><rect x="96.9242%" y="1269" width="0.0311%" height="15" fill="rgb(216,46,13)" fg:x="9359" fg:w="3"/><text x="97.1742%" y="1279.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (5 samples, 0.05%)</title><rect x="96.9553%" y="1269" width="0.0518%" height="15" fill="rgb(205,184,25)" fg:x="9362" fg:w="5"/><text x="97.2053%" y="1279.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (3 samples, 0.03%)</title><rect x="97.0070%" y="1269" width="0.0311%" height="15" fill="rgb(228,1,10)" fg:x="9367" fg:w="3"/><text x="97.2570%" y="1279.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (1 samples, 0.01%)</title><rect x="97.0381%" y="1269" width="0.0104%" height="15" fill="rgb(213,116,27)" fg:x="9370" fg:w="1"/><text x="97.2881%" y="1279.50"></text></g><g><title>deno`v8::Integer::New (15 samples, 0.16%)</title><rect x="97.0485%" y="1269" width="0.1553%" height="15" fill="rgb(241,95,50)" fg:x="9371" fg:w="15"/><text x="97.2985%" y="1279.50"></text></g><g><title>deno`v8__Undefined (1 samples, 0.01%)</title><rect x="97.2038%" y="1269" width="0.0104%" height="15" fill="rgb(238,48,32)" fg:x="9386" fg:w="1"/><text x="97.4538%" y="1279.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (8,599 samples, 89.05%)</title><rect x="8.1711%" y="1285" width="89.0534%" height="15" fill="rgb(235,113,49)" fg:x="789" fg:w="8599"/><text x="8.4211%" y="1295.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.01%)</title><rect x="97.2142%" y="1269" width="0.0104%" height="15" fill="rgb(205,127,43)" fg:x="9387" fg:w="1"/><text x="97.4642%" y="1279.50"></text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_running (1 samples, 0.01%)</title><rect x="97.2245%" y="1285" width="0.0104%" height="15" fill="rgb(250,162,2)" fg:x="9388" fg:w="1"/><text x="97.4745%" y="1295.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (2 samples, 0.02%)</title><rect x="97.2349%" y="1285" width="0.0207%" height="15" fill="rgb(220,13,41)" fg:x="9389" fg:w="2"/><text x="97.4849%" y="1295.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (9,358 samples, 96.91%)</title><rect x="0.4246%" y="1301" width="96.9138%" height="15" fill="rgb(249,221,25)" fg:x="41" fg:w="9358"/><text x="0.6746%" y="1311.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.08%)</title><rect x="97.2556%" y="1285" width="0.0829%" height="15" fill="rgb(215,208,19)" fg:x="9391" fg:w="8"/><text x="97.5056%" y="1295.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (1 samples, 0.01%)</title><rect x="97.3384%" y="1301" width="0.0104%" height="15" fill="rgb(236,175,2)" fg:x="9399" fg:w="1"/><text x="97.5884%" y="1311.50"></text></g><g><title>dyld`start (9,412 samples, 97.47%)</title><rect x="0.0000%" y="1365" width="97.4731%" height="15" fill="rgb(241,52,2)" fg:x="0" fg:w="9412"/><text x="0.2500%" y="1375.50">dyld`start</text></g><g><title>deno`main (9,412 samples, 97.47%)</title><rect x="0.0000%" y="1349" width="97.4731%" height="15" fill="rgb(248,140,14)" fg:x="0" fg:w="9412"/><text x="0.2500%" y="1359.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (9,412 samples, 97.47%)</title><rect x="0.0000%" y="1333" width="97.4731%" height="15" fill="rgb(253,22,42)" fg:x="0" fg:w="9412"/><text x="0.2500%" y="1343.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (9,412 samples, 97.47%)</title><rect x="0.0000%" y="1317" width="97.4731%" height="15" fill="rgb(234,61,47)" fg:x="0" fg:w="9412"/><text x="0.2500%" y="1327.50">deno`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.12%)</title><rect x="97.3488%" y="1301" width="0.1243%" height="15" fill="rgb(208,226,15)" fg:x="9400" fg:w="12"/><text x="97.5988%" y="1311.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.01%)</title><rect x="97.4731%" y="1333" width="0.0104%" height="15" fill="rgb(217,221,4)" fg:x="9412" fg:w="1"/><text x="97.7231%" y="1343.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.01%)</title><rect x="97.4731%" y="1317" width="0.0104%" height="15" fill="rgb(212,174,34)" fg:x="9412" fg:w="1"/><text x="97.7231%" y="1327.50"></text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.01%)</title><rect x="97.4731%" y="1301" width="0.0104%" height="15" fill="rgb(253,83,4)" fg:x="9412" fg:w="1"/><text x="97.7231%" y="1311.50"></text></g><g><title>deno`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.01%)</title><rect x="97.4731%" y="1285" width="0.0104%" height="15" fill="rgb(250,195,49)" fg:x="9412" fg:w="1"/><text x="97.7231%" y="1295.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.01%)</title><rect x="97.4731%" y="1269" width="0.0104%" height="15" fill="rgb(241,192,25)" fg:x="9412" fg:w="1"/><text x="97.7231%" y="1279.50"></text></g><g><title>deno`parking_lot_core::parking_lot::ThreadData::new (1 samples, 0.01%)</title><rect x="97.4731%" y="1253" width="0.0104%" height="15" fill="rgb(208,124,10)" fg:x="9412" fg:w="1"/><text x="97.7231%" y="1263.50"></text></g><g><title>deno`parking_lot_core::parking_lot::HashTable::new (1 samples, 0.01%)</title><rect x="97.4731%" y="1237" width="0.0104%" height="15" fill="rgb(222,33,0)" fg:x="9412" fg:w="1"/><text x="97.7231%" y="1247.50"></text></g><g><title>deno`non-virtual thunk to v8::internal::CancelableTask::Run (1 samples, 0.01%)</title><rect x="97.4834%" y="1317" width="0.0104%" height="15" fill="rgb(234,209,28)" fg:x="9413" fg:w="1"/><text x="97.7334%" y="1327.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (1 samples, 0.01%)</title><rect x="97.4938%" y="1221" width="0.0104%" height="15" fill="rgb(224,11,23)" fg:x="9414" fg:w="1"/><text x="97.7438%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (1 samples, 0.01%)</title><rect x="97.4938%" y="1205" width="0.0104%" height="15" fill="rgb(232,99,1)" fg:x="9414" fg:w="1"/><text x="97.7438%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (3 samples, 0.03%)</title><rect x="97.4938%" y="1237" width="0.0311%" height="15" fill="rgb(237,95,45)" fg:x="9414" fg:w="3"/><text x="97.7438%" y="1247.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (2 samples, 0.02%)</title><rect x="97.5041%" y="1221" width="0.0207%" height="15" fill="rgb(208,109,11)" fg:x="9415" fg:w="2"/><text x="97.7541%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (2 samples, 0.02%)</title><rect x="97.5041%" y="1205" width="0.0207%" height="15" fill="rgb(216,190,48)" fg:x="9415" fg:w="2"/><text x="97.7541%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="97.5041%" y="1189" width="0.0207%" height="15" fill="rgb(251,171,36)" fg:x="9415" fg:w="2"/><text x="97.7541%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="97.5041%" y="1173" width="0.0207%" height="15" fill="rgb(230,62,22)" fg:x="9415" fg:w="2"/><text x="97.7541%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleEarly (1 samples, 0.01%)</title><rect x="97.5249%" y="1189" width="0.0104%" height="15" fill="rgb(225,114,35)" fg:x="9417" fg:w="1"/><text x="97.7749%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleEarlyNodeVisitor::Run(v8::internal::ZoneVector (1 samples, 0.01%)</title><rect x="97.5249%" y="1173" width="0.0104%" height="15" fill="rgb(215,118,42)" fg:x="9417" fg:w="1"/><text x="97.7749%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleEarlyNodeVisitor::VisitNode (1 samples, 0.01%)</title><rect x="97.5249%" y="1157" width="0.0104%" height="15" fill="rgb(243,119,21)" fg:x="9417" fg:w="1"/><text x="97.7749%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleEarlyNodeVisitor::PropagateMinimumPositionToNode (1 samples, 0.01%)</title><rect x="97.5249%" y="1141" width="0.0104%" height="15" fill="rgb(252,177,53)" fg:x="9417" fg:w="1"/><text x="97.7749%" y="1151.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (2 samples, 0.02%)</title><rect x="97.5249%" y="1221" width="0.0207%" height="15" fill="rgb(237,209,29)" fg:x="9417" fg:w="2"/><text x="97.7749%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (2 samples, 0.02%)</title><rect x="97.5249%" y="1205" width="0.0207%" height="15" fill="rgb(212,65,23)" fg:x="9417" fg:w="2"/><text x="97.7749%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (1 samples, 0.01%)</title><rect x="97.5352%" y="1189" width="0.0104%" height="15" fill="rgb(230,222,46)" fg:x="9418" fg:w="1"/><text x="97.7852%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (1 samples, 0.01%)</title><rect x="97.5352%" y="1173" width="0.0104%" height="15" fill="rgb(215,135,32)" fg:x="9418" fg:w="1"/><text x="97.7852%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (1 samples, 0.01%)</title><rect x="97.5352%" y="1157" width="0.0104%" height="15" fill="rgb(246,101,22)" fg:x="9418" fg:w="1"/><text x="97.7852%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::SplitNode (1 samples, 0.01%)</title><rect x="97.5352%" y="1141" width="0.0104%" height="15" fill="rgb(206,107,13)" fg:x="9418" fg:w="1"/><text x="97.7852%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::CloneNode (1 samples, 0.01%)</title><rect x="97.5352%" y="1125" width="0.0104%" height="15" fill="rgb(250,100,44)" fg:x="9418" fg:w="1"/><text x="97.7852%" y="1135.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (1 samples, 0.01%)</title><rect x="97.5456%" y="1221" width="0.0104%" height="15" fill="rgb(231,147,38)" fg:x="9419" fg:w="1"/><text x="97.7956%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (1 samples, 0.01%)</title><rect x="97.5456%" y="1205" width="0.0104%" height="15" fill="rgb(229,8,40)" fg:x="9419" fg:w="1"/><text x="97.7956%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="97.5456%" y="1189" width="0.0104%" height="15" fill="rgb(221,135,30)" fg:x="9419" fg:w="1"/><text x="97.7956%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.01%)</title><rect x="97.5456%" y="1173" width="0.0104%" height="15" fill="rgb(249,193,18)" fg:x="9419" fg:w="1"/><text x="97.7956%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.01%)</title><rect x="97.5456%" y="1157" width="0.0104%" height="15" fill="rgb(209,133,39)" fg:x="9419" fg:w="1"/><text x="97.7956%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::DeadCodeElimination::ReduceLoopOrMerge (1 samples, 0.01%)</title><rect x="97.5456%" y="1141" width="0.0104%" height="15" fill="rgb(232,100,14)" fg:x="9419" fg:w="1"/><text x="97.7956%" y="1151.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (1 samples, 0.01%)</title><rect x="97.5559%" y="1221" width="0.0104%" height="15" fill="rgb(224,185,1)" fg:x="9420" fg:w="1"/><text x="97.8059%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (1 samples, 0.01%)</title><rect x="97.5559%" y="1205" width="0.0104%" height="15" fill="rgb(223,139,8)" fg:x="9420" fg:w="1"/><text x="97.8059%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisReducer::VerifyReplacement (1 samples, 0.01%)</title><rect x="97.5559%" y="1189" width="0.0104%" height="15" fill="rgb(232,213,38)" fg:x="9420" fg:w="1"/><text x="97.8059%" y="1199.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GenericLoweringPhase&gt; (2 samples, 0.02%)</title><rect x="97.5663%" y="1221" width="0.0207%" height="15" fill="rgb(207,94,22)" fg:x="9421" fg:w="2"/><text x="97.8163%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::GenericLoweringPhase::Run (2 samples, 0.02%)</title><rect x="97.5663%" y="1205" width="0.0207%" height="15" fill="rgb(219,183,54)" fg:x="9421" fg:w="2"/><text x="97.8163%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="97.5663%" y="1189" width="0.0207%" height="15" fill="rgb(216,185,54)" fg:x="9421" fg:w="2"/><text x="97.8163%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="97.5663%" y="1173" width="0.0207%" height="15" fill="rgb(254,217,39)" fg:x="9421" fg:w="2"/><text x="97.8163%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.01%)</title><rect x="97.5766%" y="1157" width="0.0104%" height="15" fill="rgb(240,178,23)" fg:x="9422" fg:w="1"/><text x="97.8266%" y="1167.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (1 samples, 0.01%)</title><rect x="97.5870%" y="1221" width="0.0104%" height="15" fill="rgb(218,11,47)" fg:x="9423" fg:w="1"/><text x="97.8370%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (1 samples, 0.01%)</title><rect x="97.5870%" y="1205" width="0.0104%" height="15" fill="rgb(218,51,51)" fg:x="9423" fg:w="1"/><text x="97.8370%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="97.5870%" y="1189" width="0.0104%" height="15" fill="rgb(238,126,27)" fg:x="9423" fg:w="1"/><text x="97.8370%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.01%)</title><rect x="97.5870%" y="1173" width="0.0104%" height="15" fill="rgb(249,202,22)" fg:x="9423" fg:w="1"/><text x="97.8370%" y="1183.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MachineOperatorOptimizationPhase&gt; (1 samples, 0.01%)</title><rect x="97.5973%" y="1221" width="0.0104%" height="15" fill="rgb(254,195,49)" fg:x="9424" fg:w="1"/><text x="97.8473%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::MachineOperatorOptimizationPhase::Run (1 samples, 0.01%)</title><rect x="97.5973%" y="1205" width="0.0104%" height="15" fill="rgb(208,123,14)" fg:x="9424" fg:w="1"/><text x="97.8473%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="97.5973%" y="1189" width="0.0104%" height="15" fill="rgb(224,200,8)" fg:x="9424" fg:w="1"/><text x="97.8473%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.01%)</title><rect x="97.5973%" y="1173" width="0.0104%" height="15" fill="rgb(217,61,36)" fg:x="9424" fg:w="1"/><text x="97.8473%" y="1183.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (1 samples, 0.01%)</title><rect x="97.6077%" y="1221" width="0.0104%" height="15" fill="rgb(206,35,45)" fg:x="9425" fg:w="1"/><text x="97.8577%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLoweringPhase::Run (1 samples, 0.01%)</title><rect x="97.6077%" y="1205" width="0.0104%" height="15" fill="rgb(217,65,33)" fg:x="9425" fg:w="1"/><text x="97.8577%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (1 samples, 0.01%)</title><rect x="97.6077%" y="1189" width="0.0104%" height="15" fill="rgb(222,158,48)" fg:x="9425" fg:w="1"/><text x="97.8577%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunLowerPhase (1 samples, 0.01%)</title><rect x="97.6077%" y="1173" width="0.0104%" height="15" fill="rgb(254,2,54)" fg:x="9425" fg:w="1"/><text x="97.8577%" y="1183.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::VisitNode&lt;(v8::internal::compiler::Phase)2&gt; (1 samples, 0.01%)</title><rect x="97.6077%" y="1157" width="0.0104%" height="15" fill="rgb(250,143,38)" fg:x="9425" fg:w="1"/><text x="97.8577%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::CommonOperatorBuilder::Branch (1 samples, 0.01%)</title><rect x="97.6077%" y="1141" width="0.0104%" height="15" fill="rgb(248,25,0)" fg:x="9425" fg:w="1"/><text x="97.8577%" y="1151.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::StoreStoreEliminationPhase&gt; (1 samples, 0.01%)</title><rect x="97.6181%" y="1221" width="0.0104%" height="15" fill="rgb(206,152,27)" fg:x="9426" fg:w="1"/><text x="97.8681%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::StoreStoreEliminationPhase::Run (1 samples, 0.01%)</title><rect x="97.6181%" y="1205" width="0.0104%" height="15" fill="rgb(240,77,30)" fg:x="9426" fg:w="1"/><text x="97.8681%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (1 samples, 0.01%)</title><rect x="97.6181%" y="1189" width="0.0104%" height="15" fill="rgb(231,5,3)" fg:x="9426" fg:w="1"/><text x="97.8681%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::LoopVariableOptimizer::Run (1 samples, 0.01%)</title><rect x="97.6284%" y="1189" width="0.0104%" height="15" fill="rgb(207,226,32)" fg:x="9427" fg:w="1"/><text x="97.8784%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::IsControlEdge (1 samples, 0.01%)</title><rect x="97.6284%" y="1173" width="0.0104%" height="15" fill="rgb(222,207,47)" fg:x="9427" fg:w="1"/><text x="97.8784%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasFrameStateInput (1 samples, 0.01%)</title><rect x="97.6284%" y="1157" width="0.0104%" height="15" fill="rgb(229,115,45)" fg:x="9427" fg:w="1"/><text x="97.8784%" y="1167.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TyperPhase, v8::internal::compiler::Typer*&gt; (2 samples, 0.02%)</title><rect x="97.6284%" y="1221" width="0.0207%" height="15" fill="rgb(224,191,6)" fg:x="9427" fg:w="2"/><text x="97.8784%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::TyperPhase::Run (2 samples, 0.02%)</title><rect x="97.6284%" y="1205" width="0.0207%" height="15" fill="rgb(230,227,24)" fg:x="9427" fg:w="2"/><text x="97.8784%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Run(v8::internal::ZoneVector (1 samples, 0.01%)</title><rect x="97.6388%" y="1189" width="0.0104%" height="15" fill="rgb(228,80,19)" fg:x="9428" fg:w="1"/><text x="97.8888%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.01%)</title><rect x="97.6388%" y="1173" width="0.0104%" height="15" fill="rgb(247,229,0)" fg:x="9428" fg:w="1"/><text x="97.8888%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.01%)</title><rect x="97.6388%" y="1157" width="0.0104%" height="15" fill="rgb(237,194,15)" fg:x="9428" fg:w="1"/><text x="97.8888%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.01%)</title><rect x="97.6388%" y="1141" width="0.0104%" height="15" fill="rgb(219,203,20)" fg:x="9428" fg:w="1"/><text x="97.8888%" y="1151.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::BuildLiveRangesPhase&gt; (1 samples, 0.01%)</title><rect x="97.6491%" y="1189" width="0.0104%" height="15" fill="rgb(234,128,8)" fg:x="9429" fg:w="1"/><text x="97.8991%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeBuilder::BuildLiveRanges (1 samples, 0.01%)</title><rect x="97.6491%" y="1173" width="0.0104%" height="15" fill="rgb(248,202,8)" fg:x="9429" fg:w="1"/><text x="97.8991%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeBuilder::ProcessInstructions (1 samples, 0.01%)</title><rect x="97.6491%" y="1157" width="0.0104%" height="15" fill="rgb(206,104,37)" fg:x="9429" fg:w="1"/><text x="97.8991%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::TopTierRegisterAllocationData::GetOrCreateLiveRangeFor (1 samples, 0.01%)</title><rect x="97.6491%" y="1141" width="0.0104%" height="15" fill="rgb(223,8,27)" fg:x="9429" fg:w="1"/><text x="97.8991%" y="1151.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (17 samples, 0.18%)</title><rect x="97.4938%" y="1301" width="0.1761%" height="15" fill="rgb(216,217,28)" fg:x="9414" fg:w="17"/><text x="97.7438%" y="1311.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (17 samples, 0.18%)</title><rect x="97.4938%" y="1285" width="0.1761%" height="15" fill="rgb(249,199,1)" fg:x="9414" fg:w="17"/><text x="97.7438%" y="1295.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (17 samples, 0.18%)</title><rect x="97.4938%" y="1269" width="0.1761%" height="15" fill="rgb(240,85,17)" fg:x="9414" fg:w="17"/><text x="97.7438%" y="1279.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (17 samples, 0.18%)</title><rect x="97.4938%" y="1253" width="0.1761%" height="15" fill="rgb(206,108,45)" fg:x="9414" fg:w="17"/><text x="97.7438%" y="1263.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (14 samples, 0.14%)</title><rect x="97.5249%" y="1237" width="0.1450%" height="15" fill="rgb(245,210,41)" fg:x="9417" fg:w="14"/><text x="97.7749%" y="1247.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (2 samples, 0.02%)</title><rect x="97.6491%" y="1221" width="0.0207%" height="15" fill="rgb(206,13,37)" fg:x="9429" fg:w="2"/><text x="97.8991%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (2 samples, 0.02%)</title><rect x="97.6491%" y="1205" width="0.0207%" height="15" fill="rgb(250,61,18)" fg:x="9429" fg:w="2"/><text x="97.8991%" y="1215.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ResolveControlFlowPhase&gt; (1 samples, 0.01%)</title><rect x="97.6595%" y="1189" width="0.0104%" height="15" fill="rgb(235,172,48)" fg:x="9430" fg:w="1"/><text x="97.9095%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeConnector::ResolveControlFlow (1 samples, 0.01%)</title><rect x="97.6595%" y="1173" width="0.0104%" height="15" fill="rgb(249,201,17)" fg:x="9430" fg:w="1"/><text x="97.9095%" y="1183.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (6 samples, 0.06%)</title><rect x="97.6698%" y="1301" width="0.0621%" height="15" fill="rgb(219,208,6)" fg:x="9431" fg:w="6"/><text x="97.9198%" y="1311.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (6 samples, 0.06%)</title><rect x="97.6698%" y="1285" width="0.0621%" height="15" fill="rgb(248,31,23)" fg:x="9431" fg:w="6"/><text x="97.9198%" y="1295.50"></text></g><g><title>deno`DYLD-STUB$$free (4 samples, 0.04%)</title><rect x="97.7320%" y="1285" width="0.0414%" height="15" fill="rgb(245,15,42)" fg:x="9437" fg:w="4"/><text x="97.9820%" y="1295.50"></text></g><g><title>deno`operator delete(void*) (1 samples, 0.01%)</title><rect x="97.7734%" y="1285" width="0.0104%" height="15" fill="rgb(222,217,39)" fg:x="9441" fg:w="1"/><text x="98.0234%" y="1295.50"></text></g><g><title>deno`std::__1::__shared_weak_count::__release_weak (3 samples, 0.03%)</title><rect x="97.7838%" y="1285" width="0.0311%" height="15" fill="rgb(210,219,27)" fg:x="9442" fg:w="3"/><text x="98.0338%" y="1295.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="97.8770%" y="1253" width="0.0104%" height="15" fill="rgb(252,166,36)" fg:x="9451" fg:w="1"/><text x="98.1270%" y="1263.50"></text></g><g><title>deno`v8::internal::GlobalBackingStoreRegistry::Unregister (2 samples, 0.02%)</title><rect x="97.9598%" y="1237" width="0.0207%" height="15" fill="rgb(245,132,34)" fg:x="9459" fg:w="2"/><text x="98.2098%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 0.36%)</title><rect x="97.9805%" y="1237" width="0.3625%" height="15" fill="rgb(236,54,3)" fg:x="9461" fg:w="35"/><text x="98.2305%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.18%)</title><rect x="98.1669%" y="1221" width="0.1761%" height="15" fill="rgb(241,173,43)" fg:x="9479" fg:w="17"/><text x="98.4169%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="98.3430%" y="1237" width="0.0207%" height="15" fill="rgb(215,190,9)" fg:x="9496" fg:w="2"/><text x="98.5930%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.14%)</title><rect x="98.3637%" y="1237" width="0.1450%" height="15" fill="rgb(242,101,16)" fg:x="9498" fg:w="14"/><text x="98.6137%" y="1247.50"></text></g><g><title>deno`v8::internal::BackingStore::~BackingStore (62 samples, 0.64%)</title><rect x="97.8873%" y="1253" width="0.6421%" height="15" fill="rgb(223,190,21)" fg:x="9452" fg:w="62"/><text x="98.1373%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="98.5087%" y="1237" width="0.0207%" height="15" fill="rgb(215,228,25)" fg:x="9512" fg:w="2"/><text x="98.7587%" y="1247.50"></text></g><g><title>deno`v8::internal::GlobalBackingStoreRegistry::Unregister (3 samples, 0.03%)</title><rect x="98.5294%" y="1253" width="0.0311%" height="15" fill="rgb(225,36,22)" fg:x="9514" fg:w="3"/><text x="98.7794%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.01%)</title><rect x="98.5605%" y="1253" width="0.0104%" height="15" fill="rgb(251,106,46)" fg:x="9517" fg:w="1"/><text x="98.8105%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="98.5708%" y="1253" width="0.0104%" height="15" fill="rgb(208,90,1)" fg:x="9518" fg:w="1"/><text x="98.8208%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="98.5812%" y="1253" width="0.0207%" height="15" fill="rgb(243,10,4)" fg:x="9519" fg:w="2"/><text x="98.8312%" y="1263.50"></text></g><g><title>deno`std::__1::__shared_ptr_pointer&lt;v8::internal::BackingStore*, std::__1::default_delete&lt;v8::internal::BackingStore&gt;, std::__1::allocator&lt;v8::internal::BackingStore&gt; &gt;::__on_zero_shared (71 samples, 0.74%)</title><rect x="97.8770%" y="1269" width="0.7353%" height="15" fill="rgb(212,137,27)" fg:x="9451" fg:w="71"/><text x="98.1270%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="98.6019%" y="1253" width="0.0104%" height="15" fill="rgb(231,220,49)" fg:x="9521" fg:w="1"/><text x="98.8519%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`free (63 samples, 0.65%)</title><rect x="98.6123%" y="1269" width="0.6524%" height="15" fill="rgb(237,96,20)" fg:x="9522" fg:w="63"/><text x="98.8623%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (24 samples, 0.25%)</title><rect x="99.0162%" y="1253" width="0.2486%" height="15" fill="rgb(239,229,30)" fg:x="9561" fg:w="24"/><text x="99.2662%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.04%)</title><rect x="99.2647%" y="1269" width="0.0414%" height="15" fill="rgb(219,65,33)" fg:x="9585" fg:w="4"/><text x="99.5147%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.36%)</title><rect x="99.3061%" y="1269" width="0.3625%" height="15" fill="rgb(243,134,7)" fg:x="9589" fg:w="35"/><text x="99.5561%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (9 samples, 0.09%)</title><rect x="99.5754%" y="1253" width="0.0932%" height="15" fill="rgb(216,177,54)" fg:x="9615" fg:w="9"/><text x="99.8254%" y="1263.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.09%)</title><rect x="99.5754%" y="1237" width="0.0932%" height="15" fill="rgb(211,160,20)" fg:x="9615" fg:w="9"/><text x="99.8254%" y="1247.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::SweepingJob::SweepYoung (184 samples, 1.91%)</title><rect x="97.8148%" y="1285" width="1.9056%" height="15" fill="rgb(239,85,39)" fg:x="9445" fg:w="184"/><text x="98.0648%" y="1295.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.05%)</title><rect x="99.6686%" y="1269" width="0.0518%" height="15" fill="rgb(232,125,22)" fg:x="9624" fg:w="5"/><text x="99.9186%" y="1279.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.01%)</title><rect x="99.7204%" y="1285" width="0.0104%" height="15" fill="rgb(244,57,34)" fg:x="9629" fg:w="1"/><text x="99.9704%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.08%)</title><rect x="99.7307%" y="1285" width="0.0829%" height="15" fill="rgb(214,203,32)" fg:x="9630" fg:w="8"/><text x="99.9807%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.10%)</title><rect x="99.8136%" y="1285" width="0.1036%" height="15" fill="rgb(207,58,43)" fg:x="9638" fg:w="10"/><text x="100.0636%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.06%)</title><rect x="99.9171%" y="1285" width="0.0621%" height="15" fill="rgb(215,193,15)" fg:x="9648" fg:w="6"/><text x="100.1671%" y="1295.50"></text></g><g><title>all (9,656 samples, 100%)</title><rect x="0.0000%" y="1381" width="100.0000%" height="15" fill="rgb(232,15,44)" fg:x="0" fg:w="9656"/><text x="0.2500%" y="1391.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (244 samples, 2.53%)</title><rect x="97.4731%" y="1365" width="2.5269%" height="15" fill="rgb(212,3,48)" fg:x="9412" fg:w="244"/><text x="97.7231%" y="1375.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (244 samples, 2.53%)</title><rect x="97.4731%" y="1349" width="2.5269%" height="15" fill="rgb(218,128,7)" fg:x="9412" fg:w="244"/><text x="97.7231%" y="1359.50">li..</text></g><g><title>deno`v8::base::ThreadEntry (243 samples, 2.52%)</title><rect x="97.4834%" y="1333" width="2.5166%" height="15" fill="rgb(226,216,39)" fg:x="9413" fg:w="243"/><text x="97.7334%" y="1343.50">de..</text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (242 samples, 2.51%)</title><rect x="97.4938%" y="1317" width="2.5062%" height="15" fill="rgb(243,47,51)" fg:x="9414" fg:w="242"/><text x="97.7438%" y="1327.50">de..</text></g><g><title>deno`void std::__1::__function::__policy_invoker&lt;void ()&gt;::__call_impl&lt;std::__1::__function::__default_alloc_func&lt;v8::internal::ArrayBufferSweeper::RequestSweep(v8::internal::ArrayBufferSweeper::SweepingType)::$_0, void ()&gt; &gt; (219 samples, 2.27%)</title><rect x="97.7320%" y="1301" width="2.2680%" height="15" fill="rgb(241,183,40)" fg:x="9437" fg:w="219"/><text x="97.9820%" y="1311.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="99.9793%" y="1285" width="0.0207%" height="15" fill="rgb(231,217,32)" fg:x="9654" fg:w="2"/><text x="100.2293%" y="1295.50"></text></g></svg></svg>