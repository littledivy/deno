<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="581.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="13165"><g><title>http_bench_json_ops`DYLD-STUB$$memcpy (7 samples, 0.05%)</title><rect x="0.0000%" y="485" width="0.0532%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="495.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.08%)</title><rect x="0.2203%" y="453" width="0.0836%" height="15" fill="rgb(217,0,24)" fg:x="29" fg:w="11"/><text x="0.4703%" y="463.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="0.3038%" y="453" width="0.0304%" height="15" fill="rgb(221,193,54)" fg:x="40" fg:w="4"/><text x="0.5538%" y="463.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_core::runtime::ModEvaluate&gt;&gt; (2 samples, 0.02%)</title><rect x="0.3342%" y="453" width="0.0152%" height="15" fill="rgb(248,212,6)" fg:x="44" fg:w="2"/><text x="0.5842%" y="463.50"></text></g><g><title>http_bench_json_ops`deno_core::ops::OpResult::to_v8 (3 samples, 0.02%)</title><rect x="0.3646%" y="453" width="0.0228%" height="15" fill="rgb(208,68,35)" fg:x="48" fg:w="3"/><text x="0.6146%" y="463.50"></text></g><g><title>http_bench_json_ops`futures_task::waker::clone_arc_raw (4 samples, 0.03%)</title><rect x="3.3498%" y="373" width="0.0304%" height="15" fill="rgb(232,128,0)" fg:x="441" fg:w="4"/><text x="3.5998%" y="383.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (65 samples, 0.49%)</title><rect x="3.0687%" y="389" width="0.4937%" height="15" fill="rgb(207,160,47)" fg:x="404" fg:w="65"/><text x="3.3187%" y="399.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::registration::Registration::poll_ready (24 samples, 0.18%)</title><rect x="3.3802%" y="373" width="0.1823%" height="15" fill="rgb(228,23,34)" fg:x="445" fg:w="24"/><text x="3.6302%" y="383.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$recv (4 samples, 0.03%)</title><rect x="3.5625%" y="389" width="0.0304%" height="15" fill="rgb(218,30,26)" fg:x="469" fg:w="4"/><text x="3.8125%" y="399.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::registration::Registration::poll_ready (11 samples, 0.08%)</title><rect x="3.6005%" y="389" width="0.0836%" height="15" fill="rgb(220,122,19)" fg:x="474" fg:w="11"/><text x="3.8505%" y="399.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (4 samples, 0.03%)</title><rect x="3.6840%" y="389" width="0.0304%" height="15" fill="rgb(250,228,42)" fg:x="485" fg:w="4"/><text x="3.9340%" y="399.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,283 samples, 40.13%)</title><rect x="2.8333%" y="405" width="40.1291%" height="15" fill="rgb(240,193,28)" fg:x="373" fg:w="5283"/><text x="3.0833%" y="415.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>libsystem_kernel.dylib`__recvfrom (5,166 samples, 39.24%)</title><rect x="3.7220%" y="389" width="39.2404%" height="15" fill="rgb(216,20,37)" fg:x="490" fg:w="5166"/><text x="3.9720%" y="399.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="43.0536%" y="373" width="0.0152%" height="15" fill="rgb(206,188,39)" fg:x="5668" fg:w="2"/><text x="43.3036%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (34 samples, 0.26%)</title><rect x="43.0915%" y="357" width="0.2583%" height="15" fill="rgb(217,207,13)" fg:x="5673" fg:w="34"/><text x="43.3415%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.13%)</title><rect x="43.2207%" y="341" width="0.1291%" height="15" fill="rgb(231,73,38)" fg:x="5690" fg:w="17"/><text x="43.4707%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (52 samples, 0.39%)</title><rect x="42.9700%" y="389" width="0.3950%" height="15" fill="rgb(225,20,46)" fg:x="5657" fg:w="52"/><text x="43.2200%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (39 samples, 0.30%)</title><rect x="43.0687%" y="373" width="0.2962%" height="15" fill="rgb(210,31,41)" fg:x="5670" fg:w="39"/><text x="43.3187%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="43.3498%" y="357" width="0.0152%" height="15" fill="rgb(221,200,47)" fg:x="5707" fg:w="2"/><text x="43.5998%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.04%)</title><rect x="43.3650%" y="389" width="0.0380%" height="15" fill="rgb(226,26,5)" fg:x="5709" fg:w="5"/><text x="43.6150%" y="399.50"></text></g><g><title>http_bench_json_ops`&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob (59 samples, 0.45%)</title><rect x="42.9624%" y="405" width="0.4482%" height="15" fill="rgb(249,33,26)" fg:x="5656" fg:w="59"/><text x="43.2124%" y="415.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="43.4106%" y="405" width="0.0152%" height="15" fill="rgb(235,183,28)" fg:x="5715" fg:w="2"/><text x="43.6606%" y="415.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="43.4258%" y="405" width="0.0152%" height="15" fill="rgb(221,5,38)" fg:x="5717" fg:w="2"/><text x="43.6758%" y="415.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob::{{closure}}&gt;&gt; (4 samples, 0.03%)</title><rect x="43.4409%" y="405" width="0.0304%" height="15" fill="rgb(247,18,42)" fg:x="5719" fg:w="4"/><text x="43.6909%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.16%)</title><rect x="43.4789%" y="405" width="0.1595%" height="15" fill="rgb(241,131,45)" fg:x="5724" fg:w="21"/><text x="43.7289%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.07%)</title><rect x="43.5701%" y="389" width="0.0684%" height="15" fill="rgb(249,31,29)" fg:x="5736" fg:w="9"/><text x="43.8201%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.11%)</title><rect x="43.6384%" y="405" width="0.1063%" height="15" fill="rgb(225,111,53)" fg:x="5745" fg:w="14"/><text x="43.8884%" y="415.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,514 samples, 41.88%)</title><rect x="1.8838%" y="421" width="41.8838%" height="15" fill="rgb(238,160,17)" fg:x="248" fg:w="5514"/><text x="2.1338%" y="431.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as c..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="43.7448%" y="405" width="0.0228%" height="15" fill="rgb(214,148,48)" fg:x="5759" fg:w="3"/><text x="43.9948%" y="415.50"></text></g><g><title>http_bench_json_ops`&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob (2 samples, 0.02%)</title><rect x="43.7676%" y="421" width="0.0152%" height="15" fill="rgb(232,36,49)" fg:x="5762" fg:w="2"/><text x="44.0176%" y="431.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob::{{closure}}&gt;&gt; (2 samples, 0.02%)</title><rect x="43.7828%" y="421" width="0.0152%" height="15" fill="rgb(209,103,24)" fg:x="5764" fg:w="2"/><text x="44.0328%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.03%)</title><rect x="43.7979%" y="421" width="0.0304%" height="15" fill="rgb(229,88,8)" fg:x="5766" fg:w="4"/><text x="44.0479%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="43.8283%" y="421" width="0.0152%" height="15" fill="rgb(213,181,19)" fg:x="5770" fg:w="2"/><text x="44.0783%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="43.8435%" y="421" width="0.0304%" height="15" fill="rgb(254,191,54)" fg:x="5772" fg:w="4"/><text x="44.0935%" y="431.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,586 samples, 42.43%)</title><rect x="1.4584%" y="437" width="42.4307%" height="15" fill="rgb(241,83,37)" fg:x="192" fg:w="5586"/><text x="1.7084%" y="447.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as co..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="43.8739%" y="421" width="0.0152%" height="15" fill="rgb(233,36,39)" fg:x="5776" fg:w="2"/><text x="44.1239%" y="431.50"></text></g><g><title>http_bench_json_ops`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.11%)</title><rect x="43.8891%" y="437" width="0.1063%" height="15" fill="rgb(226,3,54)" fg:x="5778" fg:w="14"/><text x="44.1391%" y="447.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (4 samples, 0.03%)</title><rect x="43.9954%" y="437" width="0.0304%" height="15" fill="rgb(245,192,40)" fg:x="5792" fg:w="4"/><text x="44.2454%" y="447.50"></text></g><g><title>http_bench_json_ops`alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.02%)</title><rect x="44.0258%" y="437" width="0.0228%" height="15" fill="rgb(238,167,29)" fg:x="5796" fg:w="3"/><text x="44.2758%" y="447.50"></text></g><g><title>http_bench_json_ops`core::hash::BuildHasher::hash_one (14 samples, 0.11%)</title><rect x="44.0486%" y="437" width="0.1063%" height="15" fill="rgb(232,182,51)" fg:x="5799" fg:w="14"/><text x="44.2986%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (2 samples, 0.02%)</title><rect x="44.1550%" y="437" width="0.0152%" height="15" fill="rgb(231,60,39)" fg:x="5813" fg:w="2"/><text x="44.4050%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (11 samples, 0.08%)</title><rect x="44.1701%" y="437" width="0.0836%" height="15" fill="rgb(208,69,12)" fg:x="5815" fg:w="11"/><text x="44.4201%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (2 samples, 0.02%)</title><rect x="44.2385%" y="421" width="0.0152%" height="15" fill="rgb(235,93,37)" fg:x="5824" fg:w="2"/><text x="44.4885%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (11 samples, 0.08%)</title><rect x="44.3980%" y="405" width="0.0836%" height="15" fill="rgb(213,116,39)" fg:x="5845" fg:w="11"/><text x="44.6480%" y="415.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (33 samples, 0.25%)</title><rect x="44.3221%" y="421" width="0.2507%" height="15" fill="rgb(222,207,29)" fg:x="5835" fg:w="33"/><text x="44.5721%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::Integer::NewFromUnsigned (12 samples, 0.09%)</title><rect x="44.4816%" y="405" width="0.0912%" height="15" fill="rgb(206,96,30)" fg:x="5856" fg:w="12"/><text x="44.7316%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (7 samples, 0.05%)</title><rect x="44.5196%" y="389" width="0.0532%" height="15" fill="rgb(218,138,4)" fg:x="5861" fg:w="7"/><text x="44.7696%" y="399.50"></text></g><g><title>http_bench_json_ops`deno_core::ops::OpResult::to_v8 (44 samples, 0.33%)</title><rect x="44.2537%" y="437" width="0.3342%" height="15" fill="rgb(250,191,14)" fg:x="5826" fg:w="44"/><text x="44.5037%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::Integer::NewFromUnsigned (2 samples, 0.02%)</title><rect x="44.5727%" y="421" width="0.0152%" height="15" fill="rgb(239,60,40)" fg:x="5868" fg:w="2"/><text x="44.8227%" y="431.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRealm::handle_scope (2 samples, 0.02%)</title><rect x="44.5879%" y="437" width="0.0152%" height="15" fill="rgb(206,27,48)" fg:x="5870" fg:w="2"/><text x="44.8379%" y="447.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::check_promise_exceptions (3 samples, 0.02%)</title><rect x="44.6031%" y="437" width="0.0228%" height="15" fill="rgb(225,35,8)" fg:x="5872" fg:w="3"/><text x="44.8531%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::Context::Enter (12 samples, 0.09%)</title><rect x="44.6791%" y="405" width="0.0912%" height="15" fill="rgb(250,213,24)" fg:x="5882" fg:w="12"/><text x="44.9291%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScopeImplementer::EnterContext (3 samples, 0.02%)</title><rect x="44.7474%" y="389" width="0.0228%" height="15" fill="rgb(247,123,22)" fg:x="5891" fg:w="3"/><text x="44.9974%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::CreateHandle (3 samples, 0.02%)</title><rect x="44.7702%" y="405" width="0.0228%" height="15" fill="rgb(231,138,38)" fg:x="5894" fg:w="3"/><text x="45.0202%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScope::Extend (2 samples, 0.02%)</title><rect x="44.8006%" y="405" width="0.0152%" height="15" fill="rgb(231,145,46)" fg:x="5898" fg:w="2"/><text x="45.0506%" y="415.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (6 samples, 0.05%)</title><rect x="44.8386%" y="389" width="0.0456%" height="15" fill="rgb(251,118,11)" fg:x="5903" fg:w="6"/><text x="45.0886%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::~HandleScope (3 samples, 0.02%)</title><rect x="44.8614%" y="373" width="0.0228%" height="15" fill="rgb(217,147,25)" fg:x="5906" fg:w="3"/><text x="45.1114%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScope::DeleteExtensions (2 samples, 0.02%)</title><rect x="44.8690%" y="357" width="0.0152%" height="15" fill="rgb(247,81,37)" fg:x="5907" fg:w="2"/><text x="45.1190%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::Context::Exit (2 samples, 0.02%)</title><rect x="44.8842%" y="389" width="0.0152%" height="15" fill="rgb(209,12,38)" fg:x="5909" fg:w="2"/><text x="45.1342%" y="399.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRealm::handle_scope (35 samples, 0.27%)</title><rect x="44.6411%" y="421" width="0.2659%" height="15" fill="rgb(227,1,9)" fg:x="5877" fg:w="35"/><text x="44.8911%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::scope::data::ScopeData::try_exit_scope (11 samples, 0.08%)</title><rect x="44.8234%" y="405" width="0.0836%" height="15" fill="rgb(248,47,43)" fg:x="5901" fg:w="11"/><text x="45.0734%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::Context::Enter (2 samples, 0.02%)</title><rect x="44.9070%" y="421" width="0.0152%" height="15" fill="rgb(221,10,30)" fg:x="5912" fg:w="2"/><text x="45.1570%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::HandleScope (2 samples, 0.02%)</title><rect x="44.9297%" y="421" width="0.0152%" height="15" fill="rgb(210,229,1)" fg:x="5915" fg:w="2"/><text x="45.1797%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (7 samples, 0.05%)</title><rect x="44.9525%" y="421" width="0.0532%" height="15" fill="rgb(222,148,37)" fg:x="5918" fg:w="7"/><text x="45.2025%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::MoveGlobal (9 samples, 0.07%)</title><rect x="45.0057%" y="421" width="0.0684%" height="15" fill="rgb(234,67,33)" fg:x="5925" fg:w="9"/><text x="45.2557%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (2 samples, 0.02%)</title><rect x="45.0741%" y="421" width="0.0152%" height="15" fill="rgb(247,98,35)" fg:x="5934" fg:w="2"/><text x="45.3241%" y="431.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::handle_scope (69 samples, 0.52%)</title><rect x="44.6259%" y="437" width="0.5241%" height="15" fill="rgb(247,138,52)" fg:x="5875" fg:w="69"/><text x="44.8759%" y="447.50"></text></g><g><title>http_bench_json_ops`v8__Global__New (8 samples, 0.06%)</title><rect x="45.0893%" y="421" width="0.0608%" height="15" fill="rgb(213,79,30)" fg:x="5936" fg:w="8"/><text x="45.3393%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (6 samples, 0.05%)</title><rect x="45.1044%" y="405" width="0.0456%" height="15" fill="rgb(246,177,23)" fg:x="5938" fg:w="6"/><text x="45.3544%" y="415.50"></text></g><g><title>http_bench_json_ops`smallvec::SmallVec&lt;A&gt;::push (11 samples, 0.08%)</title><rect x="45.1500%" y="437" width="0.0836%" height="15" fill="rgb(230,62,27)" fg:x="5944" fg:w="11"/><text x="45.4000%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (3 samples, 0.02%)</title><rect x="45.2336%" y="437" width="0.0228%" height="15" fill="rgb(216,154,8)" fg:x="5955" fg:w="3"/><text x="45.4836%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::Context::Enter (5 samples, 0.04%)</title><rect x="45.2564%" y="437" width="0.0380%" height="15" fill="rgb(244,35,45)" fg:x="5958" fg:w="5"/><text x="45.5064%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScopeImplementer::EnterContext (4 samples, 0.03%)</title><rect x="45.2640%" y="421" width="0.0304%" height="15" fill="rgb(251,115,12)" fg:x="5959" fg:w="4"/><text x="45.5140%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (12 samples, 0.09%)</title><rect x="45.4083%" y="421" width="0.0912%" height="15" fill="rgb(240,54,50)" fg:x="5978" fg:w="12"/><text x="45.6583%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.02%)</title><rect x="45.4842%" y="405" width="0.0152%" height="15" fill="rgb(233,84,52)" fg:x="5988" fg:w="2"/><text x="45.7342%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::EscapableHandleScope::EscapableHandleScope (3 samples, 0.02%)</title><rect x="45.4994%" y="421" width="0.0228%" height="15" fill="rgb(207,117,47)" fg:x="5990" fg:w="3"/><text x="45.7494%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (6 samples, 0.05%)</title><rect x="45.5222%" y="421" width="0.0456%" height="15" fill="rgb(249,43,39)" fg:x="5993" fg:w="6"/><text x="45.7722%" y="431.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntry (3 samples, 0.02%)</title><rect x="45.5982%" y="405" width="0.0228%" height="15" fill="rgb(209,38,44)" fg:x="6003" fg:w="3"/><text x="45.8482%" y="415.50"></text></g><g><title>0x13000d040 (4 samples, 0.03%)</title><rect x="45.7425%" y="373" width="0.0304%" height="15" fill="rgb(236,212,23)" fg:x="6022" fg:w="4"/><text x="45.9925%" y="383.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsAny (4 samples, 0.03%)</title><rect x="45.7729%" y="373" width="0.0304%" height="15" fill="rgb(242,79,21)" fg:x="6026" fg:w="4"/><text x="46.0229%" y="383.50"></text></g><g><title>0x13000d070 (2 samples, 0.02%)</title><rect x="45.8640%" y="357" width="0.0152%" height="15" fill="rgb(211,96,35)" fg:x="6038" fg:w="2"/><text x="46.1140%" y="367.50"></text></g><g><title>0x13000d0b0 (3 samples, 0.02%)</title><rect x="45.8944%" y="357" width="0.0228%" height="15" fill="rgb(253,215,40)" fg:x="6042" fg:w="3"/><text x="46.1444%" y="367.50"></text></g><g><title>0x13000d0c8 (5 samples, 0.04%)</title><rect x="45.9248%" y="357" width="0.0380%" height="15" fill="rgb(211,81,21)" fg:x="6046" fg:w="5"/><text x="46.1748%" y="367.50"></text></g><g><title>0x13000d0f4 (2 samples, 0.02%)</title><rect x="45.9704%" y="357" width="0.0152%" height="15" fill="rgb(208,190,38)" fg:x="6052" fg:w="2"/><text x="46.2204%" y="367.50"></text></g><g><title>0x13000d140 (3 samples, 0.02%)</title><rect x="46.0160%" y="357" width="0.0228%" height="15" fill="rgb(235,213,38)" fg:x="6058" fg:w="3"/><text x="46.2660%" y="367.50"></text></g><g><title>0x13000d168 (2 samples, 0.02%)</title><rect x="46.0463%" y="357" width="0.0152%" height="15" fill="rgb(237,122,38)" fg:x="6062" fg:w="2"/><text x="46.2963%" y="367.50"></text></g><g><title>0x13000d1b8 (2 samples, 0.02%)</title><rect x="46.0767%" y="357" width="0.0152%" height="15" fill="rgb(244,218,35)" fg:x="6066" fg:w="2"/><text x="46.3267%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_FulfillPromise (2 samples, 0.02%)</title><rect x="46.1527%" y="325" width="0.0152%" height="15" fill="rgb(240,68,47)" fg:x="6076" fg:w="2"/><text x="46.4027%" y="335.50"></text></g><g><title>http_bench_json_ops`Builtins_EnqueueMicrotask (13 samples, 0.10%)</title><rect x="46.2058%" y="309" width="0.0987%" height="15" fill="rgb(210,16,53)" fg:x="6083" fg:w="13"/><text x="46.4558%" y="319.50"></text></g><g><title>http_bench_json_ops`Builtins_PromiseCapabilityDefaultResolve (62 samples, 0.47%)</title><rect x="46.0995%" y="341" width="0.4709%" height="15" fill="rgb(235,124,12)" fg:x="6069" fg:w="62"/><text x="46.3495%" y="351.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (53 samples, 0.40%)</title><rect x="46.1679%" y="325" width="0.4026%" height="15" fill="rgb(224,169,11)" fg:x="6078" fg:w="53"/><text x="46.4179%" y="335.50"></text></g><g><title>http_bench_json_ops`Builtins_FulfillPromise (35 samples, 0.27%)</title><rect x="46.3046%" y="309" width="0.2659%" height="15" fill="rgb(250,166,2)" fg:x="6096" fg:w="35"/><text x="46.5546%" y="319.50"></text></g><g><title>0x13000d1c0 (66 samples, 0.50%)</title><rect x="46.0919%" y="357" width="0.5013%" height="15" fill="rgb(242,216,29)" fg:x="6068" fg:w="66"/><text x="46.3419%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (3 samples, 0.02%)</title><rect x="46.5705%" y="341" width="0.0228%" height="15" fill="rgb(230,116,27)" fg:x="6131" fg:w="3"/><text x="46.8205%" y="351.50"></text></g><g><title>0x13000d1d0 (4 samples, 0.03%)</title><rect x="46.5932%" y="357" width="0.0304%" height="15" fill="rgb(228,99,48)" fg:x="6134" fg:w="4"/><text x="46.8432%" y="367.50"></text></g><g><title>0x13000d1dc (2 samples, 0.02%)</title><rect x="46.6236%" y="357" width="0.0152%" height="15" fill="rgb(253,11,6)" fg:x="6138" fg:w="2"/><text x="46.8736%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (9 samples, 0.07%)</title><rect x="46.6388%" y="357" width="0.0684%" height="15" fill="rgb(247,143,39)" fg:x="6140" fg:w="9"/><text x="46.8888%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntry (138 samples, 1.05%)</title><rect x="45.7121%" y="389" width="1.0482%" height="15" fill="rgb(236,97,10)" fg:x="6018" fg:w="138"/><text x="45.9621%" y="399.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntryTrampoline (125 samples, 0.95%)</title><rect x="45.8109%" y="373" width="0.9495%" height="15" fill="rgb(233,208,19)" fg:x="6031" fg:w="125"/><text x="46.0609%" y="383.50"></text></g><g><title>http_bench_json_ops`Builtins_PromiseCapabilityDefaultResolve (7 samples, 0.05%)</title><rect x="46.7072%" y="357" width="0.0532%" height="15" fill="rgb(216,164,2)" fg:x="6149" fg:w="7"/><text x="46.9572%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (152 samples, 1.15%)</title><rect x="45.6210%" y="405" width="1.1546%" height="15" fill="rgb(220,129,5)" fg:x="6006" fg:w="152"/><text x="45.8710%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::SaveContext::SaveContext (2 samples, 0.02%)</title><rect x="46.7603%" y="389" width="0.0152%" height="15" fill="rgb(242,17,10)" fg:x="6156" fg:w="2"/><text x="47.0103%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::AllowJavascriptExecution::IsAllowed (3 samples, 0.02%)</title><rect x="46.7755%" y="405" width="0.0228%" height="15" fill="rgb(242,107,0)" fg:x="6158" fg:w="3"/><text x="47.0255%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::DumpOnJavascriptExecution::IsAllowed (2 samples, 0.02%)</title><rect x="46.8059%" y="405" width="0.0152%" height="15" fill="rgb(251,28,31)" fg:x="6162" fg:w="2"/><text x="47.0559%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScopeInfo::is_script_scope (3 samples, 0.02%)</title><rect x="46.8211%" y="405" width="0.0228%" height="15" fill="rgb(233,223,10)" fg:x="6164" fg:w="3"/><text x="47.0711%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (169 samples, 1.28%)</title><rect x="45.5678%" y="421" width="1.2837%" height="15" fill="rgb(215,21,27)" fg:x="5999" fg:w="169"/><text x="45.8178%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::InterruptsScope::InterruptsScope (6 samples, 0.05%)</title><rect x="46.8515%" y="421" width="0.0456%" height="15" fill="rgb(232,23,21)" fg:x="6168" fg:w="6"/><text x="47.1015%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::TryCatch (2 samples, 0.02%)</title><rect x="47.0870%" y="357" width="0.0152%" height="15" fill="rgb(244,5,23)" fg:x="6199" fg:w="2"/><text x="47.3370%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::TryCatch (2 samples, 0.02%)</title><rect x="47.1325%" y="341" width="0.0152%" height="15" fill="rgb(226,81,46)" fg:x="6205" fg:w="2"/><text x="47.3825%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::GetCurrentStackPosition (2 samples, 0.02%)</title><rect x="47.1325%" y="325" width="0.0152%" height="15" fill="rgb(247,70,30)" fg:x="6205" fg:w="2"/><text x="47.3825%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (3 samples, 0.02%)</title><rect x="47.1477%" y="341" width="0.0228%" height="15" fill="rgb(212,68,19)" fg:x="6207" fg:w="3"/><text x="47.3977%" y="351.50"></text></g><g><title>0x130012518 (3 samples, 0.02%)</title><rect x="47.7782%" y="293" width="0.0228%" height="15" fill="rgb(240,187,13)" fg:x="6290" fg:w="3"/><text x="48.0282%" y="303.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure (2 samples, 0.02%)</title><rect x="47.8010%" y="293" width="0.0152%" height="15" fill="rgb(223,113,26)" fg:x="6293" fg:w="2"/><text x="48.0510%" y="303.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsNullOrUndefined (22 samples, 0.17%)</title><rect x="47.8162%" y="293" width="0.1671%" height="15" fill="rgb(206,192,2)" fg:x="6295" fg:w="22"/><text x="48.0662%" y="303.50"></text></g><g><title>http_bench_json_ops`Builtins_Call_ReceiverIsNullOrUndefined (2 samples, 0.02%)</title><rect x="47.9833%" y="293" width="0.0152%" height="15" fill="rgb(241,108,4)" fg:x="6317" fg:w="2"/><text x="48.2333%" y="303.50"></text></g><g><title>0x130010408 (2 samples, 0.02%)</title><rect x="48.0972%" y="277" width="0.0152%" height="15" fill="rgb(247,173,49)" fg:x="6332" fg:w="2"/><text x="48.3472%" y="287.50"></text></g><g><title>0x130012528 (5 samples, 0.04%)</title><rect x="48.1124%" y="277" width="0.0380%" height="15" fill="rgb(224,114,35)" fg:x="6334" fg:w="5"/><text x="48.3624%" y="287.50"></text></g><g><title>0x130012550 (3 samples, 0.02%)</title><rect x="48.1580%" y="277" width="0.0228%" height="15" fill="rgb(245,159,27)" fg:x="6340" fg:w="3"/><text x="48.4080%" y="287.50"></text></g><g><title>0x13000f230 (2 samples, 0.02%)</title><rect x="48.2871%" y="229" width="0.0152%" height="15" fill="rgb(245,172,44)" fg:x="6357" fg:w="2"/><text x="48.5371%" y="239.50"></text></g><g><title>http_bench_json_ops`deno_core::ops_builtin::op_read_fast_fn (2 samples, 0.02%)</title><rect x="48.2871%" y="213" width="0.0152%" height="15" fill="rgb(236,23,11)" fg:x="6357" fg:w="2"/><text x="48.5371%" y="223.50"></text></g><g><title>0x13000b0d8 (6 samples, 0.05%)</title><rect x="48.2719%" y="261" width="0.0456%" height="15" fill="rgb(205,117,38)" fg:x="6355" fg:w="6"/><text x="48.5219%" y="271.50"></text></g><g><title>0x13000c75c (6 samples, 0.05%)</title><rect x="48.2719%" y="245" width="0.0456%" height="15" fill="rgb(237,72,25)" fg:x="6355" fg:w="6"/><text x="48.5219%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsNullOrUndefined (2 samples, 0.02%)</title><rect x="48.3023%" y="229" width="0.0152%" height="15" fill="rgb(244,70,9)" fg:x="6359" fg:w="2"/><text x="48.5523%" y="239.50"></text></g><g><title>0x13000b284 (16 samples, 0.12%)</title><rect x="48.3251%" y="261" width="0.1215%" height="15" fill="rgb(217,125,39)" fg:x="6362" fg:w="16"/><text x="48.5751%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (16 samples, 0.12%)</title><rect x="48.3251%" y="245" width="0.1215%" height="15" fill="rgb(235,36,10)" fg:x="6362" fg:w="16"/><text x="48.5751%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtin_HandleApiCall (16 samples, 0.12%)</title><rect x="48.3251%" y="229" width="0.1215%" height="15" fill="rgb(251,123,47)" fg:x="6362" fg:w="16"/><text x="48.5751%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (16 samples, 0.12%)</title><rect x="48.3251%" y="213" width="0.1215%" height="15" fill="rgb(221,13,13)" fg:x="6362" fg:w="16"/><text x="48.5751%" y="223.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (16 samples, 0.12%)</title><rect x="48.3251%" y="197" width="0.1215%" height="15" fill="rgb(238,131,9)" fg:x="6362" fg:w="16"/><text x="48.5751%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (15 samples, 0.11%)</title><rect x="48.3327%" y="181" width="0.1139%" height="15" fill="rgb(211,50,8)" fg:x="6363" fg:w="15"/><text x="48.5827%" y="191.50"></text></g><g><title>0x13000de18 (2 samples, 0.02%)</title><rect x="48.4466%" y="261" width="0.0152%" height="15" fill="rgb(245,182,24)" fg:x="6378" fg:w="2"/><text x="48.6966%" y="271.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write_fast_fn (2 samples, 0.02%)</title><rect x="48.4466%" y="245" width="0.0152%" height="15" fill="rgb(242,14,37)" fg:x="6378" fg:w="2"/><text x="48.6966%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.02%)</title><rect x="48.4466%" y="229" width="0.0152%" height="15" fill="rgb(246,228,12)" fg:x="6378" fg:w="2"/><text x="48.6966%" y="239.50"></text></g><g><title>0x13000e314 (2 samples, 0.02%)</title><rect x="48.4618%" y="261" width="0.0152%" height="15" fill="rgb(213,55,15)" fg:x="6380" fg:w="2"/><text x="48.7118%" y="271.50"></text></g><g><title>http_bench_json_ops`deno_core::ops_builtin::op_read_fast_fn (2 samples, 0.02%)</title><rect x="48.4618%" y="245" width="0.0152%" height="15" fill="rgb(209,9,3)" fg:x="6380" fg:w="2"/><text x="48.7118%" y="255.50"></text></g><g><title>0x13001042c (5 samples, 0.04%)</title><rect x="48.4770%" y="261" width="0.0380%" height="15" fill="rgb(230,59,30)" fg:x="6382" fg:w="5"/><text x="48.7270%" y="271.50"></text></g><g><title>0x13001043c (3 samples, 0.02%)</title><rect x="48.5150%" y="261" width="0.0228%" height="15" fill="rgb(209,121,21)" fg:x="6387" fg:w="3"/><text x="48.7650%" y="271.50"></text></g><g><title>0x1300105e8 (3 samples, 0.02%)</title><rect x="48.5910%" y="261" width="0.0228%" height="15" fill="rgb(220,109,13)" fg:x="6397" fg:w="3"/><text x="48.8410%" y="271.50"></text></g><g><title>0x130010694 (8 samples, 0.06%)</title><rect x="48.6517%" y="261" width="0.0608%" height="15" fill="rgb(232,18,1)" fg:x="6405" fg:w="8"/><text x="48.9017%" y="271.50"></text></g><g><title>0x1300106a4 (3 samples, 0.02%)</title><rect x="48.7201%" y="261" width="0.0228%" height="15" fill="rgb(215,41,42)" fg:x="6414" fg:w="3"/><text x="48.9701%" y="271.50"></text></g><g><title>0x1300106c8 (20 samples, 0.15%)</title><rect x="48.7505%" y="261" width="0.1519%" height="15" fill="rgb(224,123,36)" fg:x="6418" fg:w="20"/><text x="49.0005%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (20 samples, 0.15%)</title><rect x="48.7505%" y="245" width="0.1519%" height="15" fill="rgb(240,125,3)" fg:x="6418" fg:w="20"/><text x="49.0005%" y="255.50"></text></g><g><title>0x1300106f0 (2 samples, 0.02%)</title><rect x="48.9176%" y="261" width="0.0152%" height="15" fill="rgb(205,98,50)" fg:x="6440" fg:w="2"/><text x="49.1676%" y="271.50"></text></g><g><title>0x130010700 (3 samples, 0.02%)</title><rect x="48.9328%" y="261" width="0.0228%" height="15" fill="rgb(205,185,37)" fg:x="6442" fg:w="3"/><text x="49.1828%" y="271.50"></text></g><g><title>0x130010714 (5 samples, 0.04%)</title><rect x="48.9556%" y="261" width="0.0380%" height="15" fill="rgb(238,207,15)" fg:x="6445" fg:w="5"/><text x="49.2056%" y="271.50"></text></g><g><title>0x130010748 (2 samples, 0.02%)</title><rect x="48.9935%" y="261" width="0.0152%" height="15" fill="rgb(213,199,42)" fg:x="6450" fg:w="2"/><text x="49.2435%" y="271.50"></text></g><g><title>0x1300107d0 (2 samples, 0.02%)</title><rect x="49.0239%" y="261" width="0.0152%" height="15" fill="rgb(235,201,11)" fg:x="6454" fg:w="2"/><text x="49.2739%" y="271.50"></text></g><g><title>0x130010810 (6 samples, 0.05%)</title><rect x="49.0619%" y="261" width="0.0456%" height="15" fill="rgb(207,46,11)" fg:x="6459" fg:w="6"/><text x="49.3119%" y="271.50"></text></g><g><title>http_bench_json_ops`&lt;T as core::any::Any&gt;::type_id (2 samples, 0.02%)</title><rect x="49.2214%" y="229" width="0.0152%" height="15" fill="rgb(241,35,35)" fg:x="6480" fg:w="2"/><text x="49.4714%" y="239.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$send (2 samples, 0.02%)</title><rect x="49.2366%" y="229" width="0.0152%" height="15" fill="rgb(243,32,47)" fg:x="6482" fg:w="2"/><text x="49.4866%" y="239.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write::call (67 samples, 0.51%)</title><rect x="49.2518%" y="229" width="0.5089%" height="15" fill="rgb(247,202,23)" fg:x="6484" fg:w="67"/><text x="49.5018%" y="239.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write_fast_fn (5,120 samples, 38.89%)</title><rect x="49.1607%" y="245" width="38.8910%" height="15" fill="rgb(219,102,11)" fg:x="6472" fg:w="5120"/><text x="49.4107%" y="255.50">http_bench_json_ops`http_bench_json_ops::op_try_write_fast_fn</text></g><g><title>libsystem_kernel.dylib`__sendto (5,041 samples, 38.29%)</title><rect x="49.7607%" y="229" width="38.2909%" height="15" fill="rgb(243,110,44)" fg:x="6551" fg:w="5041"/><text x="50.0107%" y="239.50">libsystem_kernel.dylib`__sendto</text></g><g><title>0x130010818 (5,134 samples, 39.00%)</title><rect x="49.1075%" y="261" width="38.9973%" height="15" fill="rgb(222,74,54)" fg:x="6465" fg:w="5134"/><text x="49.3575%" y="271.50">0x130010818</text></g><g><title>http_bench_json_ops`v8::External::Value (7 samples, 0.05%)</title><rect x="88.0517%" y="245" width="0.0532%" height="15" fill="rgb(216,99,12)" fg:x="11592" fg:w="7"/><text x="88.3017%" y="255.50"></text></g><g><title>0x1300108ac (2 samples, 0.02%)</title><rect x="88.1124%" y="261" width="0.0152%" height="15" fill="rgb(226,22,26)" fg:x="11600" fg:w="2"/><text x="88.3624%" y="271.50"></text></g><g><title>0x1300108c4 (2 samples, 0.02%)</title><rect x="88.1276%" y="261" width="0.0152%" height="15" fill="rgb(217,163,10)" fg:x="11602" fg:w="2"/><text x="88.3776%" y="271.50"></text></g><g><title>0x13001096c (12 samples, 0.09%)</title><rect x="88.1428%" y="261" width="0.0912%" height="15" fill="rgb(213,25,53)" fg:x="11604" fg:w="12"/><text x="88.3928%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (12 samples, 0.09%)</title><rect x="88.1428%" y="245" width="0.0912%" height="15" fill="rgb(252,105,26)" fg:x="11604" fg:w="12"/><text x="88.3928%" y="255.50"></text></g><g><title>0x130010988 (2 samples, 0.02%)</title><rect x="88.2340%" y="261" width="0.0152%" height="15" fill="rgb(220,39,43)" fg:x="11616" fg:w="2"/><text x="88.4840%" y="271.50"></text></g><g><title>0x1300109a8 (2 samples, 0.02%)</title><rect x="88.2491%" y="261" width="0.0152%" height="15" fill="rgb(229,68,48)" fg:x="11618" fg:w="2"/><text x="88.4991%" y="271.50"></text></g><g><title>0x1300109b0 (6 samples, 0.05%)</title><rect x="88.2643%" y="261" width="0.0456%" height="15" fill="rgb(252,8,32)" fg:x="11620" fg:w="6"/><text x="88.5143%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (5 samples, 0.04%)</title><rect x="88.2719%" y="245" width="0.0380%" height="15" fill="rgb(223,20,43)" fg:x="11621" fg:w="5"/><text x="88.5219%" y="255.50"></text></g><g><title>0x1300109e0 (2 samples, 0.02%)</title><rect x="88.3251%" y="261" width="0.0152%" height="15" fill="rgb(229,81,49)" fg:x="11628" fg:w="2"/><text x="88.5751%" y="271.50"></text></g><g><title>0x130010af4 (2 samples, 0.02%)</title><rect x="88.3707%" y="261" width="0.0152%" height="15" fill="rgb(236,28,36)" fg:x="11634" fg:w="2"/><text x="88.6207%" y="271.50"></text></g><g><title>0x130010b3c (3 samples, 0.02%)</title><rect x="88.3935%" y="261" width="0.0228%" height="15" fill="rgb(249,185,26)" fg:x="11637" fg:w="3"/><text x="88.6435%" y="271.50"></text></g><g><title>0x130010b9c (2 samples, 0.02%)</title><rect x="88.4239%" y="261" width="0.0152%" height="15" fill="rgb(249,174,33)" fg:x="11641" fg:w="2"/><text x="88.6739%" y="271.50"></text></g><g><title>0x130010bc0 (2 samples, 0.02%)</title><rect x="88.4466%" y="261" width="0.0152%" height="15" fill="rgb(233,201,37)" fg:x="11644" fg:w="2"/><text x="88.6966%" y="271.50"></text></g><g><title>0x130010bfc (4 samples, 0.03%)</title><rect x="88.4694%" y="261" width="0.0304%" height="15" fill="rgb(221,78,26)" fg:x="11647" fg:w="4"/><text x="88.7194%" y="271.50"></text></g><g><title>0x130010c20 (2 samples, 0.02%)</title><rect x="88.4998%" y="261" width="0.0152%" height="15" fill="rgb(250,127,30)" fg:x="11651" fg:w="2"/><text x="88.7498%" y="271.50"></text></g><g><title>0x130010c6c (12 samples, 0.09%)</title><rect x="88.5378%" y="261" width="0.0912%" height="15" fill="rgb(230,49,44)" fg:x="11656" fg:w="12"/><text x="88.7878%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_PerformPromiseThen (11 samples, 0.08%)</title><rect x="88.5454%" y="245" width="0.0836%" height="15" fill="rgb(229,67,23)" fg:x="11657" fg:w="11"/><text x="88.7954%" y="255.50"></text></g><g><title>0x130010c70 (2 samples, 0.02%)</title><rect x="88.6289%" y="261" width="0.0152%" height="15" fill="rgb(249,83,47)" fg:x="11668" fg:w="2"/><text x="88.8789%" y="271.50"></text></g><g><title>0x130010ccc (2 samples, 0.02%)</title><rect x="88.6593%" y="261" width="0.0152%" height="15" fill="rgb(215,43,3)" fg:x="11672" fg:w="2"/><text x="88.9093%" y="271.50"></text></g><g><title>0x130010d88 (7 samples, 0.05%)</title><rect x="88.6745%" y="261" width="0.0532%" height="15" fill="rgb(238,154,13)" fg:x="11674" fg:w="7"/><text x="88.9245%" y="271.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="88.7277%" y="245" width="0.0380%" height="15" fill="rgb(219,56,2)" fg:x="11681" fg:w="5"/><text x="88.9777%" y="255.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="88.9100%" y="229" width="0.0304%" height="15" fill="rgb(233,0,4)" fg:x="11705" fg:w="4"/><text x="89.1600%" y="239.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="88.9404%" y="229" width="0.0304%" height="15" fill="rgb(235,30,7)" fg:x="11709" fg:w="4"/><text x="89.1904%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.06%)</title><rect x="89.2518%" y="197" width="0.0608%" height="15" fill="rgb(250,79,13)" fg:x="11750" fg:w="8"/><text x="89.5018%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.21%)</title><rect x="89.3202%" y="181" width="0.2051%" height="15" fill="rgb(211,146,34)" fg:x="11759" fg:w="27"/><text x="89.5702%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.10%)</title><rect x="89.4265%" y="165" width="0.0987%" height="15" fill="rgb(228,22,38)" fg:x="11773" fg:w="13"/><text x="89.6765%" y="175.50"></text></g><g><title>http_bench_json_ops`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (75 samples, 0.57%)</title><rect x="88.9708%" y="229" width="0.5697%" height="15" fill="rgb(235,168,5)" fg:x="11713" fg:w="75"/><text x="89.2208%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 0.34%)</title><rect x="89.1986%" y="213" width="0.3418%" height="15" fill="rgb(221,155,16)" fg:x="11743" fg:w="45"/><text x="89.4486%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.23%)</title><rect x="89.3126%" y="197" width="0.2279%" height="15" fill="rgb(215,215,53)" fg:x="11758" fg:w="30"/><text x="89.5626%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="89.5253%" y="181" width="0.0152%" height="15" fill="rgb(223,4,10)" fg:x="11786" fg:w="2"/><text x="89.7753%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="89.6240%" y="213" width="0.0228%" height="15" fill="rgb(234,103,6)" fg:x="11799" fg:w="3"/><text x="89.8740%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (25 samples, 0.19%)</title><rect x="89.7076%" y="197" width="0.1899%" height="15" fill="rgb(227,97,0)" fg:x="11810" fg:w="25"/><text x="89.9576%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.11%)</title><rect x="89.7835%" y="181" width="0.1139%" height="15" fill="rgb(234,150,53)" fg:x="11820" fg:w="15"/><text x="90.0335%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.36%)</title><rect x="89.5404%" y="229" width="0.3646%" height="15" fill="rgb(228,201,54)" fg:x="11788" fg:w="48"/><text x="89.7904%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (34 samples, 0.26%)</title><rect x="89.6468%" y="213" width="0.2583%" height="15" fill="rgb(222,22,37)" fg:x="11802" fg:w="34"/><text x="89.8968%" y="223.50"></text></g><g><title>http_bench_json_ops`deno_core::ops_builtin::op_read_fast_fn (156 samples, 1.18%)</title><rect x="88.7657%" y="245" width="1.1850%" height="15" fill="rgb(237,53,32)" fg:x="11686" fg:w="156"/><text x="89.0157%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.05%)</title><rect x="89.9051%" y="229" width="0.0456%" height="15" fill="rgb(233,25,53)" fg:x="11836" fg:w="6"/><text x="90.1551%" y="239.50"></text></g><g><title>http_bench_json_ops`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (3 samples, 0.02%)</title><rect x="89.9506%" y="245" width="0.0228%" height="15" fill="rgb(210,40,34)" fg:x="11842" fg:w="3"/><text x="90.2006%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::External::Value (3 samples, 0.02%)</title><rect x="89.9734%" y="245" width="0.0228%" height="15" fill="rgb(241,220,44)" fg:x="11845" fg:w="3"/><text x="90.2234%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="89.9962%" y="245" width="0.0152%" height="15" fill="rgb(235,28,35)" fg:x="11848" fg:w="2"/><text x="90.2462%" y="255.50"></text></g><g><title>0x130010d90 (171 samples, 1.30%)</title><rect x="88.7277%" y="261" width="1.2989%" height="15" fill="rgb(210,56,17)" fg:x="11681" fg:w="171"/><text x="88.9777%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.02%)</title><rect x="90.0114%" y="245" width="0.0152%" height="15" fill="rgb(224,130,29)" fg:x="11850" fg:w="2"/><text x="90.2614%" y="255.50"></text></g><g><title>0x130010dac (3 samples, 0.02%)</title><rect x="90.0266%" y="261" width="0.0228%" height="15" fill="rgb(235,212,8)" fg:x="11852" fg:w="3"/><text x="90.2766%" y="271.50"></text></g><g><title>0x130010e44 (2 samples, 0.02%)</title><rect x="90.0494%" y="261" width="0.0152%" height="15" fill="rgb(223,33,50)" fg:x="11855" fg:w="2"/><text x="90.2994%" y="271.50"></text></g><g><title>0x130010eac (2 samples, 0.02%)</title><rect x="90.0646%" y="261" width="0.0152%" height="15" fill="rgb(219,149,13)" fg:x="11857" fg:w="2"/><text x="90.3146%" y="271.50"></text></g><g><title>0x130010ebc (3 samples, 0.02%)</title><rect x="90.0798%" y="261" width="0.0228%" height="15" fill="rgb(250,156,29)" fg:x="11859" fg:w="3"/><text x="90.3298%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.02%)</title><rect x="90.3836%" y="69" width="0.0152%" height="15" fill="rgb(216,193,19)" fg:x="11899" fg:w="2"/><text x="90.6336%" y="79.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (3 samples, 0.02%)</title><rect x="90.3836%" y="85" width="0.0228%" height="15" fill="rgb(216,135,14)" fg:x="11899" fg:w="3"/><text x="90.6336%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::Finalize (2 samples, 0.02%)</title><rect x="90.4064%" y="85" width="0.0152%" height="15" fill="rgb(241,47,5)" fg:x="11902" fg:w="2"/><text x="90.6564%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobState::Join (8 samples, 0.06%)</title><rect x="90.4368%" y="69" width="0.0608%" height="15" fill="rgb(233,42,35)" fg:x="11906" fg:w="8"/><text x="90.6868%" y="79.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::JobTask::ProcessItems (8 samples, 0.06%)</title><rect x="90.4368%" y="53" width="0.0608%" height="15" fill="rgb(231,13,6)" fg:x="11906" fg:w="8"/><text x="90.6868%" y="63.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::ScavengePage (7 samples, 0.05%)</title><rect x="90.4444%" y="37" width="0.0532%" height="15" fill="rgb(207,181,40)" fg:x="11907" fg:w="7"/><text x="90.6944%" y="47.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobHandle::Join (9 samples, 0.07%)</title><rect x="90.4368%" y="85" width="0.0684%" height="15" fill="rgb(254,173,49)" fg:x="11906" fg:w="9"/><text x="90.6868%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::Scavenge (17 samples, 0.13%)</title><rect x="90.3836%" y="117" width="0.1291%" height="15" fill="rgb(221,1,38)" fg:x="11899" fg:w="17"/><text x="90.6336%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::CollectGarbage (17 samples, 0.13%)</title><rect x="90.3836%" y="101" width="0.1291%" height="15" fill="rgb(206,124,46)" fg:x="11899" fg:w="17"/><text x="90.6336%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (20 samples, 0.15%)</title><rect x="90.3684%" y="181" width="0.1519%" height="15" fill="rgb(249,21,11)" fg:x="11897" fg:w="20"/><text x="90.6184%" y="191.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (20 samples, 0.15%)</title><rect x="90.3684%" y="165" width="0.1519%" height="15" fill="rgb(222,201,40)" fg:x="11897" fg:w="20"/><text x="90.6184%" y="175.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::CollectGarbage (20 samples, 0.15%)</title><rect x="90.3684%" y="149" width="0.1519%" height="15" fill="rgb(235,61,29)" fg:x="11897" fg:w="20"/><text x="90.6184%" y="159.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::PerformGarbageCollection (20 samples, 0.15%)</title><rect x="90.3684%" y="133" width="0.1519%" height="15" fill="rgb(219,207,3)" fg:x="11897" fg:w="20"/><text x="90.6184%" y="143.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (21 samples, 0.16%)</title><rect x="90.3684%" y="229" width="0.1595%" height="15" fill="rgb(222,56,46)" fg:x="11897" fg:w="21"/><text x="90.6184%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::Runtime_AllocateInYoungGeneration (21 samples, 0.16%)</title><rect x="90.3684%" y="213" width="0.1595%" height="15" fill="rgb(239,76,54)" fg:x="11897" fg:w="21"/><text x="90.6184%" y="223.50"></text></g><g><title>http_bench_json_ops`v8::internal::Factory::NewFillerObject (21 samples, 0.16%)</title><rect x="90.3684%" y="197" width="0.1595%" height="15" fill="rgb(231,124,27)" fg:x="11897" fg:w="21"/><text x="90.6184%" y="207.50"></text></g><g><title>0x130010ed4 (73 samples, 0.55%)</title><rect x="90.1101%" y="261" width="0.5545%" height="15" fill="rgb(249,195,6)" fg:x="11863" fg:w="73"/><text x="90.3601%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitCaught (73 samples, 0.55%)</title><rect x="90.1101%" y="245" width="0.5545%" height="15" fill="rgb(237,174,47)" fg:x="11863" fg:w="73"/><text x="90.3601%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_PerformPromiseThen (18 samples, 0.14%)</title><rect x="90.5279%" y="229" width="0.1367%" height="15" fill="rgb(206,201,31)" fg:x="11918" fg:w="18"/><text x="90.7779%" y="239.50"></text></g><g><title>0x130010f34 (2 samples, 0.02%)</title><rect x="90.6722%" y="261" width="0.0152%" height="15" fill="rgb(231,57,52)" fg:x="11937" fg:w="2"/><text x="90.9222%" y="271.50"></text></g><g><title>0x130010f64 (2 samples, 0.02%)</title><rect x="90.6874%" y="261" width="0.0152%" height="15" fill="rgb(248,177,22)" fg:x="11939" fg:w="2"/><text x="90.9374%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (3 samples, 0.02%)</title><rect x="90.7330%" y="101" width="0.0228%" height="15" fill="rgb(215,211,37)" fg:x="11945" fg:w="3"/><text x="90.9830%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::CompactionSpaceCollection::CompactionSpaceCollection (2 samples, 0.02%)</title><rect x="90.7406%" y="85" width="0.0152%" height="15" fill="rgb(241,128,51)" fg:x="11946" fg:w="2"/><text x="90.9906%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::FreeList::CreateFreeList (2 samples, 0.02%)</title><rect x="90.7406%" y="69" width="0.0152%" height="15" fill="rgb(227,165,31)" fg:x="11946" fg:w="2"/><text x="90.9906%" y="79.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::ScavengePage (4 samples, 0.03%)</title><rect x="90.7634%" y="53" width="0.0304%" height="15" fill="rgb(228,167,24)" fg:x="11949" fg:w="4"/><text x="91.0134%" y="63.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobState::Join (6 samples, 0.05%)</title><rect x="90.7558%" y="85" width="0.0456%" height="15" fill="rgb(228,143,12)" fg:x="11948" fg:w="6"/><text x="91.0058%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::JobTask::ProcessItems (6 samples, 0.05%)</title><rect x="90.7558%" y="69" width="0.0456%" height="15" fill="rgb(249,149,8)" fg:x="11948" fg:w="6"/><text x="91.0058%" y="79.50"></text></g><g><title>http_bench_json_ops`v8::base::ConditionVariable::~ConditionVariable (3 samples, 0.02%)</title><rect x="90.8014%" y="69" width="0.0228%" height="15" fill="rgb(243,35,44)" fg:x="11954" fg:w="3"/><text x="91.0514%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.02%)</title><rect x="90.8014%" y="53" width="0.0228%" height="15" fill="rgb(246,89,9)" fg:x="11954" fg:w="3"/><text x="91.0514%" y="63.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (13 samples, 0.10%)</title><rect x="90.7330%" y="197" width="0.0987%" height="15" fill="rgb(233,213,13)" fg:x="11945" fg:w="13"/><text x="90.9830%" y="207.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (13 samples, 0.10%)</title><rect x="90.7330%" y="181" width="0.0987%" height="15" fill="rgb(233,141,41)" fg:x="11945" fg:w="13"/><text x="90.9830%" y="191.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::CollectGarbage (13 samples, 0.10%)</title><rect x="90.7330%" y="165" width="0.0987%" height="15" fill="rgb(239,167,4)" fg:x="11945" fg:w="13"/><text x="90.9830%" y="175.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::PerformGarbageCollection (13 samples, 0.10%)</title><rect x="90.7330%" y="149" width="0.0987%" height="15" fill="rgb(209,217,16)" fg:x="11945" fg:w="13"/><text x="90.9830%" y="159.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::Scavenge (13 samples, 0.10%)</title><rect x="90.7330%" y="133" width="0.0987%" height="15" fill="rgb(219,88,35)" fg:x="11945" fg:w="13"/><text x="90.9830%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::CollectGarbage (13 samples, 0.10%)</title><rect x="90.7330%" y="117" width="0.0987%" height="15" fill="rgb(220,193,23)" fg:x="11945" fg:w="13"/><text x="90.9830%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobHandle::Join (10 samples, 0.08%)</title><rect x="90.7558%" y="101" width="0.0760%" height="15" fill="rgb(230,90,52)" fg:x="11948" fg:w="10"/><text x="91.0058%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobState::~DefaultJobState (4 samples, 0.03%)</title><rect x="90.8014%" y="85" width="0.0304%" height="15" fill="rgb(252,106,19)" fg:x="11954" fg:w="4"/><text x="91.0514%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::AllocationCounter::AdvanceAllocationObservers (3 samples, 0.02%)</title><rect x="90.8318%" y="181" width="0.0228%" height="15" fill="rgb(206,74,20)" fg:x="11958" fg:w="3"/><text x="91.0818%" y="191.50"></text></g><g><title>http_bench_json_ops`v8::internal::SemiSpaceNewSpace::EnsureAllocation (7 samples, 0.05%)</title><rect x="90.8318%" y="197" width="0.0532%" height="15" fill="rgb(230,138,44)" fg:x="11958" fg:w="7"/><text x="91.0818%" y="207.50"></text></g><g><title>http_bench_json_ops`v8::internal::SpaceWithLinearArea::AdvanceAllocationObservers (3 samples, 0.02%)</title><rect x="90.8621%" y="181" width="0.0228%" height="15" fill="rgb(235,182,43)" fg:x="11962" fg:w="3"/><text x="91.1121%" y="191.50"></text></g><g><title>http_bench_json_ops`std::__1::__shared_mutex_base::lock (3 samples, 0.02%)</title><rect x="90.8621%" y="165" width="0.0228%" height="15" fill="rgb(242,16,51)" fg:x="11962" fg:w="3"/><text x="91.1121%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (25 samples, 0.19%)</title><rect x="90.7026%" y="245" width="0.1899%" height="15" fill="rgb(248,9,4)" fg:x="11941" fg:w="25"/><text x="90.9526%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::Runtime_AllocateInYoungGeneration (24 samples, 0.18%)</title><rect x="90.7102%" y="229" width="0.1823%" height="15" fill="rgb(210,31,22)" fg:x="11942" fg:w="24"/><text x="90.9602%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::Factory::NewFillerObject (23 samples, 0.17%)</title><rect x="90.7178%" y="213" width="0.1747%" height="15" fill="rgb(239,54,39)" fg:x="11943" fg:w="23"/><text x="90.9678%" y="223.50"></text></g><g><title>0x130011288 (26 samples, 0.20%)</title><rect x="90.7026%" y="261" width="0.1975%" height="15" fill="rgb(230,99,41)" fg:x="11941" fg:w="26"/><text x="90.9526%" y="271.50"></text></g><g><title>0x1300115dc (33 samples, 0.25%)</title><rect x="90.9077%" y="261" width="0.2507%" height="15" fill="rgb(253,106,12)" fg:x="11968" fg:w="33"/><text x="91.1577%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_RecordWriteSaveFP (33 samples, 0.25%)</title><rect x="90.9077%" y="245" width="0.2507%" height="15" fill="rgb(213,46,41)" fg:x="11968" fg:w="33"/><text x="91.1577%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="91.1660%" y="261" width="0.0152%" height="15" fill="rgb(215,133,35)" fg:x="12002" fg:w="2"/><text x="91.4160%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (21 samples, 0.16%)</title><rect x="91.1812%" y="261" width="0.1595%" height="15" fill="rgb(213,28,5)" fg:x="12004" fg:w="21"/><text x="91.4312%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadICTrampoline (9 samples, 0.07%)</title><rect x="91.3407%" y="261" width="0.0684%" height="15" fill="rgb(215,77,49)" fg:x="12025" fg:w="9"/><text x="91.5907%" y="271.50"></text></g><g><title>http_bench_json_ops`deno_core::ops_builtin::op_read_fast_fn (4 samples, 0.03%)</title><rect x="91.4166%" y="261" width="0.0304%" height="15" fill="rgb(248,100,22)" fg:x="12035" fg:w="4"/><text x="91.6666%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure (5,698 samples, 43.28%)</title><rect x="48.1808%" y="277" width="43.2814%" height="15" fill="rgb(208,67,9)" fg:x="6343" fg:w="5698"/><text x="48.4308%" y="287.50">http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write_fast_fn (2 samples, 0.02%)</title><rect x="91.4470%" y="261" width="0.0152%" height="15" fill="rgb(219,133,21)" fg:x="12039" fg:w="2"/><text x="91.6970%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_EnqueueMicrotask (4 samples, 0.03%)</title><rect x="91.5002%" y="261" width="0.0304%" height="15" fill="rgb(246,46,29)" fg:x="12046" fg:w="4"/><text x="91.7502%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (23 samples, 0.17%)</title><rect x="91.4622%" y="277" width="0.1747%" height="15" fill="rgb(246,185,52)" fg:x="12041" fg:w="23"/><text x="91.7122%" y="287.50"></text></g><g><title>http_bench_json_ops`Builtins_FulfillPromise (14 samples, 0.11%)</title><rect x="91.5306%" y="261" width="0.1063%" height="15" fill="rgb(252,136,11)" fg:x="12050" fg:w="14"/><text x="91.7806%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_JSRunMicrotasksEntry (5,861 samples, 44.52%)</title><rect x="47.2237%" y="325" width="44.5196%" height="15" fill="rgb(219,138,53)" fg:x="6217" fg:w="5861"/><text x="47.4737%" y="335.50">http_bench_json_ops`Builtins_JSRunMicrotasksEntry</text></g><g><title>http_bench_json_ops`Builtins_RunMicrotasks (5,858 samples, 44.50%)</title><rect x="47.2465%" y="309" width="44.4968%" height="15" fill="rgb(211,51,23)" fg:x="6220" fg:w="5858"/><text x="47.4965%" y="319.50">http_bench_json_ops`Builtins_RunMicrotasks</text></g><g><title>http_bench_json_ops`Builtins_PromiseFulfillReactionJob (5,759 samples, 43.74%)</title><rect x="47.9985%" y="293" width="43.7448%" height="15" fill="rgb(247,221,28)" fg:x="6319" fg:w="5759"/><text x="48.2485%" y="303.50">http_bench_json_ops`Builtins_PromiseFulfillReactionJob</text></g><g><title>http_bench_json_ops`Builtins_ResumeGeneratorTrampoline (14 samples, 0.11%)</title><rect x="91.6369%" y="277" width="0.1063%" height="15" fill="rgb(251,222,45)" fg:x="12064" fg:w="14"/><text x="91.8869%" y="287.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (5,869 samples, 44.58%)</title><rect x="47.1705%" y="341" width="44.5803%" height="15" fill="rgb(217,162,53)" fg:x="6210" fg:w="5869"/><text x="47.4205%" y="351.50">http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::inter..</text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal (5,905 samples, 44.85%)</title><rect x="46.9351%" y="405" width="44.8538%" height="15" fill="rgb(229,93,14)" fg:x="6179" fg:w="5905"/><text x="47.1851%" y="415.50">http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (5,903 samples, 44.84%)</title><rect x="46.9502%" y="389" width="44.8386%" height="15" fill="rgb(209,67,49)" fg:x="6181" fg:w="5903"/><text x="47.2002%" y="399.50">http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>http_bench_json_ops`v8::internal::Execution::TryRunMicrotasks (5,891 samples, 44.75%)</title><rect x="47.0414%" y="373" width="44.7474%" height="15" fill="rgb(213,87,29)" fg:x="6193" fg:w="5891"/><text x="47.2914%" y="383.50">http_bench_json_ops`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (5,883 samples, 44.69%)</title><rect x="47.1022%" y="357" width="44.6867%" height="15" fill="rgb(205,151,52)" fg:x="6201" fg:w="5883"/><text x="47.3522%" y="367.50">http_bench_json_ops`v8::internal::(anonymous namespace)::InvokeWithTryCat..</text></g><g><title>http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (6,123 samples, 46.51%)</title><rect x="45.2943%" y="437" width="46.5097%" height="15" fill="rgb(253,215,39)" fg:x="5963" fg:w="6123"/><text x="45.5443%" y="447.50">http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8:..</text></g><g><title>http_bench_json_ops`v8::internal::Isolate::FireCallCompletedCallbackInternal (5,912 samples, 44.91%)</title><rect x="46.8971%" y="421" width="44.9070%" height="15" fill="rgb(221,220,41)" fg:x="6174" fg:w="5912"/><text x="47.1471%" y="431.50">http_bench_json_ops`v8::internal::Isolate::FireCallCompletedCallbackIntern..</text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.02%)</title><rect x="91.7888%" y="405" width="0.0152%" height="15" fill="rgb(218,133,21)" fg:x="12084" fg:w="2"/><text x="92.0388%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::CreateHandle (2 samples, 0.02%)</title><rect x="91.8040%" y="437" width="0.0152%" height="15" fill="rgb(221,193,43)" fg:x="12086" fg:w="2"/><text x="92.0540%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (3 samples, 0.02%)</title><rect x="91.8192%" y="437" width="0.0228%" height="15" fill="rgb(240,128,52)" fg:x="12088" fg:w="3"/><text x="92.0692%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::TryCatch (3 samples, 0.02%)</title><rect x="91.8420%" y="437" width="0.0228%" height="15" fill="rgb(253,114,12)" fg:x="12091" fg:w="3"/><text x="92.0920%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (3 samples, 0.02%)</title><rect x="91.8648%" y="437" width="0.0228%" height="15" fill="rgb(215,223,47)" fg:x="12094" fg:w="3"/><text x="92.1148%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (4 samples, 0.03%)</title><rect x="91.8876%" y="437" width="0.0304%" height="15" fill="rgb(248,225,23)" fg:x="12097" fg:w="4"/><text x="92.1376%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (5 samples, 0.04%)</title><rect x="91.9180%" y="437" width="0.0380%" height="15" fill="rgb(250,108,0)" fg:x="12101" fg:w="5"/><text x="92.1680%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::MoveGlobal (4 samples, 0.03%)</title><rect x="91.9559%" y="437" width="0.0304%" height="15" fill="rgb(228,208,7)" fg:x="12106" fg:w="4"/><text x="92.2059%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (4 samples, 0.03%)</title><rect x="91.9863%" y="437" width="0.0304%" height="15" fill="rgb(244,45,10)" fg:x="12110" fg:w="4"/><text x="92.2363%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal (5 samples, 0.04%)</title><rect x="92.0395%" y="437" width="0.0380%" height="15" fill="rgb(207,125,25)" fg:x="12117" fg:w="5"/><text x="92.2895%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (4 samples, 0.03%)</title><rect x="92.0471%" y="421" width="0.0304%" height="15" fill="rgb(210,195,18)" fg:x="12118" fg:w="4"/><text x="92.2971%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (2 samples, 0.02%)</title><rect x="92.0775%" y="437" width="0.0152%" height="15" fill="rgb(249,80,12)" fg:x="12122" fg:w="2"/><text x="92.3275%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::TryCatch (2 samples, 0.02%)</title><rect x="92.1079%" y="421" width="0.0152%" height="15" fill="rgb(221,65,9)" fg:x="12126" fg:w="2"/><text x="92.3579%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::scope::TryCatch&lt;P&gt;::new (4 samples, 0.03%)</title><rect x="92.1003%" y="437" width="0.0304%" height="15" fill="rgb(235,49,36)" fg:x="12125" fg:w="4"/><text x="92.3503%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.02%)</title><rect x="92.1306%" y="421" width="0.0228%" height="15" fill="rgb(225,32,20)" fg:x="12129" fg:w="3"/><text x="92.3806%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::~HandleScope (2 samples, 0.02%)</title><rect x="92.1382%" y="405" width="0.0152%" height="15" fill="rgb(215,141,46)" fg:x="12130" fg:w="2"/><text x="92.3882%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::scope::data::ScopeData::try_exit_scope (5 samples, 0.04%)</title><rect x="92.1306%" y="437" width="0.0380%" height="15" fill="rgb(250,160,47)" fg:x="12129" fg:w="5"/><text x="92.3806%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::Context::Exit (2 samples, 0.02%)</title><rect x="92.1534%" y="421" width="0.0152%" height="15" fill="rgb(216,222,40)" fg:x="12132" fg:w="2"/><text x="92.4034%" y="431.50"></text></g><g><title>http_bench_json_ops`v8__Global__New (5 samples, 0.04%)</title><rect x="92.1686%" y="437" width="0.0380%" height="15" fill="rgb(234,217,39)" fg:x="12134" fg:w="5"/><text x="92.4186%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="92.1838%" y="421" width="0.0228%" height="15" fill="rgb(207,178,40)" fg:x="12136" fg:w="3"/><text x="92.4338%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (22 samples, 0.17%)</title><rect x="92.4041%" y="421" width="0.1671%" height="15" fill="rgb(221,136,13)" fg:x="12165" fg:w="22"/><text x="92.6541%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.36%)</title><rect x="92.2142%" y="437" width="0.3646%" height="15" fill="rgb(249,199,10)" fg:x="12140" fg:w="48"/><text x="92.4642%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="92.5788%" y="437" width="0.0304%" height="15" fill="rgb(249,222,13)" fg:x="12188" fg:w="4"/><text x="92.8288%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.17%)</title><rect x="92.6092%" y="437" width="0.1671%" height="15" fill="rgb(244,185,38)" fg:x="12192" fg:w="22"/><text x="92.8592%" y="447.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::poll_event_loop (12,163 samples, 92.39%)</title><rect x="0.4102%" y="453" width="92.3889%" height="15" fill="rgb(236,202,9)" fg:x="54" fg:w="12163"/><text x="0.6602%" y="463.50">http_bench_json_ops`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="92.7763%" y="437" width="0.0228%" height="15" fill="rgb(250,229,37)" fg:x="12214" fg:w="3"/><text x="93.0263%" y="447.50"></text></g><g><title>http_bench_json_ops`futures_task::noop_waker::noop (2 samples, 0.02%)</title><rect x="92.7991%" y="453" width="0.0152%" height="15" fill="rgb(206,174,23)" fg:x="12217" fg:w="2"/><text x="93.0491%" y="463.50"></text></g><g><title>http_bench_json_ops`smallvec::SmallVec&lt;A&gt;::push (6 samples, 0.05%)</title><rect x="92.8219%" y="453" width="0.0456%" height="15" fill="rgb(211,33,43)" fg:x="12220" fg:w="6"/><text x="93.0719%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (8 samples, 0.06%)</title><rect x="92.8750%" y="453" width="0.0608%" height="15" fill="rgb(245,58,50)" fg:x="12227" fg:w="8"/><text x="93.1250%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (5 samples, 0.04%)</title><rect x="92.9434%" y="453" width="0.0380%" height="15" fill="rgb(244,68,36)" fg:x="12236" fg:w="5"/><text x="93.1934%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::Isolate::PerformMicrotaskCheckpoint (4 samples, 0.03%)</title><rect x="92.9814%" y="453" width="0.0304%" height="15" fill="rgb(232,229,15)" fg:x="12241" fg:w="4"/><text x="93.2314%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::scope::TryCatch&lt;P&gt;::exception (3 samples, 0.02%)</title><rect x="93.0270%" y="453" width="0.0228%" height="15" fill="rgb(254,30,23)" fg:x="12247" fg:w="3"/><text x="93.2770%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.04%)</title><rect x="93.0649%" y="453" width="0.0380%" height="15" fill="rgb(235,160,14)" fg:x="12252" fg:w="5"/><text x="93.3149%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.04%)</title><rect x="93.1029%" y="453" width="0.0380%" height="15" fill="rgb(212,155,44)" fg:x="12257" fg:w="5"/><text x="93.3529%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="93.1409%" y="453" width="0.0228%" height="15" fill="rgb(226,2,50)" fg:x="12262" fg:w="3"/><text x="93.3909%" y="463.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,259 samples, 93.12%)</title><rect x="0.1291%" y="469" width="93.1181%" height="15" fill="rgb(234,177,6)" fg:x="17" fg:w="12259"/><text x="0.3791%" y="479.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.08%)</title><rect x="93.1637%" y="453" width="0.0836%" height="15" fill="rgb(217,24,9)" fg:x="12265" fg:w="11"/><text x="93.4137%" y="463.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRealm::execute_script (2 samples, 0.02%)</title><rect x="93.2472%" y="453" width="0.0152%" height="15" fill="rgb(220,13,46)" fg:x="12276" fg:w="2"/><text x="93.4972%" y="463.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::new (3 samples, 0.02%)</title><rect x="93.2472%" y="469" width="0.0228%" height="15" fill="rgb(239,221,27)" fg:x="12276" fg:w="3"/><text x="93.4972%" y="479.50"></text></g><g><title>http_bench_json_ops`tokio::process::imp::GlobalOrphanQueue::reap_orphans (5 samples, 0.04%)</title><rect x="93.2776%" y="469" width="0.0380%" height="15" fill="rgb(222,198,25)" fg:x="12280" fg:w="5"/><text x="93.5276%" y="479.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::Driver::turn (78 samples, 0.59%)</title><rect x="93.3460%" y="453" width="0.5925%" height="15" fill="rgb(211,99,13)" fg:x="12289" fg:w="78"/><text x="93.5960%" y="463.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (48 samples, 0.36%)</title><rect x="93.5739%" y="437" width="0.3646%" height="15" fill="rgb(232,111,31)" fg:x="12319" fg:w="48"/><text x="93.8239%" y="447.50"></text></g><g><title>http_bench_json_ops`futures_task::waker::wake_arc_raw (20 samples, 0.15%)</title><rect x="93.7866%" y="421" width="0.1519%" height="15" fill="rgb(245,82,37)" fg:x="12347" fg:w="20"/><text x="94.0366%" y="431.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (8 samples, 0.06%)</title><rect x="93.9385%" y="453" width="0.0608%" height="15" fill="rgb(227,149,46)" fg:x="12367" fg:w="8"/><text x="94.1885%" y="463.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::driver::Driver::park (804 samples, 6.11%)</title><rect x="93.3156%" y="469" width="6.1071%" height="15" fill="rgb(218,36,50)" fg:x="12285" fg:w="804"/><text x="93.5656%" y="479.50">http_ben..</text></g><g><title>libsystem_kernel.dylib`kevent (713 samples, 5.42%)</title><rect x="94.0068%" y="453" width="5.4159%" height="15" fill="rgb(226,80,48)" fg:x="12376" fg:w="713"/><text x="94.2568%" y="463.50">libsyst..</text></g><g><title>http_bench_json_ops`http_bench_json_ops::main (13,083 samples, 99.38%)</title><rect x="0.0532%" y="485" width="99.3771%" height="15" fill="rgb(238,224,15)" fg:x="7" fg:w="13083"/><text x="0.3032%" y="495.50">http_bench_json_ops`http_bench_json_ops::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (51 samples, 0.39%)</title><rect x="99.4379%" y="485" width="0.3874%" height="15" fill="rgb(241,136,10)" fg:x="13091" fg:w="51"/><text x="99.6879%" y="495.50"></text></g><g><title>dyld`start (13,143 samples, 99.83%)</title><rect x="0.0000%" y="533" width="99.8329%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="13143"/><text x="0.2500%" y="543.50">dyld`start</text></g><g><title>http_bench_json_ops`main (13,143 samples, 99.83%)</title><rect x="0.0000%" y="517" width="99.8329%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="13143"/><text x="0.2500%" y="527.50">http_bench_json_ops`main</text></g><g><title>http_bench_json_ops`std::sys_common::backtrace::__rust_begin_short_backtrace (13,143 samples, 99.83%)</title><rect x="0.0000%" y="501" width="99.8329%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="13143"/><text x="0.2500%" y="511.50">http_bench_json_ops`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::CreateGraph (3 samples, 0.02%)</title><rect x="99.8329%" y="405" width="0.0228%" height="15" fill="rgb(245,177,15)" fg:x="13143" fg:w="3"/><text x="100.0829%" y="415.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (3 samples, 0.02%)</title><rect x="99.8329%" y="389" width="0.0228%" height="15" fill="rgb(206,64,50)" fg:x="13143" fg:w="3"/><text x="100.0829%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::InliningPhase::Run (3 samples, 0.02%)</title><rect x="99.8329%" y="373" width="0.0228%" height="15" fill="rgb(234,36,40)" fg:x="13143" fg:w="3"/><text x="100.0829%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="99.8329%" y="357" width="0.0228%" height="15" fill="rgb(213,64,8)" fg:x="13143" fg:w="3"/><text x="100.0829%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="99.8329%" y="341" width="0.0228%" height="15" fill="rgb(210,75,36)" fg:x="13143" fg:w="3"/><text x="100.0829%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::Reduce (3 samples, 0.02%)</title><rect x="99.8329%" y="325" width="0.0228%" height="15" fill="rgb(229,88,21)" fg:x="13143" fg:w="3"/><text x="100.0829%" y="335.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (3 samples, 0.02%)</title><rect x="99.8557%" y="389" width="0.0228%" height="15" fill="rgb(252,204,47)" fg:x="13146" fg:w="3"/><text x="100.1057%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (3 samples, 0.02%)</title><rect x="99.8557%" y="373" width="0.0228%" height="15" fill="rgb(208,77,27)" fg:x="13146" fg:w="3"/><text x="100.1057%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::Scheduler::ScheduleLate (3 samples, 0.02%)</title><rect x="99.8557%" y="357" width="0.0228%" height="15" fill="rgb(221,76,26)" fg:x="13146" fg:w="3"/><text x="100.1057%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (3 samples, 0.02%)</title><rect x="99.8557%" y="341" width="0.0228%" height="15" fill="rgb(225,139,18)" fg:x="13146" fg:w="3"/><text x="100.1057%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (2 samples, 0.02%)</title><rect x="99.8633%" y="325" width="0.0152%" height="15" fill="rgb(230,137,11)" fg:x="13147" fg:w="2"/><text x="100.1133%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::ScheduleLateNodeVisitor::SplitNode (2 samples, 0.02%)</title><rect x="99.8633%" y="309" width="0.0152%" height="15" fill="rgb(212,28,1)" fg:x="13147" fg:w="2"/><text x="100.1133%" y="319.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (3 samples, 0.02%)</title><rect x="99.8785%" y="389" width="0.0228%" height="15" fill="rgb(248,164,17)" fg:x="13149" fg:w="3"/><text x="100.1285%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EffectControlLinearizationPhase::Run (3 samples, 0.02%)</title><rect x="99.8785%" y="373" width="0.0228%" height="15" fill="rgb(222,171,42)" fg:x="13149" fg:w="3"/><text x="100.1285%" y="383.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (2 samples, 0.02%)</title><rect x="99.9013%" y="389" width="0.0152%" height="15" fill="rgb(243,84,45)" fg:x="13152" fg:w="2"/><text x="100.1513%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EscapeAnalysisPhase::Run (2 samples, 0.02%)</title><rect x="99.9013%" y="373" width="0.0152%" height="15" fill="rgb(252,49,23)" fg:x="13152" fg:w="2"/><text x="100.1513%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EffectGraphReducer::ReduceFrom (2 samples, 0.02%)</title><rect x="99.9013%" y="357" width="0.0152%" height="15" fill="rgb(215,19,7)" fg:x="13152" fg:w="2"/><text x="100.1513%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EscapeAnalysis::Reduce (2 samples, 0.02%)</title><rect x="99.9013%" y="341" width="0.0152%" height="15" fill="rgb(238,81,41)" fg:x="13152" fg:w="2"/><text x="100.1513%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EscapeAnalysisTracker::Scope::~Scope (2 samples, 0.02%)</title><rect x="99.9013%" y="325" width="0.0152%" height="15" fill="rgb(210,199,37)" fg:x="13152" fg:w="2"/><text x="100.1513%" y="335.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (2 samples, 0.02%)</title><rect x="99.9240%" y="389" width="0.0152%" height="15" fill="rgb(244,192,49)" fg:x="13155" fg:w="2"/><text x="100.1740%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::LoadEliminationPhase::Run (2 samples, 0.02%)</title><rect x="99.9240%" y="373" width="0.0152%" height="15" fill="rgb(226,211,11)" fg:x="13155" fg:w="2"/><text x="100.1740%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="99.9240%" y="357" width="0.0152%" height="15" fill="rgb(236,162,54)" fg:x="13155" fg:w="2"/><text x="100.1740%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="99.9240%" y="341" width="0.0152%" height="15" fill="rgb(220,229,9)" fg:x="13155" fg:w="2"/><text x="100.1740%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.02%)</title><rect x="99.9240%" y="325" width="0.0152%" height="15" fill="rgb(250,87,22)" fg:x="13155" fg:w="2"/><text x="100.1740%" y="335.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (2 samples, 0.02%)</title><rect x="99.9696%" y="357" width="0.0152%" height="15" fill="rgb(239,43,17)" fg:x="13161" fg:w="2"/><text x="100.2196%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (2 samples, 0.02%)</title><rect x="99.9696%" y="341" width="0.0152%" height="15" fill="rgb(231,177,25)" fg:x="13161" fg:w="2"/><text x="100.2196%" y="351.50"></text></g><g><title>all (13,165 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="13165"/><text x="0.2500%" y="559.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (22 samples, 0.17%)</title><rect x="99.8329%" y="533" width="0.1671%" height="15" fill="rgb(238,219,53)" fg:x="13143" fg:w="22"/><text x="100.0829%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (22 samples, 0.17%)</title><rect x="99.8329%" y="517" width="0.1671%" height="15" fill="rgb(232,167,36)" fg:x="13143" fg:w="22"/><text x="100.0829%" y="527.50"></text></g><g><title>http_bench_json_ops`v8::base::ThreadEntry (22 samples, 0.17%)</title><rect x="99.8329%" y="501" width="0.1671%" height="15" fill="rgb(244,19,51)" fg:x="13143" fg:w="22"/><text x="100.0829%" y="511.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (22 samples, 0.17%)</title><rect x="99.8329%" y="485" width="0.1671%" height="15" fill="rgb(224,6,22)" fg:x="13143" fg:w="22"/><text x="100.0829%" y="495.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (22 samples, 0.17%)</title><rect x="99.8329%" y="469" width="0.1671%" height="15" fill="rgb(224,145,5)" fg:x="13143" fg:w="22"/><text x="100.0829%" y="479.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizingCompileDispatcher::CompileNext (22 samples, 0.17%)</title><rect x="99.8329%" y="453" width="0.1671%" height="15" fill="rgb(234,130,49)" fg:x="13143" fg:w="22"/><text x="100.0829%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizedCompilationJob::ExecuteJob (22 samples, 0.17%)</title><rect x="99.8329%" y="437" width="0.1671%" height="15" fill="rgb(254,6,2)" fg:x="13143" fg:w="22"/><text x="100.0829%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (22 samples, 0.17%)</title><rect x="99.8329%" y="421" width="0.1671%" height="15" fill="rgb(208,96,46)" fg:x="13143" fg:w="22"/><text x="100.0829%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::OptimizeGraph (19 samples, 0.14%)</title><rect x="99.8557%" y="405" width="0.1443%" height="15" fill="rgb(239,3,39)" fg:x="13146" fg:w="19"/><text x="100.1057%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::SelectInstructions (5 samples, 0.04%)</title><rect x="99.9620%" y="389" width="0.0380%" height="15" fill="rgb(233,210,1)" fg:x="13160" fg:w="5"/><text x="100.2120%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (4 samples, 0.03%)</title><rect x="99.9696%" y="373" width="0.0304%" height="15" fill="rgb(244,137,37)" fg:x="13161" fg:w="4"/><text x="100.2196%" y="383.50"></text></g></svg></svg>