<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1206" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1189.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1189.00"> </text><svg id="frames" x="10" width="1180" total_samples="5081"><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.0000%" y="1077" width="0.0197%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1087.50"></text></g><g><title>deno`OUTLINED_FUNCTION_12219 (2 samples, 0.04%)</title><rect x="0.0197%" y="1077" width="0.0394%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2697%" y="1087.50"></text></g><g><title>deno`OUTLINED_FUNCTION_17493 (1 samples, 0.02%)</title><rect x="0.0590%" y="1077" width="0.0197%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.3090%" y="1087.50"></text></g><g><title>deno`OUTLINED_FUNCTION_19451 (1 samples, 0.02%)</title><rect x="0.0787%" y="1077" width="0.0197%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3287%" y="1087.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36900 (1 samples, 0.02%)</title><rect x="0.0984%" y="1077" width="0.0197%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.3484%" y="1087.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::basic_scheduler::Core&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="0.1181%" y="1077" width="0.0197%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="0.3681%" y="1087.50"></text></g><g><title>deno`OUTLINED_FUNCTION_25187 (1 samples, 0.02%)</title><rect x="0.4330%" y="1045" width="0.0197%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="1"/><text x="0.6830%" y="1055.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6622 (1 samples, 0.02%)</title><rect x="0.4527%" y="1045" width="0.0197%" height="15" fill="rgb(228,23,34)" fg:x="23" fg:w="1"/><text x="0.7027%" y="1055.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.04%)</title><rect x="0.4723%" y="1045" width="0.0394%" height="15" fill="rgb(218,30,26)" fg:x="24" fg:w="2"/><text x="0.7223%" y="1055.50"></text></g><g><title>deno`OUTLINED_FUNCTION_7955 (1 samples, 0.02%)</title><rect x="0.5708%" y="1013" width="0.0197%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="1"/><text x="0.8208%" y="1023.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.9053%" y="901" width="0.0197%" height="15" fill="rgb(250,228,42)" fg:x="46" fg:w="1"/><text x="1.1553%" y="911.50"></text></g><g><title>deno`&lt;v8::V8::GLOBAL_STATE as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="0.9250%" y="901" width="0.0197%" height="15" fill="rgb(240,193,28)" fg:x="47" fg:w="1"/><text x="1.1750%" y="911.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.9447%" y="901" width="0.0197%" height="15" fill="rgb(216,20,37)" fg:x="48" fg:w="1"/><text x="1.1947%" y="911.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="0.9644%" y="901" width="0.0197%" height="15" fill="rgb(206,188,39)" fg:x="49" fg:w="1"/><text x="1.2144%" y="911.50"></text></g><g><title>deno`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="0.9841%" y="901" width="0.0197%" height="15" fill="rgb(217,207,13)" fg:x="50" fg:w="1"/><text x="1.2341%" y="911.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2 (1 samples, 0.02%)</title><rect x="1.0037%" y="901" width="0.0197%" height="15" fill="rgb(231,73,38)" fg:x="51" fg:w="1"/><text x="1.2537%" y="911.50"></text></g><g><title>deno`OUTLINED_FUNCTION_22927 (2 samples, 0.04%)</title><rect x="1.0234%" y="901" width="0.0394%" height="15" fill="rgb(225,20,46)" fg:x="52" fg:w="2"/><text x="1.2734%" y="911.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="1.0628%" y="901" width="0.0197%" height="15" fill="rgb(210,31,41)" fg:x="54" fg:w="1"/><text x="1.3128%" y="911.50"></text></g><g><title>deno`deno::proc_state::ProcState::prepare_module_load::_{{closure}} (1 samples, 0.02%)</title><rect x="1.0825%" y="901" width="0.0197%" height="15" fill="rgb(221,200,47)" fg:x="55" fg:w="1"/><text x="1.3325%" y="911.50"></text></g><g><title>deno`deno::cache::parsed_source::ParsedSourceCache::as_analyzer (1 samples, 0.02%)</title><rect x="1.0825%" y="885" width="0.0197%" height="15" fill="rgb(226,26,5)" fg:x="55" fg:w="1"/><text x="1.3325%" y="895.50"></text></g><g><title>deno`deno::cache::common::run_sqlite_pragma (1 samples, 0.02%)</title><rect x="1.0825%" y="869" width="0.0197%" height="15" fill="rgb(249,33,26)" fg:x="55" fg:w="1"/><text x="1.3325%" y="879.50"></text></g><g><title>deno`rusqlite::Connection::execute_batch (1 samples, 0.02%)</title><rect x="1.0825%" y="853" width="0.0197%" height="15" fill="rgb(235,183,28)" fg:x="55" fg:w="1"/><text x="1.3325%" y="863.50"></text></g><g><title>deno`rusqlite::Connection::prepare (1 samples, 0.02%)</title><rect x="1.0825%" y="837" width="0.0197%" height="15" fill="rgb(221,5,38)" fg:x="55" fg:w="1"/><text x="1.3325%" y="847.50"></text></g><g><title>deno`rusqlite::inner_connection::InnerConnection::prepare (1 samples, 0.02%)</title><rect x="1.0825%" y="821" width="0.0197%" height="15" fill="rgb(247,18,42)" fg:x="55" fg:w="1"/><text x="1.3325%" y="831.50"></text></g><g><title>deno`sqlite3LockAndPrepare (1 samples, 0.02%)</title><rect x="1.0825%" y="805" width="0.0197%" height="15" fill="rgb(241,131,45)" fg:x="55" fg:w="1"/><text x="1.3325%" y="815.50"></text></g><g><title>deno`sqlite3Prepare (1 samples, 0.02%)</title><rect x="1.0825%" y="789" width="0.0197%" height="15" fill="rgb(249,31,29)" fg:x="55" fg:w="1"/><text x="1.3325%" y="799.50"></text></g><g><title>deno`sqlite3RunParser (1 samples, 0.02%)</title><rect x="1.0825%" y="773" width="0.0197%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="1"/><text x="1.3325%" y="783.50"></text></g><g><title>deno`yy_reduce (1 samples, 0.02%)</title><rect x="1.0825%" y="757" width="0.0197%" height="15" fill="rgb(238,160,17)" fg:x="55" fg:w="1"/><text x="1.3325%" y="767.50"></text></g><g><title>deno`sqlite3Pragma (1 samples, 0.02%)</title><rect x="1.0825%" y="741" width="0.0197%" height="15" fill="rgb(214,148,48)" fg:x="55" fg:w="1"/><text x="1.3325%" y="751.50"></text></g><g><title>deno`sqlite3ReadSchema (1 samples, 0.02%)</title><rect x="1.0825%" y="725" width="0.0197%" height="15" fill="rgb(232,36,49)" fg:x="55" fg:w="1"/><text x="1.3325%" y="735.50"></text></g><g><title>deno`sqlite3Init (1 samples, 0.02%)</title><rect x="1.0825%" y="709" width="0.0197%" height="15" fill="rgb(209,103,24)" fg:x="55" fg:w="1"/><text x="1.3325%" y="719.50"></text></g><g><title>deno`sqlite3InitOne (1 samples, 0.02%)</title><rect x="1.0825%" y="693" width="0.0197%" height="15" fill="rgb(229,88,8)" fg:x="55" fg:w="1"/><text x="1.3325%" y="703.50"></text></g><g><title>deno`sqlite3BtreeBeginTrans (1 samples, 0.02%)</title><rect x="1.0825%" y="677" width="0.0197%" height="15" fill="rgb(213,181,19)" fg:x="55" fg:w="1"/><text x="1.3325%" y="687.50"></text></g><g><title>deno`sqlite3PagerSharedLock (1 samples, 0.02%)</title><rect x="1.0825%" y="661" width="0.0197%" height="15" fill="rgb(254,191,54)" fg:x="55" fg:w="1"/><text x="1.3325%" y="671.50"></text></g><g><title>deno`walTryBeginRead (1 samples, 0.02%)</title><rect x="1.0825%" y="645" width="0.0197%" height="15" fill="rgb(241,83,37)" fg:x="55" fg:w="1"/><text x="1.3325%" y="655.50"></text></g><g><title>deno`walIndexReadHdr (1 samples, 0.02%)</title><rect x="1.0825%" y="629" width="0.0197%" height="15" fill="rgb(233,36,39)" fg:x="55" fg:w="1"/><text x="1.3325%" y="639.50"></text></g><g><title>deno`unixShmLock (1 samples, 0.02%)</title><rect x="1.0825%" y="613" width="0.0197%" height="15" fill="rgb(226,3,54)" fg:x="55" fg:w="1"/><text x="1.3325%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (1 samples, 0.02%)</title><rect x="1.0825%" y="597" width="0.0197%" height="15" fill="rgb(245,192,40)" fg:x="55" fg:w="1"/><text x="1.3325%" y="607.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (1 samples, 0.02%)</title><rect x="1.1021%" y="901" width="0.0197%" height="15" fill="rgb(238,167,29)" fg:x="56" fg:w="1"/><text x="1.3521%" y="911.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::evaluate_pending_module (1 samples, 0.02%)</title><rect x="1.1218%" y="901" width="0.0197%" height="15" fill="rgb(232,182,51)" fg:x="57" fg:w="1"/><text x="1.3718%" y="911.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (1 samples, 0.02%)</title><rect x="1.1415%" y="901" width="0.0197%" height="15" fill="rgb(231,60,39)" fg:x="58" fg:w="1"/><text x="1.3915%" y="911.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (1 samples, 0.02%)</title><rect x="1.1612%" y="901" width="0.0197%" height="15" fill="rgb(208,69,12)" fg:x="59" fg:w="1"/><text x="1.4112%" y="911.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.04%)</title><rect x="3.9166%" y="869" width="0.0394%" height="15" fill="rgb(235,93,37)" fg:x="199" fg:w="2"/><text x="4.1666%" y="879.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (2 samples, 0.04%)</title><rect x="3.9559%" y="869" width="0.0394%" height="15" fill="rgb(213,116,39)" fg:x="201" fg:w="2"/><text x="4.2059%" y="879.50"></text></g><g><title>deno`v8__Global__New (4 samples, 0.08%)</title><rect x="3.9953%" y="869" width="0.0787%" height="15" fill="rgb(222,207,29)" fg:x="203" fg:w="4"/><text x="4.2453%" y="879.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.06%)</title><rect x="4.0150%" y="853" width="0.0590%" height="15" fill="rgb(206,96,30)" fg:x="204" fg:w="3"/><text x="4.2650%" y="863.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="3.9166%" y="885" width="0.1771%" height="15" fill="rgb(218,138,4)" fg:x="199" fg:w="9"/><text x="4.1666%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="4.0740%" y="869" width="0.0197%" height="15" fill="rgb(250,191,14)" fg:x="207" fg:w="1"/><text x="4.3240%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="4.0740%" y="853" width="0.0197%" height="15" fill="rgb(239,60,40)" fg:x="207" fg:w="1"/><text x="4.3240%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="4.0740%" y="837" width="0.0197%" height="15" fill="rgb(206,27,48)" fg:x="207" fg:w="1"/><text x="4.3240%" y="847.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="4.4283%" y="837" width="0.0394%" height="15" fill="rgb(225,35,8)" fg:x="225" fg:w="2"/><text x="4.6783%" y="847.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cancel::internal::Node&gt; (1 samples, 0.02%)</title><rect x="4.4676%" y="837" width="0.0197%" height="15" fill="rgb(250,213,24)" fg:x="227" fg:w="1"/><text x="4.7176%" y="847.50"></text></g><g><title>deno`&lt;deno_core::async_cancel::internal::Node as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="4.4676%" y="821" width="0.0197%" height="15" fill="rgb(247,123,22)" fg:x="227" fg:w="1"/><text x="4.7176%" y="831.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowImpl&lt;tokio::net::tcp::split_owned::OwnedReadHalf,deno_core::async_cell::internal::Exclusive&gt;&gt; (1 samples, 0.02%)</title><rect x="4.4873%" y="837" width="0.0197%" height="15" fill="rgb(231,138,38)" fg:x="228" fg:w="1"/><text x="4.7373%" y="847.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (1 samples, 0.02%)</title><rect x="4.4873%" y="821" width="0.0197%" height="15" fill="rgb(231,145,46)" fg:x="228" fg:w="1"/><text x="4.7373%" y="831.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (1 samples, 0.02%)</title><rect x="4.5070%" y="837" width="0.0197%" height="15" fill="rgb(251,118,11)" fg:x="229" fg:w="1"/><text x="4.7570%" y="847.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="4.6448%" y="821" width="0.0197%" height="15" fill="rgb(217,147,25)" fg:x="236" fg:w="1"/><text x="4.8948%" y="831.50"></text></g><g><title>deno`futures_task::noop_waker::noop (2 samples, 0.04%)</title><rect x="4.6644%" y="821" width="0.0394%" height="15" fill="rgb(247,81,37)" fg:x="237" fg:w="2"/><text x="4.9144%" y="831.50"></text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.02%)</title><rect x="4.7038%" y="821" width="0.0197%" height="15" fill="rgb(209,12,38)" fg:x="239" fg:w="1"/><text x="4.9538%" y="831.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.04%)</title><rect x="4.7235%" y="821" width="0.0394%" height="15" fill="rgb(227,1,9)" fg:x="240" fg:w="2"/><text x="4.9735%" y="831.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (643 samples, 12.65%)</title><rect x="4.3299%" y="853" width="12.6550%" height="15" fill="rgb(248,47,43)" fg:x="220" fg:w="643"/><text x="4.5799%" y="863.50">deno`&lt;core::future:..</text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (633 samples, 12.46%)</title><rect x="4.5267%" y="837" width="12.4582%" height="15" fill="rgb(221,10,30)" fg:x="230" fg:w="633"/><text x="4.7767%" y="847.50">deno`tokio::net::tc..</text></g><g><title>libsystem_kernel.dylib`__recvfrom (621 samples, 12.22%)</title><rect x="4.7628%" y="821" width="12.2220%" height="15" fill="rgb(210,229,1)" fg:x="242" fg:w="621"/><text x="5.0128%" y="831.50">libsystem_kernel.d..</text></g><g><title>deno`std__shared_ptr__v8__BackingStore__reset (1 samples, 0.02%)</title><rect x="16.9848%" y="853" width="0.0197%" height="15" fill="rgb(222,148,37)" fg:x="863" fg:w="1"/><text x="17.2348%" y="863.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (3 samples, 0.06%)</title><rect x="17.0045%" y="853" width="0.0590%" height="15" fill="rgb(234,67,33)" fg:x="864" fg:w="3"/><text x="17.2545%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.08%)</title><rect x="17.0636%" y="853" width="0.0787%" height="15" fill="rgb(247,98,35)" fg:x="867" fg:w="4"/><text x="17.3136%" y="863.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (658 samples, 12.95%)</title><rect x="4.2118%" y="869" width="12.9502%" height="15" fill="rgb(247,138,52)" fg:x="214" fg:w="658"/><text x="4.4618%" y="879.50">deno`&lt;core::future:..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="17.1423%" y="853" width="0.0197%" height="15" fill="rgb(213,79,30)" fg:x="871" fg:w="1"/><text x="17.3923%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="17.1620%" y="869" width="0.0197%" height="15" fill="rgb(246,177,23)" fg:x="872" fg:w="1"/><text x="17.4120%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.08%)</title><rect x="17.1817%" y="869" width="0.0787%" height="15" fill="rgb(230,62,27)" fg:x="873" fg:w="4"/><text x="17.4317%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.04%)</title><rect x="17.2210%" y="853" width="0.0394%" height="15" fill="rgb(216,154,8)" fg:x="875" fg:w="2"/><text x="17.4710%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.04%)</title><rect x="17.2604%" y="869" width="0.0394%" height="15" fill="rgb(244,35,45)" fg:x="877" fg:w="2"/><text x="17.5104%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.04%)</title><rect x="17.2997%" y="869" width="0.0394%" height="15" fill="rgb(251,115,12)" fg:x="879" fg:w="2"/><text x="17.5497%" y="879.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (674 samples, 13.27%)</title><rect x="4.0937%" y="885" width="13.2651%" height="15" fill="rgb(240,54,50)" fg:x="208" fg:w="674"/><text x="4.3437%" y="895.50">deno`&lt;core::future::..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="17.3391%" y="869" width="0.0197%" height="15" fill="rgb(233,84,52)" fg:x="881" fg:w="1"/><text x="17.5891%" y="879.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="17.3588%" y="885" width="0.0394%" height="15" fill="rgb(207,117,47)" fg:x="882" fg:w="2"/><text x="17.6088%" y="895.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (1 samples, 0.02%)</title><rect x="17.4375%" y="837" width="0.0197%" height="15" fill="rgb(249,43,39)" fg:x="886" fg:w="1"/><text x="17.6875%" y="847.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (1 samples, 0.02%)</title><rect x="17.4375%" y="821" width="0.0197%" height="15" fill="rgb(209,38,44)" fg:x="886" fg:w="1"/><text x="17.6875%" y="831.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (4 samples, 0.08%)</title><rect x="17.3981%" y="885" width="0.0787%" height="15" fill="rgb(236,212,23)" fg:x="884" fg:w="4"/><text x="17.6481%" y="895.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (4 samples, 0.08%)</title><rect x="17.3981%" y="869" width="0.0787%" height="15" fill="rgb(242,79,21)" fg:x="884" fg:w="4"/><text x="17.6481%" y="879.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (4 samples, 0.08%)</title><rect x="17.3981%" y="853" width="0.0787%" height="15" fill="rgb(211,96,35)" fg:x="884" fg:w="4"/><text x="17.6481%" y="863.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (1 samples, 0.02%)</title><rect x="17.4572%" y="837" width="0.0197%" height="15" fill="rgb(253,215,40)" fg:x="887" fg:w="1"/><text x="17.7072%" y="847.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="17.4769%" y="885" width="0.0197%" height="15" fill="rgb(211,81,21)" fg:x="888" fg:w="1"/><text x="17.7269%" y="895.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="17.4966%" y="885" width="0.0197%" height="15" fill="rgb(208,190,38)" fg:x="889" fg:w="1"/><text x="17.7466%" y="895.50"></text></g><g><title>deno`OUTLINED_FUNCTION_10628 (1 samples, 0.02%)</title><rect x="17.5162%" y="885" width="0.0197%" height="15" fill="rgb(235,213,38)" fg:x="890" fg:w="1"/><text x="17.7662%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="17.6540%" y="837" width="0.0197%" height="15" fill="rgb(237,122,38)" fg:x="897" fg:w="1"/><text x="17.9040%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="17.6540%" y="821" width="0.0197%" height="15" fill="rgb(244,218,35)" fg:x="897" fg:w="1"/><text x="17.9040%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="17.6540%" y="805" width="0.0197%" height="15" fill="rgb(240,68,47)" fg:x="897" fg:w="1"/><text x="17.9040%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.10%)</title><rect x="17.6737%" y="837" width="0.0984%" height="15" fill="rgb(210,16,53)" fg:x="898" fg:w="5"/><text x="17.9237%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.08%)</title><rect x="17.6934%" y="821" width="0.0787%" height="15" fill="rgb(235,124,12)" fg:x="899" fg:w="4"/><text x="17.9434%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="17.7130%" y="805" width="0.0590%" height="15" fill="rgb(224,169,11)" fg:x="900" fg:w="3"/><text x="17.9630%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.20%)</title><rect x="17.5950%" y="853" width="0.1968%" height="15" fill="rgb(250,166,2)" fg:x="894" fg:w="10"/><text x="17.8450%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="17.7721%" y="837" width="0.0197%" height="15" fill="rgb(242,216,29)" fg:x="903" fg:w="1"/><text x="18.0221%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="17.7918%" y="853" width="0.0197%" height="15" fill="rgb(230,116,27)" fg:x="904" fg:w="1"/><text x="18.0418%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="17.8115%" y="853" width="0.0197%" height="15" fill="rgb(228,99,48)" fg:x="905" fg:w="1"/><text x="18.0615%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="17.8705%" y="837" width="0.0197%" height="15" fill="rgb(253,11,6)" fg:x="908" fg:w="1"/><text x="18.1205%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="17.9099%" y="821" width="0.0197%" height="15" fill="rgb(247,143,39)" fg:x="910" fg:w="1"/><text x="18.1599%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.04%)</title><rect x="17.9295%" y="821" width="0.0394%" height="15" fill="rgb(236,97,10)" fg:x="911" fg:w="2"/><text x="18.1795%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.04%)</title><rect x="17.9689%" y="821" width="0.0394%" height="15" fill="rgb(233,208,19)" fg:x="913" fg:w="2"/><text x="18.2189%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="18.0870%" y="805" width="0.0197%" height="15" fill="rgb(216,164,2)" fg:x="919" fg:w="1"/><text x="18.3370%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="18.1067%" y="805" width="0.0394%" height="15" fill="rgb(220,129,5)" fg:x="920" fg:w="2"/><text x="18.3567%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="18.1067%" y="789" width="0.0394%" height="15" fill="rgb(242,17,10)" fg:x="920" fg:w="2"/><text x="18.3567%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="18.1264%" y="773" width="0.0197%" height="15" fill="rgb(242,107,0)" fg:x="921" fg:w="1"/><text x="18.3764%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.16%)</title><rect x="18.0083%" y="821" width="0.1574%" height="15" fill="rgb(251,28,31)" fg:x="915" fg:w="8"/><text x="18.2583%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="18.1460%" y="805" width="0.0197%" height="15" fill="rgb(233,223,10)" fg:x="922" fg:w="1"/><text x="18.3960%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.10%)</title><rect x="18.1854%" y="805" width="0.0984%" height="15" fill="rgb(215,21,27)" fg:x="924" fg:w="5"/><text x="18.4354%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.06%)</title><rect x="18.2248%" y="789" width="0.0590%" height="15" fill="rgb(232,23,21)" fg:x="926" fg:w="3"/><text x="18.4748%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="18.2641%" y="773" width="0.0197%" height="15" fill="rgb(244,5,23)" fg:x="928" fg:w="1"/><text x="18.5141%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="18.2838%" y="805" width="0.0197%" height="15" fill="rgb(226,81,46)" fg:x="929" fg:w="1"/><text x="18.5338%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="18.3035%" y="805" width="0.0197%" height="15" fill="rgb(247,70,30)" fg:x="930" fg:w="1"/><text x="18.5535%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="18.3232%" y="805" width="0.0197%" height="15" fill="rgb(212,68,19)" fg:x="931" fg:w="1"/><text x="18.5732%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.06%)</title><rect x="18.3428%" y="805" width="0.0590%" height="15" fill="rgb(240,187,13)" fg:x="932" fg:w="3"/><text x="18.5928%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="18.3625%" y="789" width="0.0394%" height="15" fill="rgb(223,113,26)" fg:x="933" fg:w="2"/><text x="18.6125%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.28%)</title><rect x="18.1657%" y="821" width="0.2755%" height="15" fill="rgb(206,192,2)" fg:x="923" fg:w="14"/><text x="18.4157%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.04%)</title><rect x="18.4019%" y="805" width="0.0394%" height="15" fill="rgb(241,108,4)" fg:x="935" fg:w="2"/><text x="18.6519%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="18.4216%" y="789" width="0.0197%" height="15" fill="rgb(247,173,49)" fg:x="936" fg:w="1"/><text x="18.6716%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="18.4413%" y="821" width="0.0197%" height="15" fill="rgb(224,114,35)" fg:x="937" fg:w="1"/><text x="18.6913%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (34 samples, 0.67%)</title><rect x="17.8902%" y="837" width="0.6692%" height="15" fill="rgb(245,159,27)" fg:x="909" fg:w="34"/><text x="18.1402%" y="847.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.10%)</title><rect x="18.4609%" y="821" width="0.0984%" height="15" fill="rgb(245,172,44)" fg:x="938" fg:w="5"/><text x="18.7109%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.04%)</title><rect x="18.5593%" y="837" width="0.0394%" height="15" fill="rgb(236,23,11)" fg:x="943" fg:w="2"/><text x="18.8093%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="18.5987%" y="837" width="0.0197%" height="15" fill="rgb(205,117,38)" fg:x="945" fg:w="1"/><text x="18.8487%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`realloc (41 samples, 0.81%)</title><rect x="17.8311%" y="853" width="0.8069%" height="15" fill="rgb(237,72,25)" fg:x="906" fg:w="41"/><text x="18.0811%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="18.6184%" y="837" width="0.0197%" height="15" fill="rgb(244,70,9)" fg:x="946" fg:w="1"/><text x="18.8684%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="18.6184%" y="821" width="0.0197%" height="15" fill="rgb(217,125,39)" fg:x="946" fg:w="1"/><text x="18.8684%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="18.6381%" y="853" width="0.0197%" height="15" fill="rgb(235,36,10)" fg:x="947" fg:w="1"/><text x="18.8881%" y="863.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (55 samples, 1.08%)</title><rect x="17.5950%" y="869" width="1.0825%" height="15" fill="rgb(251,123,47)" fg:x="894" fg:w="55"/><text x="17.8450%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="18.6577%" y="853" width="0.0197%" height="15" fill="rgb(221,13,13)" fg:x="948" fg:w="1"/><text x="18.9077%" y="863.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (59 samples, 1.16%)</title><rect x="17.5359%" y="885" width="1.1612%" height="15" fill="rgb(238,131,9)" fg:x="891" fg:w="59"/><text x="17.7859%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="18.6774%" y="869" width="0.0197%" height="15" fill="rgb(211,50,8)" fg:x="949" fg:w="1"/><text x="18.9274%" y="879.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="18.6971%" y="885" width="0.0197%" height="15" fill="rgb(245,182,24)" fg:x="950" fg:w="1"/><text x="18.9471%" y="895.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (2 samples, 0.04%)</title><rect x="18.7168%" y="885" width="0.0394%" height="15" fill="rgb(242,14,37)" fg:x="951" fg:w="2"/><text x="18.9668%" y="895.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (1 samples, 0.02%)</title><rect x="18.7365%" y="869" width="0.0197%" height="15" fill="rgb(246,228,12)" fg:x="952" fg:w="1"/><text x="18.9865%" y="879.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.04%)</title><rect x="18.7562%" y="885" width="0.0394%" height="15" fill="rgb(213,55,15)" fg:x="953" fg:w="2"/><text x="19.0062%" y="895.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (8 samples, 0.16%)</title><rect x="18.7955%" y="885" width="0.1574%" height="15" fill="rgb(209,9,3)" fg:x="955" fg:w="8"/><text x="19.0455%" y="895.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="18.9530%" y="885" width="0.0197%" height="15" fill="rgb(230,59,30)" fg:x="963" fg:w="1"/><text x="19.2030%" y="895.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_core::runtime::ModEvaluate&gt;&gt; (1 samples, 0.02%)</title><rect x="18.9726%" y="885" width="0.0197%" height="15" fill="rgb(209,121,21)" fg:x="964" fg:w="1"/><text x="19.2226%" y="895.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (3 samples, 0.06%)</title><rect x="18.9923%" y="885" width="0.0590%" height="15" fill="rgb(220,109,13)" fg:x="965" fg:w="3"/><text x="19.2423%" y="895.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.04%)</title><rect x="19.0514%" y="885" width="0.0394%" height="15" fill="rgb(232,18,1)" fg:x="968" fg:w="2"/><text x="19.3014%" y="895.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (1 samples, 0.02%)</title><rect x="19.1104%" y="869" width="0.0197%" height="15" fill="rgb(215,41,42)" fg:x="971" fg:w="1"/><text x="19.3604%" y="879.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (3 samples, 0.06%)</title><rect x="19.1301%" y="869" width="0.0590%" height="15" fill="rgb(224,123,36)" fg:x="972" fg:w="3"/><text x="19.3801%" y="879.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (6 samples, 0.12%)</title><rect x="19.0907%" y="885" width="0.1181%" height="15" fill="rgb(240,125,3)" fg:x="970" fg:w="6"/><text x="19.3407%" y="895.50"></text></g><g><title>deno`futures_task::waker::clone_arc_raw (1 samples, 0.02%)</title><rect x="19.1891%" y="869" width="0.0197%" height="15" fill="rgb(205,98,50)" fg:x="975" fg:w="1"/><text x="19.4391%" y="879.50"></text></g><g><title>deno`v8::Context::GetIsolate (1 samples, 0.02%)</title><rect x="19.2679%" y="869" width="0.0197%" height="15" fill="rgb(205,185,37)" fg:x="979" fg:w="1"/><text x="19.5179%" y="879.50"></text></g><g><title>deno`v8::Context::GetNumberOfEmbedderDataFields (2 samples, 0.04%)</title><rect x="19.2875%" y="869" width="0.0394%" height="15" fill="rgb(238,207,15)" fg:x="980" fg:w="2"/><text x="19.5375%" y="879.50"></text></g><g><title>deno`v8::context::_&lt;impl v8::data::Context&gt;::get_annex_mut (6 samples, 0.12%)</title><rect x="19.3269%" y="869" width="0.1181%" height="15" fill="rgb(213,199,42)" fg:x="982" fg:w="6"/><text x="19.5769%" y="879.50"></text></g><g><title>deno`v8::Context::GetNumberOfEmbedderDataFields (2 samples, 0.04%)</title><rect x="19.4056%" y="853" width="0.0394%" height="15" fill="rgb(235,201,11)" fg:x="986" fg:w="2"/><text x="19.6556%" y="863.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (13 samples, 0.26%)</title><rect x="19.2088%" y="885" width="0.2559%" height="15" fill="rgb(207,46,11)" fg:x="976" fg:w="13"/><text x="19.4588%" y="895.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (1 samples, 0.02%)</title><rect x="19.4450%" y="869" width="0.0197%" height="15" fill="rgb(241,35,35)" fg:x="988" fg:w="1"/><text x="19.6950%" y="879.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (1 samples, 0.02%)</title><rect x="19.5040%" y="869" width="0.0197%" height="15" fill="rgb(243,32,47)" fg:x="991" fg:w="1"/><text x="19.7540%" y="879.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (1 samples, 0.02%)</title><rect x="19.5237%" y="869" width="0.0197%" height="15" fill="rgb(247,202,23)" fg:x="992" fg:w="1"/><text x="19.7737%" y="879.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (1 samples, 0.02%)</title><rect x="19.5434%" y="821" width="0.0197%" height="15" fill="rgb(219,102,11)" fg:x="993" fg:w="1"/><text x="19.7934%" y="831.50"></text></g><g><title>deno`v8::Context::Exit (1 samples, 0.02%)</title><rect x="19.5631%" y="821" width="0.0197%" height="15" fill="rgb(243,110,44)" fg:x="994" fg:w="1"/><text x="19.8131%" y="831.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (3 samples, 0.06%)</title><rect x="19.5434%" y="853" width="0.0590%" height="15" fill="rgb(222,74,54)" fg:x="993" fg:w="3"/><text x="19.7934%" y="863.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (3 samples, 0.06%)</title><rect x="19.5434%" y="837" width="0.0590%" height="15" fill="rgb(216,99,12)" fg:x="993" fg:w="3"/><text x="19.7934%" y="847.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (1 samples, 0.02%)</title><rect x="19.5828%" y="821" width="0.0197%" height="15" fill="rgb(226,22,26)" fg:x="995" fg:w="1"/><text x="19.8328%" y="831.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (1 samples, 0.02%)</title><rect x="19.6221%" y="837" width="0.0197%" height="15" fill="rgb(217,163,10)" fg:x="997" fg:w="1"/><text x="19.8721%" y="847.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (3 samples, 0.06%)</title><rect x="19.6024%" y="853" width="0.0590%" height="15" fill="rgb(213,25,53)" fg:x="996" fg:w="3"/><text x="19.8524%" y="863.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.02%)</title><rect x="19.6418%" y="837" width="0.0197%" height="15" fill="rgb(252,105,26)" fg:x="998" fg:w="1"/><text x="19.8918%" y="847.50"></text></g><g><title>deno`v8::handle::HandleHost::get_isolate (1 samples, 0.02%)</title><rect x="19.6615%" y="853" width="0.0197%" height="15" fill="rgb(220,39,43)" fg:x="999" fg:w="1"/><text x="19.9115%" y="863.50"></text></g><g><title>deno`v8::Context::Enter (1 samples, 0.02%)</title><rect x="19.7205%" y="837" width="0.0197%" height="15" fill="rgb(229,68,48)" fg:x="1002" fg:w="1"/><text x="19.9705%" y="847.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (1 samples, 0.02%)</title><rect x="19.7402%" y="837" width="0.0197%" height="15" fill="rgb(252,8,32)" fg:x="1003" fg:w="1"/><text x="19.9902%" y="847.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (1 samples, 0.02%)</title><rect x="19.7402%" y="821" width="0.0197%" height="15" fill="rgb(223,20,43)" fg:x="1003" fg:w="1"/><text x="19.9902%" y="831.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (12 samples, 0.24%)</title><rect x="19.5434%" y="869" width="0.2362%" height="15" fill="rgb(229,81,49)" fg:x="993" fg:w="12"/><text x="19.7934%" y="879.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (5 samples, 0.10%)</title><rect x="19.6812%" y="853" width="0.0984%" height="15" fill="rgb(236,28,36)" fg:x="1000" fg:w="5"/><text x="19.9312%" y="863.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (1 samples, 0.02%)</title><rect x="19.7599%" y="837" width="0.0197%" height="15" fill="rgb(249,185,26)" fg:x="1004" fg:w="1"/><text x="20.0099%" y="847.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (2 samples, 0.04%)</title><rect x="19.7796%" y="869" width="0.0394%" height="15" fill="rgb(249,174,33)" fg:x="1005" fg:w="2"/><text x="20.0296%" y="879.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::evaluate_pending_module (20 samples, 0.39%)</title><rect x="19.4647%" y="885" width="0.3936%" height="15" fill="rgb(233,201,37)" fg:x="989" fg:w="20"/><text x="19.7147%" y="895.50"></text></g><g><title>deno`v8::internal::JSPromise::status (2 samples, 0.04%)</title><rect x="19.8189%" y="869" width="0.0394%" height="15" fill="rgb(221,78,26)" fg:x="1007" fg:w="2"/><text x="20.0689%" y="879.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (3 samples, 0.06%)</title><rect x="19.8977%" y="869" width="0.0590%" height="15" fill="rgb(250,127,30)" fg:x="1011" fg:w="3"/><text x="20.1477%" y="879.50"></text></g><g><title>deno`v8::context::_&lt;impl v8::data::Context&gt;::get_annex_mut (2 samples, 0.04%)</title><rect x="19.9173%" y="853" width="0.0394%" height="15" fill="rgb(230,49,44)" fg:x="1012" fg:w="2"/><text x="20.1673%" y="863.50"></text></g><g><title>deno`v8::Context::GetNumberOfEmbedderDataFields (1 samples, 0.02%)</title><rect x="19.9370%" y="837" width="0.0197%" height="15" fill="rgb(229,67,23)" fg:x="1013" fg:w="1"/><text x="20.1870%" y="847.50"></text></g><g><title>deno`v8::base::Mutex::Lock (1 samples, 0.02%)</title><rect x="19.9567%" y="869" width="0.0197%" height="15" fill="rgb(249,83,47)" fg:x="1014" fg:w="1"/><text x="20.2067%" y="879.50"></text></g><g><title>deno`v8::internal::wasm::GetWasmEngine (2 samples, 0.04%)</title><rect x="19.9764%" y="869" width="0.0394%" height="15" fill="rgb(215,43,3)" fg:x="1015" fg:w="2"/><text x="20.2264%" y="879.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (9 samples, 0.18%)</title><rect x="19.8583%" y="885" width="0.1771%" height="15" fill="rgb(238,154,13)" fg:x="1009" fg:w="9"/><text x="20.1083%" y="895.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.02%)</title><rect x="20.0157%" y="869" width="0.0197%" height="15" fill="rgb(219,56,2)" fg:x="1017" fg:w="1"/><text x="20.2657%" y="879.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.02%)</title><rect x="20.0157%" y="853" width="0.0197%" height="15" fill="rgb(233,0,4)" fg:x="1017" fg:w="1"/><text x="20.2657%" y="863.50"></text></g><g><title>deno`v8::Context::Exit (1 samples, 0.02%)</title><rect x="20.0945%" y="821" width="0.0197%" height="15" fill="rgb(235,30,7)" fg:x="1021" fg:w="1"/><text x="20.3445%" y="831.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (4 samples, 0.08%)</title><rect x="20.0748%" y="837" width="0.0787%" height="15" fill="rgb(250,79,13)" fg:x="1020" fg:w="4"/><text x="20.3248%" y="847.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (2 samples, 0.04%)</title><rect x="20.1142%" y="821" width="0.0394%" height="15" fill="rgb(211,146,34)" fg:x="1022" fg:w="2"/><text x="20.3642%" y="831.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (2 samples, 0.04%)</title><rect x="20.1142%" y="805" width="0.0394%" height="15" fill="rgb(228,22,38)" fg:x="1022" fg:w="2"/><text x="20.3642%" y="815.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (6 samples, 0.12%)</title><rect x="20.0551%" y="869" width="0.1181%" height="15" fill="rgb(235,168,5)" fg:x="1019" fg:w="6"/><text x="20.3051%" y="879.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (5 samples, 0.10%)</title><rect x="20.0748%" y="853" width="0.0984%" height="15" fill="rgb(221,155,16)" fg:x="1020" fg:w="5"/><text x="20.3248%" y="863.50"></text></g><g><title>deno`v8::Context::Exit (1 samples, 0.02%)</title><rect x="20.1535%" y="837" width="0.0197%" height="15" fill="rgb(215,215,53)" fg:x="1024" fg:w="1"/><text x="20.4035%" y="847.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.02%)</title><rect x="20.2519%" y="853" width="0.0197%" height="15" fill="rgb(223,4,10)" fg:x="1029" fg:w="1"/><text x="20.5019%" y="863.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (1 samples, 0.02%)</title><rect x="20.2716%" y="853" width="0.0197%" height="15" fill="rgb(234,103,6)" fg:x="1030" fg:w="1"/><text x="20.5216%" y="863.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (7 samples, 0.14%)</title><rect x="20.1732%" y="869" width="0.1378%" height="15" fill="rgb(227,97,0)" fg:x="1025" fg:w="7"/><text x="20.4232%" y="879.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (1 samples, 0.02%)</title><rect x="20.2913%" y="853" width="0.0197%" height="15" fill="rgb(234,150,53)" fg:x="1031" fg:w="1"/><text x="20.5413%" y="863.50"></text></g><g><title>deno`v8::Context::Enter (3 samples, 0.06%)</title><rect x="20.3110%" y="869" width="0.0590%" height="15" fill="rgb(228,201,54)" fg:x="1032" fg:w="3"/><text x="20.5610%" y="879.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (1 samples, 0.02%)</title><rect x="20.3700%" y="869" width="0.0197%" height="15" fill="rgb(222,22,37)" fg:x="1035" fg:w="1"/><text x="20.6200%" y="879.50"></text></g><g><title>deno`v8::Context::Enter (2 samples, 0.04%)</title><rect x="20.4290%" y="853" width="0.0394%" height="15" fill="rgb(237,53,32)" fg:x="1038" fg:w="2"/><text x="20.6790%" y="863.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (1 samples, 0.02%)</title><rect x="20.4487%" y="837" width="0.0197%" height="15" fill="rgb(233,25,53)" fg:x="1039" fg:w="1"/><text x="20.6987%" y="847.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (4 samples, 0.08%)</title><rect x="20.4684%" y="853" width="0.0787%" height="15" fill="rgb(210,40,34)" fg:x="1040" fg:w="4"/><text x="20.7184%" y="863.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (2 samples, 0.04%)</title><rect x="20.5078%" y="837" width="0.0394%" height="15" fill="rgb(241,220,44)" fg:x="1042" fg:w="2"/><text x="20.7578%" y="847.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (1 samples, 0.02%)</title><rect x="20.5471%" y="853" width="0.0197%" height="15" fill="rgb(235,28,35)" fg:x="1044" fg:w="1"/><text x="20.7971%" y="863.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (3 samples, 0.06%)</title><rect x="20.5668%" y="853" width="0.0590%" height="15" fill="rgb(210,56,17)" fg:x="1045" fg:w="3"/><text x="20.8168%" y="863.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (13 samples, 0.26%)</title><rect x="20.3897%" y="869" width="0.2559%" height="15" fill="rgb(224,130,29)" fg:x="1036" fg:w="13"/><text x="20.6397%" y="879.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (1 samples, 0.02%)</title><rect x="20.6259%" y="853" width="0.0197%" height="15" fill="rgb(235,212,8)" fg:x="1048" fg:w="1"/><text x="20.8759%" y="863.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (32 samples, 0.63%)</title><rect x="20.0354%" y="885" width="0.6298%" height="15" fill="rgb(223,33,50)" fg:x="1018" fg:w="32"/><text x="20.2854%" y="895.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (1 samples, 0.02%)</title><rect x="20.6455%" y="869" width="0.0197%" height="15" fill="rgb(219,149,13)" fg:x="1049" fg:w="1"/><text x="20.8955%" y="879.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (2 samples, 0.04%)</title><rect x="20.6849%" y="869" width="0.0394%" height="15" fill="rgb(250,156,29)" fg:x="1051" fg:w="2"/><text x="20.9349%" y="879.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (4 samples, 0.08%)</title><rect x="20.6652%" y="885" width="0.0787%" height="15" fill="rgb(216,193,19)" fg:x="1050" fg:w="4"/><text x="20.9152%" y="895.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (1 samples, 0.02%)</title><rect x="20.7243%" y="869" width="0.0197%" height="15" fill="rgb(216,135,14)" fg:x="1053" fg:w="1"/><text x="20.9743%" y="879.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (3 samples, 0.06%)</title><rect x="20.7439%" y="885" width="0.0590%" height="15" fill="rgb(241,47,5)" fg:x="1054" fg:w="3"/><text x="20.9939%" y="895.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (7 samples, 0.14%)</title><rect x="20.8030%" y="885" width="0.1378%" height="15" fill="rgb(233,42,35)" fg:x="1057" fg:w="7"/><text x="21.0530%" y="895.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.08%)</title><rect x="20.9801%" y="869" width="0.0787%" height="15" fill="rgb(231,13,6)" fg:x="1066" fg:w="4"/><text x="21.2301%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.10%)</title><rect x="21.2753%" y="853" width="0.0984%" height="15" fill="rgb(207,181,40)" fg:x="1081" fg:w="5"/><text x="21.5253%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.33%)</title><rect x="21.0588%" y="869" width="0.3346%" height="15" fill="rgb(254,173,49)" fg:x="1070" fg:w="17"/><text x="21.3088%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="21.3737%" y="853" width="0.0197%" height="15" fill="rgb(221,1,38)" fg:x="1086" fg:w="1"/><text x="21.6237%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.06%)</title><rect x="21.3934%" y="869" width="0.0590%" height="15" fill="rgb(206,124,46)" fg:x="1087" fg:w="3"/><text x="21.6434%" y="879.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (27 samples, 0.53%)</title><rect x="20.9408%" y="885" width="0.5314%" height="15" fill="rgb(249,21,11)" fg:x="1064" fg:w="27"/><text x="21.1908%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="21.4525%" y="869" width="0.0197%" height="15" fill="rgb(222,201,40)" fg:x="1090" fg:w="1"/><text x="21.7025%" y="879.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (1 samples, 0.02%)</title><rect x="21.4722%" y="885" width="0.0197%" height="15" fill="rgb(235,61,29)" fg:x="1091" fg:w="1"/><text x="21.7222%" y="895.50"></text></g><g><title>deno`tokio::util::wake::drop_arc_raw (3 samples, 0.06%)</title><rect x="21.4918%" y="885" width="0.0590%" height="15" fill="rgb(219,207,3)" fg:x="1092" fg:w="3"/><text x="21.7418%" y="895.50"></text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (1 samples, 0.02%)</title><rect x="21.5706%" y="869" width="0.0197%" height="15" fill="rgb(222,56,46)" fg:x="1096" fg:w="1"/><text x="21.8206%" y="879.50"></text></g><g><title>deno`DYLD-STUB$$kevent (1 samples, 0.02%)</title><rect x="21.5902%" y="869" width="0.0197%" height="15" fill="rgb(239,76,54)" fg:x="1097" fg:w="1"/><text x="21.8402%" y="879.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (77 samples, 1.52%)</title><rect x="21.5509%" y="885" width="1.5154%" height="15" fill="rgb(231,124,27)" fg:x="1095" fg:w="77"/><text x="21.8009%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`kevent (74 samples, 1.46%)</title><rect x="21.6099%" y="869" width="1.4564%" height="15" fill="rgb(249,195,6)" fg:x="1098" fg:w="74"/><text x="21.8599%" y="879.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (1 samples, 0.02%)</title><rect x="23.0663%" y="885" width="0.0197%" height="15" fill="rgb(237,174,47)" fg:x="1172" fg:w="1"/><text x="23.3163%" y="895.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (1 samples, 0.02%)</title><rect x="23.0860%" y="885" width="0.0197%" height="15" fill="rgb(206,201,31)" fg:x="1173" fg:w="1"/><text x="23.3360%" y="895.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (1 samples, 0.02%)</title><rect x="23.2828%" y="869" width="0.0197%" height="15" fill="rgb(231,57,52)" fg:x="1183" fg:w="1"/><text x="23.5328%" y="879.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.04%)</title><rect x="23.3025%" y="869" width="0.0394%" height="15" fill="rgb(248,177,22)" fg:x="1184" fg:w="2"/><text x="23.5525%" y="879.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.02%)</title><rect x="23.3419%" y="853" width="0.0197%" height="15" fill="rgb(215,211,37)" fg:x="1186" fg:w="1"/><text x="23.5919%" y="863.50"></text></g><g><title>0x11004dba0 (3 samples, 0.06%)</title><rect x="23.5780%" y="821" width="0.0590%" height="15" fill="rgb(241,128,51)" fg:x="1198" fg:w="3"/><text x="23.8280%" y="831.50"></text></g><g><title>0x11004dbb8 (1 samples, 0.02%)</title><rect x="23.6371%" y="821" width="0.0197%" height="15" fill="rgb(227,165,31)" fg:x="1201" fg:w="1"/><text x="23.8871%" y="831.50"></text></g><g><title>0x110055c00 (6 samples, 0.12%)</title><rect x="23.6568%" y="821" width="0.1181%" height="15" fill="rgb(228,167,24)" fg:x="1202" fg:w="6"/><text x="23.9068%" y="831.50"></text></g><g><title>0x110055d60 (2 samples, 0.04%)</title><rect x="23.7748%" y="821" width="0.0394%" height="15" fill="rgb(228,143,12)" fg:x="1208" fg:w="2"/><text x="24.0248%" y="831.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (5 samples, 0.10%)</title><rect x="23.8142%" y="821" width="0.0984%" height="15" fill="rgb(249,149,8)" fg:x="1210" fg:w="5"/><text x="24.0642%" y="831.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (1 samples, 0.02%)</title><rect x="23.9126%" y="821" width="0.0197%" height="15" fill="rgb(243,35,44)" fg:x="1215" fg:w="1"/><text x="24.1626%" y="831.50"></text></g><g><title>0x11004dc10 (1 samples, 0.02%)</title><rect x="23.9323%" y="805" width="0.0197%" height="15" fill="rgb(246,89,9)" fg:x="1216" fg:w="1"/><text x="24.1823%" y="815.50"></text></g><g><title>0x11004dc28 (1 samples, 0.02%)</title><rect x="23.9520%" y="805" width="0.0197%" height="15" fill="rgb(233,213,13)" fg:x="1217" fg:w="1"/><text x="24.2020%" y="815.50"></text></g><g><title>0x11004dc40 (2 samples, 0.04%)</title><rect x="23.9717%" y="805" width="0.0394%" height="15" fill="rgb(233,141,41)" fg:x="1218" fg:w="2"/><text x="24.2217%" y="815.50"></text></g><g><title>0x11004dc54 (3 samples, 0.06%)</title><rect x="24.0110%" y="805" width="0.0590%" height="15" fill="rgb(239,167,4)" fg:x="1220" fg:w="3"/><text x="24.2610%" y="815.50"></text></g><g><title>0x11004dc68 (1 samples, 0.02%)</title><rect x="24.0701%" y="805" width="0.0197%" height="15" fill="rgb(209,217,16)" fg:x="1223" fg:w="1"/><text x="24.3201%" y="815.50"></text></g><g><title>0x11004dc6c (1 samples, 0.02%)</title><rect x="24.0897%" y="805" width="0.0197%" height="15" fill="rgb(219,88,35)" fg:x="1224" fg:w="1"/><text x="24.3397%" y="815.50"></text></g><g><title>0x11004dca0 (2 samples, 0.04%)</title><rect x="24.1094%" y="805" width="0.0394%" height="15" fill="rgb(220,193,23)" fg:x="1225" fg:w="2"/><text x="24.3594%" y="815.50"></text></g><g><title>0x11004dcc8 (1 samples, 0.02%)</title><rect x="24.1488%" y="805" width="0.0197%" height="15" fill="rgb(230,90,52)" fg:x="1227" fg:w="1"/><text x="24.3988%" y="815.50"></text></g><g><title>0x11004dcd8 (1 samples, 0.02%)</title><rect x="24.1685%" y="805" width="0.0197%" height="15" fill="rgb(252,106,19)" fg:x="1228" fg:w="1"/><text x="24.4185%" y="815.50"></text></g><g><title>deno`Builtins_FulfillPromise (1 samples, 0.02%)</title><rect x="24.3456%" y="773" width="0.0197%" height="15" fill="rgb(206,74,20)" fg:x="1237" fg:w="1"/><text x="24.5956%" y="783.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (2 samples, 0.04%)</title><rect x="24.3850%" y="757" width="0.0394%" height="15" fill="rgb(230,138,44)" fg:x="1239" fg:w="2"/><text x="24.6350%" y="767.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (29 samples, 0.57%)</title><rect x="24.2078%" y="789" width="0.5708%" height="15" fill="rgb(235,182,43)" fg:x="1230" fg:w="29"/><text x="24.4578%" y="799.50"></text></g><g><title>deno`Builtins_ResolvePromise (21 samples, 0.41%)</title><rect x="24.3653%" y="773" width="0.4133%" height="15" fill="rgb(242,16,51)" fg:x="1238" fg:w="21"/><text x="24.6153%" y="783.50"></text></g><g><title>deno`Builtins_FulfillPromise (18 samples, 0.35%)</title><rect x="24.4243%" y="757" width="0.3543%" height="15" fill="rgb(248,9,4)" fg:x="1241" fg:w="18"/><text x="24.6743%" y="767.50"></text></g><g><title>0x11004dd20 (32 samples, 0.63%)</title><rect x="24.1882%" y="805" width="0.6298%" height="15" fill="rgb(210,31,22)" fg:x="1229" fg:w="32"/><text x="24.4382%" y="815.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.04%)</title><rect x="24.7786%" y="789" width="0.0394%" height="15" fill="rgb(239,54,39)" fg:x="1259" fg:w="2"/><text x="25.0286%" y="799.50"></text></g><g><title>0x11004dd30 (4 samples, 0.08%)</title><rect x="24.8179%" y="805" width="0.0787%" height="15" fill="rgb(230,99,41)" fg:x="1261" fg:w="4"/><text x="25.0679%" y="815.50"></text></g><g><title>0x1100522f0 (1 samples, 0.02%)</title><rect x="24.8967%" y="805" width="0.0197%" height="15" fill="rgb(253,106,12)" fg:x="1265" fg:w="1"/><text x="25.1467%" y="815.50"></text></g><g><title>deno`Builtins_BaselineLeaveFrame (1 samples, 0.02%)</title><rect x="24.9164%" y="805" width="0.0197%" height="15" fill="rgb(213,46,41)" fg:x="1266" fg:w="1"/><text x="25.1664%" y="815.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (8 samples, 0.16%)</title><rect x="24.9360%" y="805" width="0.1574%" height="15" fill="rgb(215,133,35)" fg:x="1267" fg:w="8"/><text x="25.1860%" y="815.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNotNullOrUndefined (1 samples, 0.02%)</title><rect x="25.0935%" y="805" width="0.0197%" height="15" fill="rgb(213,28,5)" fg:x="1275" fg:w="1"/><text x="25.3435%" y="815.50"></text></g><g><title>deno`Builtins_JSEntry (81 samples, 1.59%)</title><rect x="23.5387%" y="837" width="1.5942%" height="15" fill="rgb(215,77,49)" fg:x="1196" fg:w="81"/><text x="23.7887%" y="847.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (61 samples, 1.20%)</title><rect x="23.9323%" y="821" width="1.2006%" height="15" fill="rgb(248,100,22)" fg:x="1216" fg:w="61"/><text x="24.1823%" y="831.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (1 samples, 0.02%)</title><rect x="25.1132%" y="805" width="0.0197%" height="15" fill="rgb(208,67,9)" fg:x="1276" fg:w="1"/><text x="25.3632%" y="815.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (91 samples, 1.79%)</title><rect x="23.3615%" y="853" width="1.7910%" height="15" fill="rgb(219,133,21)" fg:x="1187" fg:w="91"/><text x="23.6115%" y="863.50">d..</text></g><g><title>deno`v8::internal::SaveContext::SaveContext (1 samples, 0.02%)</title><rect x="25.1328%" y="837" width="0.0197%" height="15" fill="rgb(246,46,29)" fg:x="1277" fg:w="1"/><text x="25.3828%" y="847.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (1 samples, 0.02%)</title><rect x="25.1525%" y="853" width="0.0197%" height="15" fill="rgb(246,185,52)" fg:x="1278" fg:w="1"/><text x="25.4025%" y="863.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (1 samples, 0.02%)</title><rect x="25.1722%" y="853" width="0.0197%" height="15" fill="rgb(252,136,11)" fg:x="1279" fg:w="1"/><text x="25.4222%" y="863.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (96 samples, 1.89%)</title><rect x="23.3419%" y="869" width="1.8894%" height="15" fill="rgb(219,138,53)" fg:x="1186" fg:w="96"/><text x="23.5919%" y="879.50">d..</text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (2 samples, 0.04%)</title><rect x="25.1919%" y="853" width="0.0394%" height="15" fill="rgb(211,51,23)" fg:x="1280" fg:w="2"/><text x="25.4419%" y="863.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.02%)</title><rect x="25.2313%" y="869" width="0.0197%" height="15" fill="rgb(247,221,28)" fg:x="1282" fg:w="1"/><text x="25.4813%" y="879.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (1 samples, 0.02%)</title><rect x="25.2706%" y="853" width="0.0197%" height="15" fill="rgb(251,222,45)" fg:x="1284" fg:w="1"/><text x="25.5206%" y="863.50"></text></g><g><title>deno`v8::internal::Isolate::ClearKeptObjects (1 samples, 0.02%)</title><rect x="25.2903%" y="853" width="0.0197%" height="15" fill="rgb(217,162,53)" fg:x="1285" fg:w="1"/><text x="25.5403%" y="863.50"></text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (3 samples, 0.06%)</title><rect x="25.5068%" y="789" width="0.0590%" height="15" fill="rgb(229,93,14)" fg:x="1296" fg:w="3"/><text x="25.7568%" y="799.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (1 samples, 0.02%)</title><rect x="25.5658%" y="789" width="0.0197%" height="15" fill="rgb(209,67,49)" fg:x="1299" fg:w="1"/><text x="25.8158%" y="799.50"></text></g><g><title>deno`v8::internal::GetCurrentStackPosition (1 samples, 0.02%)</title><rect x="25.5658%" y="773" width="0.0197%" height="15" fill="rgb(213,87,29)" fg:x="1299" fg:w="1"/><text x="25.8158%" y="783.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (1 samples, 0.02%)</title><rect x="25.5855%" y="789" width="0.0197%" height="15" fill="rgb(205,151,52)" fg:x="1300" fg:w="1"/><text x="25.8355%" y="799.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (1 samples, 0.02%)</title><rect x="25.7233%" y="757" width="0.0197%" height="15" fill="rgb(253,215,39)" fg:x="1307" fg:w="1"/><text x="25.9733%" y="767.50"></text></g><g><title>0x110055acc (1 samples, 0.02%)</title><rect x="26.5696%" y="741" width="0.0197%" height="15" fill="rgb(221,220,41)" fg:x="1350" fg:w="1"/><text x="26.8196%" y="751.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (1 samples, 0.02%)</title><rect x="26.5893%" y="741" width="0.0197%" height="15" fill="rgb(218,133,21)" fg:x="1351" fg:w="1"/><text x="26.8393%" y="751.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (9 samples, 0.18%)</title><rect x="26.6089%" y="741" width="0.1771%" height="15" fill="rgb(221,193,43)" fg:x="1352" fg:w="9"/><text x="26.8589%" y="751.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNullOrUndefined (4 samples, 0.08%)</title><rect x="26.7861%" y="741" width="0.0787%" height="15" fill="rgb(240,128,52)" fg:x="1361" fg:w="4"/><text x="27.0361%" y="751.50"></text></g><g><title>0x11004ec40 (6 samples, 0.12%)</title><rect x="27.0222%" y="725" width="0.1181%" height="15" fill="rgb(253,114,12)" fg:x="1373" fg:w="6"/><text x="27.2722%" y="735.50"></text></g><g><title>0x1100530c0 (5 samples, 0.10%)</title><rect x="27.1403%" y="725" width="0.0984%" height="15" fill="rgb(215,223,47)" fg:x="1379" fg:w="5"/><text x="27.3903%" y="735.50"></text></g><g><title>0x1100530c8 (1 samples, 0.02%)</title><rect x="27.2387%" y="725" width="0.0197%" height="15" fill="rgb(248,225,23)" fg:x="1384" fg:w="1"/><text x="27.4887%" y="735.50"></text></g><g><title>0x110053ea0 (1 samples, 0.02%)</title><rect x="27.2584%" y="725" width="0.0197%" height="15" fill="rgb(250,108,0)" fg:x="1385" fg:w="1"/><text x="27.5084%" y="735.50"></text></g><g><title>0x110053ea8 (1 samples, 0.02%)</title><rect x="27.2781%" y="725" width="0.0197%" height="15" fill="rgb(228,208,7)" fg:x="1386" fg:w="1"/><text x="27.5281%" y="735.50"></text></g><g><title>0x1100544c0 (2 samples, 0.04%)</title><rect x="27.2978%" y="725" width="0.0394%" height="15" fill="rgb(244,45,10)" fg:x="1387" fg:w="2"/><text x="27.5478%" y="735.50"></text></g><g><title>0x110055a28 (2 samples, 0.04%)</title><rect x="27.3371%" y="725" width="0.0394%" height="15" fill="rgb(207,125,25)" fg:x="1389" fg:w="2"/><text x="27.5871%" y="735.50"></text></g><g><title>0x110055a40 (1 samples, 0.02%)</title><rect x="27.3765%" y="725" width="0.0197%" height="15" fill="rgb(210,195,18)" fg:x="1391" fg:w="1"/><text x="27.6265%" y="735.50"></text></g><g><title>0x110055ab4 (1 samples, 0.02%)</title><rect x="27.3962%" y="725" width="0.0197%" height="15" fill="rgb(249,80,12)" fg:x="1392" fg:w="1"/><text x="27.6462%" y="735.50"></text></g><g><title>0x11004bc84 (3 samples, 0.06%)</title><rect x="27.5930%" y="661" width="0.0590%" height="15" fill="rgb(221,65,9)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="671.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (3 samples, 0.06%)</title><rect x="27.5930%" y="645" width="0.0590%" height="15" fill="rgb(235,49,36)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="655.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.06%)</title><rect x="27.5930%" y="629" width="0.0590%" height="15" fill="rgb(225,32,20)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="639.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (3 samples, 0.06%)</title><rect x="27.5930%" y="613" width="0.0590%" height="15" fill="rgb(215,141,46)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="623.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.06%)</title><rect x="27.5930%" y="597" width="0.0590%" height="15" fill="rgb(250,160,47)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="607.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="27.5930%" y="581" width="0.0590%" height="15" fill="rgb(216,222,40)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="591.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="27.5930%" y="565" width="0.0590%" height="15" fill="rgb(234,217,39)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="575.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="27.5930%" y="549" width="0.0590%" height="15" fill="rgb(207,178,40)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="559.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (3 samples, 0.06%)</title><rect x="27.5930%" y="533" width="0.0590%" height="15" fill="rgb(221,136,13)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (3 samples, 0.06%)</title><rect x="27.5930%" y="517" width="0.0590%" height="15" fill="rgb(249,199,10)" fg:x="1402" fg:w="3"/><text x="27.8430%" y="527.50"></text></g><g><title>0x11004cc08 (5 samples, 0.10%)</title><rect x="27.5930%" y="677" width="0.0984%" height="15" fill="rgb(249,222,13)" fg:x="1402" fg:w="5"/><text x="27.8430%" y="687.50"></text></g><g><title>0x11004e42c (2 samples, 0.04%)</title><rect x="27.6520%" y="661" width="0.0394%" height="15" fill="rgb(244,185,38)" fg:x="1405" fg:w="2"/><text x="27.9020%" y="671.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.04%)</title><rect x="27.6520%" y="645" width="0.0394%" height="15" fill="rgb(236,202,9)" fg:x="1405" fg:w="2"/><text x="27.9020%" y="655.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (2 samples, 0.04%)</title><rect x="27.6520%" y="629" width="0.0394%" height="15" fill="rgb(250,229,37)" fg:x="1405" fg:w="2"/><text x="27.9020%" y="639.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2 samples, 0.04%)</title><rect x="27.6520%" y="613" width="0.0394%" height="15" fill="rgb(206,174,23)" fg:x="1405" fg:w="2"/><text x="27.9020%" y="623.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.04%)</title><rect x="27.6520%" y="597" width="0.0394%" height="15" fill="rgb(211,33,43)" fg:x="1405" fg:w="2"/><text x="27.9020%" y="607.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="27.6520%" y="581" width="0.0394%" height="15" fill="rgb(245,58,50)" fg:x="1405" fg:w="2"/><text x="27.9020%" y="591.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="27.6520%" y="565" width="0.0394%" height="15" fill="rgb(244,68,36)" fg:x="1405" fg:w="2"/><text x="27.9020%" y="575.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="27.6520%" y="549" width="0.0394%" height="15" fill="rgb(232,229,15)" fg:x="1405" fg:w="2"/><text x="27.9020%" y="559.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.02%)</title><rect x="27.6717%" y="533" width="0.0197%" height="15" fill="rgb(254,30,23)" fg:x="1406" fg:w="1"/><text x="27.9217%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1 samples, 0.02%)</title><rect x="27.6717%" y="517" width="0.0197%" height="15" fill="rgb(235,160,14)" fg:x="1406" fg:w="1"/><text x="27.9217%" y="527.50"></text></g><g><title>0x11004c328 (7 samples, 0.14%)</title><rect x="27.5930%" y="709" width="0.1378%" height="15" fill="rgb(212,155,44)" fg:x="1402" fg:w="7"/><text x="27.8430%" y="719.50"></text></g><g><title>0x11004c9f0 (7 samples, 0.14%)</title><rect x="27.5930%" y="693" width="0.1378%" height="15" fill="rgb(226,2,50)" fg:x="1402" fg:w="7"/><text x="27.8430%" y="703.50"></text></g><g><title>0x11004eff4 (2 samples, 0.04%)</title><rect x="27.6914%" y="677" width="0.0394%" height="15" fill="rgb(234,177,6)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="687.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.04%)</title><rect x="27.6914%" y="661" width="0.0394%" height="15" fill="rgb(217,24,9)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="671.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (2 samples, 0.04%)</title><rect x="27.6914%" y="645" width="0.0394%" height="15" fill="rgb(220,13,46)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="655.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2 samples, 0.04%)</title><rect x="27.6914%" y="629" width="0.0394%" height="15" fill="rgb(239,221,27)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="639.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.04%)</title><rect x="27.6914%" y="613" width="0.0394%" height="15" fill="rgb(222,198,25)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="623.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="27.6914%" y="597" width="0.0394%" height="15" fill="rgb(211,99,13)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="607.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="27.6914%" y="581" width="0.0394%" height="15" fill="rgb(232,111,31)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="591.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="27.6914%" y="565" width="0.0394%" height="15" fill="rgb(245,82,37)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="575.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (2 samples, 0.04%)</title><rect x="27.6914%" y="549" width="0.0394%" height="15" fill="rgb(227,149,46)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (2 samples, 0.04%)</title><rect x="27.6914%" y="533" width="0.0394%" height="15" fill="rgb(218,36,50)" fg:x="1407" fg:w="2"/><text x="27.9414%" y="543.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.16%)</title><rect x="27.7308%" y="581" width="0.1574%" height="15" fill="rgb(226,80,48)" fg:x="1409" fg:w="8"/><text x="27.9808%" y="591.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.14%)</title><rect x="27.7504%" y="565" width="0.1378%" height="15" fill="rgb(238,224,15)" fg:x="1410" fg:w="7"/><text x="28.0004%" y="575.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_write_priv (7 samples, 0.14%)</title><rect x="27.7504%" y="549" width="0.1378%" height="15" fill="rgb(241,136,10)" fg:x="1410" fg:w="7"/><text x="28.0004%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (7 samples, 0.14%)</title><rect x="27.7504%" y="533" width="0.1378%" height="15" fill="rgb(208,32,45)" fg:x="1410" fg:w="7"/><text x="28.0004%" y="543.50"></text></g><g><title>0x11004bc84 (9 samples, 0.18%)</title><rect x="27.7308%" y="661" width="0.1771%" height="15" fill="rgb(207,135,9)" fg:x="1409" fg:w="9"/><text x="27.9808%" y="671.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (9 samples, 0.18%)</title><rect x="27.7308%" y="645" width="0.1771%" height="15" fill="rgb(206,86,44)" fg:x="1409" fg:w="9"/><text x="27.9808%" y="655.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (9 samples, 0.18%)</title><rect x="27.7308%" y="629" width="0.1771%" height="15" fill="rgb(245,177,15)" fg:x="1409" fg:w="9"/><text x="27.9808%" y="639.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (9 samples, 0.18%)</title><rect x="27.7308%" y="613" width="0.1771%" height="15" fill="rgb(206,64,50)" fg:x="1409" fg:w="9"/><text x="27.9808%" y="623.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (9 samples, 0.18%)</title><rect x="27.7308%" y="597" width="0.1771%" height="15" fill="rgb(234,36,40)" fg:x="1409" fg:w="9"/><text x="27.9808%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="27.8882%" y="581" width="0.0197%" height="15" fill="rgb(213,64,8)" fg:x="1417" fg:w="1"/><text x="28.1382%" y="591.50"></text></g><g><title>deno`deno_net::io::FullDuplexResource&lt;R,W&gt;::wr_borrow_mut (1 samples, 0.02%)</title><rect x="27.9079%" y="549" width="0.0197%" height="15" fill="rgb(210,75,36)" fg:x="1418" fg:w="1"/><text x="28.1579%" y="559.50"></text></g><g><title>0x11004e42c (4 samples, 0.08%)</title><rect x="27.9079%" y="661" width="0.0787%" height="15" fill="rgb(229,88,21)" fg:x="1418" fg:w="4"/><text x="28.1579%" y="671.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (4 samples, 0.08%)</title><rect x="27.9079%" y="645" width="0.0787%" height="15" fill="rgb(252,204,47)" fg:x="1418" fg:w="4"/><text x="28.1579%" y="655.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (4 samples, 0.08%)</title><rect x="27.9079%" y="629" width="0.0787%" height="15" fill="rgb(208,77,27)" fg:x="1418" fg:w="4"/><text x="28.1579%" y="639.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (4 samples, 0.08%)</title><rect x="27.9079%" y="613" width="0.0787%" height="15" fill="rgb(221,76,26)" fg:x="1418" fg:w="4"/><text x="28.1579%" y="623.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (4 samples, 0.08%)</title><rect x="27.9079%" y="597" width="0.0787%" height="15" fill="rgb(225,139,18)" fg:x="1418" fg:w="4"/><text x="28.1579%" y="607.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.08%)</title><rect x="27.9079%" y="581" width="0.0787%" height="15" fill="rgb(230,137,11)" fg:x="1418" fg:w="4"/><text x="28.1579%" y="591.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.08%)</title><rect x="27.9079%" y="565" width="0.0787%" height="15" fill="rgb(212,28,1)" fg:x="1418" fg:w="4"/><text x="28.1579%" y="575.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_write_priv (3 samples, 0.06%)</title><rect x="27.9276%" y="549" width="0.0590%" height="15" fill="rgb(248,164,17)" fg:x="1419" fg:w="3"/><text x="28.1776%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (3 samples, 0.06%)</title><rect x="27.9276%" y="533" width="0.0590%" height="15" fill="rgb(222,171,42)" fg:x="1419" fg:w="3"/><text x="28.1776%" y="543.50"></text></g><g><title>0x11004d09c (14 samples, 0.28%)</title><rect x="27.7308%" y="677" width="0.2755%" height="15" fill="rgb(243,84,45)" fg:x="1409" fg:w="14"/><text x="27.9808%" y="687.50"></text></g><g><title>deno`Builtins_FastNewRestArguments (1 samples, 0.02%)</title><rect x="27.9866%" y="661" width="0.0197%" height="15" fill="rgb(252,49,23)" fg:x="1422" fg:w="1"/><text x="28.2366%" y="671.50"></text></g><g><title>0x11004cf10 (19 samples, 0.37%)</title><rect x="27.7308%" y="693" width="0.3739%" height="15" fill="rgb(215,19,7)" fg:x="1409" fg:w="19"/><text x="27.9808%" y="703.50"></text></g><g><title>0x11005340c (5 samples, 0.10%)</title><rect x="28.0063%" y="677" width="0.0984%" height="15" fill="rgb(238,81,41)" fg:x="1423" fg:w="5"/><text x="28.2563%" y="687.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (5 samples, 0.10%)</title><rect x="28.0063%" y="661" width="0.0984%" height="15" fill="rgb(210,199,37)" fg:x="1423" fg:w="5"/><text x="28.2563%" y="671.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (5 samples, 0.10%)</title><rect x="28.0063%" y="645" width="0.0984%" height="15" fill="rgb(244,192,49)" fg:x="1423" fg:w="5"/><text x="28.2563%" y="655.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (5 samples, 0.10%)</title><rect x="28.0063%" y="629" width="0.0984%" height="15" fill="rgb(226,211,11)" fg:x="1423" fg:w="5"/><text x="28.2563%" y="639.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (5 samples, 0.10%)</title><rect x="28.0063%" y="613" width="0.0984%" height="15" fill="rgb(236,162,54)" fg:x="1423" fg:w="5"/><text x="28.2563%" y="623.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.10%)</title><rect x="28.0063%" y="597" width="0.0984%" height="15" fill="rgb(220,229,9)" fg:x="1423" fg:w="5"/><text x="28.2563%" y="607.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.08%)</title><rect x="28.0260%" y="581" width="0.0787%" height="15" fill="rgb(250,87,22)" fg:x="1424" fg:w="4"/><text x="28.2760%" y="591.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_write_priv (4 samples, 0.08%)</title><rect x="28.0260%" y="565" width="0.0787%" height="15" fill="rgb(239,43,17)" fg:x="1424" fg:w="4"/><text x="28.2760%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (4 samples, 0.08%)</title><rect x="28.0260%" y="549" width="0.0787%" height="15" fill="rgb(231,177,25)" fg:x="1424" fg:w="4"/><text x="28.2760%" y="559.50"></text></g><g><title>0x11004c488 (20 samples, 0.39%)</title><rect x="27.7308%" y="709" width="0.3936%" height="15" fill="rgb(219,179,1)" fg:x="1409" fg:w="20"/><text x="27.9808%" y="719.50"></text></g><g><title>0x11004cf18 (1 samples, 0.02%)</title><rect x="28.1047%" y="693" width="0.0197%" height="15" fill="rgb(238,219,53)" fg:x="1428" fg:w="1"/><text x="28.3547%" y="703.50"></text></g><g><title>0x11004e2c0 (2 samples, 0.04%)</title><rect x="28.1244%" y="709" width="0.0394%" height="15" fill="rgb(232,167,36)" fg:x="1429" fg:w="2"/><text x="28.3744%" y="719.50"></text></g><g><title>0x11004e2c8 (2 samples, 0.04%)</title><rect x="28.1637%" y="709" width="0.0394%" height="15" fill="rgb(244,19,51)" fg:x="1431" fg:w="2"/><text x="28.4137%" y="719.50"></text></g><g><title>0x11004e2d8 (1 samples, 0.02%)</title><rect x="28.2031%" y="709" width="0.0197%" height="15" fill="rgb(224,6,22)" fg:x="1433" fg:w="1"/><text x="28.4531%" y="719.50"></text></g><g><title>0x11004eca0 (1 samples, 0.02%)</title><rect x="28.2228%" y="709" width="0.0197%" height="15" fill="rgb(224,145,5)" fg:x="1434" fg:w="1"/><text x="28.4728%" y="719.50"></text></g><g><title>0x11004ed18 (1 samples, 0.02%)</title><rect x="28.2425%" y="709" width="0.0197%" height="15" fill="rgb(234,130,49)" fg:x="1435" fg:w="1"/><text x="28.4925%" y="719.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (2 samples, 0.04%)</title><rect x="28.2818%" y="677" width="0.0394%" height="15" fill="rgb(254,6,2)" fg:x="1437" fg:w="2"/><text x="28.5318%" y="687.50"></text></g><g><title>0x11004ed40 (10 samples, 0.20%)</title><rect x="28.2622%" y="709" width="0.1968%" height="15" fill="rgb(208,96,46)" fg:x="1436" fg:w="10"/><text x="28.5122%" y="719.50"></text></g><g><title>deno`Builtins_ResolvePromise (10 samples, 0.20%)</title><rect x="28.2622%" y="693" width="0.1968%" height="15" fill="rgb(239,3,39)" fg:x="1436" fg:w="10"/><text x="28.5122%" y="703.50"></text></g><g><title>deno`Builtins_FulfillPromise (7 samples, 0.14%)</title><rect x="28.3212%" y="677" width="0.1378%" height="15" fill="rgb(233,210,1)" fg:x="1439" fg:w="7"/><text x="28.5712%" y="687.50"></text></g><g><title>0x110050044 (1 samples, 0.02%)</title><rect x="28.4590%" y="709" width="0.0197%" height="15" fill="rgb(244,137,37)" fg:x="1446" fg:w="1"/><text x="28.7090%" y="719.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.02%)</title><rect x="28.4590%" y="693" width="0.0197%" height="15" fill="rgb(240,136,2)" fg:x="1446" fg:w="1"/><text x="28.7090%" y="703.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.02%)</title><rect x="28.4590%" y="677" width="0.0197%" height="15" fill="rgb(239,18,37)" fg:x="1446" fg:w="1"/><text x="28.7090%" y="687.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.02%)</title><rect x="28.4590%" y="661" width="0.0197%" height="15" fill="rgb(218,185,22)" fg:x="1446" fg:w="1"/><text x="28.7090%" y="671.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.02%)</title><rect x="28.4590%" y="645" width="0.0197%" height="15" fill="rgb(225,218,4)" fg:x="1446" fg:w="1"/><text x="28.7090%" y="655.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as serde_v8::magic::transl8::FromV8&gt;::from_v8 (1 samples, 0.02%)</title><rect x="28.4590%" y="629" width="0.0197%" height="15" fill="rgb(230,182,32)" fg:x="1446" fg:w="1"/><text x="28.7090%" y="639.50"></text></g><g><title>deno`v8::ArrayBuffer::GetBackingStore (1 samples, 0.02%)</title><rect x="28.4590%" y="613" width="0.0197%" height="15" fill="rgb(242,56,43)" fg:x="1446" fg:w="1"/><text x="28.7090%" y="623.50"></text></g><g><title>0x1100531ac (4 samples, 0.08%)</title><rect x="28.4786%" y="709" width="0.0787%" height="15" fill="rgb(233,99,24)" fg:x="1447" fg:w="4"/><text x="28.7286%" y="719.50"></text></g><g><title>deno`Builtins_ResolvePromise (4 samples, 0.08%)</title><rect x="28.4786%" y="693" width="0.0787%" height="15" fill="rgb(234,209,42)" fg:x="1447" fg:w="4"/><text x="28.7286%" y="703.50"></text></g><g><title>deno`Builtins_FulfillPromise (4 samples, 0.08%)</title><rect x="28.4786%" y="677" width="0.0787%" height="15" fill="rgb(227,7,12)" fg:x="1447" fg:w="4"/><text x="28.7286%" y="687.50"></text></g><g><title>0x110053ed0 (1 samples, 0.02%)</title><rect x="28.5574%" y="709" width="0.0197%" height="15" fill="rgb(245,203,43)" fg:x="1451" fg:w="1"/><text x="28.8074%" y="719.50"></text></g><g><title>0x110053f50 (3 samples, 0.06%)</title><rect x="28.5771%" y="709" width="0.0590%" height="15" fill="rgb(238,205,33)" fg:x="1452" fg:w="3"/><text x="28.8271%" y="719.50"></text></g><g><title>0x11005407c (1 samples, 0.02%)</title><rect x="28.6361%" y="709" width="0.0197%" height="15" fill="rgb(231,56,7)" fg:x="1455" fg:w="1"/><text x="28.8861%" y="719.50"></text></g><g><title>0x1100540b4 (1 samples, 0.02%)</title><rect x="28.6558%" y="709" width="0.0197%" height="15" fill="rgb(244,186,29)" fg:x="1456" fg:w="1"/><text x="28.9058%" y="719.50"></text></g><g><title>0x110054120 (2 samples, 0.04%)</title><rect x="28.6755%" y="709" width="0.0394%" height="15" fill="rgb(234,111,31)" fg:x="1457" fg:w="2"/><text x="28.9255%" y="719.50"></text></g><g><title>0x110054128 (1 samples, 0.02%)</title><rect x="28.7148%" y="709" width="0.0197%" height="15" fill="rgb(241,149,10)" fg:x="1459" fg:w="1"/><text x="28.9648%" y="719.50"></text></g><g><title>0x11005418c (3 samples, 0.06%)</title><rect x="28.7345%" y="709" width="0.0590%" height="15" fill="rgb(249,206,44)" fg:x="1460" fg:w="3"/><text x="28.9845%" y="719.50"></text></g><g><title>0x1100541e4 (1 samples, 0.02%)</title><rect x="28.7935%" y="709" width="0.0197%" height="15" fill="rgb(251,153,30)" fg:x="1463" fg:w="1"/><text x="29.0435%" y="719.50"></text></g><g><title>0x110054200 (1 samples, 0.02%)</title><rect x="28.8132%" y="709" width="0.0197%" height="15" fill="rgb(239,152,38)" fg:x="1464" fg:w="1"/><text x="29.0632%" y="719.50"></text></g><g><title>0x110054234 (1 samples, 0.02%)</title><rect x="28.8329%" y="709" width="0.0197%" height="15" fill="rgb(249,139,47)" fg:x="1465" fg:w="1"/><text x="29.0829%" y="719.50"></text></g><g><title>0x110054260 (1 samples, 0.02%)</title><rect x="28.8526%" y="709" width="0.0197%" height="15" fill="rgb(244,64,35)" fg:x="1466" fg:w="1"/><text x="29.1026%" y="719.50"></text></g><g><title>0x11005427c (1 samples, 0.02%)</title><rect x="28.8723%" y="709" width="0.0197%" height="15" fill="rgb(216,46,15)" fg:x="1467" fg:w="1"/><text x="29.1223%" y="719.50"></text></g><g><title>0x1100542a0 (2 samples, 0.04%)</title><rect x="28.8920%" y="709" width="0.0394%" height="15" fill="rgb(250,74,19)" fg:x="1468" fg:w="2"/><text x="29.1420%" y="719.50"></text></g><g><title>0x110054300 (2 samples, 0.04%)</title><rect x="28.9313%" y="709" width="0.0394%" height="15" fill="rgb(249,42,33)" fg:x="1470" fg:w="2"/><text x="29.1813%" y="719.50"></text></g><g><title>0x11005431c (1 samples, 0.02%)</title><rect x="28.9707%" y="709" width="0.0197%" height="15" fill="rgb(242,149,17)" fg:x="1472" fg:w="1"/><text x="29.2207%" y="719.50"></text></g><g><title>0x11005435c (1 samples, 0.02%)</title><rect x="28.9904%" y="709" width="0.0197%" height="15" fill="rgb(244,29,21)" fg:x="1473" fg:w="1"/><text x="29.2404%" y="719.50"></text></g><g><title>0x11004e308 (1 samples, 0.02%)</title><rect x="29.0100%" y="693" width="0.0197%" height="15" fill="rgb(220,130,37)" fg:x="1474" fg:w="1"/><text x="29.2600%" y="703.50"></text></g><g><title>0x11004e340 (1 samples, 0.02%)</title><rect x="29.0297%" y="693" width="0.0197%" height="15" fill="rgb(211,67,2)" fg:x="1475" fg:w="1"/><text x="29.2797%" y="703.50"></text></g><g><title>0x11004e3b0 (1 samples, 0.02%)</title><rect x="29.0494%" y="693" width="0.0197%" height="15" fill="rgb(235,68,52)" fg:x="1476" fg:w="1"/><text x="29.2994%" y="703.50"></text></g><g><title>0x11004e3c4 (1 samples, 0.02%)</title><rect x="29.0691%" y="693" width="0.0197%" height="15" fill="rgb(246,142,3)" fg:x="1477" fg:w="1"/><text x="29.3191%" y="703.50"></text></g><g><title>0x11004e3f8 (11 samples, 0.22%)</title><rect x="29.0888%" y="693" width="0.2165%" height="15" fill="rgb(241,25,7)" fg:x="1478" fg:w="11"/><text x="29.3388%" y="703.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (11 samples, 0.22%)</title><rect x="29.0888%" y="677" width="0.2165%" height="15" fill="rgb(242,119,39)" fg:x="1478" fg:w="11"/><text x="29.3388%" y="687.50"></text></g><g><title>0x11004e424 (4 samples, 0.08%)</title><rect x="29.3053%" y="693" width="0.0787%" height="15" fill="rgb(241,98,45)" fg:x="1489" fg:w="4"/><text x="29.5553%" y="703.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (5 samples, 0.10%)</title><rect x="29.5414%" y="645" width="0.0984%" height="15" fill="rgb(254,28,30)" fg:x="1501" fg:w="5"/><text x="29.7914%" y="655.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (1 samples, 0.02%)</title><rect x="29.6398%" y="645" width="0.0197%" height="15" fill="rgb(241,142,54)" fg:x="1506" fg:w="1"/><text x="29.8898%" y="655.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.08%)</title><rect x="29.7382%" y="629" width="0.0787%" height="15" fill="rgb(222,85,15)" fg:x="1511" fg:w="4"/><text x="29.9882%" y="639.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="31.7851%" y="581" width="0.0197%" height="15" fill="rgb(210,85,47)" fg:x="1615" fg:w="1"/><text x="32.0351%" y="591.50"></text></g><g><title>deno`&lt;v8::array_buffer::BackingStore as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="31.8048%" y="581" width="0.0197%" height="15" fill="rgb(224,206,25)" fg:x="1616" fg:w="1"/><text x="32.0548%" y="591.50"></text></g><g><title>deno`deno_core::async_cell::internal::BorrowCount::remove (1 samples, 0.02%)</title><rect x="31.8244%" y="565" width="0.0197%" height="15" fill="rgb(243,201,19)" fg:x="1617" fg:w="1"/><text x="32.0744%" y="575.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowImpl&lt;tokio::net::tcp::split_owned::OwnedWriteHalf,deno_core::async_cell::internal::Exclusive&gt;&gt; (3 samples, 0.06%)</title><rect x="31.8244%" y="581" width="0.0590%" height="15" fill="rgb(236,59,4)" fg:x="1617" fg:w="3"/><text x="32.0744%" y="591.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (2 samples, 0.04%)</title><rect x="31.8441%" y="565" width="0.0394%" height="15" fill="rgb(254,179,45)" fg:x="1618" fg:w="2"/><text x="32.0941%" y="575.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (3 samples, 0.06%)</title><rect x="31.8835%" y="581" width="0.0590%" height="15" fill="rgb(226,14,10)" fg:x="1620" fg:w="3"/><text x="32.1335%" y="591.50"></text></g><g><title>deno`deno_net::io::FullDuplexResource&lt;R,W&gt;::wr_borrow_mut (23 samples, 0.45%)</title><rect x="31.9425%" y="581" width="0.4527%" height="15" fill="rgb(244,27,41)" fg:x="1623" fg:w="23"/><text x="32.1925%" y="591.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (22 samples, 0.43%)</title><rect x="31.9622%" y="565" width="0.4330%" height="15" fill="rgb(235,35,32)" fg:x="1624" fg:w="22"/><text x="32.2122%" y="575.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.04%)</title><rect x="32.4149%" y="565" width="0.0394%" height="15" fill="rgb(218,68,31)" fg:x="1647" fg:w="2"/><text x="32.6649%" y="575.50"></text></g><g><title>deno`DYLD-STUB$$send (1 samples, 0.02%)</title><rect x="32.4542%" y="565" width="0.0197%" height="15" fill="rgb(207,120,37)" fg:x="1649" fg:w="1"/><text x="32.7042%" y="575.50"></text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_ready (3 samples, 0.06%)</title><rect x="32.4739%" y="565" width="0.0590%" height="15" fill="rgb(227,98,0)" fg:x="1650" fg:w="3"/><text x="32.7239%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.06%)</title><rect x="32.5330%" y="565" width="0.0590%" height="15" fill="rgb(207,7,3)" fg:x="1653" fg:w="3"/><text x="32.7830%" y="575.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (1 samples, 0.02%)</title><rect x="32.5920%" y="565" width="0.0197%" height="15" fill="rgb(206,98,19)" fg:x="1656" fg:w="1"/><text x="32.8420%" y="575.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,291 samples, 25.41%)</title><rect x="31.4702%" y="597" width="25.4084%" height="15" fill="rgb(217,5,26)" fg:x="1599" fg:w="1291"/><text x="31.7202%" y="607.50">deno`&lt;core::future::from_generator::GenFu..</text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_write_priv (1,244 samples, 24.48%)</title><rect x="32.3952%" y="581" width="24.4834%" height="15" fill="rgb(235,190,38)" fg:x="1646" fg:w="1244"/><text x="32.6452%" y="591.50">deno`tokio::net::tcp::stream::TcpStream..</text></g><g><title>libsystem_kernel.dylib`__sendto (1,233 samples, 24.27%)</title><rect x="32.6117%" y="565" width="24.2669%" height="15" fill="rgb(247,86,24)" fg:x="1657" fg:w="1233"/><text x="32.8617%" y="575.50">libsystem_kernel.dylib`__sendto</text></g><g><title>deno`&lt;deno_core::async_cell::internal::AsyncBorrowFutureImpl&lt;T,M&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="56.8786%" y="597" width="0.0197%" height="15" fill="rgb(205,101,16)" fg:x="2890" fg:w="1"/><text x="57.1286%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.10%)</title><rect x="56.9376%" y="549" width="0.0984%" height="15" fill="rgb(246,168,33)" fg:x="2893" fg:w="5"/><text x="57.1876%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.14%)</title><rect x="56.9179%" y="581" width="0.1378%" height="15" fill="rgb(231,114,1)" fg:x="2892" fg:w="7"/><text x="57.1679%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.12%)</title><rect x="56.9376%" y="565" width="0.1181%" height="15" fill="rgb(207,184,53)" fg:x="2893" fg:w="6"/><text x="57.1876%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="57.0360%" y="549" width="0.0197%" height="15" fill="rgb(224,95,51)" fg:x="2898" fg:w="1"/><text x="57.2860%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="57.0557%" y="581" width="0.0197%" height="15" fill="rgb(212,188,45)" fg:x="2899" fg:w="1"/><text x="57.3057%" y="591.50"></text></g><g><title>deno`&lt;deno_net::io::FullDuplexResource&lt;tokio::net::tcp::split_owned::OwnedReadHalf,tokio::net::tcp::split_owned::OwnedWriteHalf&gt; as deno_core::resources::Resource&gt;::write (10 samples, 0.20%)</title><rect x="56.8982%" y="597" width="0.1968%" height="15" fill="rgb(223,154,38)" fg:x="2891" fg:w="10"/><text x="57.1482%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="57.0754%" y="581" width="0.0197%" height="15" fill="rgb(251,22,52)" fg:x="2900" fg:w="1"/><text x="57.3254%" y="591.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="57.0951%" y="597" width="0.0197%" height="15" fill="rgb(229,209,22)" fg:x="2901" fg:w="1"/><text x="57.3451%" y="607.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="57.1147%" y="597" width="0.0197%" height="15" fill="rgb(234,138,34)" fg:x="2902" fg:w="1"/><text x="57.3647%" y="607.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="57.1344%" y="597" width="0.0197%" height="15" fill="rgb(212,95,11)" fg:x="2903" fg:w="1"/><text x="57.3844%" y="607.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowImpl&lt;tokio::net::tcp::split_owned::OwnedWriteHalf,deno_core::async_cell::internal::Exclusive&gt;&gt; (1 samples, 0.02%)</title><rect x="57.1541%" y="597" width="0.0197%" height="15" fill="rgb(240,179,47)" fg:x="2904" fg:w="1"/><text x="57.4041%" y="607.50"></text></g><g><title>deno`deno_net::io::FullDuplexResource&lt;R,W&gt;::wr_borrow_mut (2 samples, 0.04%)</title><rect x="57.1738%" y="597" width="0.0394%" height="15" fill="rgb(240,163,11)" fg:x="2905" fg:w="2"/><text x="57.4238%" y="607.50"></text></g><g><title>deno`std__shared_ptr__v8__BackingStore__reset (1 samples, 0.02%)</title><rect x="57.2131%" y="597" width="0.0197%" height="15" fill="rgb(236,37,12)" fg:x="2907" fg:w="1"/><text x="57.4631%" y="607.50"></text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_write_priv (1 samples, 0.02%)</title><rect x="57.2328%" y="597" width="0.0197%" height="15" fill="rgb(232,164,16)" fg:x="2908" fg:w="1"/><text x="57.4828%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="57.2525%" y="597" width="0.0197%" height="15" fill="rgb(244,205,15)" fg:x="2909" fg:w="1"/><text x="57.5025%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.16%)</title><rect x="57.2722%" y="597" width="0.1574%" height="15" fill="rgb(223,117,47)" fg:x="2910" fg:w="8"/><text x="57.5222%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.08%)</title><rect x="57.3509%" y="581" width="0.0787%" height="15" fill="rgb(244,107,35)" fg:x="2914" fg:w="4"/><text x="57.6009%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.06%)</title><rect x="57.4296%" y="597" width="0.0590%" height="15" fill="rgb(205,140,8)" fg:x="2918" fg:w="3"/><text x="57.6796%" y="607.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,358 samples, 26.73%)</title><rect x="30.8010%" y="613" width="26.7270%" height="15" fill="rgb(228,84,46)" fg:x="1565" fg:w="1358"/><text x="31.0510%" y="623.50">deno`&lt;core::future::from_generator::GenFutu..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.04%)</title><rect x="57.4887%" y="597" width="0.0394%" height="15" fill="rgb(254,188,9)" fg:x="2921" fg:w="2"/><text x="57.7387%" y="607.50"></text></g><g><title>deno`v8::ArrayBufferView::Buffer (5 samples, 0.10%)</title><rect x="57.7052%" y="565" width="0.0984%" height="15" fill="rgb(206,112,54)" fg:x="2932" fg:w="5"/><text x="57.9552%" y="575.50"></text></g><g><title>deno`v8::internal::JSTypedArray::GetBuffer (4 samples, 0.08%)</title><rect x="57.7249%" y="549" width="0.0787%" height="15" fill="rgb(216,84,49)" fg:x="2933" fg:w="4"/><text x="57.9749%" y="559.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (1 samples, 0.02%)</title><rect x="57.8036%" y="565" width="0.0197%" height="15" fill="rgb(214,194,35)" fg:x="2937" fg:w="1"/><text x="58.0536%" y="575.50"></text></g><g><title>deno`v8::array_buffer_view::_&lt;impl v8::data::ArrayBufferView&gt;::buffer (1 samples, 0.02%)</title><rect x="57.8233%" y="565" width="0.0197%" height="15" fill="rgb(249,28,3)" fg:x="2938" fg:w="1"/><text x="58.0733%" y="575.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="57.8429%" y="565" width="0.0197%" height="15" fill="rgb(222,56,52)" fg:x="2939" fg:w="1"/><text x="58.0929%" y="575.50"></text></g><g><title>deno`serde_v8::magic::v8slice::to_ranged_buffer (14 samples, 0.28%)</title><rect x="57.6068%" y="581" width="0.2755%" height="15" fill="rgb(245,217,50)" fg:x="2927" fg:w="14"/><text x="57.8568%" y="591.50"></text></g><g><title>deno`v8::internal::JSTypedArray::GetBuffer (1 samples, 0.02%)</title><rect x="57.8626%" y="565" width="0.0197%" height="15" fill="rgb(213,201,24)" fg:x="2940" fg:w="1"/><text x="58.1126%" y="575.50"></text></g><g><title>deno`v8::ArrayBuffer::GetBackingStore (7 samples, 0.14%)</title><rect x="57.8823%" y="581" width="0.1378%" height="15" fill="rgb(248,116,28)" fg:x="2941" fg:w="7"/><text x="58.1323%" y="591.50"></text></g><g><title>deno`v8::ArrayBufferView::Buffer (3 samples, 0.06%)</title><rect x="58.0201%" y="581" width="0.0590%" height="15" fill="rgb(219,72,43)" fg:x="2948" fg:w="3"/><text x="58.2701%" y="591.50"></text></g><g><title>deno`v8::ArrayBufferView::ByteLength (1 samples, 0.02%)</title><rect x="58.0791%" y="581" width="0.0197%" height="15" fill="rgb(209,138,14)" fg:x="2951" fg:w="1"/><text x="58.3291%" y="591.50"></text></g><g><title>deno`v8::ArrayBufferView::ByteOffset (1 samples, 0.02%)</title><rect x="58.0988%" y="581" width="0.0197%" height="15" fill="rgb(222,18,33)" fg:x="2952" fg:w="1"/><text x="58.3488%" y="591.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (35 samples, 0.69%)</title><rect x="57.5477%" y="597" width="0.6888%" height="15" fill="rgb(213,199,7)" fg:x="2924" fg:w="35"/><text x="57.7977%" y="607.50"></text></g><g><title>deno`v8::Value::IsArrayBufferView (6 samples, 0.12%)</title><rect x="58.1185%" y="581" width="0.1181%" height="15" fill="rgb(250,110,10)" fg:x="2953" fg:w="6"/><text x="58.3685%" y="591.50"></text></g><g><title>deno`serde_v8::magic::v8slice::to_ranged_buffer (4 samples, 0.08%)</title><rect x="58.2366%" y="597" width="0.0787%" height="15" fill="rgb(248,123,6)" fg:x="2959" fg:w="4"/><text x="58.4866%" y="607.50"></text></g><g><title>deno`v8::ArrayBuffer::GetBackingStore (2 samples, 0.04%)</title><rect x="58.3153%" y="597" width="0.0394%" height="15" fill="rgb(206,91,31)" fg:x="2963" fg:w="2"/><text x="58.5653%" y="607.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as serde_v8::magic::transl8::FromV8&gt;::from_v8 (43 samples, 0.85%)</title><rect x="57.5280%" y="613" width="0.8463%" height="15" fill="rgb(211,154,13)" fg:x="2923" fg:w="43"/><text x="57.7780%" y="623.50"></text></g><g><title>deno`v8::BackingStore::IsShared (1 samples, 0.02%)</title><rect x="58.3547%" y="597" width="0.0197%" height="15" fill="rgb(225,148,7)" fg:x="2965" fg:w="1"/><text x="58.6047%" y="607.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="58.3743%" y="613" width="0.0197%" height="15" fill="rgb(220,160,43)" fg:x="2966" fg:w="1"/><text x="58.6243%" y="623.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.02%)</title><rect x="58.3940%" y="613" width="0.0197%" height="15" fill="rgb(213,52,39)" fg:x="2967" fg:w="1"/><text x="58.6440%" y="623.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="58.4137%" y="613" width="0.0197%" height="15" fill="rgb(243,137,7)" fg:x="2968" fg:w="1"/><text x="58.6637%" y="623.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (5 samples, 0.10%)</title><rect x="58.4334%" y="613" width="0.0984%" height="15" fill="rgb(230,79,13)" fg:x="2969" fg:w="5"/><text x="58.6834%" y="623.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (17 samples, 0.33%)</title><rect x="58.5318%" y="613" width="0.3346%" height="15" fill="rgb(247,105,23)" fg:x="2974" fg:w="17"/><text x="58.7818%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.18%)</title><rect x="58.6892%" y="597" width="0.1771%" height="15" fill="rgb(223,179,41)" fg:x="2982" fg:w="9"/><text x="58.9392%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.16%)</title><rect x="58.7089%" y="581" width="0.1574%" height="15" fill="rgb(218,9,34)" fg:x="2983" fg:w="8"/><text x="58.9589%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.12%)</title><rect x="58.7483%" y="565" width="0.1181%" height="15" fill="rgb(222,106,8)" fg:x="2985" fg:w="6"/><text x="58.9983%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="58.8270%" y="549" width="0.0394%" height="15" fill="rgb(211,220,0)" fg:x="2989" fg:w="2"/><text x="59.0770%" y="559.50"></text></g><g><title>deno`serde_v8::de::from_v8 (2 samples, 0.04%)</title><rect x="58.8664%" y="613" width="0.0394%" height="15" fill="rgb(229,52,16)" fg:x="2991" fg:w="2"/><text x="59.1164%" y="623.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (1 samples, 0.02%)</title><rect x="58.9057%" y="613" width="0.0197%" height="15" fill="rgb(212,155,18)" fg:x="2993" fg:w="1"/><text x="59.1557%" y="623.50"></text></g><g><title>deno`v8::Value::IsInt32 (4 samples, 0.08%)</title><rect x="58.9254%" y="613" width="0.0787%" height="15" fill="rgb(242,21,14)" fg:x="2994" fg:w="4"/><text x="59.1754%" y="623.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::get (1 samples, 0.02%)</title><rect x="59.0041%" y="613" width="0.0197%" height="15" fill="rgb(222,19,48)" fg:x="2998" fg:w="1"/><text x="59.2541%" y="623.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.06%)</title><rect x="59.0238%" y="613" width="0.0590%" height="15" fill="rgb(232,45,27)" fg:x="2999" fg:w="3"/><text x="59.2738%" y="623.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (3 samples, 0.06%)</title><rect x="59.0829%" y="613" width="0.0590%" height="15" fill="rgb(249,103,42)" fg:x="3002" fg:w="3"/><text x="59.3329%" y="623.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (1 samples, 0.02%)</title><rect x="59.1419%" y="613" width="0.0197%" height="15" fill="rgb(246,81,33)" fg:x="3005" fg:w="1"/><text x="59.3919%" y="623.50"></text></g><g><title>deno`v8::scope::HandleScope::get_current_context (1 samples, 0.02%)</title><rect x="59.1616%" y="613" width="0.0197%" height="15" fill="rgb(252,33,42)" fg:x="3006" fg:w="1"/><text x="59.4116%" y="623.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (3 samples, 0.06%)</title><rect x="59.1813%" y="613" width="0.0590%" height="15" fill="rgb(209,212,41)" fg:x="3007" fg:w="3"/><text x="59.4313%" y="623.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (4 samples, 0.08%)</title><rect x="59.2403%" y="613" width="0.0787%" height="15" fill="rgb(207,154,6)" fg:x="3010" fg:w="4"/><text x="59.4903%" y="623.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.04%)</title><rect x="59.2797%" y="597" width="0.0394%" height="15" fill="rgb(223,64,47)" fg:x="3012" fg:w="2"/><text x="59.5297%" y="607.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (1 samples, 0.02%)</title><rect x="59.3190%" y="613" width="0.0197%" height="15" fill="rgb(211,161,38)" fg:x="3014" fg:w="1"/><text x="59.5690%" y="623.50"></text></g><g><title>deno`v8__Global__New (2 samples, 0.04%)</title><rect x="59.3387%" y="613" width="0.0394%" height="15" fill="rgb(219,138,40)" fg:x="3015" fg:w="2"/><text x="59.5887%" y="623.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.04%)</title><rect x="59.3387%" y="597" width="0.0394%" height="15" fill="rgb(241,228,46)" fg:x="3015" fg:w="2"/><text x="59.5887%" y="607.50"></text></g><g><title>deno`v8__Isolate__GetData (1 samples, 0.02%)</title><rect x="59.3781%" y="613" width="0.0197%" height="15" fill="rgb(223,209,38)" fg:x="3017" fg:w="1"/><text x="59.6281%" y="623.50"></text></g><g><title>deno`v8__Isolate__SetData (2 samples, 0.04%)</title><rect x="59.3978%" y="613" width="0.0394%" height="15" fill="rgb(236,164,45)" fg:x="3018" fg:w="2"/><text x="59.6478%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.06%)</title><rect x="59.4765%" y="597" width="0.0590%" height="15" fill="rgb(231,15,5)" fg:x="3022" fg:w="3"/><text x="59.7265%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.24%)</title><rect x="59.4371%" y="613" width="0.2362%" height="15" fill="rgb(252,35,15)" fg:x="3020" fg:w="12"/><text x="59.6871%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.14%)</title><rect x="59.5355%" y="597" width="0.1378%" height="15" fill="rgb(248,181,18)" fg:x="3025" fg:w="7"/><text x="59.7855%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.14%)</title><rect x="59.5355%" y="581" width="0.1378%" height="15" fill="rgb(233,39,42)" fg:x="3025" fg:w="7"/><text x="59.7855%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="59.6339%" y="565" width="0.0394%" height="15" fill="rgb(238,110,33)" fg:x="3030" fg:w="2"/><text x="59.8839%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="59.6733%" y="613" width="0.0197%" height="15" fill="rgb(233,195,10)" fg:x="3032" fg:w="1"/><text x="59.9233%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.06%)</title><rect x="59.6930%" y="613" width="0.0590%" height="15" fill="rgb(254,105,3)" fg:x="3033" fg:w="3"/><text x="59.9430%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="59.7323%" y="597" width="0.0197%" height="15" fill="rgb(221,225,9)" fg:x="3035" fg:w="1"/><text x="59.9823%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.08%)</title><rect x="59.7520%" y="613" width="0.0787%" height="15" fill="rgb(224,227,45)" fg:x="3036" fg:w="4"/><text x="60.0020%" y="623.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1,526 samples, 30.03%)</title><rect x="29.8170%" y="629" width="30.0335%" height="15" fill="rgb(229,198,43)" fg:x="1515" fg:w="1526"/><text x="30.0670%" y="639.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFn..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="59.8307%" y="613" width="0.0197%" height="15" fill="rgb(206,209,35)" fg:x="3040" fg:w="1"/><text x="60.0807%" y="623.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as serde_v8::magic::transl8::FromV8&gt;::from_v8 (4 samples, 0.08%)</title><rect x="59.8504%" y="629" width="0.0787%" height="15" fill="rgb(245,195,53)" fg:x="3041" fg:w="4"/><text x="60.1004%" y="639.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="59.9291%" y="629" width="0.0197%" height="15" fill="rgb(240,92,26)" fg:x="3045" fg:w="1"/><text x="60.1791%" y="639.50"></text></g><g><title>deno`DYLD-STUB$$free (3 samples, 0.06%)</title><rect x="59.9488%" y="629" width="0.0590%" height="15" fill="rgb(207,40,23)" fg:x="3046" fg:w="3"/><text x="60.1988%" y="639.50"></text></g><g><title>deno`serde_v8::de::from_v8 (1 samples, 0.02%)</title><rect x="60.0079%" y="629" width="0.0197%" height="15" fill="rgb(223,111,35)" fg:x="3049" fg:w="1"/><text x="60.2579%" y="639.50"></text></g><g><title>deno`v8::External::Value (4 samples, 0.08%)</title><rect x="60.0276%" y="629" width="0.0787%" height="15" fill="rgb(229,147,28)" fg:x="3050" fg:w="4"/><text x="60.2776%" y="639.50"></text></g><g><title>deno`v8::Integer::Value (1 samples, 0.02%)</title><rect x="60.1063%" y="629" width="0.0197%" height="15" fill="rgb(211,29,28)" fg:x="3054" fg:w="1"/><text x="60.3563%" y="639.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (2 samples, 0.04%)</title><rect x="60.1260%" y="629" width="0.0394%" height="15" fill="rgb(228,72,33)" fg:x="3055" fg:w="2"/><text x="60.3760%" y="639.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (6 samples, 0.12%)</title><rect x="60.1653%" y="629" width="0.1181%" height="15" fill="rgb(205,214,31)" fg:x="3057" fg:w="6"/><text x="60.4153%" y="639.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (1 samples, 0.02%)</title><rect x="60.2834%" y="629" width="0.0197%" height="15" fill="rgb(224,111,15)" fg:x="3063" fg:w="1"/><text x="60.5334%" y="639.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (1 samples, 0.02%)</title><rect x="60.3031%" y="629" width="0.0197%" height="15" fill="rgb(253,21,26)" fg:x="3064" fg:w="1"/><text x="60.5531%" y="639.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (1 samples, 0.02%)</title><rect x="60.3228%" y="629" width="0.0197%" height="15" fill="rgb(245,139,43)" fg:x="3065" fg:w="1"/><text x="60.5728%" y="639.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetReturnValue (1 samples, 0.02%)</title><rect x="60.3425%" y="629" width="0.0197%" height="15" fill="rgb(252,170,7)" fg:x="3066" fg:w="1"/><text x="60.5925%" y="639.50"></text></g><g><title>deno`v8__Isolate__GetData (3 samples, 0.06%)</title><rect x="60.3621%" y="629" width="0.0590%" height="15" fill="rgb(231,118,14)" fg:x="3067" fg:w="3"/><text x="60.6121%" y="639.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1,573 samples, 30.96%)</title><rect x="29.4824%" y="661" width="30.9585%" height="15" fill="rgb(238,83,0)" fg:x="1498" fg:w="1573"/><text x="29.7324%" y="671.50">deno`v8::internal::Builtin_HandleApiCall</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1,564 samples, 30.78%)</title><rect x="29.6595%" y="645" width="30.7813%" height="15" fill="rgb(221,39,39)" fg:x="1507" fg:w="1564"/><text x="29.9095%" y="655.50">deno`v8::internal::MaybeHandle&lt;v8::internal::Objec..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="60.4212%" y="629" width="0.0197%" height="15" fill="rgb(222,119,46)" fg:x="3070" fg:w="1"/><text x="60.6712%" y="639.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1,579 samples, 31.08%)</title><rect x="29.3840%" y="677" width="31.0766%" height="15" fill="rgb(222,165,49)" fg:x="1493" fg:w="1579"/><text x="29.6340%" y="687.50">deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOn..</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.02%)</title><rect x="60.4409%" y="661" width="0.0197%" height="15" fill="rgb(219,113,52)" fg:x="3071" fg:w="1"/><text x="60.6909%" y="671.50"></text></g><g><title>0x11004e42c (1,580 samples, 31.10%)</title><rect x="29.3840%" y="693" width="31.0962%" height="15" fill="rgb(214,7,15)" fg:x="1493" fg:w="1580"/><text x="29.6340%" y="703.50">0x11004e42c</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.02%)</title><rect x="60.4605%" y="677" width="0.0197%" height="15" fill="rgb(235,32,4)" fg:x="3072" fg:w="1"/><text x="60.7105%" y="687.50"></text></g><g><title>0x11004e478 (1 samples, 0.02%)</title><rect x="60.4802%" y="693" width="0.0197%" height="15" fill="rgb(238,90,54)" fg:x="3073" fg:w="1"/><text x="60.7302%" y="703.50"></text></g><g><title>0x11004e4a4 (1 samples, 0.02%)</title><rect x="60.4999%" y="693" width="0.0197%" height="15" fill="rgb(213,208,19)" fg:x="3074" fg:w="1"/><text x="60.7499%" y="703.50"></text></g><g><title>0x11004e544 (1 samples, 0.02%)</title><rect x="60.5196%" y="693" width="0.0197%" height="15" fill="rgb(233,156,4)" fg:x="3075" fg:w="1"/><text x="60.7696%" y="703.50"></text></g><g><title>0x11004e548 (1 samples, 0.02%)</title><rect x="60.5393%" y="693" width="0.0197%" height="15" fill="rgb(207,194,5)" fg:x="3076" fg:w="1"/><text x="60.7893%" y="703.50"></text></g><g><title>0x11004e59c (1 samples, 0.02%)</title><rect x="60.5589%" y="693" width="0.0197%" height="15" fill="rgb(206,111,30)" fg:x="3077" fg:w="1"/><text x="60.8089%" y="703.50"></text></g><g><title>0x11004e668 (1 samples, 0.02%)</title><rect x="60.5786%" y="693" width="0.0197%" height="15" fill="rgb(243,70,54)" fg:x="3078" fg:w="1"/><text x="60.8286%" y="703.50"></text></g><g><title>0x11004e6e4 (1 samples, 0.02%)</title><rect x="60.5983%" y="693" width="0.0197%" height="15" fill="rgb(242,28,8)" fg:x="3079" fg:w="1"/><text x="60.8483%" y="703.50"></text></g><g><title>0x11004e704 (1 samples, 0.02%)</title><rect x="60.6180%" y="693" width="0.0197%" height="15" fill="rgb(219,106,18)" fg:x="3080" fg:w="1"/><text x="60.8680%" y="703.50"></text></g><g><title>0x11004e73c (2 samples, 0.04%)</title><rect x="60.6377%" y="693" width="0.0394%" height="15" fill="rgb(244,222,10)" fg:x="3081" fg:w="2"/><text x="60.8877%" y="703.50"></text></g><g><title>0x11004e768 (1 samples, 0.02%)</title><rect x="60.6770%" y="693" width="0.0197%" height="15" fill="rgb(236,179,52)" fg:x="3083" fg:w="1"/><text x="60.9270%" y="703.50"></text></g><g><title>0x11004e778 (1 samples, 0.02%)</title><rect x="60.6967%" y="693" width="0.0197%" height="15" fill="rgb(213,23,39)" fg:x="3084" fg:w="1"/><text x="60.9467%" y="703.50"></text></g><g><title>0x11004ea2c (1 samples, 0.02%)</title><rect x="60.7164%" y="693" width="0.0197%" height="15" fill="rgb(238,48,10)" fg:x="3085" fg:w="1"/><text x="60.9664%" y="703.50"></text></g><g><title>0x11004ea4c (10 samples, 0.20%)</title><rect x="60.7361%" y="693" width="0.1968%" height="15" fill="rgb(251,196,23)" fg:x="3086" fg:w="10"/><text x="60.9861%" y="703.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (10 samples, 0.20%)</title><rect x="60.7361%" y="677" width="0.1968%" height="15" fill="rgb(250,152,24)" fg:x="3086" fg:w="10"/><text x="60.9861%" y="687.50"></text></g><g><title>deno`Builtins_AdaptorWithBuiltinExitFrame (1 samples, 0.02%)</title><rect x="60.9329%" y="693" width="0.0197%" height="15" fill="rgb(209,150,17)" fg:x="3096" fg:w="1"/><text x="61.1829%" y="703.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (3 samples, 0.06%)</title><rect x="60.9526%" y="693" width="0.0590%" height="15" fill="rgb(234,202,34)" fg:x="3097" fg:w="3"/><text x="61.2026%" y="703.50"></text></g><g><title>deno`Builtins_CallForwardVarargs (4 samples, 0.08%)</title><rect x="61.0116%" y="693" width="0.0787%" height="15" fill="rgb(253,148,53)" fg:x="3100" fg:w="4"/><text x="61.2616%" y="703.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (7 samples, 0.14%)</title><rect x="61.0903%" y="693" width="0.1378%" height="15" fill="rgb(218,129,16)" fg:x="3104" fg:w="7"/><text x="61.3403%" y="703.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (1 samples, 0.02%)</title><rect x="61.2281%" y="693" width="0.0197%" height="15" fill="rgb(216,85,19)" fg:x="3111" fg:w="1"/><text x="61.4781%" y="703.50"></text></g><g><title>deno`Builtins_HandleApiCall (1 samples, 0.02%)</title><rect x="61.2478%" y="693" width="0.0197%" height="15" fill="rgb(235,228,7)" fg:x="3112" fg:w="1"/><text x="61.4978%" y="703.50"></text></g><g><title>0x110054370 (1,645 samples, 32.38%)</title><rect x="29.0100%" y="709" width="32.3755%" height="15" fill="rgb(245,175,0)" fg:x="1474" fg:w="1645"/><text x="29.2600%" y="719.50">0x110054370</text></g><g><title>deno`Builtins_KeyedLoadICTrampoline_Megamorphic (6 samples, 0.12%)</title><rect x="61.2675%" y="693" width="0.1181%" height="15" fill="rgb(208,168,36)" fg:x="3113" fg:w="6"/><text x="61.5175%" y="703.50"></text></g><g><title>0x110054384 (12 samples, 0.24%)</title><rect x="61.3856%" y="709" width="0.2362%" height="15" fill="rgb(246,171,24)" fg:x="3119" fg:w="12"/><text x="61.6356%" y="719.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (12 samples, 0.24%)</title><rect x="61.3856%" y="693" width="0.2362%" height="15" fill="rgb(215,142,24)" fg:x="3119" fg:w="12"/><text x="61.6356%" y="703.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (3 samples, 0.06%)</title><rect x="61.5627%" y="677" width="0.0590%" height="15" fill="rgb(250,187,7)" fg:x="3128" fg:w="3"/><text x="61.8127%" y="687.50"></text></g><g><title>0x1100543b8 (1 samples, 0.02%)</title><rect x="61.6217%" y="709" width="0.0197%" height="15" fill="rgb(228,66,33)" fg:x="3131" fg:w="1"/><text x="61.8717%" y="719.50"></text></g><g><title>0x110054404 (14 samples, 0.28%)</title><rect x="61.6414%" y="709" width="0.2755%" height="15" fill="rgb(234,215,21)" fg:x="3132" fg:w="14"/><text x="61.8914%" y="719.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (14 samples, 0.28%)</title><rect x="61.6414%" y="693" width="0.2755%" height="15" fill="rgb(222,191,20)" fg:x="3132" fg:w="14"/><text x="61.8914%" y="703.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (3 samples, 0.06%)</title><rect x="61.8579%" y="677" width="0.0590%" height="15" fill="rgb(245,79,54)" fg:x="3143" fg:w="3"/><text x="62.1079%" y="687.50"></text></g><g><title>0x110054428 (1 samples, 0.02%)</title><rect x="61.9169%" y="709" width="0.0197%" height="15" fill="rgb(240,10,37)" fg:x="3146" fg:w="1"/><text x="62.1669%" y="719.50"></text></g><g><title>0x110054434 (1 samples, 0.02%)</title><rect x="61.9366%" y="709" width="0.0197%" height="15" fill="rgb(214,192,32)" fg:x="3147" fg:w="1"/><text x="62.1866%" y="719.50"></text></g><g><title>0x110054440 (1 samples, 0.02%)</title><rect x="61.9563%" y="709" width="0.0197%" height="15" fill="rgb(209,36,54)" fg:x="3148" fg:w="1"/><text x="62.2063%" y="719.50"></text></g><g><title>0x11005447c (1 samples, 0.02%)</title><rect x="61.9760%" y="709" width="0.0197%" height="15" fill="rgb(220,10,11)" fg:x="3149" fg:w="1"/><text x="62.2260%" y="719.50"></text></g><g><title>0x110054530 (2 samples, 0.04%)</title><rect x="61.9957%" y="709" width="0.0394%" height="15" fill="rgb(221,106,17)" fg:x="3150" fg:w="2"/><text x="62.2457%" y="719.50"></text></g><g><title>0x110054568 (1 samples, 0.02%)</title><rect x="62.0350%" y="709" width="0.0197%" height="15" fill="rgb(251,142,44)" fg:x="3152" fg:w="1"/><text x="62.2850%" y="719.50"></text></g><g><title>0x110054584 (1 samples, 0.02%)</title><rect x="62.0547%" y="709" width="0.0197%" height="15" fill="rgb(238,13,15)" fg:x="3153" fg:w="1"/><text x="62.3047%" y="719.50"></text></g><g><title>0x1100545b0 (1 samples, 0.02%)</title><rect x="62.0744%" y="709" width="0.0197%" height="15" fill="rgb(208,107,27)" fg:x="3154" fg:w="1"/><text x="62.3244%" y="719.50"></text></g><g><title>0x1100545bc (1 samples, 0.02%)</title><rect x="62.0941%" y="709" width="0.0197%" height="15" fill="rgb(205,136,37)" fg:x="3155" fg:w="1"/><text x="62.3441%" y="719.50"></text></g><g><title>0x1100545f0 (1 samples, 0.02%)</title><rect x="62.1138%" y="709" width="0.0197%" height="15" fill="rgb(250,205,27)" fg:x="3156" fg:w="1"/><text x="62.3638%" y="719.50"></text></g><g><title>0x1100545fc (2 samples, 0.04%)</title><rect x="62.1334%" y="709" width="0.0394%" height="15" fill="rgb(210,80,43)" fg:x="3157" fg:w="2"/><text x="62.3834%" y="719.50"></text></g><g><title>0x1100546ec (1 samples, 0.02%)</title><rect x="62.1728%" y="709" width="0.0197%" height="15" fill="rgb(247,160,36)" fg:x="3159" fg:w="1"/><text x="62.4228%" y="719.50"></text></g><g><title>0x110054738 (1 samples, 0.02%)</title><rect x="62.1925%" y="709" width="0.0197%" height="15" fill="rgb(234,13,49)" fg:x="3160" fg:w="1"/><text x="62.4425%" y="719.50"></text></g><g><title>0x110054748 (1 samples, 0.02%)</title><rect x="62.2122%" y="709" width="0.0197%" height="15" fill="rgb(234,122,0)" fg:x="3161" fg:w="1"/><text x="62.4622%" y="719.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (1 samples, 0.02%)</title><rect x="62.2122%" y="693" width="0.0197%" height="15" fill="rgb(207,146,38)" fg:x="3161" fg:w="1"/><text x="62.4622%" y="703.50"></text></g><g><title>0x110054764 (1 samples, 0.02%)</title><rect x="62.2318%" y="709" width="0.0197%" height="15" fill="rgb(207,177,25)" fg:x="3162" fg:w="1"/><text x="62.4818%" y="719.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.02%)</title><rect x="62.3696%" y="661" width="0.0197%" height="15" fill="rgb(211,178,42)" fg:x="3169" fg:w="1"/><text x="62.6196%" y="671.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::FunctionCallbackArguments (1 samples, 0.02%)</title><rect x="62.3893%" y="661" width="0.0197%" height="15" fill="rgb(230,69,54)" fg:x="3170" fg:w="1"/><text x="62.6393%" y="671.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.06%)</title><rect x="64.2787%" y="581" width="0.0590%" height="15" fill="rgb(214,135,41)" fg:x="3266" fg:w="3"/><text x="64.5287%" y="591.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.10%)</title><rect x="64.3377%" y="581" width="0.0984%" height="15" fill="rgb(237,67,25)" fg:x="3269" fg:w="5"/><text x="64.5877%" y="591.50"></text></g><g><title>deno`&lt;v8::array_buffer::BackingStore as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="64.4165%" y="565" width="0.0197%" height="15" fill="rgb(222,189,50)" fg:x="3273" fg:w="1"/><text x="64.6665%" y="575.50"></text></g><g><title>deno`&lt;v8::array_buffer::BackingStore as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="64.4361%" y="581" width="0.0197%" height="15" fill="rgb(245,148,34)" fg:x="3274" fg:w="1"/><text x="64.6861%" y="591.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowImpl&lt;tokio::net::tcp::split_owned::OwnedReadHalf,deno_core::async_cell::internal::Exclusive&gt;&gt; (3 samples, 0.06%)</title><rect x="64.4558%" y="581" width="0.0590%" height="15" fill="rgb(222,29,6)" fg:x="3275" fg:w="3"/><text x="64.7058%" y="591.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (2 samples, 0.04%)</title><rect x="64.4755%" y="565" width="0.0394%" height="15" fill="rgb(221,189,43)" fg:x="3276" fg:w="2"/><text x="64.7255%" y="575.50"></text></g><g><title>deno`deno_core::async_cancel::internal::Node::register (1 samples, 0.02%)</title><rect x="64.5149%" y="581" width="0.0197%" height="15" fill="rgb(207,36,27)" fg:x="3278" fg:w="1"/><text x="64.7649%" y="591.50"></text></g><g><title>deno`deno_core::async_cell::internal::BorrowCount::remove (1 samples, 0.02%)</title><rect x="64.5345%" y="581" width="0.0197%" height="15" fill="rgb(217,90,24)" fg:x="3279" fg:w="1"/><text x="64.7845%" y="591.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (26 samples, 0.51%)</title><rect x="64.5542%" y="581" width="0.5117%" height="15" fill="rgb(224,66,35)" fg:x="3280" fg:w="26"/><text x="64.8042%" y="591.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.06%)</title><rect x="65.0856%" y="565" width="0.0590%" height="15" fill="rgb(221,13,50)" fg:x="3307" fg:w="3"/><text x="65.3356%" y="575.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11480 (1 samples, 0.02%)</title><rect x="65.1447%" y="565" width="0.0197%" height="15" fill="rgb(236,68,49)" fg:x="3310" fg:w="1"/><text x="65.3947%" y="575.50"></text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_ready (2 samples, 0.04%)</title><rect x="65.1643%" y="565" width="0.0394%" height="15" fill="rgb(229,146,28)" fg:x="3311" fg:w="2"/><text x="65.4143%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.08%)</title><rect x="65.2037%" y="565" width="0.0787%" height="15" fill="rgb(225,31,38)" fg:x="3313" fg:w="4"/><text x="65.4537%" y="575.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (2 samples, 0.04%)</title><rect x="65.2824%" y="565" width="0.0394%" height="15" fill="rgb(250,208,3)" fg:x="3317" fg:w="2"/><text x="65.5324%" y="575.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (965 samples, 18.99%)</title><rect x="63.9638%" y="597" width="18.9923%" height="15" fill="rgb(246,54,23)" fg:x="3250" fg:w="965"/><text x="64.2138%" y="607.50">deno`&lt;core::future::from_gener..</text></g><g><title>deno`tokio::net::tcp::stream::TcpStream::poll_read_priv (909 samples, 17.89%)</title><rect x="65.0659%" y="581" width="17.8902%" height="15" fill="rgb(243,76,11)" fg:x="3306" fg:w="909"/><text x="65.3159%" y="591.50">deno`tokio::net::tcp::stream..</text></g><g><title>libsystem_kernel.dylib`__recvfrom (896 samples, 17.63%)</title><rect x="65.3218%" y="565" width="17.6343%" height="15" fill="rgb(245,21,50)" fg:x="3319" fg:w="896"/><text x="65.5718%" y="575.50">libsystem_kernel.dylib`__re..</text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowFutureImpl&lt;tokio::net::tcp::split_owned::OwnedReadHalf,deno_core::async_cell::internal::Exclusive&gt;&gt; (2 samples, 0.04%)</title><rect x="82.9561%" y="597" width="0.0394%" height="15" fill="rgb(228,9,43)" fg:x="4215" fg:w="2"/><text x="83.2061%" y="607.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowImpl&lt;tokio::net::tcp::split_owned::OwnedReadHalf,deno_core::async_cell::internal::Exclusive&gt;&gt; (1 samples, 0.02%)</title><rect x="82.9955%" y="597" width="0.0197%" height="15" fill="rgb(208,100,47)" fg:x="4217" fg:w="1"/><text x="83.2455%" y="607.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (1 samples, 0.02%)</title><rect x="83.0152%" y="597" width="0.0197%" height="15" fill="rgb(232,26,8)" fg:x="4218" fg:w="1"/><text x="83.2652%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="83.0939%" y="581" width="0.0197%" height="15" fill="rgb(216,166,38)" fg:x="4222" fg:w="1"/><text x="83.3439%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.30%)</title><rect x="83.0348%" y="597" width="0.2952%" height="15" fill="rgb(251,202,51)" fg:x="4219" fg:w="15"/><text x="83.2848%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.22%)</title><rect x="83.1136%" y="581" width="0.2165%" height="15" fill="rgb(254,216,34)" fg:x="4223" fg:w="11"/><text x="83.3636%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.16%)</title><rect x="83.1726%" y="565" width="0.1574%" height="15" fill="rgb(251,32,27)" fg:x="4226" fg:w="8"/><text x="83.4226%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="83.2907%" y="549" width="0.0394%" height="15" fill="rgb(208,127,28)" fg:x="4232" fg:w="2"/><text x="83.5407%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="83.3301%" y="597" width="0.0197%" height="15" fill="rgb(224,137,22)" fg:x="4234" fg:w="1"/><text x="83.5801%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.06%)</title><rect x="83.3497%" y="597" width="0.0590%" height="15" fill="rgb(254,70,32)" fg:x="4235" fg:w="3"/><text x="83.5997%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.06%)</title><rect x="83.3497%" y="581" width="0.0590%" height="15" fill="rgb(229,75,37)" fg:x="4235" fg:w="3"/><text x="83.5997%" y="591.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (999 samples, 19.66%)</title><rect x="63.7867%" y="613" width="19.6615%" height="15" fill="rgb(252,64,23)" fg:x="3241" fg:w="999"/><text x="64.0367%" y="623.50">deno`&lt;core::future::from_genera..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.04%)</title><rect x="83.4088%" y="597" width="0.0394%" height="15" fill="rgb(232,162,48)" fg:x="4238" fg:w="2"/><text x="83.6588%" y="607.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;deno_net::io::FullDuplexResource&lt;tokio::net::tcp::split_owned::OwnedReadHalf,tokio::net::tcp::split_owned::OwnedWriteHalf&gt; as deno_core::resources::Resource&gt;::read::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="83.4481%" y="613" width="0.0197%" height="15" fill="rgb(246,160,12)" fg:x="4240" fg:w="1"/><text x="83.6981%" y="623.50"></text></g><g><title>deno`deno_core::resources::Resource::read (6 samples, 0.12%)</title><rect x="83.4678%" y="613" width="0.1181%" height="15" fill="rgb(247,166,0)" fg:x="4241" fg:w="6"/><text x="83.7178%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.10%)</title><rect x="83.4875%" y="597" width="0.0984%" height="15" fill="rgb(249,219,21)" fg:x="4242" fg:w="5"/><text x="83.7375%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.10%)</title><rect x="83.4875%" y="581" width="0.0984%" height="15" fill="rgb(205,209,3)" fg:x="4242" fg:w="5"/><text x="83.7375%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.06%)</title><rect x="83.5269%" y="565" width="0.0590%" height="15" fill="rgb(243,44,1)" fg:x="4244" fg:w="3"/><text x="83.7769%" y="575.50"></text></g><g><title>deno`std__shared_ptr__v8__BackingStore__reset (1 samples, 0.02%)</title><rect x="83.5859%" y="613" width="0.0197%" height="15" fill="rgb(206,159,16)" fg:x="4247" fg:w="1"/><text x="83.8359%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.12%)</title><rect x="83.6056%" y="613" width="0.1181%" height="15" fill="rgb(244,77,30)" fg:x="4248" fg:w="6"/><text x="83.8556%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.04%)</title><rect x="83.6843%" y="597" width="0.0394%" height="15" fill="rgb(218,69,12)" fg:x="4252" fg:w="2"/><text x="83.9343%" y="607.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,044 samples, 20.55%)</title><rect x="63.2159%" y="629" width="20.5471%" height="15" fill="rgb(212,87,7)" fg:x="3212" fg:w="1044"/><text x="63.4659%" y="639.50">deno`&lt;core::future::from_generat..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.04%)</title><rect x="83.7237%" y="613" width="0.0394%" height="15" fill="rgb(245,114,25)" fg:x="4254" fg:w="2"/><text x="83.9737%" y="623.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.04%)</title><rect x="83.8221%" y="581" width="0.0394%" height="15" fill="rgb(210,61,42)" fg:x="4259" fg:w="2"/><text x="84.0721%" y="591.50"></text></g><g><title>deno`v8::ArrayBufferView::Buffer (1 samples, 0.02%)</title><rect x="83.8614%" y="581" width="0.0197%" height="15" fill="rgb(211,52,33)" fg:x="4261" fg:w="1"/><text x="84.1114%" y="591.50"></text></g><g><title>deno`v8::internal::JSTypedArray::GetBuffer (1 samples, 0.02%)</title><rect x="83.8614%" y="565" width="0.0197%" height="15" fill="rgb(234,58,33)" fg:x="4261" fg:w="1"/><text x="84.1114%" y="575.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (2 samples, 0.04%)</title><rect x="83.8811%" y="581" width="0.0394%" height="15" fill="rgb(220,115,36)" fg:x="4262" fg:w="2"/><text x="84.1311%" y="591.50"></text></g><g><title>deno`v8::array_buffer_view::_&lt;impl v8::data::ArrayBufferView&gt;::buffer (1 samples, 0.02%)</title><rect x="83.9205%" y="581" width="0.0197%" height="15" fill="rgb(243,153,54)" fg:x="4264" fg:w="1"/><text x="84.1705%" y="591.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="83.9402%" y="581" width="0.0197%" height="15" fill="rgb(251,47,18)" fg:x="4265" fg:w="1"/><text x="84.1902%" y="591.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (1 samples, 0.02%)</title><rect x="83.9402%" y="565" width="0.0197%" height="15" fill="rgb(242,102,42)" fg:x="4265" fg:w="1"/><text x="84.1902%" y="575.50"></text></g><g><title>deno`serde_v8::magic::v8slice::to_ranged_buffer (8 samples, 0.16%)</title><rect x="83.8221%" y="597" width="0.1574%" height="15" fill="rgb(234,31,38)" fg:x="4259" fg:w="8"/><text x="84.0721%" y="607.50"></text></g><g><title>deno`v8::internal::JSTypedArray::GetBuffer (1 samples, 0.02%)</title><rect x="83.9599%" y="581" width="0.0197%" height="15" fill="rgb(221,117,51)" fg:x="4266" fg:w="1"/><text x="84.2099%" y="591.50"></text></g><g><title>deno`v8::ArrayBuffer::GetBackingStore (3 samples, 0.06%)</title><rect x="83.9795%" y="597" width="0.0590%" height="15" fill="rgb(212,20,18)" fg:x="4267" fg:w="3"/><text x="84.2295%" y="607.50"></text></g><g><title>deno`v8::ArrayBufferView::ByteLength (2 samples, 0.04%)</title><rect x="84.0386%" y="597" width="0.0394%" height="15" fill="rgb(245,133,36)" fg:x="4270" fg:w="2"/><text x="84.2886%" y="607.50"></text></g><g><title>deno`v8::ArrayBufferView::ByteOffset (1 samples, 0.02%)</title><rect x="84.0779%" y="597" width="0.0197%" height="15" fill="rgb(212,6,19)" fg:x="4272" fg:w="1"/><text x="84.3279%" y="607.50"></text></g><g><title>deno`v8::Value::IsArrayBufferView (5 samples, 0.10%)</title><rect x="84.0976%" y="597" width="0.0984%" height="15" fill="rgb(218,1,36)" fg:x="4273" fg:w="5"/><text x="84.3476%" y="607.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (21 samples, 0.41%)</title><rect x="83.8024%" y="613" width="0.4133%" height="15" fill="rgb(246,84,54)" fg:x="4258" fg:w="21"/><text x="84.0524%" y="623.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="84.1960%" y="597" width="0.0197%" height="15" fill="rgb(242,110,6)" fg:x="4278" fg:w="1"/><text x="84.4460%" y="607.50"></text></g><g><title>deno`v8::ArrayBuffer::GetBackingStore (2 samples, 0.04%)</title><rect x="84.2157%" y="613" width="0.0394%" height="15" fill="rgb(214,47,5)" fg:x="4279" fg:w="2"/><text x="84.4657%" y="623.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as serde_v8::magic::transl8::FromV8&gt;::from_v8 (26 samples, 0.51%)</title><rect x="83.7630%" y="629" width="0.5117%" height="15" fill="rgb(218,159,25)" fg:x="4256" fg:w="26"/><text x="84.0130%" y="639.50"></text></g><g><title>deno`v8::BackingStore::IsShared (1 samples, 0.02%)</title><rect x="84.2551%" y="613" width="0.0197%" height="15" fill="rgb(215,211,28)" fg:x="4281" fg:w="1"/><text x="84.5051%" y="623.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (3 samples, 0.06%)</title><rect x="84.2747%" y="629" width="0.0590%" height="15" fill="rgb(238,59,32)" fg:x="4282" fg:w="3"/><text x="84.5247%" y="639.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.02%)</title><rect x="84.3338%" y="629" width="0.0197%" height="15" fill="rgb(226,82,3)" fg:x="4285" fg:w="1"/><text x="84.5838%" y="639.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="84.3535%" y="629" width="0.0197%" height="15" fill="rgb(240,164,32)" fg:x="4286" fg:w="1"/><text x="84.6035%" y="639.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="84.3732%" y="629" width="0.0197%" height="15" fill="rgb(232,46,7)" fg:x="4287" fg:w="1"/><text x="84.6232%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="84.6093%" y="597" width="0.0197%" height="15" fill="rgb(229,129,53)" fg:x="4299" fg:w="1"/><text x="84.8593%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.26%)</title><rect x="84.5306%" y="613" width="0.2559%" height="15" fill="rgb(234,188,29)" fg:x="4295" fg:w="13"/><text x="84.7806%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.16%)</title><rect x="84.6290%" y="597" width="0.1574%" height="15" fill="rgb(246,141,4)" fg:x="4300" fg:w="8"/><text x="84.8790%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.14%)</title><rect x="84.6487%" y="581" width="0.1378%" height="15" fill="rgb(229,23,39)" fg:x="4301" fg:w="7"/><text x="84.8987%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="84.7471%" y="565" width="0.0394%" height="15" fill="rgb(206,12,3)" fg:x="4306" fg:w="2"/><text x="84.9971%" y="575.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (21 samples, 0.41%)</title><rect x="84.3928%" y="629" width="0.4133%" height="15" fill="rgb(252,226,20)" fg:x="4288" fg:w="21"/><text x="84.6428%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="84.7865%" y="613" width="0.0197%" height="15" fill="rgb(216,123,35)" fg:x="4308" fg:w="1"/><text x="85.0365%" y="623.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (2 samples, 0.04%)</title><rect x="84.8061%" y="629" width="0.0394%" height="15" fill="rgb(212,68,40)" fg:x="4309" fg:w="2"/><text x="85.0561%" y="639.50"></text></g><g><title>deno`v8::api_internal::GlobalizeReference (1 samples, 0.02%)</title><rect x="84.8455%" y="629" width="0.0197%" height="15" fill="rgb(254,125,32)" fg:x="4311" fg:w="1"/><text x="85.0955%" y="639.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (1 samples, 0.02%)</title><rect x="84.8652%" y="629" width="0.0197%" height="15" fill="rgb(253,97,22)" fg:x="4312" fg:w="1"/><text x="85.1152%" y="639.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::get (3 samples, 0.06%)</title><rect x="84.8849%" y="629" width="0.0590%" height="15" fill="rgb(241,101,14)" fg:x="4313" fg:w="3"/><text x="85.1349%" y="639.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.04%)</title><rect x="84.9439%" y="629" width="0.0394%" height="15" fill="rgb(238,103,29)" fg:x="4316" fg:w="2"/><text x="85.1939%" y="639.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (1 samples, 0.02%)</title><rect x="84.9833%" y="629" width="0.0197%" height="15" fill="rgb(233,195,47)" fg:x="4318" fg:w="1"/><text x="85.2333%" y="639.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (1 samples, 0.02%)</title><rect x="85.0030%" y="629" width="0.0197%" height="15" fill="rgb(246,218,30)" fg:x="4319" fg:w="1"/><text x="85.2530%" y="639.50"></text></g><g><title>deno`v8::scope::HandleScope::get_current_context (1 samples, 0.02%)</title><rect x="85.0226%" y="629" width="0.0197%" height="15" fill="rgb(219,145,47)" fg:x="4320" fg:w="1"/><text x="85.2726%" y="639.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (2 samples, 0.04%)</title><rect x="85.0423%" y="629" width="0.0394%" height="15" fill="rgb(243,12,26)" fg:x="4321" fg:w="2"/><text x="85.2923%" y="639.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (3 samples, 0.06%)</title><rect x="85.0817%" y="629" width="0.0590%" height="15" fill="rgb(214,87,16)" fg:x="4323" fg:w="3"/><text x="85.3317%" y="639.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (1 samples, 0.02%)</title><rect x="85.1210%" y="613" width="0.0197%" height="15" fill="rgb(208,99,42)" fg:x="4325" fg:w="1"/><text x="85.3710%" y="623.50"></text></g><g><title>deno`v8__Global__New (4 samples, 0.08%)</title><rect x="85.1407%" y="629" width="0.0787%" height="15" fill="rgb(253,99,2)" fg:x="4326" fg:w="4"/><text x="85.3907%" y="639.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.06%)</title><rect x="85.1604%" y="613" width="0.0590%" height="15" fill="rgb(220,168,23)" fg:x="4327" fg:w="3"/><text x="85.4104%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="85.2194%" y="613" width="0.0394%" height="15" fill="rgb(242,38,24)" fg:x="4330" fg:w="2"/><text x="85.4694%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.10%)</title><rect x="85.2588%" y="597" width="0.0984%" height="15" fill="rgb(225,182,9)" fg:x="4332" fg:w="5"/><text x="85.5088%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="85.3179%" y="581" width="0.0394%" height="15" fill="rgb(243,178,37)" fg:x="4335" fg:w="2"/><text x="85.5679%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.16%)</title><rect x="85.2194%" y="629" width="0.1574%" height="15" fill="rgb(232,139,19)" fg:x="4330" fg:w="8"/><text x="85.4694%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.12%)</title><rect x="85.2588%" y="613" width="0.1181%" height="15" fill="rgb(225,201,24)" fg:x="4332" fg:w="6"/><text x="85.5088%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="85.3572%" y="597" width="0.0197%" height="15" fill="rgb(221,47,46)" fg:x="4337" fg:w="1"/><text x="85.6072%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="85.3769%" y="629" width="0.0197%" height="15" fill="rgb(249,23,13)" fg:x="4338" fg:w="1"/><text x="85.6269%" y="639.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1,163 samples, 22.89%)</title><rect x="62.5664%" y="645" width="22.8892%" height="15" fill="rgb(219,9,5)" fg:x="3179" fg:w="1163"/><text x="62.8164%" y="655.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::..</text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.06%)</title><rect x="85.3966%" y="629" width="0.0590%" height="15" fill="rgb(254,171,16)" fg:x="4339" fg:w="3"/><text x="85.6466%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="85.4359%" y="613" width="0.0197%" height="15" fill="rgb(230,171,20)" fg:x="4341" fg:w="1"/><text x="85.6859%" y="623.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="85.4556%" y="645" width="0.0197%" height="15" fill="rgb(210,71,41)" fg:x="4342" fg:w="1"/><text x="85.7056%" y="655.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="85.4753%" y="645" width="0.0197%" height="15" fill="rgb(206,173,20)" fg:x="4343" fg:w="1"/><text x="85.7253%" y="655.50"></text></g><g><title>deno`v8::External::Value (1 samples, 0.02%)</title><rect x="85.4950%" y="645" width="0.0197%" height="15" fill="rgb(233,88,34)" fg:x="4344" fg:w="1"/><text x="85.7450%" y="655.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (2 samples, 0.04%)</title><rect x="85.5147%" y="645" width="0.0394%" height="15" fill="rgb(223,209,46)" fg:x="4345" fg:w="2"/><text x="85.7647%" y="655.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::~ExternalCallbackScope (1 samples, 0.02%)</title><rect x="85.5540%" y="645" width="0.0197%" height="15" fill="rgb(250,43,18)" fg:x="4347" fg:w="1"/><text x="85.8040%" y="655.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (3 samples, 0.06%)</title><rect x="85.5737%" y="645" width="0.0590%" height="15" fill="rgb(208,13,10)" fg:x="4348" fg:w="3"/><text x="85.8237%" y="655.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (2 samples, 0.04%)</title><rect x="85.6327%" y="645" width="0.0394%" height="15" fill="rgb(212,200,36)" fg:x="4351" fg:w="2"/><text x="85.8827%" y="655.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (2 samples, 0.04%)</title><rect x="85.6721%" y="645" width="0.0394%" height="15" fill="rgb(225,90,30)" fg:x="4353" fg:w="2"/><text x="85.9221%" y="655.50"></text></g><g><title>deno`v8__Isolate__GetData (2 samples, 0.04%)</title><rect x="85.7115%" y="645" width="0.0394%" height="15" fill="rgb(236,182,39)" fg:x="4355" fg:w="2"/><text x="85.9615%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="85.7508%" y="645" width="0.0197%" height="15" fill="rgb(212,144,35)" fg:x="4357" fg:w="1"/><text x="86.0008%" y="655.50"></text></g><g><title>0x110054780 (1,196 samples, 23.54%)</title><rect x="62.2515%" y="709" width="23.5387%" height="15" fill="rgb(228,63,44)" fg:x="3163" fg:w="1196"/><text x="62.5015%" y="719.50">0x110054780</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1,196 samples, 23.54%)</title><rect x="62.2515%" y="693" width="23.5387%" height="15" fill="rgb(228,109,6)" fg:x="3163" fg:w="1196"/><text x="62.5015%" y="703.50">deno`Builtins_CEntry_Return1_DontSave..</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1,194 samples, 23.50%)</title><rect x="62.2909%" y="677" width="23.4993%" height="15" fill="rgb(238,117,24)" fg:x="3165" fg:w="1194"/><text x="62.5409%" y="687.50">deno`v8::internal::Builtin_HandleApiC..</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1,188 samples, 23.38%)</title><rect x="62.4090%" y="661" width="23.3812%" height="15" fill="rgb(242,26,26)" fg:x="3171" fg:w="1188"/><text x="62.6590%" y="671.50">deno`v8::internal::MaybeHandle&lt;v8::in..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="85.7705%" y="645" width="0.0197%" height="15" fill="rgb(221,92,48)" fg:x="4358" fg:w="1"/><text x="86.0205%" y="655.50"></text></g><g><title>0x1100547cc (1 samples, 0.02%)</title><rect x="85.7902%" y="709" width="0.0197%" height="15" fill="rgb(209,209,32)" fg:x="4359" fg:w="1"/><text x="86.0402%" y="719.50"></text></g><g><title>0x110054808 (1 samples, 0.02%)</title><rect x="85.8099%" y="709" width="0.0197%" height="15" fill="rgb(221,70,22)" fg:x="4360" fg:w="1"/><text x="86.0599%" y="719.50"></text></g><g><title>0x110054998 (1 samples, 0.02%)</title><rect x="85.8296%" y="709" width="0.0197%" height="15" fill="rgb(248,145,5)" fg:x="4361" fg:w="1"/><text x="86.0796%" y="719.50"></text></g><g><title>0x1100549d8 (2 samples, 0.04%)</title><rect x="85.8492%" y="709" width="0.0394%" height="15" fill="rgb(226,116,26)" fg:x="4362" fg:w="2"/><text x="86.0992%" y="719.50"></text></g><g><title>0x1100549fc (1 samples, 0.02%)</title><rect x="85.8886%" y="709" width="0.0197%" height="15" fill="rgb(244,5,17)" fg:x="4364" fg:w="1"/><text x="86.1386%" y="719.50"></text></g><g><title>0x110054a44 (8 samples, 0.16%)</title><rect x="85.9083%" y="709" width="0.1574%" height="15" fill="rgb(252,159,33)" fg:x="4365" fg:w="8"/><text x="86.1583%" y="719.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (8 samples, 0.16%)</title><rect x="85.9083%" y="693" width="0.1574%" height="15" fill="rgb(206,71,0)" fg:x="4365" fg:w="8"/><text x="86.1583%" y="703.50"></text></g><g><title>0x110054a50 (1 samples, 0.02%)</title><rect x="86.0657%" y="709" width="0.0197%" height="15" fill="rgb(233,118,54)" fg:x="4373" fg:w="1"/><text x="86.3157%" y="719.50"></text></g><g><title>0x110054aa4 (1 samples, 0.02%)</title><rect x="86.0854%" y="709" width="0.0197%" height="15" fill="rgb(234,83,48)" fg:x="4374" fg:w="1"/><text x="86.3354%" y="719.50"></text></g><g><title>0x110054aac (1 samples, 0.02%)</title><rect x="86.1051%" y="709" width="0.0197%" height="15" fill="rgb(228,3,54)" fg:x="4375" fg:w="1"/><text x="86.3551%" y="719.50"></text></g><g><title>0x110054ab8 (1 samples, 0.02%)</title><rect x="86.1248%" y="709" width="0.0197%" height="15" fill="rgb(226,155,13)" fg:x="4376" fg:w="1"/><text x="86.3748%" y="719.50"></text></g><g><title>0x110054b00 (1 samples, 0.02%)</title><rect x="86.1445%" y="709" width="0.0197%" height="15" fill="rgb(241,28,37)" fg:x="4377" fg:w="1"/><text x="86.3945%" y="719.50"></text></g><g><title>0x110054b58 (5 samples, 0.10%)</title><rect x="86.1641%" y="709" width="0.0984%" height="15" fill="rgb(233,93,10)" fg:x="4378" fg:w="5"/><text x="86.4141%" y="719.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (5 samples, 0.10%)</title><rect x="86.1641%" y="693" width="0.0984%" height="15" fill="rgb(225,113,19)" fg:x="4378" fg:w="5"/><text x="86.4141%" y="703.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (2 samples, 0.04%)</title><rect x="86.2232%" y="677" width="0.0394%" height="15" fill="rgb(241,2,18)" fg:x="4381" fg:w="2"/><text x="86.4732%" y="687.50"></text></g><g><title>0x110054b7c (1 samples, 0.02%)</title><rect x="86.2625%" y="709" width="0.0197%" height="15" fill="rgb(228,207,21)" fg:x="4383" fg:w="1"/><text x="86.5125%" y="719.50"></text></g><g><title>0x110054bcc (1 samples, 0.02%)</title><rect x="86.2822%" y="709" width="0.0197%" height="15" fill="rgb(213,211,35)" fg:x="4384" fg:w="1"/><text x="86.5322%" y="719.50"></text></g><g><title>0x110054bdc (9 samples, 0.18%)</title><rect x="86.3019%" y="709" width="0.1771%" height="15" fill="rgb(209,83,10)" fg:x="4385" fg:w="9"/><text x="86.5519%" y="719.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (9 samples, 0.18%)</title><rect x="86.3019%" y="693" width="0.1771%" height="15" fill="rgb(209,164,1)" fg:x="4385" fg:w="9"/><text x="86.5519%" y="703.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (1 samples, 0.02%)</title><rect x="86.4594%" y="677" width="0.0197%" height="15" fill="rgb(213,184,43)" fg:x="4393" fg:w="1"/><text x="86.7094%" y="687.50"></text></g><g><title>0x110054c48 (1 samples, 0.02%)</title><rect x="86.4790%" y="709" width="0.0197%" height="15" fill="rgb(231,61,34)" fg:x="4394" fg:w="1"/><text x="86.7290%" y="719.50"></text></g><g><title>0x110054e10 (1 samples, 0.02%)</title><rect x="86.4987%" y="709" width="0.0197%" height="15" fill="rgb(235,75,3)" fg:x="4395" fg:w="1"/><text x="86.7487%" y="719.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.02%)</title><rect x="86.4987%" y="693" width="0.0197%" height="15" fill="rgb(220,106,47)" fg:x="4395" fg:w="1"/><text x="86.7487%" y="703.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.02%)</title><rect x="86.4987%" y="677" width="0.0197%" height="15" fill="rgb(210,196,33)" fg:x="4395" fg:w="1"/><text x="86.7487%" y="687.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.02%)</title><rect x="86.4987%" y="661" width="0.0197%" height="15" fill="rgb(229,154,42)" fg:x="4395" fg:w="1"/><text x="86.7487%" y="671.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.02%)</title><rect x="86.4987%" y="645" width="0.0197%" height="15" fill="rgb(228,114,26)" fg:x="4395" fg:w="1"/><text x="86.7487%" y="655.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::AddFreshPage (1 samples, 0.02%)</title><rect x="86.4987%" y="629" width="0.0197%" height="15" fill="rgb(208,144,1)" fg:x="4395" fg:w="1"/><text x="86.7487%" y="639.50"></text></g><g><title>deno`v8::internal::SpaceWithLinearArea::ComputeLimit (1 samples, 0.02%)</title><rect x="86.4987%" y="613" width="0.0197%" height="15" fill="rgb(239,112,37)" fg:x="4395" fg:w="1"/><text x="86.7487%" y="623.50"></text></g><g><title>0x110055124 (1 samples, 0.02%)</title><rect x="86.5184%" y="709" width="0.0197%" height="15" fill="rgb(210,96,50)" fg:x="4396" fg:w="1"/><text x="86.7684%" y="719.50"></text></g><g><title>0x11005512c (1 samples, 0.02%)</title><rect x="86.5381%" y="709" width="0.0197%" height="15" fill="rgb(222,178,2)" fg:x="4397" fg:w="1"/><text x="86.7881%" y="719.50"></text></g><g><title>0x11005518c (1 samples, 0.02%)</title><rect x="86.5578%" y="709" width="0.0197%" height="15" fill="rgb(226,74,18)" fg:x="4398" fg:w="1"/><text x="86.8078%" y="719.50"></text></g><g><title>0x11005538c (7 samples, 0.14%)</title><rect x="86.5774%" y="709" width="0.1378%" height="15" fill="rgb(225,67,54)" fg:x="4399" fg:w="7"/><text x="86.8274%" y="719.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (7 samples, 0.14%)</title><rect x="86.5774%" y="693" width="0.1378%" height="15" fill="rgb(251,92,32)" fg:x="4399" fg:w="7"/><text x="86.8274%" y="703.50"></text></g><g><title>0x1100553f4 (1 samples, 0.02%)</title><rect x="86.7152%" y="709" width="0.0197%" height="15" fill="rgb(228,149,22)" fg:x="4406" fg:w="1"/><text x="86.9652%" y="719.50"></text></g><g><title>0x1100553fc (1 samples, 0.02%)</title><rect x="86.7349%" y="709" width="0.0197%" height="15" fill="rgb(243,54,13)" fg:x="4407" fg:w="1"/><text x="86.9849%" y="719.50"></text></g><g><title>0x11005542c (1 samples, 0.02%)</title><rect x="86.7546%" y="709" width="0.0197%" height="15" fill="rgb(243,180,28)" fg:x="4408" fg:w="1"/><text x="87.0046%" y="719.50"></text></g><g><title>0x1100554bc (1 samples, 0.02%)</title><rect x="86.7743%" y="709" width="0.0197%" height="15" fill="rgb(208,167,24)" fg:x="4409" fg:w="1"/><text x="87.0243%" y="719.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (1 samples, 0.02%)</title><rect x="86.7939%" y="709" width="0.0197%" height="15" fill="rgb(245,73,45)" fg:x="4410" fg:w="1"/><text x="87.0439%" y="719.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNotNullOrUndefined (2 samples, 0.04%)</title><rect x="86.8136%" y="709" width="0.0394%" height="15" fill="rgb(237,203,48)" fg:x="4411" fg:w="2"/><text x="87.0636%" y="719.50"></text></g><g><title>0x11004bc84 (1 samples, 0.02%)</title><rect x="86.8530%" y="661" width="0.0197%" height="15" fill="rgb(211,197,16)" fg:x="4413" fg:w="1"/><text x="87.1030%" y="671.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.02%)</title><rect x="86.8530%" y="645" width="0.0197%" height="15" fill="rgb(243,99,51)" fg:x="4413" fg:w="1"/><text x="87.1030%" y="655.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.02%)</title><rect x="86.8530%" y="629" width="0.0197%" height="15" fill="rgb(215,123,29)" fg:x="4413" fg:w="1"/><text x="87.1030%" y="639.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.02%)</title><rect x="86.8530%" y="613" width="0.0197%" height="15" fill="rgb(239,186,37)" fg:x="4413" fg:w="1"/><text x="87.1030%" y="623.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.02%)</title><rect x="86.8530%" y="597" width="0.0197%" height="15" fill="rgb(252,136,39)" fg:x="4413" fg:w="1"/><text x="87.1030%" y="607.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="86.8530%" y="581" width="0.0197%" height="15" fill="rgb(223,213,32)" fg:x="4413" fg:w="1"/><text x="87.1030%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="86.8530%" y="565" width="0.0197%" height="15" fill="rgb(233,115,5)" fg:x="4413" fg:w="1"/><text x="87.1030%" y="575.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.04%)</title><rect x="86.8530%" y="709" width="0.0394%" height="15" fill="rgb(207,226,44)" fg:x="4413" fg:w="2"/><text x="87.1030%" y="719.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.04%)</title><rect x="86.8530%" y="693" width="0.0394%" height="15" fill="rgb(208,126,0)" fg:x="4413" fg:w="2"/><text x="87.1030%" y="703.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.04%)</title><rect x="86.8530%" y="677" width="0.0394%" height="15" fill="rgb(244,66,21)" fg:x="4413" fg:w="2"/><text x="87.1030%" y="687.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="86.8727%" y="661" width="0.0197%" height="15" fill="rgb(222,97,12)" fg:x="4414" fg:w="1"/><text x="87.1227%" y="671.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="86.8727%" y="645" width="0.0197%" height="15" fill="rgb(219,213,19)" fg:x="4414" fg:w="1"/><text x="87.1227%" y="655.50"></text></g><g><title>deno`Builtins_LdaTheHoleHandler (1 samples, 0.02%)</title><rect x="86.8727%" y="629" width="0.0197%" height="15" fill="rgb(252,169,30)" fg:x="4414" fg:w="1"/><text x="87.1227%" y="639.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (3,031 samples, 59.65%)</title><rect x="27.4159%" y="725" width="59.6536%" height="15" fill="rgb(206,32,51)" fg:x="1393" fg:w="3031"/><text x="27.6659%" y="735.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_LoadIC (9 samples, 0.18%)</title><rect x="86.8923%" y="709" width="0.1771%" height="15" fill="rgb(250,172,42)" fg:x="4415" fg:w="9"/><text x="87.1423%" y="719.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="87.0695%" y="725" width="0.0197%" height="15" fill="rgb(209,34,43)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="735.50"></text></g><g><title>deno`Builtins_ReturnHandler (1 samples, 0.02%)</title><rect x="87.0695%" y="709" width="0.0197%" height="15" fill="rgb(223,11,35)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="719.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.02%)</title><rect x="87.0695%" y="693" width="0.0197%" height="15" fill="rgb(251,219,26)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="703.50"></text></g><g><title>deno`v8::internal::Runtime_BytecodeBudgetInterrupt (1 samples, 0.02%)</title><rect x="87.0695%" y="677" width="0.0197%" height="15" fill="rgb(231,119,3)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="687.50"></text></g><g><title>deno`v8::internal::TieringManager::OnInterruptTick(v8::internal::Handle (1 samples, 0.02%)</title><rect x="87.0695%" y="661" width="0.0197%" height="15" fill="rgb(216,97,11)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="671.50"></text></g><g><title>deno`v8::internal::baseline::BaselineBatchCompiler::CompileBatch(v8::internal::Handle (1 samples, 0.02%)</title><rect x="87.0695%" y="645" width="0.0197%" height="15" fill="rgb(223,59,9)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="655.50"></text></g><g><title>deno`v8::internal::baseline::BaselineBatchCompiler::MaybeCompileFunction (1 samples, 0.02%)</title><rect x="87.0695%" y="629" width="0.0197%" height="15" fill="rgb(233,93,31)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="639.50"></text></g><g><title>deno`v8::internal::Compiler::CompileSharedWithBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.02%)</title><rect x="87.0695%" y="613" width="0.0197%" height="15" fill="rgb(239,81,33)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="623.50"></text></g><g><title>deno`v8::internal::GenerateBaselineCode(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.02%)</title><rect x="87.0695%" y="597" width="0.0197%" height="15" fill="rgb(213,120,34)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="607.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::GenerateCode (1 samples, 0.02%)</title><rect x="87.0695%" y="581" width="0.0197%" height="15" fill="rgb(243,49,53)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="591.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::VisitReThrow (1 samples, 0.02%)</title><rect x="87.0695%" y="565" width="0.0197%" height="15" fill="rgb(247,216,33)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="575.50"></text></g><g><title>deno`void v8::internal::baseline::BaselineCompiler::CallRuntime&lt;v8::internal::Register&gt; (1 samples, 0.02%)</title><rect x="87.0695%" y="549" width="0.0197%" height="15" fill="rgb(226,26,14)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="559.50"></text></g><g><title>deno`v8::internal::MacroAssembler::CallRuntime (1 samples, 0.02%)</title><rect x="87.0695%" y="533" width="0.0197%" height="15" fill="rgb(215,49,53)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="543.50"></text></g><g><title>deno`v8::internal::TurboAssembler::Mov (1 samples, 0.02%)</title><rect x="87.0695%" y="517" width="0.0197%" height="15" fill="rgb(245,162,40)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="527.50"></text></g><g><title>deno`v8::internal::TurboAssembler::TryOneInstrMoveImmediate (1 samples, 0.02%)</title><rect x="87.0695%" y="501" width="0.0197%" height="15" fill="rgb(229,68,17)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="511.50"></text></g><g><title>deno`v8::internal::ConstantPool::ShouldEmitNow (1 samples, 0.02%)</title><rect x="87.0695%" y="485" width="0.0197%" height="15" fill="rgb(213,182,10)" fg:x="4424" fg:w="1"/><text x="87.3195%" y="495.50"></text></g><g><title>deno`Builtins_LoadIC (15 samples, 0.30%)</title><rect x="87.0892%" y="725" width="0.2952%" height="15" fill="rgb(245,125,30)" fg:x="4425" fg:w="15"/><text x="87.3392%" y="735.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (3 samples, 0.06%)</title><rect x="87.3844%" y="725" width="0.0590%" height="15" fill="rgb(232,202,2)" fg:x="4440" fg:w="3"/><text x="87.6344%" y="735.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (1 samples, 0.02%)</title><rect x="87.4434%" y="709" width="0.0197%" height="15" fill="rgb(237,140,51)" fg:x="4443" fg:w="1"/><text x="87.6934%" y="719.50"></text></g><g><title>deno`Builtins_ResolvePromise (5 samples, 0.10%)</title><rect x="87.4434%" y="725" width="0.0984%" height="15" fill="rgb(236,157,25)" fg:x="4443" fg:w="5"/><text x="87.6934%" y="735.50"></text></g><g><title>deno`Builtins_FulfillPromise (4 samples, 0.08%)</title><rect x="87.4631%" y="709" width="0.0787%" height="15" fill="rgb(219,209,0)" fg:x="4444" fg:w="4"/><text x="87.7131%" y="719.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (3,095 samples, 60.91%)</title><rect x="26.8648%" y="741" width="60.9132%" height="15" fill="rgb(240,116,54)" fg:x="1365" fg:w="3095"/><text x="27.1148%" y="751.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (12 samples, 0.24%)</title><rect x="87.5418%" y="725" width="0.2362%" height="15" fill="rgb(216,10,36)" fg:x="4448" fg:w="12"/><text x="87.7918%" y="735.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (3,161 samples, 62.21%)</title><rect x="25.6052%" y="789" width="62.2122%" height="15" fill="rgb(222,72,44)" fg:x="1301" fg:w="3161"/><text x="25.8552%" y="799.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (3,157 samples, 62.13%)</title><rect x="25.6839%" y="773" width="62.1334%" height="15" fill="rgb(232,159,9)" fg:x="1305" fg:w="3157"/><text x="25.9339%" y="783.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (3,154 samples, 62.07%)</title><rect x="25.7430%" y="757" width="62.0744%" height="15" fill="rgb(210,39,32)" fg:x="1308" fg:w="3154"/><text x="25.9930%" y="767.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.04%)</title><rect x="87.7780%" y="741" width="0.0394%" height="15" fill="rgb(216,194,45)" fg:x="4460" fg:w="2"/><text x="88.0280%" y="751.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (1 samples, 0.02%)</title><rect x="87.8174%" y="789" width="0.0197%" height="15" fill="rgb(218,18,35)" fg:x="4462" fg:w="1"/><text x="88.0674%" y="799.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (3,291 samples, 64.77%)</title><rect x="23.1057%" y="885" width="64.7707%" height="15" fill="rgb(207,83,51)" fg:x="1174" fg:w="3291"/><text x="23.3557%" y="895.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (3,182 samples, 62.63%)</title><rect x="25.2509%" y="869" width="62.6255%" height="15" fill="rgb(225,63,43)" fg:x="1283" fg:w="3182"/><text x="25.5009%" y="879.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (3,179 samples, 62.57%)</title><rect x="25.3100%" y="853" width="62.5664%" height="15" fill="rgb(207,57,36)" fg:x="1286" fg:w="3179"/><text x="25.5600%" y="863.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (3,176 samples, 62.51%)</title><rect x="25.3690%" y="837" width="62.5074%" height="15" fill="rgb(216,99,33)" fg:x="1289" fg:w="3176"/><text x="25.6190%" y="847.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (3,171 samples, 62.41%)</title><rect x="25.4674%" y="821" width="62.4090%" height="15" fill="rgb(225,42,16)" fg:x="1294" fg:w="3171"/><text x="25.7174%" y="831.50">deno`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (3,169 samples, 62.37%)</title><rect x="25.5068%" y="805" width="62.3696%" height="15" fill="rgb(220,201,45)" fg:x="1296" fg:w="3169"/><text x="25.7568%" y="815.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`v8::internal::Isolate::UnregisterTryCatchHandler (2 samples, 0.04%)</title><rect x="87.8370%" y="789" width="0.0394%" height="15" fill="rgb(225,33,4)" fg:x="4463" fg:w="2"/><text x="88.0870%" y="799.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (1 samples, 0.02%)</title><rect x="87.8764%" y="885" width="0.0197%" height="15" fill="rgb(224,33,50)" fg:x="4465" fg:w="1"/><text x="88.1264%" y="895.50"></text></g><g><title>deno`v8::Integer::New (2 samples, 0.04%)</title><rect x="87.8961%" y="885" width="0.0394%" height="15" fill="rgb(246,198,51)" fg:x="4466" fg:w="2"/><text x="88.1461%" y="895.50"></text></g><g><title>deno`v8::Integer::NewFromUnsigned (1 samples, 0.02%)</title><rect x="87.9354%" y="885" width="0.0197%" height="15" fill="rgb(205,22,4)" fg:x="4468" fg:w="1"/><text x="88.1854%" y="895.50"></text></g><g><title>deno`v8::context::_&lt;impl v8::data::Context&gt;::get_annex_mut (4 samples, 0.08%)</title><rect x="87.9551%" y="885" width="0.0787%" height="15" fill="rgb(206,3,8)" fg:x="4469" fg:w="4"/><text x="88.2051%" y="895.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call (2 samples, 0.04%)</title><rect x="88.0339%" y="885" width="0.0394%" height="15" fill="rgb(251,23,15)" fg:x="4473" fg:w="2"/><text x="88.2839%" y="895.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (2 samples, 0.04%)</title><rect x="88.0732%" y="885" width="0.0394%" height="15" fill="rgb(252,88,28)" fg:x="4475" fg:w="2"/><text x="88.3232%" y="895.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (2 samples, 0.04%)</title><rect x="88.1126%" y="885" width="0.0394%" height="15" fill="rgb(212,127,14)" fg:x="4477" fg:w="2"/><text x="88.3626%" y="895.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (1 samples, 0.02%)</title><rect x="88.1519%" y="885" width="0.0197%" height="15" fill="rgb(247,145,37)" fg:x="4479" fg:w="1"/><text x="88.4019%" y="895.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (2 samples, 0.04%)</title><rect x="88.1716%" y="885" width="0.0394%" height="15" fill="rgb(209,117,53)" fg:x="4480" fg:w="2"/><text x="88.4216%" y="895.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (1 samples, 0.02%)</title><rect x="88.2110%" y="885" width="0.0197%" height="15" fill="rgb(212,90,42)" fg:x="4482" fg:w="1"/><text x="88.4610%" y="895.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (1 samples, 0.02%)</title><rect x="88.2307%" y="885" width="0.0197%" height="15" fill="rgb(218,164,37)" fg:x="4483" fg:w="1"/><text x="88.4807%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.06%)</title><rect x="88.2700%" y="869" width="0.0590%" height="15" fill="rgb(246,65,34)" fg:x="4485" fg:w="3"/><text x="88.5200%" y="879.50"></text></g><g><title>deno`v8::isolate::Isolate::is_execution_terminating (5 samples, 0.10%)</title><rect x="88.2503%" y="885" width="0.0984%" height="15" fill="rgb(231,100,33)" fg:x="4484" fg:w="5"/><text x="88.5003%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="88.3291%" y="869" width="0.0197%" height="15" fill="rgb(228,126,14)" fg:x="4488" fg:w="1"/><text x="88.5791%" y="879.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new (10 samples, 0.20%)</title><rect x="88.3488%" y="885" width="0.1968%" height="15" fill="rgb(215,173,21)" fg:x="4489" fg:w="10"/><text x="88.5988%" y="895.50"></text></g><g><title>deno`v8::Integer::New (6 samples, 0.12%)</title><rect x="88.4275%" y="869" width="0.1181%" height="15" fill="rgb(210,6,40)" fg:x="4493" fg:w="6"/><text x="88.6775%" y="879.50"></text></g><g><title>deno`v8::Integer::New (4 samples, 0.08%)</title><rect x="88.5652%" y="869" width="0.0787%" height="15" fill="rgb(212,48,18)" fg:x="4500" fg:w="4"/><text x="88.8152%" y="879.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new_from_unsigned (10 samples, 0.20%)</title><rect x="88.5456%" y="885" width="0.1968%" height="15" fill="rgb(230,214,11)" fg:x="4499" fg:w="10"/><text x="88.7956%" y="895.50"></text></g><g><title>deno`v8::Integer::NewFromUnsigned (5 samples, 0.10%)</title><rect x="88.6440%" y="869" width="0.0984%" height="15" fill="rgb(254,105,39)" fg:x="4504" fg:w="5"/><text x="88.8940%" y="879.50"></text></g><g><title>deno`v8::Integer::New (4 samples, 0.08%)</title><rect x="88.6636%" y="853" width="0.0787%" height="15" fill="rgb(245,158,5)" fg:x="4505" fg:w="4"/><text x="88.9136%" y="863.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (1 samples, 0.02%)</title><rect x="88.7424%" y="885" width="0.0197%" height="15" fill="rgb(249,208,11)" fg:x="4509" fg:w="1"/><text x="88.9924%" y="895.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="88.7621%" y="869" width="0.0197%" height="15" fill="rgb(210,39,28)" fg:x="4510" fg:w="1"/><text x="89.0121%" y="879.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (1 samples, 0.02%)</title><rect x="88.7817%" y="837" width="0.0197%" height="15" fill="rgb(211,56,53)" fg:x="4511" fg:w="1"/><text x="89.0317%" y="847.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (1 samples, 0.02%)</title><rect x="88.7817%" y="821" width="0.0197%" height="15" fill="rgb(226,201,30)" fg:x="4511" fg:w="1"/><text x="89.0317%" y="831.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (1 samples, 0.02%)</title><rect x="88.7817%" y="805" width="0.0197%" height="15" fill="rgb(239,101,34)" fg:x="4511" fg:w="1"/><text x="89.0317%" y="815.50"></text></g><g><title>deno`DYLD-STUB$$strlen (1 samples, 0.02%)</title><rect x="88.7817%" y="789" width="0.0197%" height="15" fill="rgb(226,209,5)" fg:x="4511" fg:w="1"/><text x="89.0317%" y="799.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionEpilogue (1 samples, 0.02%)</title><rect x="88.8014%" y="837" width="0.0197%" height="15" fill="rgb(250,105,47)" fg:x="4512" fg:w="1"/><text x="89.0514%" y="847.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (3 samples, 0.06%)</title><rect x="88.8408%" y="773" width="0.0590%" height="15" fill="rgb(230,72,3)" fg:x="4514" fg:w="3"/><text x="89.0908%" y="783.50"></text></g><g><title>deno`v8::internal::ClearStaleLeftTrimmedHandlesVisitor::VisitRootPointers (1 samples, 0.02%)</title><rect x="88.8998%" y="773" width="0.0197%" height="15" fill="rgb(232,218,39)" fg:x="4517" fg:w="1"/><text x="89.1498%" y="783.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (6 samples, 0.12%)</title><rect x="88.8408%" y="789" width="0.1181%" height="15" fill="rgb(248,166,6)" fg:x="4514" fg:w="6"/><text x="89.0908%" y="799.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (2 samples, 0.04%)</title><rect x="88.9195%" y="773" width="0.0394%" height="15" fill="rgb(247,89,20)" fg:x="4518" fg:w="2"/><text x="89.1695%" y="783.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (1 samples, 0.02%)</title><rect x="88.9589%" y="789" width="0.0197%" height="15" fill="rgb(248,130,54)" fg:x="4520" fg:w="1"/><text x="89.2089%" y="799.50"></text></g><g><title>deno`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, v8::internal::Object::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt; &gt; &gt;::__rehash (1 samples, 0.02%)</title><rect x="88.9589%" y="773" width="0.0197%" height="15" fill="rgb(234,196,4)" fg:x="4520" fg:w="1"/><text x="89.2089%" y="783.50"></text></g><g><title>deno`v8::internal::Scavenger::~Scavenger (1 samples, 0.02%)</title><rect x="88.9785%" y="789" width="0.0197%" height="15" fill="rgb(250,143,31)" fg:x="4521" fg:w="1"/><text x="89.2285%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="88.9785%" y="773" width="0.0197%" height="15" fill="rgb(211,110,34)" fg:x="4521" fg:w="1"/><text x="89.2285%" y="783.50"></text></g><g><title>deno`v8::internal::SlotSet::Bucket::IsEmpty (1 samples, 0.02%)</title><rect x="88.9982%" y="789" width="0.0197%" height="15" fill="rgb(215,124,48)" fg:x="4522" fg:w="1"/><text x="89.2482%" y="799.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.02%)</title><rect x="89.0376%" y="725" width="0.0197%" height="15" fill="rgb(216,46,13)" fg:x="4524" fg:w="1"/><text x="89.2876%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::GetFillToAlign (1 samples, 0.02%)</title><rect x="89.0376%" y="709" width="0.0197%" height="15" fill="rgb(205,184,25)" fg:x="4524" fg:w="1"/><text x="89.2876%" y="719.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (4 samples, 0.08%)</title><rect x="89.0179%" y="741" width="0.0787%" height="15" fill="rgb(228,1,10)" fg:x="4523" fg:w="4"/><text x="89.2679%" y="751.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (2 samples, 0.04%)</title><rect x="89.0573%" y="725" width="0.0394%" height="15" fill="rgb(213,116,27)" fg:x="4525" fg:w="2"/><text x="89.3073%" y="735.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.04%)</title><rect x="89.0573%" y="709" width="0.0394%" height="15" fill="rgb(241,95,50)" fg:x="4525" fg:w="2"/><text x="89.3073%" y="719.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.02%)</title><rect x="89.0770%" y="693" width="0.0197%" height="15" fill="rgb(238,48,32)" fg:x="4526" fg:w="1"/><text x="89.3270%" y="703.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (7 samples, 0.14%)</title><rect x="89.0179%" y="773" width="0.1378%" height="15" fill="rgb(235,113,49)" fg:x="4523" fg:w="7"/><text x="89.2679%" y="783.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (7 samples, 0.14%)</title><rect x="89.0179%" y="757" width="0.1378%" height="15" fill="rgb(205,127,43)" fg:x="4523" fg:w="7"/><text x="89.2679%" y="767.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (3 samples, 0.06%)</title><rect x="89.0966%" y="741" width="0.0590%" height="15" fill="rgb(250,162,2)" fg:x="4527" fg:w="3"/><text x="89.3466%" y="751.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.02%)</title><rect x="89.1360%" y="725" width="0.0197%" height="15" fill="rgb(220,13,41)" fg:x="4529" fg:w="1"/><text x="89.3860%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="89.1360%" y="709" width="0.0197%" height="15" fill="rgb(249,221,25)" fg:x="4529" fg:w="1"/><text x="89.3860%" y="719.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (10 samples, 0.20%)</title><rect x="89.0179%" y="789" width="0.1968%" height="15" fill="rgb(215,208,19)" fg:x="4523" fg:w="10"/><text x="89.2679%" y="799.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (3 samples, 0.06%)</title><rect x="89.1557%" y="773" width="0.0590%" height="15" fill="rgb(236,175,2)" fg:x="4530" fg:w="3"/><text x="89.4057%" y="783.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (3 samples, 0.06%)</title><rect x="89.1557%" y="757" width="0.0590%" height="15" fill="rgb(241,52,2)" fg:x="4530" fg:w="3"/><text x="89.4057%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.06%)</title><rect x="89.1557%" y="741" width="0.0590%" height="15" fill="rgb(248,140,14)" fg:x="4530" fg:w="3"/><text x="89.4057%" y="751.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (21 samples, 0.41%)</title><rect x="88.8211%" y="805" width="0.4133%" height="15" fill="rgb(253,22,42)" fg:x="4513" fg:w="21"/><text x="89.0711%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.02%)</title><rect x="89.2147%" y="789" width="0.0197%" height="15" fill="rgb(234,61,47)" fg:x="4533" fg:w="1"/><text x="89.4647%" y="799.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (22 samples, 0.43%)</title><rect x="88.8211%" y="821" width="0.4330%" height="15" fill="rgb(208,226,15)" fg:x="4513" fg:w="22"/><text x="89.0711%" y="831.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="89.2344%" y="805" width="0.0197%" height="15" fill="rgb(217,221,4)" fg:x="4534" fg:w="1"/><text x="89.4844%" y="815.50"></text></g><g><title>deno`v8::internal::ScavengeJob::Task::RunInternal (25 samples, 0.49%)</title><rect x="88.7817%" y="869" width="0.4920%" height="15" fill="rgb(212,174,34)" fg:x="4511" fg:w="25"/><text x="89.0317%" y="879.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (25 samples, 0.49%)</title><rect x="88.7817%" y="853" width="0.4920%" height="15" fill="rgb(253,83,4)" fg:x="4511" fg:w="25"/><text x="89.0317%" y="863.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (23 samples, 0.45%)</title><rect x="88.8211%" y="837" width="0.4527%" height="15" fill="rgb(250,195,49)" fg:x="4513" fg:w="23"/><text x="89.0711%" y="847.50"></text></g><g><title>deno`v8::internal::IsolateSafepoint::EnterLocalSafepointScope (1 samples, 0.02%)</title><rect x="89.2541%" y="821" width="0.0197%" height="15" fill="rgb(241,192,25)" fg:x="4535" fg:w="1"/><text x="89.5041%" y="831.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (27 samples, 0.53%)</title><rect x="88.7621%" y="885" width="0.5314%" height="15" fill="rgb(208,124,10)" fg:x="4510" fg:w="27"/><text x="89.0121%" y="895.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (1 samples, 0.02%)</title><rect x="89.2738%" y="869" width="0.0197%" height="15" fill="rgb(222,33,0)" fg:x="4536" fg:w="1"/><text x="89.5238%" y="879.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="89.2738%" y="853" width="0.0197%" height="15" fill="rgb(234,209,28)" fg:x="4536" fg:w="1"/><text x="89.5238%" y="863.50"></text></g><g><title>deno`v8::primitives::undefined (1 samples, 0.02%)</title><rect x="89.2934%" y="885" width="0.0197%" height="15" fill="rgb(224,11,23)" fg:x="4537" fg:w="1"/><text x="89.5434%" y="895.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (4 samples, 0.08%)</title><rect x="89.3722%" y="869" width="0.0787%" height="15" fill="rgb(232,99,1)" fg:x="4541" fg:w="4"/><text x="89.6222%" y="879.50"></text></g><g><title>deno`v8::internal::GetCurrentStackPosition (1 samples, 0.02%)</title><rect x="89.4312%" y="853" width="0.0197%" height="15" fill="rgb(237,95,45)" fg:x="4544" fg:w="1"/><text x="89.6812%" y="863.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (8 samples, 0.16%)</title><rect x="89.3131%" y="885" width="0.1574%" height="15" fill="rgb(208,109,11)" fg:x="4538" fg:w="8"/><text x="89.5631%" y="895.50"></text></g><g><title>deno`v8::internal::GetCurrentStackPosition (1 samples, 0.02%)</title><rect x="89.4509%" y="869" width="0.0197%" height="15" fill="rgb(216,190,48)" fg:x="4545" fg:w="1"/><text x="89.7009%" y="879.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (5 samples, 0.10%)</title><rect x="89.4706%" y="885" width="0.0984%" height="15" fill="rgb(251,171,36)" fg:x="4546" fg:w="5"/><text x="89.7206%" y="895.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (2 samples, 0.04%)</title><rect x="89.5296%" y="869" width="0.0394%" height="15" fill="rgb(230,62,22)" fg:x="4549" fg:w="2"/><text x="89.7796%" y="879.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.02%)</title><rect x="89.5690%" y="885" width="0.0197%" height="15" fill="rgb(225,114,35)" fg:x="4551" fg:w="1"/><text x="89.8190%" y="895.50"></text></g><g><title>deno`v8__Integer__New (1 samples, 0.02%)</title><rect x="89.5887%" y="885" width="0.0197%" height="15" fill="rgb(215,118,42)" fg:x="4552" fg:w="1"/><text x="89.8387%" y="895.50"></text></g><g><title>deno`v8__Local__New (1 samples, 0.02%)</title><rect x="89.6083%" y="885" width="0.0197%" height="15" fill="rgb(243,119,21)" fg:x="4553" fg:w="1"/><text x="89.8583%" y="895.50"></text></g><g><title>deno`v8__Undefined (1 samples, 0.02%)</title><rect x="89.6280%" y="885" width="0.0197%" height="15" fill="rgb(252,177,53)" fg:x="4554" fg:w="1"/><text x="89.8780%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="89.6477%" y="869" width="0.0197%" height="15" fill="rgb(237,209,29)" fg:x="4555" fg:w="1"/><text x="89.8977%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="89.6477%" y="885" width="0.0394%" height="15" fill="rgb(212,65,23)" fg:x="4555" fg:w="2"/><text x="89.8977%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="89.6674%" y="869" width="0.0197%" height="15" fill="rgb(230,222,46)" fg:x="4556" fg:w="1"/><text x="89.9174%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.08%)</title><rect x="89.6871%" y="885" width="0.0787%" height="15" fill="rgb(215,135,32)" fg:x="4557" fg:w="4"/><text x="89.9371%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.06%)</title><rect x="89.9036%" y="869" width="0.0590%" height="15" fill="rgb(246,101,22)" fg:x="4568" fg:w="3"/><text x="90.1536%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="89.9626%" y="869" width="0.0197%" height="15" fill="rgb(206,107,13)" fg:x="4571" fg:w="1"/><text x="90.2126%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.24%)</title><rect x="89.7658%" y="885" width="0.2362%" height="15" fill="rgb(250,100,44)" fg:x="4561" fg:w="12"/><text x="90.0158%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="89.9823%" y="869" width="0.0197%" height="15" fill="rgb(231,147,38)" fg:x="4572" fg:w="1"/><text x="90.2323%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.06%)</title><rect x="90.0020%" y="885" width="0.0590%" height="15" fill="rgb(229,8,40)" fg:x="4573" fg:w="3"/><text x="90.2520%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.12%)</title><rect x="90.0610%" y="885" width="0.1181%" height="15" fill="rgb(221,135,30)" fg:x="4576" fg:w="6"/><text x="90.3110%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.10%)</title><rect x="90.0807%" y="869" width="0.0984%" height="15" fill="rgb(249,193,18)" fg:x="4577" fg:w="5"/><text x="90.3307%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="90.1594%" y="853" width="0.0197%" height="15" fill="rgb(209,133,39)" fg:x="4581" fg:w="1"/><text x="90.4094%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="90.1791%" y="885" width="0.0197%" height="15" fill="rgb(232,100,14)" fg:x="4582" fg:w="1"/><text x="90.4291%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.04%)</title><rect x="90.1988%" y="885" width="0.0394%" height="15" fill="rgb(224,185,1)" fg:x="4583" fg:w="2"/><text x="90.4488%" y="895.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (4,529 samples, 89.14%)</title><rect x="1.1809%" y="901" width="89.1360%" height="15" fill="rgb(223,139,8)" fg:x="60" fg:w="4529"/><text x="1.4309%" y="911.50">deno`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.08%)</title><rect x="90.2381%" y="885" width="0.0787%" height="15" fill="rgb(232,213,38)" fg:x="4585" fg:w="4"/><text x="90.4881%" y="895.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (1 samples, 0.02%)</title><rect x="90.3169%" y="901" width="0.0197%" height="15" fill="rgb(207,94,22)" fg:x="4589" fg:w="1"/><text x="90.5669%" y="911.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (1 samples, 0.02%)</title><rect x="90.3365%" y="901" width="0.0197%" height="15" fill="rgb(219,183,54)" fg:x="4590" fg:w="1"/><text x="90.5865%" y="911.50"></text></g><g><title>deno`v8::TryCatch::Exception (2 samples, 0.04%)</title><rect x="90.3562%" y="901" width="0.0394%" height="15" fill="rgb(216,185,54)" fg:x="4591" fg:w="2"/><text x="90.6062%" y="911.50"></text></g><g><title>deno`v8::Value::IsTrue (2 samples, 0.04%)</title><rect x="90.3956%" y="901" width="0.0394%" height="15" fill="rgb(254,217,39)" fg:x="4593" fg:w="2"/><text x="90.6456%" y="911.50"></text></g><g><title>deno`v8::api_internal::DisposeGlobal (1 samples, 0.02%)</title><rect x="90.4350%" y="901" width="0.0197%" height="15" fill="rgb(240,178,23)" fg:x="4595" fg:w="1"/><text x="90.6850%" y="911.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call (2 samples, 0.04%)</title><rect x="90.4546%" y="901" width="0.0394%" height="15" fill="rgb(218,11,47)" fg:x="4596" fg:w="2"/><text x="90.7046%" y="911.50"></text></g><g><title>deno`v8::handle::HandleHost::match_host (1 samples, 0.02%)</title><rect x="90.4940%" y="901" width="0.0197%" height="15" fill="rgb(218,51,51)" fg:x="4598" fg:w="1"/><text x="90.7440%" y="911.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (1 samples, 0.02%)</title><rect x="90.5137%" y="901" width="0.0197%" height="15" fill="rgb(238,126,27)" fg:x="4599" fg:w="1"/><text x="90.7637%" y="911.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (1 samples, 0.02%)</title><rect x="90.5334%" y="901" width="0.0197%" height="15" fill="rgb(249,202,22)" fg:x="4600" fg:w="1"/><text x="90.7834%" y="911.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new_from_unsigned (1 samples, 0.02%)</title><rect x="90.5530%" y="901" width="0.0197%" height="15" fill="rgb(254,195,49)" fg:x="4601" fg:w="1"/><text x="90.8030%" y="911.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (1 samples, 0.02%)</title><rect x="90.5727%" y="901" width="0.0197%" height="15" fill="rgb(208,123,14)" fg:x="4602" fg:w="1"/><text x="90.8227%" y="911.50"></text></g><g><title>deno`v8__Data__EQ (1 samples, 0.02%)</title><rect x="90.5924%" y="901" width="0.0197%" height="15" fill="rgb(224,200,8)" fg:x="4603" fg:w="1"/><text x="90.8424%" y="911.50"></text></g><g><title>deno`v8__Function__Call (1 samples, 0.02%)</title><rect x="90.6121%" y="901" width="0.0197%" height="15" fill="rgb(217,61,36)" fg:x="4604" fg:w="1"/><text x="90.8621%" y="911.50"></text></g><g><title>deno`v8__Isolate__GetData (1 samples, 0.02%)</title><rect x="90.6318%" y="901" width="0.0197%" height="15" fill="rgb(206,35,45)" fg:x="4605" fg:w="1"/><text x="90.8818%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="90.6514%" y="901" width="0.0197%" height="15" fill="rgb(217,65,33)" fg:x="4606" fg:w="1"/><text x="90.9014%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="90.6711%" y="901" width="0.0394%" height="15" fill="rgb(222,158,48)" fg:x="4607" fg:w="2"/><text x="90.9211%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="90.7105%" y="901" width="0.0197%" height="15" fill="rgb(254,2,54)" fg:x="4609" fg:w="1"/><text x="90.9605%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="90.7302%" y="901" width="0.0197%" height="15" fill="rgb(250,143,38)" fg:x="4610" fg:w="1"/><text x="90.9802%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="90.7499%" y="901" width="0.0197%" height="15" fill="rgb(248,25,0)" fg:x="4611" fg:w="1"/><text x="90.9999%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="90.7695%" y="901" width="0.0197%" height="15" fill="rgb(206,152,27)" fg:x="4612" fg:w="1"/><text x="91.0195%" y="911.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,571 samples, 89.96%)</title><rect x="0.8463%" y="917" width="89.9626%" height="15" fill="rgb(240,77,30)" fg:x="43" fg:w="4571"/><text x="1.0963%" y="927.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="90.7892%" y="901" width="0.0197%" height="15" fill="rgb(231,5,3)" fg:x="4613" fg:w="1"/><text x="91.0392%" y="911.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,572 samples, 89.98%)</title><rect x="0.8463%" y="933" width="89.9823%" height="15" fill="rgb(207,226,32)" fg:x="43" fg:w="4572"/><text x="1.0963%" y="943.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (1 samples, 0.02%)</title><rect x="90.8089%" y="917" width="0.0197%" height="15" fill="rgb(222,207,47)" fg:x="4614" fg:w="1"/><text x="91.0589%" y="927.50"></text></g><g><title>deno`&lt;futures_channel::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="90.8286%" y="933" width="0.0590%" height="15" fill="rgb(229,115,45)" fg:x="4615" fg:w="3"/><text x="91.0786%" y="943.50"></text></g><g><title>deno`OUTLINED_FUNCTION_13714 (2 samples, 0.04%)</title><rect x="90.8876%" y="933" width="0.0394%" height="15" fill="rgb(224,191,6)" fg:x="4618" fg:w="2"/><text x="91.1376%" y="943.50"></text></g><g><title>deno`OUTLINED_FUNCTION_31217 (1 samples, 0.02%)</title><rect x="90.9270%" y="933" width="0.0197%" height="15" fill="rgb(230,227,24)" fg:x="4620" fg:w="1"/><text x="91.1770%" y="943.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (1 samples, 0.02%)</title><rect x="90.9467%" y="933" width="0.0197%" height="15" fill="rgb(228,80,19)" fg:x="4621" fg:w="1"/><text x="91.1967%" y="943.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,586 samples, 90.26%)</title><rect x="0.7282%" y="949" width="90.2578%" height="15" fill="rgb(247,229,0)" fg:x="37" fg:w="4586"/><text x="0.9782%" y="959.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`tokio::util::wake::drop_arc_raw (1 samples, 0.02%)</title><rect x="90.9663%" y="933" width="0.0197%" height="15" fill="rgb(237,194,15)" fg:x="4622" fg:w="1"/><text x="91.2163%" y="943.50"></text></g><g><title>deno`&lt;futures_channel::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="90.9860%" y="949" width="0.0197%" height="15" fill="rgb(219,203,20)" fg:x="4623" fg:w="1"/><text x="91.2360%" y="959.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2578 (2 samples, 0.04%)</title><rect x="91.0057%" y="949" width="0.0394%" height="15" fill="rgb(234,128,8)" fg:x="4624" fg:w="2"/><text x="91.2557%" y="959.50"></text></g><g><title>deno`OUTLINED_FUNCTION_5235 (2 samples, 0.04%)</title><rect x="91.0451%" y="949" width="0.0394%" height="15" fill="rgb(248,202,8)" fg:x="4626" fg:w="2"/><text x="91.2951%" y="959.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,594 samples, 90.42%)</title><rect x="0.6888%" y="981" width="90.4153%" height="15" fill="rgb(206,104,37)" fg:x="35" fg:w="4594"/><text x="0.9388%" y="991.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,593 samples, 90.40%)</title><rect x="0.7085%" y="965" width="90.3956%" height="15" fill="rgb(223,8,27)" fg:x="36" fg:w="4593"/><text x="0.9585%" y="975.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::modules::RecursiveModuleLoad::register_and_recurse (1 samples, 0.02%)</title><rect x="91.0844%" y="949" width="0.0197%" height="15" fill="rgb(216,217,28)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="959.50"></text></g><g><title>deno`deno_core::modules::ModuleMap::new_es_module (1 samples, 0.02%)</title><rect x="91.0844%" y="933" width="0.0197%" height="15" fill="rgb(249,199,1)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="943.50"></text></g><g><title>deno`v8::ScriptCompiler::CompileModule (1 samples, 0.02%)</title><rect x="91.0844%" y="917" width="0.0197%" height="15" fill="rgb(240,85,17)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="927.50"></text></g><g><title>deno`v8::ScriptCompiler::CompileUnboundInternal (1 samples, 0.02%)</title><rect x="91.0844%" y="901" width="0.0197%" height="15" fill="rgb(206,108,45)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="911.50"></text></g><g><title>deno`v8::internal::Compiler::GetSharedFunctionInfoForScript(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.02%)</title><rect x="91.0844%" y="885" width="0.0197%" height="15" fill="rgb(245,210,41)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="895.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::GetSharedFunctionInfoForScriptImpl(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.02%)</title><rect x="91.0844%" y="869" width="0.0197%" height="15" fill="rgb(206,13,37)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="879.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CompileScriptOnMainThread(v8::internal::UnoptimizedCompileFlags, v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::ScriptDetails const&amp;, v8::internal::NativesFlag, v8::Extension*, v8::internal::Isolate*, v8::internal::MaybeHandle (1 samples, 0.02%)</title><rect x="91.0844%" y="853" width="0.0197%" height="15" fill="rgb(250,61,18)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="863.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CompileToplevel(v8::internal::ParseInfo*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::MaybeHandle (1 samples, 0.02%)</title><rect x="91.0844%" y="837" width="0.0197%" height="15" fill="rgb(235,172,48)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="847.50"></text></g><g><title>deno`v8::internal::parsing::ParseProgram(v8::internal::ParseInfo*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::MaybeHandle (1 samples, 0.02%)</title><rect x="91.0844%" y="821" width="0.0197%" height="15" fill="rgb(249,201,17)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="831.50"></text></g><g><title>deno`v8::internal::Parser::ParseProgram(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::MaybeHandle (1 samples, 0.02%)</title><rect x="91.0844%" y="805" width="0.0197%" height="15" fill="rgb(219,208,6)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="815.50"></text></g><g><title>deno`v8::internal::Parser::DoParseProgram (1 samples, 0.02%)</title><rect x="91.0844%" y="789" width="0.0197%" height="15" fill="rgb(248,31,23)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="799.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseStatement(v8::internal::ZoneList&lt;v8::internal::AstRawString const*&gt;*, v8::internal::ZoneList (1 samples, 0.02%)</title><rect x="91.0844%" y="773" width="0.0197%" height="15" fill="rgb(245,15,42)" fg:x="4628" fg:w="1"/><text x="91.3344%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="837" width="0.0197%" height="15" fill="rgb(222,217,39)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="847.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="91.1041%" y="821" width="0.0197%" height="15" fill="rgb(210,219,27)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="831.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="805" width="0.0197%" height="15" fill="rgb(252,166,36)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="815.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="789" width="0.0197%" height="15" fill="rgb(245,132,34)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="799.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="773" width="0.0197%" height="15" fill="rgb(236,54,3)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="783.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="91.1041%" y="757" width="0.0197%" height="15" fill="rgb(241,173,43)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="767.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="741" width="0.0197%" height="15" fill="rgb(215,190,9)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="751.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="725" width="0.0197%" height="15" fill="rgb(242,101,16)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="735.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="709" width="0.0197%" height="15" fill="rgb(223,190,21)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="719.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="91.1041%" y="693" width="0.0197%" height="15" fill="rgb(215,228,25)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="703.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="677" width="0.0197%" height="15" fill="rgb(225,36,22)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="687.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="661" width="0.0197%" height="15" fill="rgb(251,106,46)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="671.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="645" width="0.0197%" height="15" fill="rgb(208,90,1)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="655.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="91.1041%" y="629" width="0.0197%" height="15" fill="rgb(243,10,4)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="639.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="613" width="0.0197%" height="15" fill="rgb(212,137,27)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="623.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="597" width="0.0197%" height="15" fill="rgb(231,220,49)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="607.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="581" width="0.0197%" height="15" fill="rgb(237,96,20)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="591.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="565" width="0.0197%" height="15" fill="rgb(239,229,30)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="575.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="549" width="0.0197%" height="15" fill="rgb(219,65,33)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="559.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="533" width="0.0197%" height="15" fill="rgb(243,134,7)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="543.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="517" width="0.0197%" height="15" fill="rgb(216,177,54)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="527.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="501" width="0.0197%" height="15" fill="rgb(211,160,20)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="511.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="485" width="0.0197%" height="15" fill="rgb(239,85,39)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="495.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="469" width="0.0197%" height="15" fill="rgb(232,125,22)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="479.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="453" width="0.0197%" height="15" fill="rgb(244,57,34)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="463.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="437" width="0.0197%" height="15" fill="rgb(214,203,32)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="447.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="421" width="0.0197%" height="15" fill="rgb(207,58,43)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="431.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="405" width="0.0197%" height="15" fill="rgb(215,193,15)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="415.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="389" width="0.0197%" height="15" fill="rgb(232,15,44)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="399.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="373" width="0.0197%" height="15" fill="rgb(212,3,48)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="383.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="357" width="0.0197%" height="15" fill="rgb(218,128,7)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="367.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="341" width="0.0197%" height="15" fill="rgb(226,216,39)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="351.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="325" width="0.0197%" height="15" fill="rgb(243,47,51)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="335.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="309" width="0.0197%" height="15" fill="rgb(241,183,40)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="319.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="293" width="0.0197%" height="15" fill="rgb(231,217,32)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="303.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="277" width="0.0197%" height="15" fill="rgb(229,61,38)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="287.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="261" width="0.0197%" height="15" fill="rgb(225,210,5)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="271.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="245" width="0.0197%" height="15" fill="rgb(231,79,45)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="255.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="229" width="0.0197%" height="15" fill="rgb(224,100,7)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="239.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="213" width="0.0197%" height="15" fill="rgb(241,198,18)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="223.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="197" width="0.0197%" height="15" fill="rgb(252,97,53)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="207.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="181" width="0.0197%" height="15" fill="rgb(220,88,7)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="191.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="165" width="0.0197%" height="15" fill="rgb(213,176,14)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="175.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="149" width="0.0197%" height="15" fill="rgb(246,73,7)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="159.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="133" width="0.0197%" height="15" fill="rgb(245,64,36)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="143.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="117" width="0.0197%" height="15" fill="rgb(245,80,10)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="127.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="101" width="0.0197%" height="15" fill="rgb(232,107,50)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="111.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="85" width="0.0197%" height="15" fill="rgb(253,3,0)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="95.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="69" width="0.0197%" height="15" fill="rgb(212,99,53)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="79.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1041%" y="53" width="0.0197%" height="15" fill="rgb(249,111,54)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="63.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1041%" y="37" width="0.0197%" height="15" fill="rgb(249,55,30)" fg:x="4629" fg:w="1"/><text x="91.3541%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.04%)</title><rect x="91.1041%" y="949" width="0.0394%" height="15" fill="rgb(237,47,42)" fg:x="4629" fg:w="2"/><text x="91.3541%" y="959.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.04%)</title><rect x="91.1041%" y="933" width="0.0394%" height="15" fill="rgb(211,20,18)" fg:x="4629" fg:w="2"/><text x="91.3541%" y="943.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.04%)</title><rect x="91.1041%" y="917" width="0.0394%" height="15" fill="rgb(231,203,46)" fg:x="4629" fg:w="2"/><text x="91.3541%" y="927.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.04%)</title><rect x="91.1041%" y="901" width="0.0394%" height="15" fill="rgb(237,142,3)" fg:x="4629" fg:w="2"/><text x="91.3541%" y="911.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.04%)</title><rect x="91.1041%" y="885" width="0.0394%" height="15" fill="rgb(241,107,1)" fg:x="4629" fg:w="2"/><text x="91.3541%" y="895.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.04%)</title><rect x="91.1041%" y="869" width="0.0394%" height="15" fill="rgb(229,83,13)" fg:x="4629" fg:w="2"/><text x="91.3541%" y="879.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.04%)</title><rect x="91.1041%" y="853" width="0.0394%" height="15" fill="rgb(241,91,40)" fg:x="4629" fg:w="2"/><text x="91.3541%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.02%)</title><rect x="91.1238%" y="837" width="0.0197%" height="15" fill="rgb(225,3,45)" fg:x="4630" fg:w="1"/><text x="91.3738%" y="847.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.02%)</title><rect x="91.1238%" y="821" width="0.0197%" height="15" fill="rgb(244,223,14)" fg:x="4630" fg:w="1"/><text x="91.3738%" y="831.50"></text></g><g><title>deno`v8::internal::HashTable&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Rehash (1 samples, 0.02%)</title><rect x="91.1238%" y="805" width="0.0197%" height="15" fill="rgb(224,124,37)" fg:x="4630" fg:w="1"/><text x="91.3738%" y="815.50"></text></g><g><title>deno`v8::internal::Checksum(v8::base::Vector (1 samples, 0.02%)</title><rect x="91.1435%" y="901" width="0.0197%" height="15" fill="rgb(251,171,30)" fg:x="4631" fg:w="1"/><text x="91.3935%" y="911.50"></text></g><g><title>deno`Cr_z_adler32_simd_ (1 samples, 0.02%)</title><rect x="91.1435%" y="885" width="0.0197%" height="15" fill="rgb(236,46,54)" fg:x="4631" fg:w="1"/><text x="91.3935%" y="895.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.08%)</title><rect x="91.1041%" y="965" width="0.0787%" height="15" fill="rgb(245,213,5)" fg:x="4629" fg:w="4"/><text x="91.3541%" y="975.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.04%)</title><rect x="91.1435%" y="949" width="0.0394%" height="15" fill="rgb(230,144,27)" fg:x="4631" fg:w="2"/><text x="91.3935%" y="959.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.04%)</title><rect x="91.1435%" y="933" width="0.0394%" height="15" fill="rgb(220,86,6)" fg:x="4631" fg:w="2"/><text x="91.3935%" y="943.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.04%)</title><rect x="91.1435%" y="917" width="0.0394%" height="15" fill="rgb(240,20,13)" fg:x="4631" fg:w="2"/><text x="91.3935%" y="927.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (1 samples, 0.02%)</title><rect x="91.1632%" y="901" width="0.0197%" height="15" fill="rgb(217,89,34)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="911.50"></text></g><g><title>deno`v8::internal::Isolate::Init (1 samples, 0.02%)</title><rect x="91.1632%" y="885" width="0.0197%" height="15" fill="rgb(229,13,5)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="895.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.02%)</title><rect x="91.1632%" y="869" width="0.0197%" height="15" fill="rgb(244,67,35)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="879.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.02%)</title><rect x="91.1632%" y="853" width="0.0197%" height="15" fill="rgb(221,40,2)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.02%)</title><rect x="91.1632%" y="837" width="0.0197%" height="15" fill="rgb(237,157,21)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="847.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="821" width="0.0197%" height="15" fill="rgb(222,94,11)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="831.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="805" width="0.0197%" height="15" fill="rgb(249,113,6)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="815.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="789" width="0.0197%" height="15" fill="rgb(238,137,36)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="799.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="773" width="0.0197%" height="15" fill="rgb(210,102,26)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="783.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="757" width="0.0197%" height="15" fill="rgb(218,30,30)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="767.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="741" width="0.0197%" height="15" fill="rgb(214,67,26)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="751.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="725" width="0.0197%" height="15" fill="rgb(251,9,53)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="735.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="709" width="0.0197%" height="15" fill="rgb(228,204,25)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="719.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="693" width="0.0197%" height="15" fill="rgb(207,153,8)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="703.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="677" width="0.0197%" height="15" fill="rgb(242,9,16)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="687.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="661" width="0.0197%" height="15" fill="rgb(217,211,10)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="671.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="645" width="0.0197%" height="15" fill="rgb(219,228,52)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="655.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="629" width="0.0197%" height="15" fill="rgb(231,92,29)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="639.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="613" width="0.0197%" height="15" fill="rgb(232,8,23)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="623.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="597" width="0.0197%" height="15" fill="rgb(216,211,34)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="607.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="581" width="0.0197%" height="15" fill="rgb(236,151,0)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="591.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="565" width="0.0197%" height="15" fill="rgb(209,168,3)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="575.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="549" width="0.0197%" height="15" fill="rgb(208,129,28)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="559.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="533" width="0.0197%" height="15" fill="rgb(229,78,22)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="543.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="517" width="0.0197%" height="15" fill="rgb(228,187,13)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="527.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="501" width="0.0197%" height="15" fill="rgb(240,119,24)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="511.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="485" width="0.0197%" height="15" fill="rgb(209,194,42)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="495.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="469" width="0.0197%" height="15" fill="rgb(247,200,46)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="479.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="91.1632%" y="453" width="0.0197%" height="15" fill="rgb(218,76,16)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="463.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="91.1632%" y="437" width="0.0197%" height="15" fill="rgb(225,21,48)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="447.50"></text></g><g><title>deno`v8::internal::Heap::AllocateRawOrFail (1 samples, 0.02%)</title><rect x="91.1632%" y="421" width="0.0197%" height="15" fill="rgb(239,223,50)" fg:x="4632" fg:w="1"/><text x="91.4132%" y="431.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.02%)</title><rect x="91.1828%" y="965" width="0.0197%" height="15" fill="rgb(244,45,21)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="975.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.02%)</title><rect x="91.1828%" y="949" width="0.0197%" height="15" fill="rgb(232,33,43)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="959.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.02%)</title><rect x="91.1828%" y="933" width="0.0197%" height="15" fill="rgb(209,8,3)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="943.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.02%)</title><rect x="91.1828%" y="917" width="0.0197%" height="15" fill="rgb(214,25,53)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="927.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.02%)</title><rect x="91.1828%" y="901" width="0.0197%" height="15" fill="rgb(254,186,54)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="911.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.02%)</title><rect x="91.1828%" y="885" width="0.0197%" height="15" fill="rgb(208,174,49)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="895.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.02%)</title><rect x="91.1828%" y="869" width="0.0197%" height="15" fill="rgb(233,191,51)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="879.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.02%)</title><rect x="91.1828%" y="853" width="0.0197%" height="15" fill="rgb(222,134,10)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="91.1828%" y="837" width="0.0197%" height="15" fill="rgb(230,226,20)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="847.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="91.1828%" y="821" width="0.0197%" height="15" fill="rgb(251,111,25)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="831.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="91.1828%" y="805" width="0.0197%" height="15" fill="rgb(224,40,46)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="815.50"></text></g><g><title>deno`Builtins_SetKeyedPropertyHandler (1 samples, 0.02%)</title><rect x="91.1828%" y="789" width="0.0197%" height="15" fill="rgb(236,108,47)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="799.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.02%)</title><rect x="91.1828%" y="773" width="0.0197%" height="15" fill="rgb(234,93,0)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="783.50"></text></g><g><title>deno`v8::internal::FeedbackVector::GetKind (1 samples, 0.02%)</title><rect x="91.1828%" y="757" width="0.0197%" height="15" fill="rgb(224,213,32)" fg:x="4633" fg:w="1"/><text x="91.4328%" y="767.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,603 samples, 90.59%)</title><rect x="0.6298%" y="997" width="90.5924%" height="15" fill="rgb(251,11,48)" fg:x="32" fg:w="4603"/><text x="0.8798%" y="1007.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (6 samples, 0.12%)</title><rect x="91.1041%" y="981" width="0.1181%" height="15" fill="rgb(236,173,5)" fg:x="4629" fg:w="6"/><text x="91.3541%" y="991.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.02%)</title><rect x="91.2025%" y="965" width="0.0197%" height="15" fill="rgb(230,95,12)" fg:x="4634" fg:w="1"/><text x="91.4525%" y="975.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.02%)</title><rect x="91.2025%" y="949" width="0.0197%" height="15" fill="rgb(232,209,1)" fg:x="4634" fg:w="1"/><text x="91.4525%" y="959.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.02%)</title><rect x="91.2025%" y="933" width="0.0197%" height="15" fill="rgb(232,6,1)" fg:x="4634" fg:w="1"/><text x="91.4525%" y="943.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.02%)</title><rect x="91.2025%" y="917" width="0.0197%" height="15" fill="rgb(210,224,50)" fg:x="4634" fg:w="1"/><text x="91.4525%" y="927.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.02%)</title><rect x="91.2025%" y="901" width="0.0197%" height="15" fill="rgb(228,127,35)" fg:x="4634" fg:w="1"/><text x="91.4525%" y="911.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,607 samples, 90.67%)</title><rect x="0.5708%" y="1029" width="90.6711%" height="15" fill="rgb(245,102,45)" fg:x="29" fg:w="4607"/><text x="0.8208%" y="1039.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (4,606 samples, 90.65%)</title><rect x="0.5904%" y="1013" width="90.6514%" height="15" fill="rgb(214,1,49)" fg:x="30" fg:w="4606"/><text x="0.8404%" y="1023.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`OUTLINED_FUNCTION_638 (1 samples, 0.02%)</title><rect x="91.2222%" y="997" width="0.0197%" height="15" fill="rgb(226,163,40)" fg:x="4635" fg:w="1"/><text x="91.4722%" y="1007.50"></text></g><g><title>deno`OUTLINED_FUNCTION_16124 (1 samples, 0.02%)</title><rect x="91.2419%" y="1029" width="0.0197%" height="15" fill="rgb(239,212,28)" fg:x="4636" fg:w="1"/><text x="91.4919%" y="1039.50"></text></g><g><title>deno`OUTLINED_FUNCTION_21478 (2 samples, 0.04%)</title><rect x="91.2616%" y="1029" width="0.0394%" height="15" fill="rgb(220,20,13)" fg:x="4637" fg:w="2"/><text x="91.5116%" y="1039.50"></text></g><g><title>deno`deno::main::_{{closure}} (4,614 samples, 90.81%)</title><rect x="0.5117%" y="1045" width="90.8089%" height="15" fill="rgb(210,164,35)" fg:x="26" fg:w="4614"/><text x="0.7617%" y="1055.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`deno::standalone::extract_standalone::_{{closure}} (1 samples, 0.02%)</title><rect x="91.3009%" y="1029" width="0.0197%" height="15" fill="rgb(248,109,41)" fg:x="4639" fg:w="1"/><text x="91.5509%" y="1039.50"></text></g><g><title>deno`&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (1 samples, 0.02%)</title><rect x="91.3009%" y="1013" width="0.0197%" height="15" fill="rgb(238,23,50)" fg:x="4639" fg:w="1"/><text x="91.5509%" y="1023.50"></text></g><g><title>deno`&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (1 samples, 0.02%)</title><rect x="91.3009%" y="997" width="0.0197%" height="15" fill="rgb(211,48,49)" fg:x="4639" fg:w="1"/><text x="91.5509%" y="1007.50"></text></g><g><title>deno`tokio::runtime::blocking::pool::Spawner::spawn (1 samples, 0.02%)</title><rect x="91.3009%" y="981" width="0.0197%" height="15" fill="rgb(223,36,21)" fg:x="4639" fg:w="1"/><text x="91.5509%" y="991.50"></text></g><g><title>deno`parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="91.3009%" y="965" width="0.0197%" height="15" fill="rgb(207,123,46)" fg:x="4639" fg:w="1"/><text x="91.5509%" y="975.50"></text></g><g><title>deno`OUTLINED_FUNCTION_23254 (1 samples, 0.02%)</title><rect x="91.3009%" y="949" width="0.0197%" height="15" fill="rgb(240,218,32)" fg:x="4639" fg:w="1"/><text x="91.5509%" y="959.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1 samples, 0.02%)</title><rect x="91.3206%" y="1045" width="0.0197%" height="15" fill="rgb(252,5,43)" fg:x="4640" fg:w="1"/><text x="91.5706%" y="1055.50"></text></g><g><title>deno`tokio::task::local::LocalSet::tick (2 samples, 0.04%)</title><rect x="91.3403%" y="1045" width="0.0394%" height="15" fill="rgb(252,84,19)" fg:x="4641" fg:w="2"/><text x="91.5903%" y="1055.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,627 samples, 91.06%)</title><rect x="0.3346%" y="1061" width="91.0648%" height="15" fill="rgb(243,152,39)" fg:x="17" fg:w="4627"/><text x="0.5846%" y="1071.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="91.3796%" y="1045" width="0.0197%" height="15" fill="rgb(234,160,15)" fg:x="4643" fg:w="1"/><text x="91.6296%" y="1055.50"></text></g><g><title>deno`&lt;tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set::Reset as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="91.3993%" y="1061" width="0.0394%" height="15" fill="rgb(237,34,20)" fg:x="4644" fg:w="2"/><text x="91.6493%" y="1071.50"></text></g><g><title>deno`&lt;tokio::runtime::enter::DisallowBlockingGuard as core::ops::drop::Drop&gt;::drop (3 samples, 0.06%)</title><rect x="91.4387%" y="1061" width="0.0590%" height="15" fill="rgb(229,97,13)" fg:x="4646" fg:w="3"/><text x="91.6887%" y="1071.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="91.4977%" y="1061" width="0.0197%" height="15" fill="rgb(234,71,50)" fg:x="4649" fg:w="1"/><text x="91.7477%" y="1071.50"></text></g><g><title>deno`OUTLINED_FUNCTION_19440 (1 samples, 0.02%)</title><rect x="91.5174%" y="1061" width="0.0197%" height="15" fill="rgb(253,155,4)" fg:x="4650" fg:w="1"/><text x="91.7674%" y="1071.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36716 (1 samples, 0.02%)</title><rect x="91.5371%" y="1061" width="0.0197%" height="15" fill="rgb(222,185,37)" fg:x="4651" fg:w="1"/><text x="91.7871%" y="1071.50"></text></g><g><title>deno`OUTLINED_FUNCTION_67 (1 samples, 0.02%)</title><rect x="91.5568%" y="1061" width="0.0197%" height="15" fill="rgb(251,177,13)" fg:x="4652" fg:w="1"/><text x="91.8068%" y="1071.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9990 (1 samples, 0.02%)</title><rect x="91.5765%" y="1061" width="0.0197%" height="15" fill="rgb(250,179,40)" fg:x="4653" fg:w="1"/><text x="91.8265%" y="1071.50"></text></g><g><title>deno`OUTLINED_FUNCTION_138 (1 samples, 0.02%)</title><rect x="91.7339%" y="1029" width="0.0197%" height="15" fill="rgb(242,44,2)" fg:x="4661" fg:w="1"/><text x="91.9839%" y="1039.50"></text></g><g><title>deno`futures_task::noop_waker::noop (1 samples, 0.02%)</title><rect x="91.9898%" y="1013" width="0.0197%" height="15" fill="rgb(216,177,13)" fg:x="4674" fg:w="1"/><text x="92.2398%" y="1023.50"></text></g><g><title>deno`futures_task::waker::wake_arc_raw (1 samples, 0.02%)</title><rect x="92.0094%" y="1013" width="0.0197%" height="15" fill="rgb(216,106,43)" fg:x="4675" fg:w="1"/><text x="92.2594%" y="1023.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (32 samples, 0.63%)</title><rect x="92.2063%" y="981" width="0.6298%" height="15" fill="rgb(216,183,2)" fg:x="4685" fg:w="32"/><text x="92.4563%" y="991.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (28 samples, 0.55%)</title><rect x="92.2850%" y="965" width="0.5511%" height="15" fill="rgb(249,75,3)" fg:x="4689" fg:w="28"/><text x="92.5350%" y="975.50"></text></g><g><title>libsystem_kernel.dylib`kevent (28 samples, 0.55%)</title><rect x="92.2850%" y="949" width="0.5511%" height="15" fill="rgb(219,67,39)" fg:x="4689" fg:w="28"/><text x="92.5350%" y="959.50"></text></g><g><title>deno`OUTLINED_FUNCTION_22927 (1 samples, 0.02%)</title><rect x="92.8361%" y="981" width="0.0197%" height="15" fill="rgb(253,228,2)" fg:x="4717" fg:w="1"/><text x="93.0861%" y="991.50"></text></g><g><title>deno`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (45 samples, 0.89%)</title><rect x="92.0291%" y="1013" width="0.8857%" height="15" fill="rgb(235,138,27)" fg:x="4676" fg:w="45"/><text x="92.2791%" y="1023.50"></text></g><g><title>deno`futures_task::waker::wake_arc_raw (36 samples, 0.71%)</title><rect x="92.2063%" y="997" width="0.7085%" height="15" fill="rgb(236,97,51)" fg:x="4685" fg:w="36"/><text x="92.4563%" y="1007.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (3 samples, 0.06%)</title><rect x="92.8557%" y="981" width="0.0590%" height="15" fill="rgb(240,80,30)" fg:x="4718" fg:w="3"/><text x="93.1057%" y="991.50"></text></g><g><title>deno`tokio::io::driver::Driver::turn (333 samples, 6.55%)</title><rect x="91.7536%" y="1029" width="6.5538%" height="15" fill="rgb(230,178,19)" fg:x="4662" fg:w="333"/><text x="92.0036%" y="1039.50">deno`toki..</text></g><g><title>libsystem_kernel.dylib`kevent (274 samples, 5.39%)</title><rect x="92.9148%" y="1013" width="5.3926%" height="15" fill="rgb(210,190,27)" fg:x="4721" fg:w="274"/><text x="93.1648%" y="1023.50">libsyst..</text></g><g><title>deno`tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.02%)</title><rect x="98.3074%" y="1029" width="0.0197%" height="15" fill="rgb(222,107,31)" fg:x="4995" fg:w="1"/><text x="98.5574%" y="1039.50"></text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_ready (4 samples, 0.08%)</title><rect x="98.3271%" y="1013" width="0.0787%" height="15" fill="rgb(216,127,34)" fg:x="4996" fg:w="4"/><text x="98.5771%" y="1023.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (6 samples, 0.12%)</title><rect x="98.3271%" y="1029" width="0.1181%" height="15" fill="rgb(234,116,52)" fg:x="4996" fg:w="6"/><text x="98.5771%" y="1039.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.04%)</title><rect x="98.4058%" y="1013" width="0.0394%" height="15" fill="rgb(222,124,15)" fg:x="5000" fg:w="2"/><text x="98.6558%" y="1023.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (1 samples, 0.02%)</title><rect x="98.4846%" y="1013" width="0.0197%" height="15" fill="rgb(231,179,28)" fg:x="5004" fg:w="1"/><text x="98.7346%" y="1023.50"></text></g><g><title> 32]&gt; (1 samples, 0.02%)</title><rect x="98.4846%" y="997" width="0.0197%" height="15" fill="rgb(226,93,45)" fg:x="5004" fg:w="1"/><text x="98.7346%" y="1007.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (6 samples, 0.12%)</title><rect x="98.4452%" y="1029" width="0.1181%" height="15" fill="rgb(215,8,51)" fg:x="5002" fg:w="6"/><text x="98.6952%" y="1039.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (3 samples, 0.06%)</title><rect x="98.5042%" y="1013" width="0.0590%" height="15" fill="rgb(223,106,5)" fg:x="5005" fg:w="3"/><text x="98.7542%" y="1023.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (352 samples, 6.93%)</title><rect x="91.6749%" y="1045" width="6.9278%" height="15" fill="rgb(250,191,5)" fg:x="4658" fg:w="352"/><text x="91.9249%" y="1055.50">deno`toki..</text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (2 samples, 0.04%)</title><rect x="98.5633%" y="1029" width="0.0394%" height="15" fill="rgb(242,132,44)" fg:x="5008" fg:w="2"/><text x="98.8133%" y="1039.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (2 samples, 0.04%)</title><rect x="98.6026%" y="1045" width="0.0394%" height="15" fill="rgb(251,152,29)" fg:x="5010" fg:w="2"/><text x="98.8526%" y="1055.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="98.6420%" y="1045" width="0.0197%" height="15" fill="rgb(218,179,5)" fg:x="5012" fg:w="1"/><text x="98.8920%" y="1055.50"></text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::park (370 samples, 7.28%)</title><rect x="91.5961%" y="1061" width="7.2820%" height="15" fill="rgb(227,67,19)" fg:x="4654" fg:w="370"/><text x="91.8461%" y="1071.50">deno`tokio..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (11 samples, 0.22%)</title><rect x="98.6617%" y="1045" width="0.2165%" height="15" fill="rgb(233,119,31)" fg:x="5013" fg:w="11"/><text x="98.9117%" y="1055.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.04%)</title><rect x="98.8782%" y="1061" width="0.0394%" height="15" fill="rgb(241,120,22)" fg:x="5024" fg:w="2"/><text x="99.1282%" y="1071.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="98.9175%" y="1061" width="0.0197%" height="15" fill="rgb(224,102,30)" fg:x="5026" fg:w="1"/><text x="99.1675%" y="1071.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (5,034 samples, 99.07%)</title><rect x="0.1378%" y="1077" width="99.0750%" height="15" fill="rgb(210,164,37)" fg:x="7" fg:w="5034"/><text x="0.3878%" y="1087.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.28%)</title><rect x="98.9372%" y="1061" width="0.2755%" height="15" fill="rgb(226,191,16)" fg:x="5027" fg:w="14"/><text x="99.1872%" y="1071.50"></text></g><g><title>dyld`start (5,043 samples, 99.25%)</title><rect x="0.0000%" y="1141" width="99.2521%" height="15" fill="rgb(214,40,45)" fg:x="0" fg:w="5043"/><text x="0.2500%" y="1151.50">dyld`start</text></g><g><title>deno`main (5,043 samples, 99.25%)</title><rect x="0.0000%" y="1125" width="99.2521%" height="15" fill="rgb(244,29,26)" fg:x="0" fg:w="5043"/><text x="0.2500%" y="1135.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (5,043 samples, 99.25%)</title><rect x="0.0000%" y="1109" width="99.2521%" height="15" fill="rgb(216,16,5)" fg:x="0" fg:w="5043"/><text x="0.2500%" y="1119.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (5,043 samples, 99.25%)</title><rect x="0.0000%" y="1093" width="99.2521%" height="15" fill="rgb(249,76,35)" fg:x="0" fg:w="5043"/><text x="0.2500%" y="1103.50">deno`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.04%)</title><rect x="99.2128%" y="1077" width="0.0394%" height="15" fill="rgb(207,11,44)" fg:x="5041" fg:w="2"/><text x="99.4628%" y="1087.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.02%)</title><rect x="99.2521%" y="1109" width="0.0197%" height="15" fill="rgb(228,190,49)" fg:x="5043" fg:w="1"/><text x="99.5021%" y="1119.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.02%)</title><rect x="99.2521%" y="1093" width="0.0197%" height="15" fill="rgb(214,173,12)" fg:x="5043" fg:w="1"/><text x="99.5021%" y="1103.50"></text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.02%)</title><rect x="99.2521%" y="1077" width="0.0197%" height="15" fill="rgb(218,26,35)" fg:x="5043" fg:w="1"/><text x="99.5021%" y="1087.50"></text></g><g><title>deno`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.02%)</title><rect x="99.2521%" y="1061" width="0.0197%" height="15" fill="rgb(220,200,19)" fg:x="5043" fg:w="1"/><text x="99.5021%" y="1071.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.02%)</title><rect x="99.2521%" y="1045" width="0.0197%" height="15" fill="rgb(239,95,49)" fg:x="5043" fg:w="1"/><text x="99.5021%" y="1055.50"></text></g><g><title>deno`parking_lot_core::parking_lot::ThreadData::new (1 samples, 0.02%)</title><rect x="99.2521%" y="1029" width="0.0197%" height="15" fill="rgb(235,85,53)" fg:x="5043" fg:w="1"/><text x="99.5021%" y="1039.50"></text></g><g><title>deno`parking_lot_core::parking_lot::create_hashtable (1 samples, 0.02%)</title><rect x="99.2521%" y="1013" width="0.0197%" height="15" fill="rgb(233,133,31)" fg:x="5043" fg:w="1"/><text x="99.5021%" y="1023.50"></text></g><g><title>deno`parking_lot_core::parking_lot::HashTable::new (1 samples, 0.02%)</title><rect x="99.2521%" y="997" width="0.0197%" height="15" fill="rgb(218,25,20)" fg:x="5043" fg:w="1"/><text x="99.5021%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (1 samples, 0.02%)</title><rect x="99.2521%" y="981" width="0.0197%" height="15" fill="rgb(252,210,38)" fg:x="5043" fg:w="1"/><text x="99.5021%" y="991.50"></text></g><g><title>deno`v8::internal::Assembler::Align (1 samples, 0.02%)</title><rect x="99.2718%" y="981" width="0.0197%" height="15" fill="rgb(242,134,21)" fg:x="5044" fg:w="1"/><text x="99.5218%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleInstruction (1 samples, 0.02%)</title><rect x="99.2915%" y="981" width="0.0197%" height="15" fill="rgb(213,28,48)" fg:x="5045" fg:w="1"/><text x="99.5415%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GapResolver::Resolve (1 samples, 0.02%)</title><rect x="99.2915%" y="965" width="0.0197%" height="15" fill="rgb(250,196,2)" fg:x="5045" fg:w="1"/><text x="99.5415%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove (1 samples, 0.02%)</title><rect x="99.2915%" y="949" width="0.0197%" height="15" fill="rgb(227,5,17)" fg:x="5045" fg:w="1"/><text x="99.5415%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove(v8::internal::compiler::InstructionOperand*, v8::internal::compiler::InstructionOperand*)::$_0::operator() (1 samples, 0.02%)</title><rect x="99.2915%" y="933" width="0.0197%" height="15" fill="rgb(221,226,24)" fg:x="5045" fg:w="1"/><text x="99.5415%" y="943.50"></text></g><g><title>deno`v8::internal::TurboAssembler::Mov (1 samples, 0.02%)</title><rect x="99.2915%" y="917" width="0.0197%" height="15" fill="rgb(211,5,48)" fg:x="5045" fg:w="1"/><text x="99.5415%" y="927.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.02%)</title><rect x="99.2915%" y="901" width="0.0197%" height="15" fill="rgb(219,150,6)" fg:x="5045" fg:w="1"/><text x="99.5415%" y="911.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.02%)</title><rect x="99.2915%" y="885" width="0.0197%" height="15" fill="rgb(251,46,16)" fg:x="5045" fg:w="1"/><text x="99.5415%" y="895.50"></text></g><g><title>deno`v8::internal::Assembler::RecordRelocInfo (1 samples, 0.02%)</title><rect x="99.2915%" y="869" width="0.0197%" height="15" fill="rgb(220,204,40)" fg:x="5045" fg:w="1"/><text x="99.5415%" y="879.50"></text></g><g><title>deno`v8::base::hash_value (1 samples, 0.02%)</title><rect x="99.2915%" y="853" width="0.0197%" height="15" fill="rgb(211,85,2)" fg:x="5045" fg:w="1"/><text x="99.5415%" y="863.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AssembleCode (3 samples, 0.06%)</title><rect x="99.2718%" y="1013" width="0.0590%" height="15" fill="rgb(229,17,7)" fg:x="5044" fg:w="3"/><text x="99.5218%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleCode (3 samples, 0.06%)</title><rect x="99.2718%" y="997" width="0.0590%" height="15" fill="rgb(239,72,28)" fg:x="5044" fg:w="3"/><text x="99.5218%" y="1007.50"></text></g><g><title>deno`void std::__1::__sort&lt;v8::internal::compiler::CodeGenerator::AssembleCode()::$_0&amp;, std::__1::__deque_iterator&lt;v8::internal::compiler::DeoptimizationExit*, v8::internal::compiler::DeoptimizationExit**, v8::internal::compiler::DeoptimizationExit*&amp;, v8::internal::compiler::DeoptimizationExit***, long, 0l&gt; &gt;(std::__1::__deque_iterator&lt;v8::internal::compiler::DeoptimizationExit*, v8::internal::compiler::DeoptimizationExit**, v8::internal::compiler::DeoptimizationExit*&amp;, v8::internal::compiler::DeoptimizationExit***, long, 0l&gt;, std::__1::__deque_iterator&lt;v8::internal::compiler::DeoptimizationExit*, v8::internal::compiler::DeoptimizationExit**, v8::internal::compiler::DeoptimizationExit*&amp;, v8::internal::compiler::DeoptimizationExit***, long, 0l&gt;, v8::internal::compiler::CodeGenerator::AssembleCode (1 samples, 0.02%)</title><rect x="99.3112%" y="981" width="0.0197%" height="15" fill="rgb(230,47,54)" fg:x="5046" fg:w="1"/><text x="99.5612%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::BytecodeGraphBuilder(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::NativeContextRef const&amp;, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (1 samples, 0.02%)</title><rect x="99.3308%" y="949" width="0.0197%" height="15" fill="rgb(214,50,8)" fg:x="5047" fg:w="1"/><text x="99.5808%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeAnalysis::BytecodeAnalysis(v8::internal::Handle (1 samples, 0.02%)</title><rect x="99.3308%" y="933" width="0.0197%" height="15" fill="rgb(216,198,43)" fg:x="5047" fg:w="1"/><text x="99.5808%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeAnalysis::Analyze (1 samples, 0.02%)</title><rect x="99.3308%" y="917" width="0.0197%" height="15" fill="rgb(234,20,35)" fg:x="5047" fg:w="1"/><text x="99.5808%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeAnalysis::PushLoop (1 samples, 0.02%)</title><rect x="99.3308%" y="901" width="0.0197%" height="15" fill="rgb(254,45,19)" fg:x="5047" fg:w="1"/><text x="99.5808%" y="911.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (2 samples, 0.04%)</title><rect x="99.3308%" y="997" width="0.0394%" height="15" fill="rgb(219,14,44)" fg:x="5047" fg:w="2"/><text x="99.5808%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GraphBuilderPhase::Run (2 samples, 0.04%)</title><rect x="99.3308%" y="981" width="0.0394%" height="15" fill="rgb(217,220,26)" fg:x="5047" fg:w="2"/><text x="99.5808%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (2 samples, 0.04%)</title><rect x="99.3308%" y="965" width="0.0394%" height="15" fill="rgb(213,158,28)" fg:x="5047" fg:w="2"/><text x="99.5808%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::CreateGraph (1 samples, 0.02%)</title><rect x="99.3505%" y="949" width="0.0197%" height="15" fill="rgb(252,51,52)" fg:x="5048" fg:w="1"/><text x="99.6005%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitBytecodes (1 samples, 0.02%)</title><rect x="99.3505%" y="933" width="0.0197%" height="15" fill="rgb(246,89,16)" fg:x="5048" fg:w="1"/><text x="99.6005%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitSetPendingMessage (1 samples, 0.02%)</title><rect x="99.3505%" y="917" width="0.0197%" height="15" fill="rgb(216,158,49)" fg:x="5048" fg:w="1"/><text x="99.6005%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::MakeNode (1 samples, 0.02%)</title><rect x="99.3505%" y="901" width="0.0197%" height="15" fill="rgb(236,107,19)" fg:x="5048" fg:w="1"/><text x="99.6005%" y="911.50"></text></g><g><title>deno`v8::internal::compiler::Graph::NewNode (1 samples, 0.02%)</title><rect x="99.3505%" y="885" width="0.0197%" height="15" fill="rgb(228,185,30)" fg:x="5048" fg:w="1"/><text x="99.6005%" y="895.50"></text></g><g><title>deno`v8::internal::compiler::SourcePositionTable::Decorator::Decorate (1 samples, 0.02%)</title><rect x="99.3505%" y="869" width="0.0197%" height="15" fill="rgb(246,134,8)" fg:x="5048" fg:w="1"/><text x="99.6005%" y="879.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (3 samples, 0.06%)</title><rect x="99.3308%" y="1013" width="0.0590%" height="15" fill="rgb(214,143,50)" fg:x="5047" fg:w="3"/><text x="99.5808%" y="1023.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (1 samples, 0.02%)</title><rect x="99.3702%" y="997" width="0.0197%" height="15" fill="rgb(228,75,8)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (1 samples, 0.02%)</title><rect x="99.3702%" y="981" width="0.0197%" height="15" fill="rgb(207,175,4)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.02%)</title><rect x="99.3702%" y="965" width="0.0197%" height="15" fill="rgb(205,108,24)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.02%)</title><rect x="99.3702%" y="949" width="0.0197%" height="15" fill="rgb(244,120,49)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.02%)</title><rect x="99.3702%" y="933" width="0.0197%" height="15" fill="rgb(223,47,38)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::Reduce (1 samples, 0.02%)</title><rect x="99.3702%" y="917" width="0.0197%" height="15" fill="rgb(229,179,11)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::CollectFunctions (1 samples, 0.02%)</title><rect x="99.3702%" y="901" width="0.0197%" height="15" fill="rgb(231,122,1)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="911.50"></text></g><g><title>deno`v8::internal::compiler::(anonymous namespace)::CanConsiderForInlining (1 samples, 0.02%)</title><rect x="99.3702%" y="885" width="0.0197%" height="15" fill="rgb(245,119,9)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="895.50"></text></g><g><title>deno`v8::internal::compiler::(anonymous namespace)::CanConsiderForInlining (1 samples, 0.02%)</title><rect x="99.3702%" y="869" width="0.0197%" height="15" fill="rgb(241,163,25)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="879.50"></text></g><g><title>deno`v8::internal::compiler::FeedbackCellRef::feedback_vector (1 samples, 0.02%)</title><rect x="99.3702%" y="853" width="0.0197%" height="15" fill="rgb(217,214,3)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="863.50"></text></g><g><title>deno`v8::base::Optional&lt;v8::internal::compiler::ref_traits&lt;v8::internal::HeapObject&gt;::ref_type&gt; v8::internal::compiler::TryMakeRef&lt;v8::internal::HeapObject, void&gt;(v8::internal::compiler::JSHeapBroker*, v8::internal::HeapObject, v8::base::Flags (1 samples, 0.02%)</title><rect x="99.3702%" y="837" width="0.0197%" height="15" fill="rgb(240,86,28)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="847.50"></text></g><g><title>deno`v8::internal::compiler::JSHeapBroker::TryGetOrCreateData(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::base::Flags (1 samples, 0.02%)</title><rect x="99.3702%" y="821" width="0.0197%" height="15" fill="rgb(215,47,9)" fg:x="5049" fg:w="1"/><text x="99.6202%" y="831.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::SplitNode (2 samples, 0.04%)</title><rect x="99.3899%" y="917" width="0.0394%" height="15" fill="rgb(252,25,45)" fg:x="5050" fg:w="2"/><text x="99.6399%" y="927.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (3 samples, 0.06%)</title><rect x="99.3899%" y="997" width="0.0590%" height="15" fill="rgb(251,164,9)" fg:x="5050" fg:w="3"/><text x="99.6399%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (3 samples, 0.06%)</title><rect x="99.3899%" y="981" width="0.0590%" height="15" fill="rgb(233,194,0)" fg:x="5050" fg:w="3"/><text x="99.6399%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (3 samples, 0.06%)</title><rect x="99.3899%" y="965" width="0.0590%" height="15" fill="rgb(249,111,24)" fg:x="5050" fg:w="3"/><text x="99.6399%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (3 samples, 0.06%)</title><rect x="99.3899%" y="949" width="0.0590%" height="15" fill="rgb(250,223,3)" fg:x="5050" fg:w="3"/><text x="99.6399%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (3 samples, 0.06%)</title><rect x="99.3899%" y="933" width="0.0590%" height="15" fill="rgb(236,178,37)" fg:x="5050" fg:w="3"/><text x="99.6399%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::GetCommonDominator (1 samples, 0.02%)</title><rect x="99.4292%" y="917" width="0.0197%" height="15" fill="rgb(241,158,50)" fg:x="5052" fg:w="1"/><text x="99.6792%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::DeadCodeElimination::ReduceNode (1 samples, 0.02%)</title><rect x="99.4489%" y="917" width="0.0197%" height="15" fill="rgb(213,121,41)" fg:x="5053" fg:w="1"/><text x="99.6989%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::GetTypeOrAny (1 samples, 0.02%)</title><rect x="99.4489%" y="901" width="0.0197%" height="15" fill="rgb(240,92,3)" fg:x="5053" fg:w="1"/><text x="99.6989%" y="911.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (2 samples, 0.04%)</title><rect x="99.4489%" y="997" width="0.0394%" height="15" fill="rgb(205,123,3)" fg:x="5053" fg:w="2"/><text x="99.6989%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::EarlyOptimizationPhase::Run (2 samples, 0.04%)</title><rect x="99.4489%" y="981" width="0.0394%" height="15" fill="rgb(205,97,47)" fg:x="5053" fg:w="2"/><text x="99.6989%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.04%)</title><rect x="99.4489%" y="965" width="0.0394%" height="15" fill="rgb(247,152,14)" fg:x="5053" fg:w="2"/><text x="99.6989%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.04%)</title><rect x="99.4489%" y="949" width="0.0394%" height="15" fill="rgb(248,195,53)" fg:x="5053" fg:w="2"/><text x="99.6989%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.04%)</title><rect x="99.4489%" y="933" width="0.0394%" height="15" fill="rgb(226,201,16)" fg:x="5053" fg:w="2"/><text x="99.6989%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (1 samples, 0.02%)</title><rect x="99.4686%" y="917" width="0.0197%" height="15" fill="rgb(205,98,0)" fg:x="5054" fg:w="1"/><text x="99.7186%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Grow (1 samples, 0.02%)</title><rect x="99.4686%" y="901" width="0.0197%" height="15" fill="rgb(214,191,48)" fg:x="5054" fg:w="1"/><text x="99.7186%" y="911.50"></text></g><g><title>deno`v8::internal::compiler::Operator1&lt;v8::internal::compiler::TypedObjectStateInfo, v8::internal::compiler::OpEqualTo&lt;v8::internal::compiler::TypedObjectStateInfo&gt;, v8::internal::compiler::OpHash&lt;v8::internal::compiler::TypedObjectStateInfo&gt; &gt;::HashCode (1 samples, 0.02%)</title><rect x="99.4686%" y="885" width="0.0197%" height="15" fill="rgb(237,112,39)" fg:x="5054" fg:w="1"/><text x="99.7186%" y="895.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.02%)</title><rect x="99.4883%" y="965" width="0.0197%" height="15" fill="rgb(247,203,27)" fg:x="5055" fg:w="1"/><text x="99.7383%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.02%)</title><rect x="99.4883%" y="949" width="0.0197%" height="15" fill="rgb(235,124,28)" fg:x="5055" fg:w="1"/><text x="99.7383%" y="959.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (2 samples, 0.04%)</title><rect x="99.4883%" y="997" width="0.0394%" height="15" fill="rgb(208,207,46)" fg:x="5055" fg:w="2"/><text x="99.7383%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (2 samples, 0.04%)</title><rect x="99.4883%" y="981" width="0.0394%" height="15" fill="rgb(234,176,4)" fg:x="5055" fg:w="2"/><text x="99.7383%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (1 samples, 0.02%)</title><rect x="99.5080%" y="965" width="0.0197%" height="15" fill="rgb(230,133,28)" fg:x="5056" fg:w="1"/><text x="99.7580%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::BuildCFG (1 samples, 0.02%)</title><rect x="99.5080%" y="949" width="0.0197%" height="15" fill="rgb(211,137,40)" fg:x="5056" fg:w="1"/><text x="99.7580%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::CFGBuilder::Run (1 samples, 0.02%)</title><rect x="99.5080%" y="933" width="0.0197%" height="15" fill="rgb(254,35,13)" fg:x="5056" fg:w="1"/><text x="99.7580%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::CFGBuilder::BuildBlocks (1 samples, 0.02%)</title><rect x="99.5080%" y="917" width="0.0197%" height="15" fill="rgb(225,49,51)" fg:x="5056" fg:w="1"/><text x="99.7580%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::IsExceptionalCall (1 samples, 0.02%)</title><rect x="99.5080%" y="901" width="0.0197%" height="15" fill="rgb(251,10,15)" fg:x="5056" fg:w="1"/><text x="99.7580%" y="911.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasFrameStateInput (1 samples, 0.02%)</title><rect x="99.5080%" y="885" width="0.0197%" height="15" fill="rgb(228,207,15)" fg:x="5056" fg:w="1"/><text x="99.7580%" y="895.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisTracker::Scope::~Scope (1 samples, 0.02%)</title><rect x="99.5277%" y="933" width="0.0197%" height="15" fill="rgb(241,99,19)" fg:x="5057" fg:w="1"/><text x="99.7777%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysis::Reduce (2 samples, 0.04%)</title><rect x="99.5277%" y="949" width="0.0394%" height="15" fill="rgb(207,104,49)" fg:x="5057" fg:w="2"/><text x="99.7777%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::VariableTracker::Scope::~Scope (1 samples, 0.02%)</title><rect x="99.5473%" y="933" width="0.0197%" height="15" fill="rgb(234,99,18)" fg:x="5058" fg:w="1"/><text x="99.7973%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::operator==(v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash (1 samples, 0.02%)</title><rect x="99.5473%" y="917" width="0.0197%" height="15" fill="rgb(213,191,49)" fg:x="5058" fg:w="1"/><text x="99.7973%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::double_iterator::operator++ (1 samples, 0.02%)</title><rect x="99.5473%" y="901" width="0.0197%" height="15" fill="rgb(210,226,19)" fg:x="5058" fg:w="1"/><text x="99.7973%" y="911.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::iterator::operator++ (1 samples, 0.02%)</title><rect x="99.5473%" y="885" width="0.0197%" height="15" fill="rgb(229,97,18)" fg:x="5058" fg:w="1"/><text x="99.7973%" y="895.50"></text></g><g><title>deno`v8::internal::compiler::EffectGraphReducer::ReduceFrom (3 samples, 0.06%)</title><rect x="99.5277%" y="965" width="0.0590%" height="15" fill="rgb(211,167,15)" fg:x="5057" fg:w="3"/><text x="99.7777%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::IsEffectEdge (1 samples, 0.02%)</title><rect x="99.5670%" y="949" width="0.0197%" height="15" fill="rgb(210,169,34)" fg:x="5059" fg:w="1"/><text x="99.8170%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasFrameStateInput (1 samples, 0.02%)</title><rect x="99.5670%" y="933" width="0.0197%" height="15" fill="rgb(241,121,31)" fg:x="5059" fg:w="1"/><text x="99.8170%" y="943.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (4 samples, 0.08%)</title><rect x="99.5277%" y="997" width="0.0787%" height="15" fill="rgb(232,40,11)" fg:x="5057" fg:w="4"/><text x="99.7777%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (4 samples, 0.08%)</title><rect x="99.5277%" y="981" width="0.0787%" height="15" fill="rgb(205,86,26)" fg:x="5057" fg:w="4"/><text x="99.7777%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisReducer::VerifyReplacement (1 samples, 0.02%)</title><rect x="99.5867%" y="965" width="0.0197%" height="15" fill="rgb(231,126,28)" fg:x="5060" fg:w="1"/><text x="99.8367%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::AllNodes::AllNodes (1 samples, 0.02%)</title><rect x="99.5867%" y="949" width="0.0197%" height="15" fill="rgb(219,221,18)" fg:x="5060" fg:w="1"/><text x="99.8367%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::AllNodes::Mark (1 samples, 0.02%)</title><rect x="99.5867%" y="933" width="0.0197%" height="15" fill="rgb(211,40,0)" fg:x="5060" fg:w="1"/><text x="99.8367%" y="943.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GenericLoweringPhase&gt; (1 samples, 0.02%)</title><rect x="99.6064%" y="997" width="0.0197%" height="15" fill="rgb(239,85,43)" fg:x="5061" fg:w="1"/><text x="99.8564%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GenericLoweringPhase::Run (1 samples, 0.02%)</title><rect x="99.6064%" y="981" width="0.0197%" height="15" fill="rgb(231,55,21)" fg:x="5061" fg:w="1"/><text x="99.8564%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.02%)</title><rect x="99.6064%" y="965" width="0.0197%" height="15" fill="rgb(225,184,43)" fg:x="5061" fg:w="1"/><text x="99.8564%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.02%)</title><rect x="99.6064%" y="949" width="0.0197%" height="15" fill="rgb(251,158,41)" fg:x="5061" fg:w="1"/><text x="99.8564%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::BranchElimination::BranchElimination (1 samples, 0.02%)</title><rect x="99.6261%" y="965" width="0.0197%" height="15" fill="rgb(234,159,37)" fg:x="5062" fg:w="1"/><text x="99.8761%" y="975.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (3 samples, 0.06%)</title><rect x="99.6261%" y="997" width="0.0590%" height="15" fill="rgb(216,204,22)" fg:x="5062" fg:w="3"/><text x="99.8761%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (3 samples, 0.06%)</title><rect x="99.6261%" y="981" width="0.0590%" height="15" fill="rgb(214,17,3)" fg:x="5062" fg:w="3"/><text x="99.8761%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.04%)</title><rect x="99.6457%" y="965" width="0.0394%" height="15" fill="rgb(212,111,17)" fg:x="5063" fg:w="2"/><text x="99.8957%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.04%)</title><rect x="99.6457%" y="949" width="0.0394%" height="15" fill="rgb(221,157,24)" fg:x="5063" fg:w="2"/><text x="99.8957%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.02%)</title><rect x="99.6654%" y="933" width="0.0197%" height="15" fill="rgb(252,16,13)" fg:x="5064" fg:w="1"/><text x="99.9154%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::MachineOperatorReducer::ReduceTruncateInt64ToInt32 (1 samples, 0.02%)</title><rect x="99.6654%" y="917" width="0.0197%" height="15" fill="rgb(221,62,2)" fg:x="5064" fg:w="1"/><text x="99.9154%" y="927.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (1 samples, 0.02%)</title><rect x="99.6851%" y="997" width="0.0197%" height="15" fill="rgb(247,87,22)" fg:x="5065" fg:w="1"/><text x="99.9351%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (1 samples, 0.02%)</title><rect x="99.6851%" y="981" width="0.0197%" height="15" fill="rgb(215,73,9)" fg:x="5065" fg:w="1"/><text x="99.9351%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.02%)</title><rect x="99.6851%" y="965" width="0.0197%" height="15" fill="rgb(207,175,33)" fg:x="5065" fg:w="1"/><text x="99.9351%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.02%)</title><rect x="99.6851%" y="949" width="0.0197%" height="15" fill="rgb(243,129,54)" fg:x="5065" fg:w="1"/><text x="99.9351%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.02%)</title><rect x="99.6851%" y="933" width="0.0197%" height="15" fill="rgb(227,119,45)" fg:x="5065" fg:w="1"/><text x="99.9351%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::MemoryLowering::ReduceStoreField (1 samples, 0.02%)</title><rect x="99.7048%" y="949" width="0.0197%" height="15" fill="rgb(205,109,36)" fg:x="5066" fg:w="1"/><text x="99.9548%" y="959.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MemoryOptimizationPhase&gt; (2 samples, 0.04%)</title><rect x="99.7048%" y="997" width="0.0394%" height="15" fill="rgb(205,6,39)" fg:x="5066" fg:w="2"/><text x="99.9548%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::MemoryOptimizationPhase::Run (2 samples, 0.04%)</title><rect x="99.7048%" y="981" width="0.0394%" height="15" fill="rgb(221,32,16)" fg:x="5066" fg:w="2"/><text x="99.9548%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::MemoryOptimizer::Optimize (2 samples, 0.04%)</title><rect x="99.7048%" y="965" width="0.0394%" height="15" fill="rgb(228,144,50)" fg:x="5066" fg:w="2"/><text x="99.9548%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::MemoryOptimizer::VisitAllocateRaw (1 samples, 0.02%)</title><rect x="99.7245%" y="949" width="0.0197%" height="15" fill="rgb(229,201,53)" fg:x="5067" fg:w="1"/><text x="99.9745%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::ReplaceUses (1 samples, 0.02%)</title><rect x="99.7245%" y="933" width="0.0197%" height="15" fill="rgb(249,153,27)" fg:x="5067" fg:w="1"/><text x="99.9745%" y="943.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (1 samples, 0.02%)</title><rect x="99.7441%" y="997" width="0.0197%" height="15" fill="rgb(227,106,25)" fg:x="5068" fg:w="1"/><text x="99.9941%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLoweringPhase::Run (1 samples, 0.02%)</title><rect x="99.7441%" y="981" width="0.0197%" height="15" fill="rgb(230,65,29)" fg:x="5068" fg:w="1"/><text x="99.9941%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (1 samples, 0.02%)</title><rect x="99.7441%" y="965" width="0.0197%" height="15" fill="rgb(221,57,46)" fg:x="5068" fg:w="1"/><text x="99.9941%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunPropagatePhase (1 samples, 0.02%)</title><rect x="99.7441%" y="949" width="0.0197%" height="15" fill="rgb(229,161,17)" fg:x="5068" fg:w="1"/><text x="99.9941%" y="959.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::VisitNode&lt;(v8::internal::compiler::Phase)0&gt; (1 samples, 0.02%)</title><rect x="99.7441%" y="933" width="0.0197%" height="15" fill="rgb(222,213,11)" fg:x="5068" fg:w="1"/><text x="99.9941%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::Truncation::Generalize (1 samples, 0.02%)</title><rect x="99.7441%" y="917" width="0.0197%" height="15" fill="rgb(235,35,13)" fg:x="5068" fg:w="1"/><text x="99.9941%" y="927.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TypedLoweringPhase&gt; (3 samples, 0.06%)</title><rect x="99.7638%" y="997" width="0.0590%" height="15" fill="rgb(233,158,34)" fg:x="5069" fg:w="3"/><text x="100.0138%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::TypedLoweringPhase::Run (3 samples, 0.06%)</title><rect x="99.7638%" y="981" width="0.0590%" height="15" fill="rgb(215,151,48)" fg:x="5069" fg:w="3"/><text x="100.0138%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.06%)</title><rect x="99.7638%" y="965" width="0.0590%" height="15" fill="rgb(229,84,14)" fg:x="5069" fg:w="3"/><text x="100.0138%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.06%)</title><rect x="99.7638%" y="949" width="0.0590%" height="15" fill="rgb(229,68,14)" fg:x="5069" fg:w="3"/><text x="100.0138%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.04%)</title><rect x="99.7835%" y="933" width="0.0394%" height="15" fill="rgb(243,106,26)" fg:x="5070" fg:w="2"/><text x="100.0335%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::JSCreateLowering::ReduceJSCreateBlockContext (1 samples, 0.02%)</title><rect x="99.8032%" y="917" width="0.0197%" height="15" fill="rgb(206,45,38)" fg:x="5071" fg:w="1"/><text x="100.0532%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReplaceWithValue (1 samples, 0.02%)</title><rect x="99.8032%" y="901" width="0.0197%" height="15" fill="rgb(226,6,15)" fg:x="5071" fg:w="1"/><text x="100.0532%" y="911.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::IsControlEdge (1 samples, 0.02%)</title><rect x="99.8032%" y="885" width="0.0197%" height="15" fill="rgb(232,22,54)" fg:x="5071" fg:w="1"/><text x="100.0532%" y="895.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InstructionSelectionPhase, v8::internal::compiler::Linkage*&amp;&gt; (1 samples, 0.02%)</title><rect x="99.8229%" y="981" width="0.0197%" height="15" fill="rgb(229,222,32)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelectionPhase::Run (1 samples, 0.02%)</title><rect x="99.8229%" y="965" width="0.0197%" height="15" fill="rgb(228,62,29)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::SelectInstructions (1 samples, 0.02%)</title><rect x="99.8229%" y="949" width="0.0197%" height="15" fill="rgb(251,103,34)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitBlock (1 samples, 0.02%)</title><rect x="99.8229%" y="933" width="0.0197%" height="15" fill="rgb(233,12,30)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitDeoptimizeIf (1 samples, 0.02%)</title><rect x="99.8229%" y="917" width="0.0197%" height="15" fill="rgb(238,52,0)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitWordCompareZero (1 samples, 0.02%)</title><rect x="99.8229%" y="901" width="0.0197%" height="15" fill="rgb(223,98,5)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="911.50"></text></g><g><title>deno`v8::internal::compiler::(anonymous namespace)::VisitWordCompare (1 samples, 0.02%)</title><rect x="99.8229%" y="885" width="0.0197%" height="15" fill="rgb(228,75,37)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="895.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::EmitWithContinuation (1 samples, 0.02%)</title><rect x="99.8229%" y="869" width="0.0197%" height="15" fill="rgb(205,115,49)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="879.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::EmitWithContinuation (1 samples, 0.02%)</title><rect x="99.8229%" y="853" width="0.0197%" height="15" fill="rgb(250,154,43)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="863.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::AppendDeoptimizeArguments(v8::internal::ZoneVector (1 samples, 0.02%)</title><rect x="99.8229%" y="837" width="0.0197%" height="15" fill="rgb(226,43,29)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="847.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::AddInputsToFrameStateDescriptor(v8::internal::compiler::FrameStateDescriptor*, v8::internal::compiler::FrameState, v8::internal::compiler::OperandGenerator*, v8::internal::compiler::StateObjectDeduplicator*, v8::internal::ZoneVector (1 samples, 0.02%)</title><rect x="99.8229%" y="821" width="0.0197%" height="15" fill="rgb(249,228,39)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="831.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::AddInputsToFrameStateDescriptor(v8::internal::compiler::StateValueList*, v8::internal::ZoneVector (1 samples, 0.02%)</title><rect x="99.8229%" y="805" width="0.0197%" height="15" fill="rgb(216,79,43)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="815.50"></text></g><g><title>deno`v8::internal::compiler::SparseInputMask::InputIterator::Advance (1 samples, 0.02%)</title><rect x="99.8229%" y="789" width="0.0197%" height="15" fill="rgb(228,95,12)" fg:x="5072" fg:w="1"/><text x="100.0729%" y="799.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateBlockedReg (1 samples, 0.02%)</title><rect x="99.8426%" y="933" width="0.0197%" height="15" fill="rgb(249,221,15)" fg:x="5073" fg:w="1"/><text x="100.0926%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::FindFreeRegistersForRange(v8::internal::compiler::LiveRange*, v8::base::Vector (1 samples, 0.02%)</title><rect x="99.8622%" y="933" width="0.0197%" height="15" fill="rgb(233,34,13)" fg:x="5074" fg:w="1"/><text x="100.1122%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (1 samples, 0.02%)</title><rect x="99.8819%" y="933" width="0.0197%" height="15" fill="rgb(214,103,39)" fg:x="5075" fg:w="1"/><text x="100.1319%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::PickRegisterThatIsAvailableLongest(v8::internal::compiler::LiveRange*, int, v8::base::Vector (1 samples, 0.02%)</title><rect x="99.9016%" y="933" width="0.0197%" height="15" fill="rgb(251,126,39)" fg:x="5076" fg:w="1"/><text x="100.1516%" y="943.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (6 samples, 0.12%)</title><rect x="99.8426%" y="965" width="0.1181%" height="15" fill="rgb(214,216,36)" fg:x="5073" fg:w="6"/><text x="100.0926%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (6 samples, 0.12%)</title><rect x="99.8426%" y="949" width="0.1181%" height="15" fill="rgb(220,221,8)" fg:x="5073" fg:w="6"/><text x="100.0926%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges (2 samples, 0.04%)</title><rect x="99.9213%" y="933" width="0.0394%" height="15" fill="rgb(240,216,3)" fg:x="5077" fg:w="2"/><text x="100.1713%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator() (2 samples, 0.04%)</title><rect x="99.9213%" y="917" width="0.0394%" height="15" fill="rgb(232,218,17)" fg:x="5077" fg:w="2"/><text x="100.1713%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator()(v8::internal::compiler::LiveRange*) const::&apos;lambda&apos;(v8::internal::compiler::LiveRange*, v8::internal::compiler::LiveRange*, std::__1::function&lt;void (v8::internal::compiler::LiveRange*)&gt;)::operator()(v8::internal::compiler::LiveRange*, v8::internal::compiler::LiveRange*, std::__1::function&lt;void  (1 samples, 0.02%)</title><rect x="99.9410%" y="901" width="0.0197%" height="15" fill="rgb(229,163,45)" fg:x="5078" fg:w="1"/><text x="100.1910%" y="911.50"></text></g><g><title>deno`std::__1::__tree_iterator&lt;v8::internal::compiler::LiveRange*, std::__1::__tree_node&lt;v8::internal::compiler::LiveRange*, void*&gt;*, long&gt; std::__1::__tree&lt;v8::internal::compiler::LiveRange*, v8::internal::compiler::LinearScanAllocator::UnhandledLiveRangeOrdering, v8::internal::ZoneAllocator&lt;v8::internal::compiler::LiveRange*&gt; &gt;::__emplace_multi&lt;v8::internal::compiler::LiveRange* const&amp;&gt; (1 samples, 0.02%)</title><rect x="99.9410%" y="885" width="0.0197%" height="15" fill="rgb(231,110,42)" fg:x="5078" fg:w="1"/><text x="100.1910%" y="895.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MeetRegisterConstraintsPhase&gt; (1 samples, 0.02%)</title><rect x="99.9606%" y="965" width="0.0197%" height="15" fill="rgb(208,170,48)" fg:x="5079" fg:w="1"/><text x="100.2106%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::ConstraintBuilder::MeetRegisterConstraints (1 samples, 0.02%)</title><rect x="99.9606%" y="949" width="0.0197%" height="15" fill="rgb(239,116,25)" fg:x="5079" fg:w="1"/><text x="100.2106%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::ConstraintBuilder::MeetConstraintsBefore (1 samples, 0.02%)</title><rect x="99.9606%" y="933" width="0.0197%" height="15" fill="rgb(219,200,50)" fg:x="5079" fg:w="1"/><text x="100.2106%" y="943.50"></text></g><g><title>all (5,081 samples, 100%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(245,200,0)" fg:x="0" fg:w="5081"/><text x="0.2500%" y="1167.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (38 samples, 0.75%)</title><rect x="99.2521%" y="1141" width="0.7479%" height="15" fill="rgb(245,119,33)" fg:x="5043" fg:w="38"/><text x="99.5021%" y="1151.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (38 samples, 0.75%)</title><rect x="99.2521%" y="1125" width="0.7479%" height="15" fill="rgb(231,125,12)" fg:x="5043" fg:w="38"/><text x="99.5021%" y="1135.50"></text></g><g><title>deno`v8::base::ThreadEntry (37 samples, 0.73%)</title><rect x="99.2718%" y="1109" width="0.7282%" height="15" fill="rgb(216,96,41)" fg:x="5044" fg:w="37"/><text x="99.5218%" y="1119.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (37 samples, 0.73%)</title><rect x="99.2718%" y="1093" width="0.7282%" height="15" fill="rgb(248,43,45)" fg:x="5044" fg:w="37"/><text x="99.5218%" y="1103.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (37 samples, 0.73%)</title><rect x="99.2718%" y="1077" width="0.7282%" height="15" fill="rgb(217,222,7)" fg:x="5044" fg:w="37"/><text x="99.5218%" y="1087.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (37 samples, 0.73%)</title><rect x="99.2718%" y="1061" width="0.7282%" height="15" fill="rgb(233,28,6)" fg:x="5044" fg:w="37"/><text x="99.5218%" y="1071.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (37 samples, 0.73%)</title><rect x="99.2718%" y="1045" width="0.7282%" height="15" fill="rgb(231,218,15)" fg:x="5044" fg:w="37"/><text x="99.5218%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (37 samples, 0.73%)</title><rect x="99.2718%" y="1029" width="0.7282%" height="15" fill="rgb(226,171,48)" fg:x="5044" fg:w="37"/><text x="99.5218%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (31 samples, 0.61%)</title><rect x="99.3899%" y="1013" width="0.6101%" height="15" fill="rgb(235,201,9)" fg:x="5050" fg:w="31"/><text x="99.6399%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (9 samples, 0.18%)</title><rect x="99.8229%" y="997" width="0.1771%" height="15" fill="rgb(217,80,15)" fg:x="5072" fg:w="9"/><text x="100.0729%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (8 samples, 0.16%)</title><rect x="99.8426%" y="981" width="0.1574%" height="15" fill="rgb(219,152,8)" fg:x="5073" fg:w="8"/><text x="100.0926%" y="991.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::OptimizeMovesPhase&gt; (1 samples, 0.02%)</title><rect x="99.9803%" y="965" width="0.0197%" height="15" fill="rgb(243,107,38)" fg:x="5080" fg:w="1"/><text x="100.2303%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::MoveOptimizer::Run (1 samples, 0.02%)</title><rect x="99.9803%" y="949" width="0.0197%" height="15" fill="rgb(231,17,5)" fg:x="5080" fg:w="1"/><text x="100.2303%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::MoveOptimizer::RemoveClobberedDestinations (1 samples, 0.02%)</title><rect x="99.9803%" y="933" width="0.0197%" height="15" fill="rgb(209,25,54)" fg:x="5080" fg:w="1"/><text x="100.2303%" y="943.50"></text></g></svg></svg>