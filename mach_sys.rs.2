/* automatically generated by rust-bindgen */

#![allow(warnings)]

// Some manual additions to fix up bindgen output:

pub type __darwin_natural_t = u32;
pub type __uint8_t = u8;
pub type __uint16_t = u16;
pub type __uint32_t = u32;
pub type __uint64_t = u64;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type uintptr_t = usize;

#[repr(C)]
pub struct mach_vm_info_region {
    vir_start: mach_vm_offset_t,
    vir_end: mach_vm_offset_t,
    vir_object: mach_vm_offset_t,
    vir_offset: memory_object_offset_t,
    vir_needs_copy: boolean_t,
    vir_protection: vm_prot_t,
    vir_max_protection: vm_prot_t,
    vir_inheritance: vm_inherit_t,
    vir_wired_count: natural_t,
    vir_user_wired_count: natural_t,
}

pub type mach_vm_info_region_t = mach_vm_info_region;

// Code below this line is automatically generated.

pub type boolean_t = ::libc::c_uint;
pub type kern_return_t = ::libc::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::libc::c_int;
pub type vm_offset_t = uintptr_t;
pub type vm_size_t = uintptr_t;
pub type mach_vm_address_t = uint64_t;
pub type mach_vm_offset_t = uint64_t;
pub type mach_vm_size_t = uint64_t;
pub type vm_map_offset_t = uint64_t;
pub type vm_map_address_t = uint64_t;
pub type vm_map_size_t = uint64_t;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = mach_port_name_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
impl ::core::clone::Clone for Struct_mach_port_status {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_mach_port_status {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_port_status_t = Struct_mach_port_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
impl ::core::clone::Clone for Struct_mach_port_limits {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_mach_port_limits {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_port_limits_t = Struct_mach_port_limits;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_qos {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub _bindgen_bitfield_2_: boolean_t,
    pub len: natural_t,
}
impl ::core::clone::Clone for Struct_mach_port_qos {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_mach_port_qos {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_port_qos_t = Struct_mach_port_qos;
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = uint64_t;
pub type reg64_t = uint32_t;
pub type ppnum_t = uint32_t;
pub type vm_map_t = mach_port_t;
pub type vm_object_offset_t = uint64_t;
pub type vm_object_size_t = uint64_t;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::libc::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_type_name_t = ::libc::c_uint;
pub type mach_msg_copy_options_t = u8;
pub type mach_msg_descriptor_type_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub _bindgen_bitfield_2_: mach_msg_descriptor_type_t,
}
impl ::core::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_type_descriptor_t = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub pad2: u16,
    pub disposition: u8,
    pub type_: u8,
}
impl ::core::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed2 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_port_descriptor_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub address: uint32_t,
    pub size: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::libc::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::core::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed3 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_ool_descriptor32_t = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::libc::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
impl ::core::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed4 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_ool_descriptor64_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub address: *mut ::libc::c_void,
    pub deallocate: u8,
    pub copy: u8,
    pub disposition: u8,
    pub type_: u8,
    pub size: mach_msg_size_t,
}
impl ::core::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed5 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_ool_descriptor_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub address: uint32_t,
    pub count: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::core::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed6 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_ool_ports_descriptor32_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::core::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed7 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_ool_ports_descriptor64_t = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub address: *mut ::libc::c_void,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::core::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed8 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_ool_ports_descriptor_t = Struct_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed9 {
    pub unsafe fn port(&mut self) -> *mut mach_msg_port_descriptor_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn out_of_line(&mut self) -> *mut mach_msg_ool_descriptor_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ool_ports(&mut self) -> *mut mach_msg_ool_ports_descriptor_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _type(&mut self) -> *mut mach_msg_type_descriptor_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union_Unnamed9 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union_Unnamed9 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_descriptor_t = Union_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub msgh_descriptor_count: mach_msg_size_t,
}
impl ::core::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed10 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_body_t = Struct_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_reserved: mach_msg_size_t,
    pub msgh_id: mach_msg_id_t,
}
impl ::core::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed11 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_header_t = Struct_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
impl ::core::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed12 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_base_t = Struct_Unnamed12;
pub type mach_msg_trailer_type_t = ::libc::c_uint;
pub type mach_msg_trailer_size_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
impl ::core::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed13 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_trailer_t = Struct_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
impl ::core::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed14 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_seqno_trailer_t = Struct_Unnamed14;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub val: [::libc::c_uint; 2usize],
}
impl ::core::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed15 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type security_token_t = Struct_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
impl ::core::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed16 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_security_trailer_t = Struct_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub val: [::libc::c_uint; 8usize],
}
impl ::core::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed17 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type audit_token_t = Struct_Unnamed17;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
impl ::core::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed18 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_audit_trailer_t = Struct_Unnamed18;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
impl ::core::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed19 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_context_trailer_t = Struct_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub sender: mach_port_name_t,
}
impl ::core::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed20 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type msg_labels_t = Struct_Unnamed20;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: ::libc::c_int,
    pub msgh_labels: msg_labels_t,
}
impl ::core::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed21 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_mac_trailer_t = Struct_Unnamed21;
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub header: mach_msg_header_t,
}
impl ::core::clone::Clone for Struct_Unnamed22 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed22 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_empty_send_t = Struct_Unnamed22;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
impl ::core::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed23 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_empty_rcv_t = Struct_Unnamed23;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed24 {
    pub _bindgen_data_: [u32; 8usize],
}
impl Union_Unnamed24 {
    pub unsafe fn send(&mut self) -> *mut mach_msg_empty_send_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rcv(&mut self) -> *mut mach_msg_empty_rcv_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union_Unnamed24 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union_Unnamed24 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_msg_empty_t = Union_Unnamed24;
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
impl ::core::clone::Clone for Struct_vm_statistics {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_statistics {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_statistics_t = *mut Struct_vm_statistics;
pub type vm_statistics_data_t = Struct_vm_statistics;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: uint64_t,
    pub reactivations: uint64_t,
    pub pageins: uint64_t,
    pub pageouts: uint64_t,
    pub faults: uint64_t,
    pub cow_faults: uint64_t,
    pub lookups: uint64_t,
    pub hits: uint64_t,
    pub purges: uint64_t,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
}
impl ::core::clone::Clone for Struct_vm_statistics64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_statistics64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_statistics64_t = *mut Struct_vm_statistics64;
pub type vm_statistics64_data_t = Struct_vm_statistics64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_extmod_statistics {
    pub task_for_pid_count: int64_t,
    pub task_for_pid_caller_count: int64_t,
    pub thread_creation_count: int64_t,
    pub thread_creation_caller_count: int64_t,
    pub thread_set_state_count: int64_t,
    pub thread_set_state_caller_count: int64_t,
}
impl ::core::clone::Clone for Struct_vm_extmod_statistics {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_extmod_statistics {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_extmod_statistics_t = *mut Struct_vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = Struct_vm_extmod_statistics;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
impl ::core::clone::Clone for Struct_time_value {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_time_value {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type time_value_t = Struct_time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::libc::c_char; 512usize];
pub type kernel_boot_info_t = [::libc::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: uint64_t,
}
impl ::core::clone::Clone for Struct_host_basic_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_host_basic_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type host_basic_info_data_t = Struct_host_basic_info;
pub type host_basic_info_t = *mut Struct_host_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
impl ::core::clone::Clone for Struct_host_sched_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_host_sched_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type host_sched_info_data_t = Struct_host_sched_info;
pub type host_sched_info_t = *mut Struct_host_sched_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
impl ::core::clone::Clone for Struct_kernel_resource_sizes {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_kernel_resource_sizes {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type kernel_resource_sizes_data_t = Struct_kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut Struct_kernel_resource_sizes;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
impl ::core::clone::Clone for Struct_host_priority_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_host_priority_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type host_priority_info_data_t = Struct_host_priority_info;
pub type host_priority_info_t = *mut Struct_host_priority_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
impl ::core::clone::Clone for Struct_host_load_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_host_load_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type host_load_info_data_t = Struct_host_load_info;
pub type host_load_info_t = *mut Struct_host_load_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
impl ::core::clone::Clone for Struct_host_cpu_load_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_host_cpu_load_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type host_cpu_load_info_data_t = Struct_host_cpu_load_info;
pub type host_cpu_load_info_t = *mut Struct_host_cpu_load_info;
pub type vm_prot_t = ::libc::c_int;
pub type vm_sync_t = ::libc::c_uint;
pub type memory_object_offset_t = ::libc::c_ulonglong;
pub type memory_object_size_t = ::libc::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::libc::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::libc::c_int;
pub type memory_object_return_t = ::libc::c_int;
pub type memory_object_info_t = *mut ::libc::c_int;
pub type memory_object_flavor_t = ::libc::c_int;
pub type memory_object_info_data_t = [::libc::c_int; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
impl ::core::clone::Clone for Struct_memory_object_perf_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_memory_object_perf_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
impl ::core::clone::Clone for Struct_memory_object_attr_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_memory_object_attr_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
impl ::core::clone::Clone for Struct_memory_object_behave_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_memory_object_behave_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type memory_object_behave_info_t = *mut Struct_memory_object_behave_info;
pub type memory_object_behave_info_data_t = Struct_memory_object_behave_info;
pub type memory_object_perf_info_t = *mut Struct_memory_object_perf_info;
pub type memory_object_perf_info_data_t = Struct_memory_object_perf_info;
pub type memory_object_attr_info_t = *mut Struct_memory_object_attr_info;
pub type memory_object_attr_info_data_t = Struct_memory_object_attr_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_thread_state {
    pub __eax: ::libc::c_uint,
    pub __ebx: ::libc::c_uint,
    pub __ecx: ::libc::c_uint,
    pub __edx: ::libc::c_uint,
    pub __edi: ::libc::c_uint,
    pub __esi: ::libc::c_uint,
    pub __ebp: ::libc::c_uint,
    pub __esp: ::libc::c_uint,
    pub __ss: ::libc::c_uint,
    pub __eflags: ::libc::c_uint,
    pub __eip: ::libc::c_uint,
    pub __cs: ::libc::c_uint,
    pub __ds: ::libc::c_uint,
    pub __es: ::libc::c_uint,
    pub __fs: ::libc::c_uint,
    pub __gs: ::libc::c_uint,
}
impl ::core::clone::Clone for Struct___darwin_i386_thread_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_i386_thread_state {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_control {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::core::clone::Clone for Struct___darwin_fp_control {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_fp_control {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __darwin_fp_control_t = Struct___darwin_fp_control;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_status {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::core::clone::Clone for Struct___darwin_fp_status {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_fp_status {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __darwin_fp_status_t = Struct___darwin_fp_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mmst_reg {
    pub __mmst_reg: [::libc::c_char; 10usize],
    pub __mmst_rsrv: [::libc::c_char; 6usize],
}
impl ::core::clone::Clone for Struct___darwin_mmst_reg {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_mmst_reg {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_xmm_reg {
    pub __xmm_reg: [::libc::c_char; 16usize],
}
impl ::core::clone::Clone for Struct___darwin_xmm_reg {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_xmm_reg {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_float_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::core::clone::Clone for Struct___darwin_i386_float_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_i386_float_state {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_avx_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
}
impl ::core::clone::Clone for Struct___darwin_i386_avx_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_i386_avx_state {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::core::clone::Clone for Struct___darwin_i386_exception_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_i386_exception_state {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state32 {
    pub __dr0: ::libc::c_uint,
    pub __dr1: ::libc::c_uint,
    pub __dr2: ::libc::c_uint,
    pub __dr3: ::libc::c_uint,
    pub __dr4: ::libc::c_uint,
    pub __dr5: ::libc::c_uint,
    pub __dr6: ::libc::c_uint,
    pub __dr7: ::libc::c_uint,
}
impl ::core::clone::Clone for Struct___darwin_x86_debug_state32 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_x86_debug_state32 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::core::clone::Clone for Struct___darwin_x86_thread_state64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_x86_thread_state64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_float_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::core::clone::Clone for Struct___darwin_x86_float_state64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_x86_float_state64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_avx_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
    pub __fpu_ymmh8: Struct___darwin_xmm_reg,
    pub __fpu_ymmh9: Struct___darwin_xmm_reg,
    pub __fpu_ymmh10: Struct___darwin_xmm_reg,
    pub __fpu_ymmh11: Struct___darwin_xmm_reg,
    pub __fpu_ymmh12: Struct___darwin_xmm_reg,
    pub __fpu_ymmh13: Struct___darwin_xmm_reg,
    pub __fpu_ymmh14: Struct___darwin_xmm_reg,
    pub __fpu_ymmh15: Struct___darwin_xmm_reg,
}
impl ::core::clone::Clone for Struct___darwin_x86_avx_state64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_x86_avx_state64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::core::clone::Clone for Struct___darwin_x86_exception_state64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_x86_exception_state64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::core::clone::Clone for Struct___darwin_x86_debug_state64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct___darwin_x86_debug_state64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_state_hdr {
    pub flavor: ::libc::c_int,
    pub count: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_x86_state_hdr {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_x86_state_hdr {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type x86_state_hdr_t = Struct_x86_state_hdr;
pub type i386_thread_state_t = Struct___darwin_i386_thread_state;
pub type x86_thread_state32_t = Struct___darwin_i386_thread_state;
pub type i386_float_state_t = Struct___darwin_i386_float_state;
pub type x86_float_state32_t = Struct___darwin_i386_float_state;
pub type x86_avx_state32_t = Struct___darwin_i386_avx_state;
pub type i386_exception_state_t = Struct___darwin_i386_exception_state;
pub type x86_exception_state32_t = Struct___darwin_i386_exception_state;
pub type x86_debug_state32_t = Struct___darwin_x86_debug_state32;
pub type x86_thread_state64_t = Struct___darwin_x86_thread_state64;
pub type x86_float_state64_t = Struct___darwin_x86_float_state64;
pub type x86_avx_state64_t = Struct___darwin_x86_avx_state64;
pub type x86_exception_state64_t = Struct___darwin_x86_exception_state64;
pub type x86_debug_state64_t = Struct___darwin_x86_debug_state64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_thread_state {
    pub tsh: x86_state_hdr_t,
    pub uts: Union_Unnamed25,
}
impl ::core::clone::Clone for Struct_x86_thread_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_x86_thread_state {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed25 {
    pub _bindgen_data_: [u64; 21usize],
}
impl Union_Unnamed25 {
    pub unsafe fn ts32(&mut self) -> *mut x86_thread_state32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ts64(&mut self) -> *mut x86_thread_state64_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union_Unnamed25 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union_Unnamed25 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_float_state {
    pub fsh: x86_state_hdr_t,
    pub ufs: Union_Unnamed26,
}
impl ::core::clone::Clone for Struct_x86_float_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_x86_float_state {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed26 {
    pub _bindgen_data_: [u32; 131usize],
}
impl Union_Unnamed26 {
    pub unsafe fn fs32(&mut self) -> *mut x86_float_state32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fs64(&mut self) -> *mut x86_float_state64_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union_Unnamed26 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union_Unnamed26 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_exception_state {
    pub esh: x86_state_hdr_t,
    pub ues: Union_Unnamed27,
}
impl ::core::clone::Clone for Struct_x86_exception_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_x86_exception_state {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed27 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed27 {
    pub unsafe fn es32(&mut self) -> *mut x86_exception_state32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn es64(&mut self) -> *mut x86_exception_state64_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union_Unnamed27 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union_Unnamed27 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_debug_state {
    pub dsh: x86_state_hdr_t,
    pub uds: Union_Unnamed28,
}
impl ::core::clone::Clone for Struct_x86_debug_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_x86_debug_state {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed28 {
    pub _bindgen_data_: [u64; 8usize],
}
impl Union_Unnamed28 {
    pub unsafe fn ds32(&mut self) -> *mut x86_debug_state32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ds64(&mut self) -> *mut x86_debug_state64_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union_Unnamed28 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union_Unnamed28 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_avx_state {
    pub ash: x86_state_hdr_t,
    pub ufs: Union_Unnamed29,
}
impl ::core::clone::Clone for Struct_x86_avx_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_x86_avx_state {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed29 {
    pub _bindgen_data_: [u32; 211usize],
}
impl Union_Unnamed29 {
    pub unsafe fn as32(&mut self) -> *mut x86_avx_state32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as64(&mut self) -> *mut x86_avx_state64_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union_Unnamed29 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union_Unnamed29 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type x86_thread_state_t = Struct_x86_thread_state;
pub type x86_float_state_t = Struct_x86_float_state;
pub type x86_exception_state_t = Struct_x86_exception_state;
pub type x86_debug_state_t = Struct_x86_debug_state;
pub type x86_avx_state_t = Struct_x86_avx_state;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_seg_load_fault32 {
    pub trapno: uint16_t,
    pub cpu: uint16_t,
    pub err: uint32_t,
    pub eip: uint32_t,
    pub cs: uint32_t,
    pub efl: uint32_t,
}
impl ::core::clone::Clone for Struct_x86_seg_load_fault32 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_x86_seg_load_fault32 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 224usize];
pub type thread_state_flavor_t = ::libc::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_type_t = ::libc::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = int64_t;
pub type exception_behavior_t = ::libc::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::libc::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_processor_basic_info {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::libc::c_int,
    pub is_master: boolean_t,
}
impl ::core::clone::Clone for Struct_processor_basic_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_processor_basic_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type processor_basic_info_data_t = Struct_processor_basic_info;
pub type processor_basic_info_t = *mut Struct_processor_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_processor_cpu_load_info {
    pub cpu_ticks: [::libc::c_uint; 4usize],
}
impl ::core::clone::Clone for Struct_processor_cpu_load_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_processor_cpu_load_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type processor_cpu_load_info_data_t = Struct_processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut Struct_processor_cpu_load_info;
pub type processor_set_flavor_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_processor_set_basic_info {
    pub processor_count: ::libc::c_int,
    pub default_policy: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_processor_set_basic_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_processor_set_basic_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type processor_set_basic_info_data_t = Struct_processor_set_basic_info;
pub type processor_set_basic_info_t = *mut Struct_processor_set_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_processor_set_load_info {
    pub task_count: ::libc::c_int,
    pub thread_count: ::libc::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
impl ::core::clone::Clone for Struct_processor_set_load_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_processor_set_load_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type processor_set_load_info_data_t = Struct_processor_set_load_info;
pub type processor_set_load_info_t = *mut Struct_processor_set_load_info;
pub type policy_t = ::libc::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_timeshare_base {
    pub base_priority: integer_t,
}
impl ::core::clone::Clone for Struct_policy_timeshare_base {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_timeshare_base {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_timeshare_limit {
    pub max_priority: integer_t,
}
impl ::core::clone::Clone for Struct_policy_timeshare_limit {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_timeshare_limit {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
impl ::core::clone::Clone for Struct_policy_timeshare_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_timeshare_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type policy_timeshare_base_t = *mut Struct_policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut Struct_policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut Struct_policy_timeshare_info;
pub type policy_timeshare_base_data_t = Struct_policy_timeshare_base;
pub type policy_timeshare_limit_data_t = Struct_policy_timeshare_limit;
pub type policy_timeshare_info_data_t = Struct_policy_timeshare_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
impl ::core::clone::Clone for Struct_policy_rr_base {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_rr_base {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_rr_limit {
    pub max_priority: integer_t,
}
impl ::core::clone::Clone for Struct_policy_rr_limit {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_rr_limit {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
impl ::core::clone::Clone for Struct_policy_rr_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_rr_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type policy_rr_base_t = *mut Struct_policy_rr_base;
pub type policy_rr_limit_t = *mut Struct_policy_rr_limit;
pub type policy_rr_info_t = *mut Struct_policy_rr_info;
pub type policy_rr_base_data_t = Struct_policy_rr_base;
pub type policy_rr_limit_data_t = Struct_policy_rr_limit;
pub type policy_rr_info_data_t = Struct_policy_rr_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_fifo_base {
    pub base_priority: integer_t,
}
impl ::core::clone::Clone for Struct_policy_fifo_base {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_fifo_base {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_fifo_limit {
    pub max_priority: integer_t,
}
impl ::core::clone::Clone for Struct_policy_fifo_limit {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_fifo_limit {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
impl ::core::clone::Clone for Struct_policy_fifo_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_fifo_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type policy_fifo_base_t = *mut Struct_policy_fifo_base;
pub type policy_fifo_limit_t = *mut Struct_policy_fifo_limit;
pub type policy_fifo_info_t = *mut Struct_policy_fifo_info;
pub type policy_fifo_base_data_t = Struct_policy_fifo_base;
pub type policy_fifo_limit_data_t = Struct_policy_fifo_limit;
pub type policy_fifo_info_data_t = Struct_policy_fifo_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
impl ::core::clone::Clone for Struct_policy_bases {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_bases {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
impl ::core::clone::Clone for Struct_policy_limits {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_limits {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
impl ::core::clone::Clone for Struct_policy_infos {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_policy_infos {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type policy_base_data_t = Struct_policy_bases;
pub type policy_limit_data_t = Struct_policy_limits;
pub type policy_info_data_t = Struct_policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
impl ::core::clone::Clone for Struct_task_basic_info_32 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_basic_info_32 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_basic_info_32_data_t = Struct_task_basic_info_32;
pub type task_basic_info_32_t = *mut Struct_task_basic_info_32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
impl ::core::clone::Clone for Struct_task_basic_info_64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_basic_info_64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_basic_info_64_data_t = Struct_task_basic_info_64;
pub type task_basic_info_64_t = *mut Struct_task_basic_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
impl ::core::clone::Clone for Struct_task_basic_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_basic_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_basic_info_data_t = Struct_task_basic_info;
pub type task_basic_info_t = *mut Struct_task_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
impl ::core::clone::Clone for Struct_task_events_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_events_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_events_info_data_t = Struct_task_events_info;
pub type task_events_info_t = *mut Struct_task_events_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
impl ::core::clone::Clone for Struct_task_thread_times_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_thread_times_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_thread_times_info_data_t = Struct_task_thread_times_info;
pub type task_thread_times_info_t = *mut Struct_task_thread_times_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_absolutetime_info {
    pub total_user: uint64_t,
    pub total_system: uint64_t,
    pub threads_user: uint64_t,
    pub threads_system: uint64_t,
}
impl ::core::clone::Clone for Struct_task_absolutetime_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_absolutetime_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_absolutetime_info_data_t = Struct_task_absolutetime_info;
pub type task_absolutetime_info_t = *mut Struct_task_absolutetime_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_kernelmemory_info {
    pub total_palloc: uint64_t,
    pub total_pfree: uint64_t,
    pub total_salloc: uint64_t,
    pub total_sfree: uint64_t,
}
impl ::core::clone::Clone for Struct_task_kernelmemory_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_kernelmemory_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_kernelmemory_info_data_t = Struct_task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut Struct_task_kernelmemory_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
impl ::core::clone::Clone for Struct_task_affinity_tag_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_affinity_tag_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_affinity_tag_info_data_t = Struct_task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut Struct_task_affinity_tag_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
impl ::core::clone::Clone for Struct_task_dyld_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_dyld_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_dyld_info_data_t = Struct_task_dyld_info;
pub type task_dyld_info_t = *mut Struct_task_dyld_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_extmod_info {
    pub task_uuid: [::libc::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
impl ::core::clone::Clone for Struct_task_extmod_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_extmod_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_extmod_info_data_t = Struct_task_extmod_info;
pub type task_extmod_info_t = *mut Struct_task_extmod_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_power_info {
    pub total_user: uint64_t,
    pub total_system: uint64_t,
    pub task_interrupt_wakeups: uint64_t,
    pub task_platform_idle_wakeups: uint64_t,
    pub task_timer_wakeups_bin_1: uint64_t,
    pub task_timer_wakeups_bin_2: uint64_t,
}
impl ::core::clone::Clone for Struct_task_power_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_power_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_power_info_data_t = Struct_task_power_info;
pub type task_power_info_t = *mut Struct_task_power_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
impl ::core::clone::Clone for Struct_mach_task_basic_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_mach_task_basic_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_task_basic_info_data_t = Struct_mach_task_basic_info;
pub type mach_task_basic_info_t = *mut Struct_mach_task_basic_info;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub type Enum_task_role = ::libc::c_int;
pub const TASK_RENICED: ::libc::c_int = -1;
pub const TASK_UNSPECIFIED: ::libc::c_int = 0;
pub const TASK_FOREGROUND_APPLICATION: ::libc::c_int = 1;
pub const TASK_BACKGROUND_APPLICATION: ::libc::c_int = 2;
pub const TASK_CONTROL_APPLICATION: ::libc::c_int = 3;
pub const TASK_GRAPHICS_SERVER: ::libc::c_int = 4;
pub const TASK_THROTTLE_APPLICATION: ::libc::c_int = 5;
pub const TASK_NONUI_APPLICATION: ::libc::c_int = 6;
pub const TASK_DEFAULT_APPLICATION: ::libc::c_int = 7;
pub type task_role_t = Enum_task_role;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_category_policy {
    pub role: task_role_t,
}
impl ::core::clone::Clone for Struct_task_category_policy {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_task_category_policy {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type task_category_policy_data_t = Struct_task_category_policy;
pub type task_category_policy_t = *mut Struct_task_category_policy;
pub type task_special_port_t = ::libc::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
impl ::core::clone::Clone for Struct_thread_basic_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_thread_basic_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type thread_basic_info_data_t = Struct_thread_basic_info;
pub type thread_basic_info_t = *mut Struct_thread_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_identifier_info {
    pub thread_id: uint64_t,
    pub thread_handle: uint64_t,
    pub dispatch_qaddr: uint64_t,
}
impl ::core::clone::Clone for Struct_thread_identifier_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_thread_identifier_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type thread_identifier_info_data_t = Struct_thread_identifier_info;
pub type thread_identifier_info_t = *mut Struct_thread_identifier_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_standard_policy {
    pub no_data: natural_t,
}
impl ::core::clone::Clone for Struct_thread_standard_policy {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_thread_standard_policy {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type thread_standard_policy_data_t = Struct_thread_standard_policy;
pub type thread_standard_policy_t = *mut Struct_thread_standard_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_extended_policy {
    pub timeshare: boolean_t,
}
impl ::core::clone::Clone for Struct_thread_extended_policy {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_thread_extended_policy {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type thread_extended_policy_data_t = Struct_thread_extended_policy;
pub type thread_extended_policy_t = *mut Struct_thread_extended_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_time_constraint_policy {
    pub period: uint32_t,
    pub computation: uint32_t,
    pub constraint: uint32_t,
    pub preemptible: boolean_t,
}
impl ::core::clone::Clone for Struct_thread_time_constraint_policy {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_thread_time_constraint_policy {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type thread_time_constraint_policy_data_t = Struct_thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut Struct_thread_time_constraint_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_precedence_policy {
    pub importance: integer_t,
}
impl ::core::clone::Clone for Struct_thread_precedence_policy {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_thread_precedence_policy {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type thread_precedence_policy_data_t = Struct_thread_precedence_policy;
pub type thread_precedence_policy_t = *mut Struct_thread_precedence_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_affinity_policy {
    pub affinity_tag: integer_t,
}
impl ::core::clone::Clone for Struct_thread_affinity_policy {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_thread_affinity_policy {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type thread_affinity_policy_data_t = Struct_thread_affinity_policy;
pub type thread_affinity_policy_t = *mut Struct_thread_affinity_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_background_policy {
    pub priority: integer_t,
}
impl ::core::clone::Clone for Struct_thread_background_policy {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_thread_background_policy {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type thread_background_policy_data_t = Struct_thread_background_policy;
pub type thread_background_policy_t = *mut Struct_thread_background_policy;
pub type alarm_type_t = ::libc::c_int;
pub type sleep_type_t = ::libc::c_int;
pub type clock_id_t = ::libc::c_int;
pub type clock_flavor_t = ::libc::c_int;
pub type clock_attr_t = *mut ::libc::c_int;
pub type clock_res_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_timespec {
    pub tv_sec: ::libc::c_uint,
    pub tv_nsec: clock_res_t,
}
impl ::core::clone::Clone for Struct_mach_timespec {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_mach_timespec {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_timespec_t = Struct_mach_timespec;
pub type vm_machine_attribute_t = ::libc::c_uint;
pub type vm_machine_attribute_val_t = ::libc::c_int;
pub type vm_inherit_t = ::libc::c_uint;
pub type vm_purgable_t = ::libc::c_int;
pub type vm_behavior_t = ::libc::c_int;
pub type vm32_object_id_t = uint32_t;
pub type vm_region_info_t = *mut ::libc::c_int;
pub type vm_region_info_64_t = *mut ::libc::c_int;
pub type vm_region_recurse_info_t = *mut ::libc::c_int;
pub type vm_region_recurse_info_64_t = *mut ::libc::c_int;
pub type vm_region_flavor_t = ::libc::c_int;
pub type vm_region_info_data_t = [::libc::c_int; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::libc::c_ushort,
}
impl ::core::clone::Clone for Struct_vm_region_basic_info_64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_region_basic_info_64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_region_basic_info_64_t = *mut Struct_vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = Struct_vm_region_basic_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: uint32_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::libc::c_ushort,
}
impl ::core::clone::Clone for Struct_vm_region_basic_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_region_basic_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_region_basic_info_t = *mut Struct_vm_region_basic_info;
pub type vm_region_basic_info_data_t = Struct_vm_region_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::libc::c_uint,
    pub pages_resident: ::libc::c_uint,
    pub pages_shared_now_private: ::libc::c_uint,
    pub pages_swapped_out: ::libc::c_uint,
    pub pages_dirtied: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub shadow_depth: ::libc::c_ushort,
    pub external_pager: ::libc::c_uchar,
    pub share_mode: ::libc::c_uchar,
}
impl ::core::clone::Clone for Struct_vm_region_extended_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_region_extended_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_region_extended_info_t = *mut Struct_vm_region_extended_info;
pub type vm_region_extended_info_data_t = Struct_vm_region_extended_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_top_info {
    pub obj_id: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub private_pages_resident: ::libc::c_uint,
    pub shared_pages_resident: ::libc::c_uint,
    pub share_mode: ::libc::c_uchar,
}
impl ::core::clone::Clone for Struct_vm_region_top_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_region_top_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_region_top_info_t = *mut Struct_vm_region_top_info;
pub type vm_region_top_info_data_t = Struct_vm_region_top_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: uint32_t,
    pub user_tag: ::libc::c_uint,
    pub pages_resident: ::libc::c_uint,
    pub pages_shared_now_private: ::libc::c_uint,
    pub pages_swapped_out: ::libc::c_uint,
    pub pages_dirtied: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub shadow_depth: ::libc::c_ushort,
    pub external_pager: ::libc::c_uchar,
    pub share_mode: ::libc::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::libc::c_ushort,
}
impl ::core::clone::Clone for Struct_vm_region_submap_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_region_submap_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_region_submap_info_t = *mut Struct_vm_region_submap_info;
pub type vm_region_submap_info_data_t = Struct_vm_region_submap_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::libc::c_uint,
    pub pages_resident: ::libc::c_uint,
    pub pages_shared_now_private: ::libc::c_uint,
    pub pages_swapped_out: ::libc::c_uint,
    pub pages_dirtied: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub shadow_depth: ::libc::c_ushort,
    pub external_pager: ::libc::c_uchar,
    pub share_mode: ::libc::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::libc::c_ushort,
}
impl ::core::clone::Clone for Struct_vm_region_submap_info_64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_region_submap_info_64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_region_submap_info_64_t = *mut Struct_vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = Struct_vm_region_submap_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub shadow_depth: ::libc::c_ushort,
    pub external_pager: ::libc::c_uchar,
    pub share_mode: ::libc::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::libc::c_ushort,
}
impl ::core::clone::Clone for Struct_vm_region_submap_short_info_64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_region_submap_short_info_64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_region_submap_short_info_64_t = *mut Struct_vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = Struct_vm_region_submap_short_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
impl ::core::clone::Clone for Struct_mach_vm_read_entry {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_mach_vm_read_entry {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
impl ::core::clone::Clone for Struct_vm_read_entry {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_read_entry {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_vm_read_entry_t = [Struct_mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [Struct_vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::libc::c_int;
pub type vm_page_info_data_t = *mut ::libc::c_int;
pub type vm_page_info_flavor_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_page_info_basic {
    pub disposition: ::libc::c_int,
    pub ref_count: ::libc::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::libc::c_int,
    pub __pad: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_vm_page_info_basic {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_vm_page_info_basic {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type vm_page_info_basic_t = *mut Struct_vm_page_info_basic;
pub type vm_page_info_basic_data_t = Struct_vm_page_info_basic;
pub type kmod_t = ::libc::c_int;
pub type kmod_start_func_t =
    extern "C" fn(ki: *mut Struct_kmod_info, data: *mut ::libc::c_void) -> kern_return_t;
pub type kmod_stop_func_t =
    extern "C" fn(ki: *mut Struct_kmod_info, data: *mut ::libc::c_void) -> kern_return_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kmod_reference {
    pub next: *mut Struct_kmod_reference,
    pub info: *mut Struct_kmod_info,
}
impl ::core::clone::Clone for Struct_kmod_reference {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_kmod_reference {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type kmod_reference_t = Struct_kmod_reference;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kmod_info {
    pub next: *mut Struct_kmod_info,
    pub info_version: int32_t,
    pub id: uint32_t,
    pub name: [::libc::c_char; 64usize],
    pub version: [::libc::c_char; 64usize],
    pub reference_count: int32_t,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: *mut ::core::option::Option<extern "C" fn() -> kern_return_t>,
    pub stop: *mut ::core::option::Option<extern "C" fn() -> kern_return_t>,
}
impl ::core::clone::Clone for Struct_kmod_info {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_kmod_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type kmod_info_t = Struct_kmod_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kmod_info_32_v1 {
    pub next_addr: uint32_t,
    pub info_version: int32_t,
    pub id: uint32_t,
    pub name: [uint8_t; 64usize],
    pub version: [uint8_t; 64usize],
    pub reference_count: int32_t,
    pub reference_list_addr: uint32_t,
    pub address: uint32_t,
    pub size: uint32_t,
    pub hdr_size: uint32_t,
    pub start_addr: uint32_t,
    pub stop_addr: uint32_t,
}
impl ::core::clone::Clone for Struct_kmod_info_32_v1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_kmod_info_32_v1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type kmod_info_32_v1_t = Struct_kmod_info_32_v1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kmod_info_64_v1 {
    pub next_addr: uint64_t,
    pub info_version: int32_t,
    pub id: uint32_t,
    pub name: [uint8_t; 64usize],
    pub version: [uint8_t; 64usize],
    pub reference_count: int32_t,
    pub reference_list_addr: uint64_t,
    pub address: uint64_t,
    pub size: uint64_t,
    pub hdr_size: uint64_t,
    pub start_addr: uint64_t,
    pub stop_addr: uint64_t,
}
impl ::core::clone::Clone for Struct_kmod_info_64_v1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_kmod_info_64_v1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type kmod_info_64_v1_t = Struct_kmod_info_64_v1;
pub type kmod_args_t = *mut ::libc::c_void;
pub type kmod_control_flavor_t = ::libc::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_master_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = int64_t;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::libc::c_char;
pub type labelstr_t = *mut ::libc::c_char;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed30 {
    pub mig_vers: ::libc::c_uchar,
    pub if_vers: ::libc::c_uchar,
    pub reserved1: ::libc::c_uchar,
    pub mig_encoding: ::libc::c_uchar,
    pub int_rep: ::libc::c_uchar,
    pub char_rep: ::libc::c_uchar,
    pub float_rep: ::libc::c_uchar,
    pub reserved2: ::libc::c_uchar,
}
impl ::core::clone::Clone for Struct_Unnamed30 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed30 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type NDR_record_t = Struct_Unnamed30;
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed31 {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::core::clone::Clone for Struct_Unnamed31 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed31 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_port_deleted_notification_t = Struct_Unnamed31;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed32 {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::core::clone::Clone for Struct_Unnamed32 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed32 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_send_possible_notification_t = Struct_Unnamed32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed33 {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::core::clone::Clone for Struct_Unnamed33 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed33 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_port_destroyed_notification_t = Struct_Unnamed33;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed34 {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::core::clone::Clone for Struct_Unnamed34 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed34 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_no_senders_notification_t = Struct_Unnamed34;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed35 {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::core::clone::Clone for Struct_Unnamed35 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed35 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_send_once_notification_t = Struct_Unnamed35;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed36 {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::core::clone::Clone for Struct_Unnamed36 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed36 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mach_dead_name_notification_t = Struct_Unnamed36;
pub type mig_stub_routine_t = ::core::option::Option<
    extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t) -> (),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::core::option::Option<extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::core::option::Option<extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::libc::c_uint,
    pub descr_count: ::libc::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::libc::c_uint,
}
impl ::core::clone::Clone for Struct_routine_descriptor {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_routine_descriptor {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type routine_descriptor_t = *mut Struct_routine_descriptor;
pub type mig_routine_descriptor = Struct_routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
impl ::core::clone::Clone for Struct_mig_subsystem {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_mig_subsystem {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mig_subsystem_t = *mut Struct_mig_subsystem;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mig_symtab {
    pub ms_routine_name: *mut ::libc::c_char,
    pub ms_routine_number: ::libc::c_int,
    pub ms_routine: ::core::option::Option<extern "C" fn() -> ()>,
}
impl ::core::clone::Clone for Struct_mig_symtab {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_mig_symtab {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mig_symtab_t = Struct_mig_symtab;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed37 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed37 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed37 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type mig_reply_error_t = Struct_Unnamed37;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed38 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
impl ::core::clone::Clone for Struct_Unnamed38 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed38 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__clock_set_time_t = Struct_Unnamed38;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed39 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::libc::c_int; 1usize],
}
impl ::core::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed39 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__clock_set_attributes_t = Struct_Unnamed39;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__clock_priv_subsystem {
    pub _bindgen_data_: [u32; 11usize],
}
impl Union___RequestUnion__clock_priv_subsystem {
    pub unsafe fn Request_clock_set_time(&mut self) -> *mut __Request__clock_set_time_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_clock_set_attributes(
        &mut self,
    ) -> *mut __Request__clock_set_attributes_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union___RequestUnion__clock_priv_subsystem {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union___RequestUnion__clock_priv_subsystem {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed40 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed40 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed40 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__clock_set_time_t = Struct_Unnamed40;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed41 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed41 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed41 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__clock_set_attributes_t = Struct_Unnamed41;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__clock_priv_subsystem {
    pub _bindgen_data_: [u32; 9usize],
}
impl Union___ReplyUnion__clock_priv_subsystem {
    pub unsafe fn Reply_clock_set_time(&mut self) -> *mut __Reply__clock_set_time_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_clock_set_attributes(&mut self) -> *mut __Reply__clock_set_attributes_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union___ReplyUnion__clock_priv_subsystem {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union___ReplyUnion__clock_priv_subsystem {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed42 {
    pub Head: mach_msg_header_t,
}
impl ::core::clone::Clone for Struct_Unnamed42 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed42 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_get_boot_info_t = Struct_Unnamed42;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed43 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed43 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed43 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_reboot_t = Struct_Unnamed43;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed44 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
impl ::core::clone::Clone for Struct_Unnamed44 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed44 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_priv_statistics_t = Struct_Unnamed44;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed45 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
impl ::core::clone::Clone for Struct_Unnamed45 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed45 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_default_memory_manager_t = Struct_Unnamed45;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed46 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
impl ::core::clone::Clone for Struct_Unnamed46 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed46 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__vm_wire_t = Struct_Unnamed46;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed47 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
impl ::core::clone::Clone for Struct_Unnamed47 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed47 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__thread_wire_t = Struct_Unnamed47;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed48 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed48 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed48 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__vm_allocate_cpm_t = Struct_Unnamed48;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed49 {
    pub Head: mach_msg_header_t,
}
impl ::core::clone::Clone for Struct_Unnamed49 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed49 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_processors_t = Struct_Unnamed49;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed50 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
impl ::core::clone::Clone for Struct_Unnamed50 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed50 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_get_clock_control_t = Struct_Unnamed50;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed51 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
impl ::core::clone::Clone for Struct_Unnamed51 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed51 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__kmod_create_t = Struct_Unnamed51;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed52 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
impl ::core::clone::Clone for Struct_Unnamed52 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed52 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__kmod_destroy_t = Struct_Unnamed52;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed53 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl ::core::clone::Clone for Struct_Unnamed53 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed53 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__kmod_control_t = Struct_Unnamed53;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed54 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::libc::c_int,
    pub which: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed54 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed54 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_get_special_port_t = Struct_Unnamed54;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed55 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed55 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed55 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_set_special_port_t = Struct_Unnamed55;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed56 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl ::core::clone::Clone for Struct_Unnamed56 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed56 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_set_exception_ports_t = Struct_Unnamed56;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed57 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
impl ::core::clone::Clone for Struct_Unnamed57 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed57 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_get_exception_ports_t = Struct_Unnamed57;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed58 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl ::core::clone::Clone for Struct_Unnamed58 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed58 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_swap_exception_ports_t = Struct_Unnamed58;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed59 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
impl ::core::clone::Clone for Struct_Unnamed59 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed59 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__mach_vm_wire_t = Struct_Unnamed59;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed60 {
    pub Head: mach_msg_header_t,
}
impl ::core::clone::Clone for Struct_Unnamed60 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed60 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_processor_sets_t = Struct_Unnamed60;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed61 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed61 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed61 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_processor_set_priv_t = Struct_Unnamed61;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed62 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub control_port: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed62 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed62 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__set_dp_control_port_t = Struct_Unnamed62;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed63 {
    pub Head: mach_msg_header_t,
}
impl ::core::clone::Clone for Struct_Unnamed63 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed63 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__get_dp_control_port_t = Struct_Unnamed63;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed64 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed64 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_set_UNDServer_t = Struct_Unnamed64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed65 {
    pub Head: mach_msg_header_t,
}
impl ::core::clone::Clone for Struct_Unnamed65 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed65 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_get_UNDServer_t = Struct_Unnamed65;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed66 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: uint32_t,
    pub request_dataCnt: mach_msg_type_number_t,
}
impl ::core::clone::Clone for Struct_Unnamed66 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed66 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__kext_request_t = Struct_Unnamed66;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__host_priv_subsystem {
    pub _bindgen_data_: [u32; 17usize],
}
impl Union___RequestUnion__host_priv_subsystem {
    pub unsafe fn Request_host_get_boot_info(&mut self) -> *mut __Request__host_get_boot_info_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_reboot(&mut self) -> *mut __Request__host_reboot_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_priv_statistics(
        &mut self,
    ) -> *mut __Request__host_priv_statistics_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_default_memory_manager(
        &mut self,
    ) -> *mut __Request__host_default_memory_manager_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_wire(&mut self) -> *mut __Request__vm_wire_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_wire(&mut self) -> *mut __Request__thread_wire_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_allocate_cpm(&mut self) -> *mut __Request__vm_allocate_cpm_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_processors(&mut self) -> *mut __Request__host_processors_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_clock_control(
        &mut self,
    ) -> *mut __Request__host_get_clock_control_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_kmod_create(&mut self) -> *mut __Request__kmod_create_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_kmod_destroy(&mut self) -> *mut __Request__kmod_destroy_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_kmod_control(&mut self) -> *mut __Request__kmod_control_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_special_port(
        &mut self,
    ) -> *mut __Request__host_get_special_port_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_set_special_port(
        &mut self,
    ) -> *mut __Request__host_set_special_port_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_set_exception_ports(
        &mut self,
    ) -> *mut __Request__host_set_exception_ports_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_exception_ports(
        &mut self,
    ) -> *mut __Request__host_get_exception_ports_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_swap_exception_ports(
        &mut self,
    ) -> *mut __Request__host_swap_exception_ports_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_vm_wire(&mut self) -> *mut __Request__mach_vm_wire_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_processor_sets(&mut self) -> *mut __Request__host_processor_sets_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_processor_set_priv(
        &mut self,
    ) -> *mut __Request__host_processor_set_priv_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_set_dp_control_port(&mut self) -> *mut __Request__set_dp_control_port_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_get_dp_control_port(&mut self) -> *mut __Request__get_dp_control_port_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_set_UNDServer(&mut self) -> *mut __Request__host_set_UNDServer_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_UNDServer(&mut self) -> *mut __Request__host_get_UNDServer_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_kext_request(&mut self) -> *mut __Request__kext_request_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union___RequestUnion__host_priv_subsystem {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union___RequestUnion__host_priv_subsystem {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed67 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::libc::c_char; 4096usize],
}
impl ::core::clone::Clone for Struct_Unnamed67 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed67 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_get_boot_info_t = Struct_Unnamed67;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed68 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed68 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed68 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_reboot_t = Struct_Unnamed68;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed69 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 18usize],
}
impl ::core::clone::Clone for Struct_Unnamed69 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed69 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_priv_statistics_t = Struct_Unnamed69;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed70 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed70 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed70 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_default_memory_manager_t = Struct_Unnamed70;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed71 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed71 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed71 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__vm_wire_t = Struct_Unnamed71;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed72 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed72 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed72 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__thread_wire_t = Struct_Unnamed72;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed73 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
impl ::core::clone::Clone for Struct_Unnamed73 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed73 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__vm_allocate_cpm_t = Struct_Unnamed73;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed74 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
impl ::core::clone::Clone for Struct_Unnamed74 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed74 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_processors_t = Struct_Unnamed74;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed75 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed75 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed75 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_get_clock_control_t = Struct_Unnamed75;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed76 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
impl ::core::clone::Clone for Struct_Unnamed76 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed76 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__kmod_create_t = Struct_Unnamed76;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed77 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed77 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed77 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__kmod_destroy_t = Struct_Unnamed77;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed78 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl ::core::clone::Clone for Struct_Unnamed78 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed78 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__kmod_control_t = Struct_Unnamed78;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed79 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed79 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed79 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_get_special_port_t = Struct_Unnamed79;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed80 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed80 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed80 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_set_special_port_t = Struct_Unnamed80;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed81 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed81 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed81 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_set_exception_ports_t = Struct_Unnamed81;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed82 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl ::core::clone::Clone for Struct_Unnamed82 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed82 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_get_exception_ports_t = Struct_Unnamed82;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed83 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl ::core::clone::Clone for Struct_Unnamed83 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed83 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_swap_exception_ports_t = Struct_Unnamed83;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed84 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed84 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed84 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__mach_vm_wire_t = Struct_Unnamed84;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed85 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
impl ::core::clone::Clone for Struct_Unnamed85 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed85 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_processor_sets_t = Struct_Unnamed85;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed86 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed86 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed86 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_processor_set_priv_t = Struct_Unnamed86;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed87 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed87 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed87 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__set_dp_control_port_t = Struct_Unnamed87;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed88 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub contorl_port: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed88 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed88 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__get_dp_control_port_t = Struct_Unnamed88;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed89 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed89 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed89 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_set_UNDServer_t = Struct_Unnamed89;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed90 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed90 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed90 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_get_UNDServer_t = Struct_Unnamed90;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed91 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed91 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed91 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__kext_request_t = Struct_Unnamed91;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__host_priv_subsystem {
    pub _bindgen_data_: [u32; 1035usize],
}
impl Union___ReplyUnion__host_priv_subsystem {
    pub unsafe fn Reply_host_get_boot_info(&mut self) -> *mut __Reply__host_get_boot_info_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_reboot(&mut self) -> *mut __Reply__host_reboot_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_priv_statistics(&mut self) -> *mut __Reply__host_priv_statistics_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_default_memory_manager(
        &mut self,
    ) -> *mut __Reply__host_default_memory_manager_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_wire(&mut self) -> *mut __Reply__vm_wire_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_wire(&mut self) -> *mut __Reply__thread_wire_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_allocate_cpm(&mut self) -> *mut __Reply__vm_allocate_cpm_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_processors(&mut self) -> *mut __Reply__host_processors_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_clock_control(
        &mut self,
    ) -> *mut __Reply__host_get_clock_control_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_kmod_create(&mut self) -> *mut __Reply__kmod_create_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_kmod_destroy(&mut self) -> *mut __Reply__kmod_destroy_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_kmod_control(&mut self) -> *mut __Reply__kmod_control_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_special_port(&mut self) -> *mut __Reply__host_get_special_port_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_set_special_port(&mut self) -> *mut __Reply__host_set_special_port_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_set_exception_ports(
        &mut self,
    ) -> *mut __Reply__host_set_exception_ports_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_exception_ports(
        &mut self,
    ) -> *mut __Reply__host_get_exception_ports_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_swap_exception_ports(
        &mut self,
    ) -> *mut __Reply__host_swap_exception_ports_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_vm_wire(&mut self) -> *mut __Reply__mach_vm_wire_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_processor_sets(&mut self) -> *mut __Reply__host_processor_sets_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_processor_set_priv(
        &mut self,
    ) -> *mut __Reply__host_processor_set_priv_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_set_dp_control_port(&mut self) -> *mut __Reply__set_dp_control_port_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_get_dp_control_port(&mut self) -> *mut __Reply__get_dp_control_port_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_set_UNDServer(&mut self) -> *mut __Reply__host_set_UNDServer_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_UNDServer(&mut self) -> *mut __Reply__host_get_UNDServer_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_kext_request(&mut self) -> *mut __Reply__kext_request_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union___ReplyUnion__host_priv_subsystem {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union___ReplyUnion__host_priv_subsystem {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed92 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
impl ::core::clone::Clone for Struct_Unnamed92 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed92 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_security_create_task_token_t = Struct_Unnamed92;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed93 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
impl ::core::clone::Clone for Struct_Unnamed93 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed93 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__host_security_set_task_token_t = Struct_Unnamed93;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__host_security_subsystem {
    pub _bindgen_data_: [u32; 31usize],
}
impl Union___RequestUnion__host_security_subsystem {
    pub unsafe fn Request_host_security_create_task_token(
        &mut self,
    ) -> *mut __Request__host_security_create_task_token_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_security_set_task_token(
        &mut self,
    ) -> *mut __Request__host_security_set_task_token_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union___RequestUnion__host_security_subsystem {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union___RequestUnion__host_security_subsystem {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed94 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
impl ::core::clone::Clone for Struct_Unnamed94 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed94 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_security_create_task_token_t = Struct_Unnamed94;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed95 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed95 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed95 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__host_security_set_task_token_t = Struct_Unnamed95;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__host_security_subsystem {
    pub _bindgen_data_: [u32; 10usize],
}
impl Union___ReplyUnion__host_security_subsystem {
    pub unsafe fn Reply_host_security_create_task_token(
        &mut self,
    ) -> *mut __Reply__host_security_create_task_token_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_security_set_task_token(
        &mut self,
    ) -> *mut __Reply__host_security_set_task_token_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union___ReplyUnion__host_security_subsystem {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union___ReplyUnion__host_security_subsystem {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed96 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed96 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed96 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__lock_acquire_t = Struct_Unnamed96;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed97 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed97 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed97 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__lock_release_t = Struct_Unnamed97;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed98 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed98 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed98 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__lock_try_t = Struct_Unnamed98;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed99 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed99 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed99 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__lock_make_stable_t = Struct_Unnamed99;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed100 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed100 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed100 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__lock_handoff_t = Struct_Unnamed100;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed101 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl ::core::clone::Clone for Struct_Unnamed101 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed101 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Request__lock_handoff_accept_t = Struct_Unnamed101;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__lock_set_subsystem {
    pub _bindgen_data_: [u32; 9usize],
}
impl Union___RequestUnion__lock_set_subsystem {
    pub unsafe fn Request_lock_acquire(&mut self) -> *mut __Request__lock_acquire_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_release(&mut self) -> *mut __Request__lock_release_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_try(&mut self) -> *mut __Request__lock_try_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_make_stable(&mut self) -> *mut __Request__lock_make_stable_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_handoff(&mut self) -> *mut __Request__lock_handoff_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_handoff_accept(&mut self) -> *mut __Request__lock_handoff_accept_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union___RequestUnion__lock_set_subsystem {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Union___RequestUnion__lock_set_subsystem {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed102 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed102 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed102 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__lock_acquire_t = Struct_Unnamed102;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed103 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed103 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed103 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__lock_release_t = Struct_Unnamed103;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed104 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed104 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed104 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__lock_try_t = Struct_Unnamed104;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed105 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed105 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed105 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__lock_make_stable_t = Struct_Unnamed105;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed106 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed106 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed106 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__lock_handoff_t = Struct_Unnamed106;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed107 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::core::clone::Clone for Struct_Unnamed107 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Struct_Unnamed107 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __Reply__lock_handoff_accept_t = Struct_Unnamed107;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__lock_set_subsystem {
    pub _bindgen_data_: [u32; 9usize],
}
impl Union___ReplyUnion__lock_set_subsystem {
    pub unsafe fn Reply_lock_acquire(&mut self) -> *mut __Reply__lock_acquire_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_release(&mut self) -> *mut __Reply__lock_release_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_try(&mut self) -> *mut __Reply__lock_try_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_make_stable(&mut self) -> *mut __Reply__lock_make_stable_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_handoff(&mut self) -> *mut __Reply__lock_handoff_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_handoff_accept(&mut self) -> *mut __Reply__lock_handoff_accept_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for Union___ReplyUnion__lock_set_subsystem {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Defaul