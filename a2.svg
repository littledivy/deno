<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1205.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="3354"><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (26 samples, 0.78%)</title><rect x="0.0000%" y="773" width="0.7752%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="26"/><text x="0.2500%" y="783.50"></text></g><g><title>deno`v8::String::WriteOneByte (26 samples, 0.78%)</title><rect x="0.0000%" y="757" width="0.7752%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="26"/><text x="0.2500%" y="767.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (26 samples, 0.78%)</title><rect x="0.0000%" y="741" width="0.7752%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="26"/><text x="0.2500%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.78%)</title><rect x="0.0000%" y="725" width="0.7752%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="26"/><text x="0.2500%" y="735.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (1 samples, 0.03%)</title><rect x="0.7752%" y="645" width="0.0298%" height="15" fill="rgb(208,68,35)" fg:x="26" fg:w="1"/><text x="1.0252%" y="655.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (1 samples, 0.03%)</title><rect x="0.7752%" y="629" width="0.0298%" height="15" fill="rgb(232,128,0)" fg:x="26" fg:w="1"/><text x="1.0252%" y="639.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (1 samples, 0.03%)</title><rect x="0.7752%" y="613" width="0.0298%" height="15" fill="rgb(207,160,47)" fg:x="26" fg:w="1"/><text x="1.0252%" y="623.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (1 samples, 0.03%)</title><rect x="0.7752%" y="597" width="0.0298%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="1"/><text x="1.0252%" y="607.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.03%)</title><rect x="0.7752%" y="581" width="0.0298%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="1"/><text x="1.0252%" y="591.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.03%)</title><rect x="0.7752%" y="565" width="0.0298%" height="15" fill="rgb(220,122,19)" fg:x="26" fg:w="1"/><text x="1.0252%" y="575.50"></text></g><g><title>libsystem_c.dylib`__dtoa (1 samples, 0.03%)</title><rect x="0.7752%" y="549" width="0.0298%" height="15" fill="rgb(250,228,42)" fg:x="26" fg:w="1"/><text x="1.0252%" y="559.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionEpilogue (1 samples, 0.03%)</title><rect x="0.8050%" y="645" width="0.0298%" height="15" fill="rgb(240,193,28)" fg:x="27" fg:w="1"/><text x="1.0550%" y="655.50"></text></g><g><title>deno`v8::internal::LargeObjectSpace::Size (1 samples, 0.03%)</title><rect x="0.8050%" y="629" width="0.0298%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="1"/><text x="1.0550%" y="639.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionEpilogueInSafepoint (2 samples, 0.06%)</title><rect x="0.8348%" y="629" width="0.0596%" height="15" fill="rgb(206,188,39)" fg:x="28" fg:w="2"/><text x="1.0848%" y="639.50"></text></g><g><title>deno`v8::platform::DefaultJobState::NotifyConcurrencyIncrease (2 samples, 0.06%)</title><rect x="0.8348%" y="613" width="0.0596%" height="15" fill="rgb(217,207,13)" fg:x="28" fg:w="2"/><text x="1.0848%" y="623.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::PostTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (2 samples, 0.06%)</title><rect x="0.8348%" y="597" width="0.0596%" height="15" fill="rgb(231,73,38)" fg:x="28" fg:w="2"/><text x="1.0848%" y="607.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::Append(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (2 samples, 0.06%)</title><rect x="0.8348%" y="581" width="0.0596%" height="15" fill="rgb(225,20,46)" fg:x="28" fg:w="2"/><text x="1.0848%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.06%)</title><rect x="0.8348%" y="565" width="0.0596%" height="15" fill="rgb(210,31,41)" fg:x="28" fg:w="2"/><text x="1.0848%" y="575.50"></text></g><g><title>deno`v8::internal::Scavenger::Finalize (1 samples, 0.03%)</title><rect x="0.8945%" y="613" width="0.0298%" height="15" fill="rgb(221,200,47)" fg:x="30" fg:w="1"/><text x="1.1445%" y="623.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (7 samples, 0.21%)</title><rect x="0.9541%" y="581" width="0.2087%" height="15" fill="rgb(226,26,5)" fg:x="32" fg:w="7"/><text x="1.2041%" y="591.50"></text></g><g><title>deno`v8::internal::Isolate::Iterate (1 samples, 0.03%)</title><rect x="1.1628%" y="581" width="0.0298%" height="15" fill="rgb(249,33,26)" fg:x="39" fg:w="1"/><text x="1.4128%" y="591.50"></text></g><g><title>deno`v8::internal::StackFrame::LookupCodeT (1 samples, 0.03%)</title><rect x="1.1628%" y="565" width="0.0298%" height="15" fill="rgb(235,183,28)" fg:x="39" fg:w="1"/><text x="1.4128%" y="575.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (9 samples, 0.27%)</title><rect x="1.1926%" y="581" width="0.2683%" height="15" fill="rgb(221,5,38)" fg:x="40" fg:w="9"/><text x="1.4426%" y="591.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (18 samples, 0.54%)</title><rect x="0.9541%" y="597" width="0.5367%" height="15" fill="rgb(247,18,42)" fg:x="32" fg:w="18"/><text x="1.2041%" y="607.50"></text></g><g><title>deno`v8::internal::StackFrame::IteratePc (1 samples, 0.03%)</title><rect x="1.4609%" y="581" width="0.0298%" height="15" fill="rgb(241,131,45)" fg:x="49" fg:w="1"/><text x="1.7109%" y="591.50"></text></g><g><title>deno`v8::internal::Scavenger::~Scavenger (1 samples, 0.03%)</title><rect x="1.4908%" y="597" width="0.0298%" height="15" fill="rgb(249,31,29)" fg:x="50" fg:w="1"/><text x="1.7408%" y="607.50"></text></g><g><title>deno`v8::internal::PagedSpace::~PagedSpace (1 samples, 0.03%)</title><rect x="1.4908%" y="581" width="0.0298%" height="15" fill="rgb(225,111,53)" fg:x="50" fg:w="1"/><text x="1.7408%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="1.4908%" y="565" width="0.0298%" height="15" fill="rgb(238,160,17)" fg:x="50" fg:w="1"/><text x="1.7408%" y="575.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (22 samples, 0.66%)</title><rect x="0.9243%" y="613" width="0.6559%" height="15" fill="rgb(214,148,48)" fg:x="31" fg:w="22"/><text x="1.1743%" y="623.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.06%)</title><rect x="1.5206%" y="597" width="0.0596%" height="15" fill="rgb(232,36,49)" fg:x="51" fg:w="2"/><text x="1.7706%" y="607.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (2 samples, 0.06%)</title><rect x="1.5206%" y="581" width="0.0596%" height="15" fill="rgb(209,103,24)" fg:x="51" fg:w="2"/><text x="1.7706%" y="591.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (2 samples, 0.06%)</title><rect x="1.5206%" y="565" width="0.0596%" height="15" fill="rgb(229,88,8)" fg:x="51" fg:w="2"/><text x="1.7706%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.06%)</title><rect x="1.5206%" y="549" width="0.0596%" height="15" fill="rgb(213,181,19)" fg:x="51" fg:w="2"/><text x="1.7706%" y="559.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (24 samples, 0.72%)</title><rect x="0.8945%" y="629" width="0.7156%" height="15" fill="rgb(254,191,54)" fg:x="30" fg:w="24"/><text x="1.1445%" y="639.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="1.5802%" y="613" width="0.0298%" height="15" fill="rgb(241,83,37)" fg:x="53" fg:w="1"/><text x="1.8302%" y="623.50"></text></g><g><title>deno`v8::internal::Relocatable::PostGarbageCollectionProcessing (1 samples, 0.03%)</title><rect x="1.6100%" y="629" width="0.0298%" height="15" fill="rgb(233,36,39)" fg:x="54" fg:w="1"/><text x="1.8600%" y="639.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedPageFromPool (5 samples, 0.15%)</title><rect x="1.6398%" y="581" width="0.1491%" height="15" fill="rgb(226,3,54)" fg:x="55" fg:w="5"/><text x="1.8898%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (5 samples, 0.15%)</title><rect x="1.6398%" y="565" width="0.1491%" height="15" fill="rgb(245,192,40)" fg:x="55" fg:w="5"/><text x="1.8898%" y="575.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (35 samples, 1.04%)</title><rect x="0.8348%" y="645" width="1.0435%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="35"/><text x="1.0848%" y="655.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::Prologue (8 samples, 0.24%)</title><rect x="1.6398%" y="629" width="0.2385%" height="15" fill="rgb(232,182,51)" fg:x="55" fg:w="8"/><text x="1.8898%" y="639.50"></text></g><g><title>deno`v8::internal::SemiSpace::Commit (8 samples, 0.24%)</title><rect x="1.6398%" y="613" width="0.2385%" height="15" fill="rgb(231,60,39)" fg:x="55" fg:w="8"/><text x="1.8898%" y="623.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (8 samples, 0.24%)</title><rect x="1.6398%" y="597" width="0.2385%" height="15" fill="rgb(208,69,12)" fg:x="55" fg:w="8"/><text x="1.8898%" y="607.50"></text></g><g><title>deno`v8::internal::Page::Page (3 samples, 0.09%)</title><rect x="1.7889%" y="581" width="0.0894%" height="15" fill="rgb(235,93,37)" fg:x="60" fg:w="3"/><text x="2.0389%" y="591.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (3 samples, 0.09%)</title><rect x="1.7889%" y="565" width="0.0894%" height="15" fill="rgb(213,116,39)" fg:x="60" fg:w="3"/><text x="2.0389%" y="575.50"></text></g><g><title>deno`v8::internal::BasicMemoryChunk::BasicMemoryChunk (3 samples, 0.09%)</title><rect x="1.7889%" y="549" width="0.0894%" height="15" fill="rgb(222,207,29)" fg:x="60" fg:w="3"/><text x="2.0389%" y="559.50"></text></g><g><title>deno`v8::internal::Histogram::AddSample (1 samples, 0.03%)</title><rect x="1.8784%" y="645" width="0.0298%" height="15" fill="rgb(206,96,30)" fg:x="63" fg:w="1"/><text x="2.1284%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (41 samples, 1.22%)</title><rect x="0.7752%" y="661" width="1.2224%" height="15" fill="rgb(218,138,4)" fg:x="26" fg:w="41"/><text x="1.0252%" y="671.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.09%)</title><rect x="1.9082%" y="645" width="0.0894%" height="15" fill="rgb(250,191,14)" fg:x="64" fg:w="3"/><text x="2.1582%" y="655.50"></text></g><g><title>deno`v8::internal::LargePage::LargePage (3 samples, 0.09%)</title><rect x="1.9976%" y="629" width="0.0894%" height="15" fill="rgb(239,60,40)" fg:x="67" fg:w="3"/><text x="2.2476%" y="639.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (3 samples, 0.09%)</title><rect x="1.9976%" y="613" width="0.0894%" height="15" fill="rgb(206,27,48)" fg:x="67" fg:w="3"/><text x="2.2476%" y="623.50"></text></g><g><title>deno`v8::internal::BasicMemoryChunk::BasicMemoryChunk (3 samples, 0.09%)</title><rect x="1.9976%" y="597" width="0.0894%" height="15" fill="rgb(225,35,8)" fg:x="67" fg:w="3"/><text x="2.2476%" y="607.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewStringFromOneByte(v8::base::Vector (45 samples, 1.34%)</title><rect x="0.7752%" y="741" width="1.3417%" height="15" fill="rgb(250,213,24)" fg:x="26" fg:w="45"/><text x="1.0252%" y="751.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (45 samples, 1.34%)</title><rect x="0.7752%" y="725" width="1.3417%" height="15" fill="rgb(247,123,22)" fg:x="26" fg:w="45"/><text x="1.0252%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (45 samples, 1.34%)</title><rect x="0.7752%" y="709" width="1.3417%" height="15" fill="rgb(231,138,38)" fg:x="26" fg:w="45"/><text x="1.0252%" y="719.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (45 samples, 1.34%)</title><rect x="0.7752%" y="693" width="1.3417%" height="15" fill="rgb(231,145,46)" fg:x="26" fg:w="45"/><text x="1.0252%" y="703.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (45 samples, 1.34%)</title><rect x="0.7752%" y="677" width="1.3417%" height="15" fill="rgb(251,118,11)" fg:x="26" fg:w="45"/><text x="1.0252%" y="687.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::AllocateRaw (4 samples, 0.12%)</title><rect x="1.9976%" y="661" width="0.1193%" height="15" fill="rgb(217,147,25)" fg:x="67" fg:w="4"/><text x="2.2476%" y="671.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (4 samples, 0.12%)</title><rect x="1.9976%" y="645" width="0.1193%" height="15" fill="rgb(247,81,37)" fg:x="67" fg:w="4"/><text x="2.2476%" y="655.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (1 samples, 0.03%)</title><rect x="2.0871%" y="629" width="0.0298%" height="15" fill="rgb(209,12,38)" fg:x="70" fg:w="1"/><text x="2.3371%" y="639.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (1 samples, 0.03%)</title><rect x="2.0871%" y="613" width="0.0298%" height="15" fill="rgb(227,1,9)" fg:x="70" fg:w="1"/><text x="2.3371%" y="623.50"></text></g><g><title>deno`v8::internal::VirtualMemory::VirtualMemory (1 samples, 0.03%)</title><rect x="2.0871%" y="597" width="0.0298%" height="15" fill="rgb(248,47,43)" fg:x="70" fg:w="1"/><text x="2.3371%" y="607.50"></text></g><g><title>deno`v8::base::BoundedPageAllocator::AllocatePages (1 samples, 0.03%)</title><rect x="2.0871%" y="581" width="0.0298%" height="15" fill="rgb(221,10,30)" fg:x="70" fg:w="1"/><text x="2.3371%" y="591.50"></text></g><g><title>deno`v8::base::RegionAllocator::AllocateRegion (1 samples, 0.03%)</title><rect x="2.0871%" y="565" width="0.0298%" height="15" fill="rgb(210,229,1)" fg:x="70" fg:w="1"/><text x="2.3371%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="2.0871%" y="549" width="0.0298%" height="15" fill="rgb(222,148,37)" fg:x="70" fg:w="1"/><text x="2.3371%" y="559.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (105 samples, 3.13%)</title><rect x="0.7752%" y="773" width="3.1306%" height="15" fill="rgb(234,67,33)" fg:x="26" fg:w="105"/><text x="1.0252%" y="783.50">den..</text></g><g><title>deno`v8::String::NewFromOneByte (105 samples, 3.13%)</title><rect x="0.7752%" y="757" width="3.1306%" height="15" fill="rgb(247,98,35)" fg:x="26" fg:w="105"/><text x="1.0252%" y="767.50">den..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (60 samples, 1.79%)</title><rect x="2.1169%" y="741" width="1.7889%" height="15" fill="rgb(247,138,52)" fg:x="71" fg:w="60"/><text x="2.3669%" y="751.50">l..</text></g><g><title>deno`__rust_alloc (1 samples, 0.03%)</title><rect x="3.9058%" y="773" width="0.0298%" height="15" fill="rgb(213,79,30)" fg:x="131" fg:w="1"/><text x="4.1558%" y="783.50"></text></g><g><title>0x11004b410 (915 samples, 27.28%)</title><rect x="0.0000%" y="853" width="27.2809%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="915"/><text x="0.2500%" y="863.50">0x11004b410</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (915 samples, 27.28%)</title><rect x="0.0000%" y="837" width="27.2809%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="915"/><text x="0.2500%" y="847.50">deno`Builtins_CEntry_Return1_DontSaveFPRegs_..</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (915 samples, 27.28%)</title><rect x="0.0000%" y="821" width="27.2809%" height="15" fill="rgb(216,154,8)" fg:x="0" fg:w="915"/><text x="0.2500%" y="831.50">deno`v8::internal::Builtin_HandleApiCall</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (915 samples, 27.28%)</title><rect x="0.0000%" y="805" width="27.2809%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="915"/><text x="0.2500%" y="815.50">deno`v8::internal::MaybeHandle&lt;v8::internal:..</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (915 samples, 27.28%)</title><rect x="0.0000%" y="789" width="27.2809%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="915"/><text x="0.2500%" y="799.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support:..</text></g><g><title>deno`deno_web::forgiving_base64_decode (783 samples, 23.35%)</title><rect x="3.9356%" y="773" width="23.3453%" height="15" fill="rgb(240,54,50)" fg:x="132" fg:w="783"/><text x="4.1856%" y="783.50">deno`deno_web::forgiving_base64_decode</text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (40 samples, 1.19%)</title><rect x="27.3107%" y="805" width="1.1926%" height="15" fill="rgb(233,84,52)" fg:x="916" fg:w="40"/><text x="27.5607%" y="815.50"></text></g><g><title>deno`v8::String::WriteOneByte (40 samples, 1.19%)</title><rect x="27.3107%" y="789" width="1.1926%" height="15" fill="rgb(207,117,47)" fg:x="916" fg:w="40"/><text x="27.5607%" y="799.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (40 samples, 1.19%)</title><rect x="27.3107%" y="773" width="1.1926%" height="15" fill="rgb(249,43,39)" fg:x="916" fg:w="40"/><text x="27.5607%" y="783.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 1.19%)</title><rect x="27.3107%" y="757" width="1.1926%" height="15" fill="rgb(209,38,44)" fg:x="916" fg:w="40"/><text x="27.5607%" y="767.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (1 samples, 0.03%)</title><rect x="28.5033%" y="677" width="0.0298%" height="15" fill="rgb(236,212,23)" fg:x="956" fg:w="1"/><text x="28.7533%" y="687.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (1 samples, 0.03%)</title><rect x="28.5033%" y="661" width="0.0298%" height="15" fill="rgb(242,79,21)" fg:x="956" fg:w="1"/><text x="28.7533%" y="671.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (1 samples, 0.03%)</title><rect x="28.5033%" y="645" width="0.0298%" height="15" fill="rgb(211,96,35)" fg:x="956" fg:w="1"/><text x="28.7533%" y="655.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (1 samples, 0.03%)</title><rect x="28.5033%" y="629" width="0.0298%" height="15" fill="rgb(253,215,40)" fg:x="956" fg:w="1"/><text x="28.7533%" y="639.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.03%)</title><rect x="28.5033%" y="613" width="0.0298%" height="15" fill="rgb(211,81,21)" fg:x="956" fg:w="1"/><text x="28.7533%" y="623.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.03%)</title><rect x="28.5033%" y="597" width="0.0298%" height="15" fill="rgb(208,190,38)" fg:x="956" fg:w="1"/><text x="28.7533%" y="607.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionEpilogue (2 samples, 0.06%)</title><rect x="28.5331%" y="677" width="0.0596%" height="15" fill="rgb(235,213,38)" fg:x="957" fg:w="2"/><text x="28.7831%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.03%)</title><rect x="28.5629%" y="661" width="0.0298%" height="15" fill="rgb(237,122,38)" fg:x="958" fg:w="1"/><text x="28.8129%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionEpilogueInSafepoint (1 samples, 0.03%)</title><rect x="28.5927%" y="661" width="0.0298%" height="15" fill="rgb(244,218,35)" fg:x="959" fg:w="1"/><text x="28.8427%" y="671.50"></text></g><g><title>deno`v8::platform::DefaultJobState::NotifyConcurrencyIncrease (1 samples, 0.03%)</title><rect x="28.5927%" y="645" width="0.0298%" height="15" fill="rgb(240,68,47)" fg:x="959" fg:w="1"/><text x="28.8427%" y="655.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::PostTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (1 samples, 0.03%)</title><rect x="28.5927%" y="629" width="0.0298%" height="15" fill="rgb(210,16,53)" fg:x="959" fg:w="1"/><text x="28.8427%" y="639.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::Append(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (1 samples, 0.03%)</title><rect x="28.5927%" y="613" width="0.0298%" height="15" fill="rgb(235,124,12)" fg:x="959" fg:w="1"/><text x="28.8427%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.03%)</title><rect x="28.5927%" y="597" width="0.0298%" height="15" fill="rgb(224,169,11)" fg:x="959" fg:w="1"/><text x="28.8427%" y="607.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (17 samples, 0.51%)</title><rect x="28.6225%" y="613" width="0.5069%" height="15" fill="rgb(250,166,2)" fg:x="960" fg:w="17"/><text x="28.8725%" y="623.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (27 samples, 0.81%)</title><rect x="28.6225%" y="629" width="0.8050%" height="15" fill="rgb(242,216,29)" fg:x="960" fg:w="27"/><text x="28.8725%" y="639.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (10 samples, 0.30%)</title><rect x="29.1294%" y="613" width="0.2982%" height="15" fill="rgb(230,116,27)" fg:x="977" fg:w="10"/><text x="29.3794%" y="623.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (1 samples, 0.03%)</title><rect x="29.4275%" y="629" width="0.0298%" height="15" fill="rgb(228,99,48)" fg:x="987" fg:w="1"/><text x="29.6775%" y="639.50"></text></g><g><title>deno`v8::internal::CompactionSpaceCollection::CompactionSpaceCollection (1 samples, 0.03%)</title><rect x="29.4275%" y="613" width="0.0298%" height="15" fill="rgb(253,11,6)" fg:x="987" fg:w="1"/><text x="29.6775%" y="623.50"></text></g><g><title>deno`v8::internal::FreeList::CreateFreeList (1 samples, 0.03%)</title><rect x="29.4275%" y="597" width="0.0298%" height="15" fill="rgb(247,143,39)" fg:x="987" fg:w="1"/><text x="29.6775%" y="607.50"></text></g><g><title>deno`v8::internal::FreeListManyCached::FreeListManyCached (1 samples, 0.03%)</title><rect x="29.4275%" y="581" width="0.0298%" height="15" fill="rgb(236,97,10)" fg:x="987" fg:w="1"/><text x="29.6775%" y="591.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.03%)</title><rect x="29.4275%" y="565" width="0.0298%" height="15" fill="rgb(233,208,19)" fg:x="987" fg:w="1"/><text x="29.6775%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="29.4275%" y="549" width="0.0298%" height="15" fill="rgb(216,164,2)" fg:x="987" fg:w="1"/><text x="29.6775%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="29.4275%" y="533" width="0.0298%" height="15" fill="rgb(220,129,5)" fg:x="987" fg:w="1"/><text x="29.6775%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="29.4275%" y="517" width="0.0298%" height="15" fill="rgb(242,17,10)" fg:x="987" fg:w="1"/><text x="29.6775%" y="527.50"></text></g><g><title>deno`v8::internal::Scavenger::~Scavenger (1 samples, 0.03%)</title><rect x="29.4574%" y="629" width="0.0298%" height="15" fill="rgb(242,107,0)" fg:x="988" fg:w="1"/><text x="29.7074%" y="639.50"></text></g><g><title>deno`v8::internal::PagedSpace::~PagedSpace (1 samples, 0.03%)</title><rect x="29.4574%" y="613" width="0.0298%" height="15" fill="rgb(251,28,31)" fg:x="988" fg:w="1"/><text x="29.7074%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="29.4574%" y="597" width="0.0298%" height="15" fill="rgb(233,223,10)" fg:x="988" fg:w="1"/><text x="29.7074%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="29.4574%" y="581" width="0.0298%" height="15" fill="rgb(215,21,27)" fg:x="988" fg:w="1"/><text x="29.7074%" y="591.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.03%)</title><rect x="29.4872%" y="629" width="0.0298%" height="15" fill="rgb(232,23,21)" fg:x="989" fg:w="1"/><text x="29.7372%" y="639.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (1 samples, 0.03%)</title><rect x="29.4872%" y="613" width="0.0298%" height="15" fill="rgb(244,5,23)" fg:x="989" fg:w="1"/><text x="29.7372%" y="623.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (1 samples, 0.03%)</title><rect x="29.4872%" y="597" width="0.0298%" height="15" fill="rgb(226,81,46)" fg:x="989" fg:w="1"/><text x="29.7372%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.03%)</title><rect x="29.4872%" y="581" width="0.0298%" height="15" fill="rgb(247,70,30)" fg:x="989" fg:w="1"/><text x="29.7372%" y="591.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (31 samples, 0.92%)</title><rect x="28.6225%" y="645" width="0.9243%" height="15" fill="rgb(212,68,19)" fg:x="960" fg:w="31"/><text x="28.8725%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="29.5170%" y="629" width="0.0298%" height="15" fill="rgb(240,187,13)" fg:x="990" fg:w="1"/><text x="29.7670%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.03%)</title><rect x="29.5468%" y="645" width="0.0298%" height="15" fill="rgb(223,113,26)" fg:x="991" fg:w="1"/><text x="29.7968%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (33 samples, 0.98%)</title><rect x="28.6225%" y="661" width="0.9839%" height="15" fill="rgb(206,192,2)" fg:x="960" fg:w="33"/><text x="28.8725%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="29.5766%" y="645" width="0.0298%" height="15" fill="rgb(241,108,4)" fg:x="992" fg:w="1"/><text x="29.8266%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.03%)</title><rect x="29.6064%" y="597" width="0.0298%" height="15" fill="rgb(247,173,49)" fg:x="993" fg:w="1"/><text x="29.8564%" y="607.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedPageFromPool (2 samples, 0.06%)</title><rect x="29.6064%" y="613" width="0.0596%" height="15" fill="rgb(224,114,35)" fg:x="993" fg:w="2"/><text x="29.8564%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="29.6363%" y="597" width="0.0298%" height="15" fill="rgb(245,159,27)" fg:x="994" fg:w="1"/><text x="29.8863%" y="607.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (39 samples, 1.16%)</title><rect x="28.5927%" y="677" width="1.1628%" height="15" fill="rgb(245,172,44)" fg:x="959" fg:w="39"/><text x="28.8427%" y="687.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::Prologue (5 samples, 0.15%)</title><rect x="29.6064%" y="661" width="0.1491%" height="15" fill="rgb(236,23,11)" fg:x="993" fg:w="5"/><text x="29.8564%" y="671.50"></text></g><g><title>deno`v8::internal::SemiSpace::Commit (5 samples, 0.15%)</title><rect x="29.6064%" y="645" width="0.1491%" height="15" fill="rgb(205,117,38)" fg:x="993" fg:w="5"/><text x="29.8564%" y="655.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (5 samples, 0.15%)</title><rect x="29.6064%" y="629" width="0.1491%" height="15" fill="rgb(237,72,25)" fg:x="993" fg:w="5"/><text x="29.8564%" y="639.50"></text></g><g><title>deno`v8::internal::Page::Page (3 samples, 0.09%)</title><rect x="29.6661%" y="613" width="0.0894%" height="15" fill="rgb(244,70,9)" fg:x="995" fg:w="3"/><text x="29.9161%" y="623.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (3 samples, 0.09%)</title><rect x="29.6661%" y="597" width="0.0894%" height="15" fill="rgb(217,125,39)" fg:x="995" fg:w="3"/><text x="29.9161%" y="607.50"></text></g><g><title>deno`v8::internal::BasicMemoryChunk::BasicMemoryChunk (3 samples, 0.09%)</title><rect x="29.6661%" y="581" width="0.0894%" height="15" fill="rgb(235,36,10)" fg:x="995" fg:w="3"/><text x="29.9161%" y="591.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (43 samples, 1.28%)</title><rect x="28.5033%" y="693" width="1.2821%" height="15" fill="rgb(251,123,47)" fg:x="956" fg:w="43"/><text x="28.7533%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.03%)</title><rect x="29.7555%" y="677" width="0.0298%" height="15" fill="rgb(221,13,13)" fg:x="998" fg:w="1"/><text x="30.0055%" y="687.50"></text></g><g><title>deno`v8::internal::LargePage::LargePage (1 samples, 0.03%)</title><rect x="29.7853%" y="661" width="0.0298%" height="15" fill="rgb(238,131,9)" fg:x="999" fg:w="1"/><text x="30.0353%" y="671.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (1 samples, 0.03%)</title><rect x="29.7853%" y="645" width="0.0298%" height="15" fill="rgb(211,50,8)" fg:x="999" fg:w="1"/><text x="30.0353%" y="655.50"></text></g><g><title>deno`v8::internal::BasicMemoryChunk::BasicMemoryChunk (1 samples, 0.03%)</title><rect x="29.7853%" y="629" width="0.0298%" height="15" fill="rgb(245,182,24)" fg:x="999" fg:w="1"/><text x="30.0353%" y="639.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewStringFromOneByte(v8::base::Vector (47 samples, 1.40%)</title><rect x="28.5033%" y="773" width="1.4013%" height="15" fill="rgb(242,14,37)" fg:x="956" fg:w="47"/><text x="28.7533%" y="783.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (47 samples, 1.40%)</title><rect x="28.5033%" y="757" width="1.4013%" height="15" fill="rgb(246,228,12)" fg:x="956" fg:w="47"/><text x="28.7533%" y="767.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (47 samples, 1.40%)</title><rect x="28.5033%" y="741" width="1.4013%" height="15" fill="rgb(213,55,15)" fg:x="956" fg:w="47"/><text x="28.7533%" y="751.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (47 samples, 1.40%)</title><rect x="28.5033%" y="725" width="1.4013%" height="15" fill="rgb(209,9,3)" fg:x="956" fg:w="47"/><text x="28.7533%" y="735.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (47 samples, 1.40%)</title><rect x="28.5033%" y="709" width="1.4013%" height="15" fill="rgb(230,59,30)" fg:x="956" fg:w="47"/><text x="28.7533%" y="719.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::AllocateRaw (4 samples, 0.12%)</title><rect x="29.7853%" y="693" width="0.1193%" height="15" fill="rgb(209,121,21)" fg:x="999" fg:w="4"/><text x="30.0353%" y="703.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (4 samples, 0.12%)</title><rect x="29.7853%" y="677" width="0.1193%" height="15" fill="rgb(220,109,13)" fg:x="999" fg:w="4"/><text x="30.0353%" y="687.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (3 samples, 0.09%)</title><rect x="29.8151%" y="661" width="0.0894%" height="15" fill="rgb(232,18,1)" fg:x="1000" fg:w="3"/><text x="30.0651%" y="671.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (3 samples, 0.09%)</title><rect x="29.8151%" y="645" width="0.0894%" height="15" fill="rgb(215,41,42)" fg:x="1000" fg:w="3"/><text x="30.0651%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (3 samples, 0.09%)</title><rect x="29.8151%" y="629" width="0.0894%" height="15" fill="rgb(224,123,36)" fg:x="1000" fg:w="3"/><text x="30.0651%" y="639.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (128 samples, 3.82%)</title><rect x="28.5033%" y="805" width="3.8163%" height="15" fill="rgb(240,125,3)" fg:x="956" fg:w="128"/><text x="28.7533%" y="815.50">deno..</text></g><g><title>deno`v8::String::NewFromOneByte (128 samples, 3.82%)</title><rect x="28.5033%" y="789" width="3.8163%" height="15" fill="rgb(205,98,50)" fg:x="956" fg:w="128"/><text x="28.7533%" y="799.50">deno..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (81 samples, 2.42%)</title><rect x="29.9046%" y="773" width="2.4150%" height="15" fill="rgb(205,185,37)" fg:x="1003" fg:w="81"/><text x="30.1546%" y="783.50">li..</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (2,129 samples, 63.48%)</title><rect x="0.0000%" y="1045" width="63.4764%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="1055.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (2,129 samples, 63.48%)</title><rect x="0.0000%" y="1029" width="63.4764%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="1039.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (2,129 samples, 63.48%)</title><rect x="0.0000%" y="1013" width="63.4764%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="1023.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (2,129 samples, 63.48%)</title><rect x="0.0000%" y="997" width="63.4764%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="1007.50">deno`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (2,129 samples, 63.48%)</title><rect x="0.0000%" y="981" width="63.4764%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="991.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2,129 samples, 63.48%)</title><rect x="0.0000%" y="965" width="63.4764%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="975.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (2,129 samples, 63.48%)</title><rect x="0.0000%" y="949" width="63.4764%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="959.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (2,129 samples, 63.48%)</title><rect x="0.0000%" y="933" width="63.4764%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="943.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2,129 samples, 63.48%)</title><rect x="0.0000%" y="917" width="63.4764%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="927.50">deno`Builtins_InterpreterEntryTrampoline</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2,129 samples, 63.48%)</title><rect x="0.0000%" y="901" width="63.4764%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="911.50">deno`Builtins_InterpreterEntryTrampoline</text></g><g><title>0x11004a53c (2,129 samples, 63.48%)</title><rect x="0.0000%" y="885" width="63.4764%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="895.50">0x11004a53c</text></g><g><title>0x11004b130 (2,129 samples, 63.48%)</title><rect x="0.0000%" y="869" width="63.4764%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="2129"/><text x="0.2500%" y="879.50">0x11004b130</text></g><g><title>0x11004bf10 (1,214 samples, 36.20%)</title><rect x="27.2809%" y="853" width="36.1956%" height="15" fill="rgb(217,163,10)" fg:x="915" fg:w="1214"/><text x="27.5309%" y="863.50">0x11004bf10</text></g><g><title>deno`Builtins_CallApiCallback (1,214 samples, 36.20%)</title><rect x="27.2809%" y="837" width="36.1956%" height="15" fill="rgb(213,25,53)" fg:x="915" fg:w="1214"/><text x="27.5309%" y="847.50">deno`Builtins_CallApiCallback</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1,214 samples, 36.20%)</title><rect x="27.2809%" y="821" width="36.1956%" height="15" fill="rgb(252,105,26)" fg:x="915" fg:w="1214"/><text x="27.5309%" y="831.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::m..</text></g><g><title>deno`deno_web::forgiving_base64_decode (1,045 samples, 31.16%)</title><rect x="32.3196%" y="805" width="31.1568%" height="15" fill="rgb(220,39,43)" fg:x="1084" fg:w="1045"/><text x="32.5696%" y="815.50">deno`deno_web::forgiving_base64_decode</text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (1 samples, 0.03%)</title><rect x="63.4764%" y="757" width="0.0298%" height="15" fill="rgb(229,68,48)" fg:x="2129" fg:w="1"/><text x="63.7264%" y="767.50"></text></g><g><title>deno`v8::String::WriteOneByte (1 samples, 0.03%)</title><rect x="63.4764%" y="741" width="0.0298%" height="15" fill="rgb(252,8,32)" fg:x="2129" fg:w="1"/><text x="63.7264%" y="751.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (1 samples, 0.03%)</title><rect x="63.4764%" y="725" width="0.0298%" height="15" fill="rgb(223,20,43)" fg:x="2129" fg:w="1"/><text x="63.7264%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="63.4764%" y="709" width="0.0298%" height="15" fill="rgb(229,81,49)" fg:x="2129" fg:w="1"/><text x="63.7264%" y="719.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewStringFromOneByte(v8::base::Vector (1 samples, 0.03%)</title><rect x="63.5063%" y="725" width="0.0298%" height="15" fill="rgb(236,28,36)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="735.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (1 samples, 0.03%)</title><rect x="63.5063%" y="709" width="0.0298%" height="15" fill="rgb(249,185,26)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="719.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (1 samples, 0.03%)</title><rect x="63.5063%" y="693" width="0.0298%" height="15" fill="rgb(249,174,33)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="703.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.03%)</title><rect x="63.5063%" y="677" width="0.0298%" height="15" fill="rgb(233,201,37)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="687.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.03%)</title><rect x="63.5063%" y="661" width="0.0298%" height="15" fill="rgb(221,78,26)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.03%)</title><rect x="63.5063%" y="645" width="0.0298%" height="15" fill="rgb(250,127,30)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.03%)</title><rect x="63.5063%" y="629" width="0.0298%" height="15" fill="rgb(230,49,44)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="639.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::Prologue (1 samples, 0.03%)</title><rect x="63.5063%" y="613" width="0.0298%" height="15" fill="rgb(229,67,23)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="623.50"></text></g><g><title>deno`v8::internal::SemiSpace::Commit (1 samples, 0.03%)</title><rect x="63.5063%" y="597" width="0.0298%" height="15" fill="rgb(249,83,47)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="607.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (1 samples, 0.03%)</title><rect x="63.5063%" y="581" width="0.0298%" height="15" fill="rgb(215,43,3)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="591.50"></text></g><g><title>deno`v8::internal::Page::Page (1 samples, 0.03%)</title><rect x="63.5063%" y="565" width="0.0298%" height="15" fill="rgb(238,154,13)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="575.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (1 samples, 0.03%)</title><rect x="63.5063%" y="549" width="0.0298%" height="15" fill="rgb(219,56,2)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="559.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="63.5063%" y="533" width="0.0298%" height="15" fill="rgb(233,0,4)" fg:x="2130" fg:w="1"/><text x="63.7563%" y="543.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (4 samples, 0.12%)</title><rect x="63.5063%" y="757" width="0.1193%" height="15" fill="rgb(235,30,7)" fg:x="2130" fg:w="4"/><text x="63.7563%" y="767.50"></text></g><g><title>deno`v8::String::NewFromOneByte (4 samples, 0.12%)</title><rect x="63.5063%" y="741" width="0.1193%" height="15" fill="rgb(250,79,13)" fg:x="2130" fg:w="4"/><text x="63.7563%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.09%)</title><rect x="63.5361%" y="725" width="0.0894%" height="15" fill="rgb(211,146,34)" fg:x="2131" fg:w="3"/><text x="63.7861%" y="735.50"></text></g><g><title>deno`deno::run_command::_{{closure}} (2,152 samples, 64.16%)</title><rect x="0.0000%" y="1157" width="64.1622%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="2152"/><text x="0.2500%" y="1167.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,152 samples, 64.16%)</title><rect x="0.0000%" y="1141" width="64.1622%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="2152"/><text x="0.2500%" y="1151.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,152 samples, 64.16%)</title><rect x="0.0000%" y="1125" width="64.1622%" height="15" fill="rgb(221,155,16)" fg:x="0" fg:w="2152"/><text x="0.2500%" y="1135.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,152 samples, 64.16%)</title><rect x="0.0000%" y="1109" width="64.1622%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="2152"/><text x="0.2500%" y="1119.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,152 samples, 64.16%)</title><rect x="0.0000%" y="1093" width="64.1622%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="2152"/><text x="0.2500%" y="1103.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (2,152 samples, 64.16%)</title><rect x="0.0000%" y="1077" width="64.1622%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="2152"/><text x="0.2500%" y="1087.50">deno`deno_core::runtime::JsRuntime::mod_evaluate</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (2,152 samples, 64.16%)</title><rect x="0.0000%" y="1061" width="64.1622%" height="15" fill="rgb(227,97,0)" fg:x="0" fg:w="2152"/><text x="0.2500%" y="1071.50">deno`v8::Module::Evaluate(v8::Local</text></g><g><title>deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle (23 samples, 0.69%)</title><rect x="63.4764%" y="1045" width="0.6857%" height="15" fill="rgb(234,150,53)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="1055.50"></text></g><g><title>deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle (23 samples, 0.69%)</title><rect x="63.4764%" y="1029" width="0.6857%" height="15" fill="rgb(228,201,54)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="1039.50"></text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (23 samples, 0.69%)</title><rect x="63.4764%" y="1013" width="0.6857%" height="15" fill="rgb(222,22,37)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="1023.50"></text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (23 samples, 0.69%)</title><rect x="63.4764%" y="997" width="0.6857%" height="15" fill="rgb(237,53,32)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="1007.50"></text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (23 samples, 0.69%)</title><rect x="63.4764%" y="981" width="0.6857%" height="15" fill="rgb(233,25,53)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="991.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (23 samples, 0.69%)</title><rect x="63.4764%" y="965" width="0.6857%" height="15" fill="rgb(210,40,34)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="975.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (23 samples, 0.69%)</title><rect x="63.4764%" y="949" width="0.6857%" height="15" fill="rgb(241,220,44)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="959.50"></text></g><g><title>deno`Builtins_JSEntry (23 samples, 0.69%)</title><rect x="63.4764%" y="933" width="0.6857%" height="15" fill="rgb(235,28,35)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="943.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (23 samples, 0.69%)</title><rect x="63.4764%" y="917" width="0.6857%" height="15" fill="rgb(210,56,17)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="927.50"></text></g><g><title>deno`Builtins_GeneratorPrototypeNext (23 samples, 0.69%)</title><rect x="63.4764%" y="901" width="0.6857%" height="15" fill="rgb(224,130,29)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="911.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (23 samples, 0.69%)</title><rect x="63.4764%" y="885" width="0.6857%" height="15" fill="rgb(235,212,8)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="895.50"></text></g><g><title>0x11004a53c (23 samples, 0.69%)</title><rect x="63.4764%" y="869" width="0.6857%" height="15" fill="rgb(223,33,50)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="879.50"></text></g><g><title>0x11004b130 (23 samples, 0.69%)</title><rect x="63.4764%" y="853" width="0.6857%" height="15" fill="rgb(219,149,13)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="863.50"></text></g><g><title>0x11004b410 (23 samples, 0.69%)</title><rect x="63.4764%" y="837" width="0.6857%" height="15" fill="rgb(250,156,29)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (23 samples, 0.69%)</title><rect x="63.4764%" y="821" width="0.6857%" height="15" fill="rgb(216,193,19)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="831.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (23 samples, 0.69%)</title><rect x="63.4764%" y="805" width="0.6857%" height="15" fill="rgb(216,135,14)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="815.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (23 samples, 0.69%)</title><rect x="63.4764%" y="789" width="0.6857%" height="15" fill="rgb(241,47,5)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="799.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (23 samples, 0.69%)</title><rect x="63.4764%" y="773" width="0.6857%" height="15" fill="rgb(233,42,35)" fg:x="2129" fg:w="23"/><text x="63.7264%" y="783.50"></text></g><g><title>deno`deno_web::forgiving_base64_decode (18 samples, 0.54%)</title><rect x="63.6255%" y="757" width="0.5367%" height="15" fill="rgb(231,13,6)" fg:x="2134" fg:w="18"/><text x="63.8755%" y="767.50"></text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (7 samples, 0.21%)</title><rect x="64.1622%" y="693" width="0.2087%" height="15" fill="rgb(207,181,40)" fg:x="2152" fg:w="7"/><text x="64.4122%" y="703.50"></text></g><g><title>deno`v8::String::WriteOneByte (7 samples, 0.21%)</title><rect x="64.1622%" y="677" width="0.2087%" height="15" fill="rgb(254,173,49)" fg:x="2152" fg:w="7"/><text x="64.4122%" y="687.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (7 samples, 0.21%)</title><rect x="64.1622%" y="661" width="0.2087%" height="15" fill="rgb(221,1,38)" fg:x="2152" fg:w="7"/><text x="64.4122%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.21%)</title><rect x="64.1622%" y="645" width="0.2087%" height="15" fill="rgb(206,124,46)" fg:x="2152" fg:w="7"/><text x="64.4122%" y="655.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (7 samples, 0.21%)</title><rect x="64.3709%" y="693" width="0.2087%" height="15" fill="rgb(249,21,11)" fg:x="2159" fg:w="7"/><text x="64.6209%" y="703.50"></text></g><g><title>deno`v8::String::NewFromOneByte (7 samples, 0.21%)</title><rect x="64.3709%" y="677" width="0.2087%" height="15" fill="rgb(222,201,40)" fg:x="2159" fg:w="7"/><text x="64.6209%" y="687.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.21%)</title><rect x="64.3709%" y="661" width="0.2087%" height="15" fill="rgb(235,61,29)" fg:x="2159" fg:w="7"/><text x="64.6209%" y="671.50"></text></g><g><title>0x11004a53c (101 samples, 3.01%)</title><rect x="64.1622%" y="805" width="3.0113%" height="15" fill="rgb(219,207,3)" fg:x="2152" fg:w="101"/><text x="64.4122%" y="815.50">0x1..</text></g><g><title>0x11004b130 (101 samples, 3.01%)</title><rect x="64.1622%" y="789" width="3.0113%" height="15" fill="rgb(222,56,46)" fg:x="2152" fg:w="101"/><text x="64.4122%" y="799.50">0x1..</text></g><g><title>0x11004b410 (101 samples, 3.01%)</title><rect x="64.1622%" y="773" width="3.0113%" height="15" fill="rgb(239,76,54)" fg:x="2152" fg:w="101"/><text x="64.4122%" y="783.50">0x1..</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (101 samples, 3.01%)</title><rect x="64.1622%" y="757" width="3.0113%" height="15" fill="rgb(231,124,27)" fg:x="2152" fg:w="101"/><text x="64.4122%" y="767.50">den..</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (101 samples, 3.01%)</title><rect x="64.1622%" y="741" width="3.0113%" height="15" fill="rgb(249,195,6)" fg:x="2152" fg:w="101"/><text x="64.4122%" y="751.50">den..</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (101 samples, 3.01%)</title><rect x="64.1622%" y="725" width="3.0113%" height="15" fill="rgb(237,174,47)" fg:x="2152" fg:w="101"/><text x="64.4122%" y="735.50">den..</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (101 samples, 3.01%)</title><rect x="64.1622%" y="709" width="3.0113%" height="15" fill="rgb(206,201,31)" fg:x="2152" fg:w="101"/><text x="64.4122%" y="719.50">den..</text></g><g><title>deno`deno_web::forgiving_base64_decode (87 samples, 2.59%)</title><rect x="64.5796%" y="693" width="2.5939%" height="15" fill="rgb(231,57,52)" fg:x="2166" fg:w="87"/><text x="64.8296%" y="703.50">de..</text></g><g><title>0x11004b130 (1 samples, 0.03%)</title><rect x="67.1735%" y="789" width="0.0298%" height="15" fill="rgb(248,177,22)" fg:x="2253" fg:w="1"/><text x="67.4235%" y="799.50"></text></g><g><title>0x11004b410 (1 samples, 0.03%)</title><rect x="67.1735%" y="773" width="0.0298%" height="15" fill="rgb(215,211,37)" fg:x="2253" fg:w="1"/><text x="67.4235%" y="783.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.03%)</title><rect x="67.1735%" y="757" width="0.0298%" height="15" fill="rgb(241,128,51)" fg:x="2253" fg:w="1"/><text x="67.4235%" y="767.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.03%)</title><rect x="67.1735%" y="741" width="0.0298%" height="15" fill="rgb(227,165,31)" fg:x="2253" fg:w="1"/><text x="67.4235%" y="751.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="67.1735%" y="725" width="0.0298%" height="15" fill="rgb(228,167,24)" fg:x="2253" fg:w="1"/><text x="67.4235%" y="735.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.03%)</title><rect x="67.1735%" y="709" width="0.0298%" height="15" fill="rgb(228,143,12)" fg:x="2253" fg:w="1"/><text x="67.4235%" y="719.50"></text></g><g><title>deno`deno_web::forgiving_base64_decode (1 samples, 0.03%)</title><rect x="67.1735%" y="693" width="0.0298%" height="15" fill="rgb(249,149,8)" fg:x="2253" fg:w="1"/><text x="67.4235%" y="703.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewStringFromOneByte(v8::base::Vector (1 samples, 0.03%)</title><rect x="67.2033%" y="661" width="0.0298%" height="15" fill="rgb(243,35,44)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="671.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (1 samples, 0.03%)</title><rect x="67.2033%" y="645" width="0.0298%" height="15" fill="rgb(246,89,9)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="655.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (1 samples, 0.03%)</title><rect x="67.2033%" y="629" width="0.0298%" height="15" fill="rgb(233,213,13)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="639.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.03%)</title><rect x="67.2033%" y="613" width="0.0298%" height="15" fill="rgb(233,141,41)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="623.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.03%)</title><rect x="67.2033%" y="597" width="0.0298%" height="15" fill="rgb(239,167,4)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="607.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.03%)</title><rect x="67.2033%" y="581" width="0.0298%" height="15" fill="rgb(209,217,16)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="591.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.03%)</title><rect x="67.2033%" y="565" width="0.0298%" height="15" fill="rgb(219,88,35)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="575.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.03%)</title><rect x="67.2033%" y="549" width="0.0298%" height="15" fill="rgb(220,193,23)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="559.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.03%)</title><rect x="67.2033%" y="533" width="0.0298%" height="15" fill="rgb(230,90,52)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="543.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.03%)</title><rect x="67.2033%" y="517" width="0.0298%" height="15" fill="rgb(252,106,19)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="527.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (1 samples, 0.03%)</title><rect x="67.2033%" y="501" width="0.0298%" height="15" fill="rgb(206,74,20)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="511.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (1 samples, 0.03%)</title><rect x="67.2033%" y="485" width="0.0298%" height="15" fill="rgb(230,138,44)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.03%)</title><rect x="67.2033%" y="469" width="0.0298%" height="15" fill="rgb(235,182,43)" fg:x="2254" fg:w="1"/><text x="67.4533%" y="479.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (3 samples, 0.09%)</title><rect x="67.2033%" y="693" width="0.0894%" height="15" fill="rgb(242,16,51)" fg:x="2254" fg:w="3"/><text x="67.4533%" y="703.50"></text></g><g><title>deno`v8::String::NewFromOneByte (3 samples, 0.09%)</title><rect x="67.2033%" y="677" width="0.0894%" height="15" fill="rgb(248,9,4)" fg:x="2254" fg:w="3"/><text x="67.4533%" y="687.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.06%)</title><rect x="67.2332%" y="661" width="0.0596%" height="15" fill="rgb(210,31,22)" fg:x="2255" fg:w="2"/><text x="67.4832%" y="671.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (142 samples, 4.23%)</title><rect x="64.1622%" y="1157" width="4.2338%" height="15" fill="rgb(239,54,39)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1167.50">deno`..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (142 samples, 4.23%)</title><rect x="64.1622%" y="1141" width="4.2338%" height="15" fill="rgb(230,99,41)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1151.50">deno`..</text></g><g><title>deno`deno::main::_{{closure}} (142 samples, 4.23%)</title><rect x="64.1622%" y="1125" width="4.2338%" height="15" fill="rgb(253,106,12)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1135.50">deno`..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (142 samples, 4.23%)</title><rect x="64.1622%" y="1109" width="4.2338%" height="15" fill="rgb(213,46,41)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1119.50">deno`..</text></g><g><title>deno`deno::run_command::_{{closure}} (142 samples, 4.23%)</title><rect x="64.1622%" y="1093" width="4.2338%" height="15" fill="rgb(215,133,35)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1103.50">deno`..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (142 samples, 4.23%)</title><rect x="64.1622%" y="1077" width="4.2338%" height="15" fill="rgb(213,28,5)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1087.50">deno`..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (142 samples, 4.23%)</title><rect x="64.1622%" y="1061" width="4.2338%" height="15" fill="rgb(215,77,49)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1071.50">deno`..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (142 samples, 4.23%)</title><rect x="64.1622%" y="1045" width="4.2338%" height="15" fill="rgb(248,100,22)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1055.50">deno`..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (142 samples, 4.23%)</title><rect x="64.1622%" y="1029" width="4.2338%" height="15" fill="rgb(208,67,9)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1039.50">deno`..</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (142 samples, 4.23%)</title><rect x="64.1622%" y="1013" width="4.2338%" height="15" fill="rgb(219,133,21)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1023.50">deno`..</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (142 samples, 4.23%)</title><rect x="64.1622%" y="997" width="4.2338%" height="15" fill="rgb(246,46,29)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="1007.50">deno`..</text></g><g><title>deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle (142 samples, 4.23%)</title><rect x="64.1622%" y="981" width="4.2338%" height="15" fill="rgb(246,185,52)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="991.50">deno`..</text></g><g><title>deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle (142 samples, 4.23%)</title><rect x="64.1622%" y="965" width="4.2338%" height="15" fill="rgb(252,136,11)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="975.50">deno`..</text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (142 samples, 4.23%)</title><rect x="64.1622%" y="949" width="4.2338%" height="15" fill="rgb(219,138,53)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="959.50">deno`..</text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (142 samples, 4.23%)</title><rect x="64.1622%" y="933" width="4.2338%" height="15" fill="rgb(211,51,23)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="943.50">deno`..</text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (142 samples, 4.23%)</title><rect x="64.1622%" y="917" width="4.2338%" height="15" fill="rgb(247,221,28)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="927.50">deno`..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (142 samples, 4.23%)</title><rect x="64.1622%" y="901" width="4.2338%" height="15" fill="rgb(251,222,45)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="911.50">deno`..</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (142 samples, 4.23%)</title><rect x="64.1622%" y="885" width="4.2338%" height="15" fill="rgb(217,162,53)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="895.50">deno`..</text></g><g><title>deno`Builtins_JSEntry (142 samples, 4.23%)</title><rect x="64.1622%" y="869" width="4.2338%" height="15" fill="rgb(229,93,14)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="879.50">deno`..</text></g><g><title>deno`Builtins_JSEntryTrampoline (142 samples, 4.23%)</title><rect x="64.1622%" y="853" width="4.2338%" height="15" fill="rgb(209,67,49)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="863.50">deno`..</text></g><g><title>deno`Builtins_GeneratorPrototypeNext (142 samples, 4.23%)</title><rect x="64.1622%" y="837" width="4.2338%" height="15" fill="rgb(213,87,29)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="847.50">deno`..</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (142 samples, 4.23%)</title><rect x="64.1622%" y="821" width="4.2338%" height="15" fill="rgb(205,151,52)" fg:x="2152" fg:w="142"/><text x="64.4122%" y="831.50">deno`..</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (41 samples, 1.22%)</title><rect x="67.1735%" y="805" width="1.2224%" height="15" fill="rgb(253,215,39)" fg:x="2253" fg:w="41"/><text x="67.4235%" y="815.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (40 samples, 1.19%)</title><rect x="67.2033%" y="789" width="1.1926%" height="15" fill="rgb(221,220,41)" fg:x="2254" fg:w="40"/><text x="67.4533%" y="799.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (40 samples, 1.19%)</title><rect x="67.2033%" y="773" width="1.1926%" height="15" fill="rgb(218,133,21)" fg:x="2254" fg:w="40"/><text x="67.4533%" y="783.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (40 samples, 1.19%)</title><rect x="67.2033%" y="757" width="1.1926%" height="15" fill="rgb(221,193,43)" fg:x="2254" fg:w="40"/><text x="67.4533%" y="767.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (40 samples, 1.19%)</title><rect x="67.2033%" y="741" width="1.1926%" height="15" fill="rgb(240,128,52)" fg:x="2254" fg:w="40"/><text x="67.4533%" y="751.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (40 samples, 1.19%)</title><rect x="67.2033%" y="725" width="1.1926%" height="15" fill="rgb(253,114,12)" fg:x="2254" fg:w="40"/><text x="67.4533%" y="735.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (40 samples, 1.19%)</title><rect x="67.2033%" y="709" width="1.1926%" height="15" fill="rgb(215,223,47)" fg:x="2254" fg:w="40"/><text x="67.4533%" y="719.50"></text></g><g><title>deno`deno_web::forgiving_base64_decode (37 samples, 1.10%)</title><rect x="67.2928%" y="693" width="1.1032%" height="15" fill="rgb(248,225,23)" fg:x="2257" fg:w="37"/><text x="67.5428%" y="703.50"></text></g><g><title>0x11004b38c (1 samples, 0.03%)</title><rect x="68.3959%" y="997" width="0.0298%" height="15" fill="rgb(250,108,0)" fg:x="2294" fg:w="1"/><text x="68.6459%" y="1007.50"></text></g><g><title>deno`Builtins_BaselineLeaveFrame (1 samples, 0.03%)</title><rect x="68.3959%" y="981" width="0.0298%" height="15" fill="rgb(228,208,7)" fg:x="2294" fg:w="1"/><text x="68.6459%" y="991.50"></text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (20 samples, 0.60%)</title><rect x="68.4258%" y="917" width="0.5963%" height="15" fill="rgb(244,45,10)" fg:x="2295" fg:w="20"/><text x="68.6758%" y="927.50"></text></g><g><title>deno`v8::String::WriteOneByte (20 samples, 0.60%)</title><rect x="68.4258%" y="901" width="0.5963%" height="15" fill="rgb(207,125,25)" fg:x="2295" fg:w="20"/><text x="68.6758%" y="911.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (20 samples, 0.60%)</title><rect x="68.4258%" y="885" width="0.5963%" height="15" fill="rgb(210,195,18)" fg:x="2295" fg:w="20"/><text x="68.6758%" y="895.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.60%)</title><rect x="68.4258%" y="869" width="0.5963%" height="15" fill="rgb(249,80,12)" fg:x="2295" fg:w="20"/><text x="68.6758%" y="879.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (8 samples, 0.24%)</title><rect x="69.0221%" y="725" width="0.2385%" height="15" fill="rgb(221,65,9)" fg:x="2315" fg:w="8"/><text x="69.2721%" y="735.50"></text></g><g><title>deno`v8::internal::Isolate::Iterate (1 samples, 0.03%)</title><rect x="69.2606%" y="725" width="0.0298%" height="15" fill="rgb(235,49,36)" fg:x="2323" fg:w="1"/><text x="69.5106%" y="735.50"></text></g><g><title>deno`v8::internal::StackFrameIterator::Advance (1 samples, 0.03%)</title><rect x="69.2606%" y="709" width="0.0298%" height="15" fill="rgb(225,32,20)" fg:x="2323" fg:w="1"/><text x="69.5106%" y="719.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (15 samples, 0.45%)</title><rect x="69.0221%" y="741" width="0.4472%" height="15" fill="rgb(215,141,46)" fg:x="2315" fg:w="15"/><text x="69.2721%" y="751.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (6 samples, 0.18%)</title><rect x="69.2904%" y="725" width="0.1789%" height="15" fill="rgb(250,160,47)" fg:x="2324" fg:w="6"/><text x="69.5404%" y="735.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.03%)</title><rect x="69.4693%" y="741" width="0.0298%" height="15" fill="rgb(216,222,40)" fg:x="2330" fg:w="1"/><text x="69.7193%" y="751.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (1 samples, 0.03%)</title><rect x="69.4693%" y="725" width="0.0298%" height="15" fill="rgb(234,217,39)" fg:x="2330" fg:w="1"/><text x="69.7193%" y="735.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (1 samples, 0.03%)</title><rect x="69.4693%" y="709" width="0.0298%" height="15" fill="rgb(207,178,40)" fg:x="2330" fg:w="1"/><text x="69.7193%" y="719.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.03%)</title><rect x="69.4693%" y="693" width="0.0298%" height="15" fill="rgb(221,136,13)" fg:x="2330" fg:w="1"/><text x="69.7193%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (17 samples, 0.51%)</title><rect x="69.0221%" y="773" width="0.5069%" height="15" fill="rgb(249,199,10)" fg:x="2315" fg:w="17"/><text x="69.2721%" y="783.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (17 samples, 0.51%)</title><rect x="69.0221%" y="757" width="0.5069%" height="15" fill="rgb(249,222,13)" fg:x="2315" fg:w="17"/><text x="69.2721%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.03%)</title><rect x="69.4991%" y="741" width="0.0298%" height="15" fill="rgb(244,185,38)" fg:x="2331" fg:w="1"/><text x="69.7491%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (18 samples, 0.54%)</title><rect x="69.0221%" y="805" width="0.5367%" height="15" fill="rgb(236,202,9)" fg:x="2315" fg:w="18"/><text x="69.2721%" y="815.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (18 samples, 0.54%)</title><rect x="69.0221%" y="789" width="0.5367%" height="15" fill="rgb(250,229,37)" fg:x="2315" fg:w="18"/><text x="69.2721%" y="799.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::Prologue (1 samples, 0.03%)</title><rect x="69.5289%" y="773" width="0.0298%" height="15" fill="rgb(206,174,23)" fg:x="2332" fg:w="1"/><text x="69.7789%" y="783.50"></text></g><g><title>deno`v8::internal::SemiSpace::Commit (1 samples, 0.03%)</title><rect x="69.5289%" y="757" width="0.0298%" height="15" fill="rgb(211,33,43)" fg:x="2332" fg:w="1"/><text x="69.7789%" y="767.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (1 samples, 0.03%)</title><rect x="69.5289%" y="741" width="0.0298%" height="15" fill="rgb(245,58,50)" fg:x="2332" fg:w="1"/><text x="69.7789%" y="751.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedPageFromPool (1 samples, 0.03%)</title><rect x="69.5289%" y="725" width="0.0298%" height="15" fill="rgb(244,68,36)" fg:x="2332" fg:w="1"/><text x="69.7789%" y="735.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.03%)</title><rect x="69.5289%" y="709" width="0.0298%" height="15" fill="rgb(232,229,15)" fg:x="2332" fg:w="1"/><text x="69.7789%" y="719.50"></text></g><g><title>deno`v8::internal::LargePage::LargePage (1 samples, 0.03%)</title><rect x="69.5587%" y="773" width="0.0298%" height="15" fill="rgb(254,30,23)" fg:x="2333" fg:w="1"/><text x="69.8087%" y="783.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (1 samples, 0.03%)</title><rect x="69.5587%" y="757" width="0.0298%" height="15" fill="rgb(235,160,14)" fg:x="2333" fg:w="1"/><text x="69.8087%" y="767.50"></text></g><g><title>deno`v8::internal::BasicMemoryChunk::BasicMemoryChunk (1 samples, 0.03%)</title><rect x="69.5587%" y="741" width="0.0298%" height="15" fill="rgb(212,155,44)" fg:x="2333" fg:w="1"/><text x="69.8087%" y="751.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewStringFromOneByte(v8::base::Vector (20 samples, 0.60%)</title><rect x="69.0221%" y="885" width="0.5963%" height="15" fill="rgb(226,2,50)" fg:x="2315" fg:w="20"/><text x="69.2721%" y="895.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (20 samples, 0.60%)</title><rect x="69.0221%" y="869" width="0.5963%" height="15" fill="rgb(234,177,6)" fg:x="2315" fg:w="20"/><text x="69.2721%" y="879.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (20 samples, 0.60%)</title><rect x="69.0221%" y="853" width="0.5963%" height="15" fill="rgb(217,24,9)" fg:x="2315" fg:w="20"/><text x="69.2721%" y="863.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (20 samples, 0.60%)</title><rect x="69.0221%" y="837" width="0.5963%" height="15" fill="rgb(220,13,46)" fg:x="2315" fg:w="20"/><text x="69.2721%" y="847.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (20 samples, 0.60%)</title><rect x="69.0221%" y="821" width="0.5963%" height="15" fill="rgb(239,221,27)" fg:x="2315" fg:w="20"/><text x="69.2721%" y="831.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::AllocateRaw (2 samples, 0.06%)</title><rect x="69.5587%" y="805" width="0.0596%" height="15" fill="rgb(222,198,25)" fg:x="2333" fg:w="2"/><text x="69.8087%" y="815.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (2 samples, 0.06%)</title><rect x="69.5587%" y="789" width="0.0596%" height="15" fill="rgb(211,99,13)" fg:x="2333" fg:w="2"/><text x="69.8087%" y="799.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (1 samples, 0.03%)</title><rect x="69.5886%" y="773" width="0.0298%" height="15" fill="rgb(232,111,31)" fg:x="2334" fg:w="1"/><text x="69.8386%" y="783.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (1 samples, 0.03%)</title><rect x="69.5886%" y="757" width="0.0298%" height="15" fill="rgb(245,82,37)" fg:x="2334" fg:w="1"/><text x="69.8386%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.03%)</title><rect x="69.5886%" y="741" width="0.0298%" height="15" fill="rgb(227,149,46)" fg:x="2334" fg:w="1"/><text x="69.8386%" y="751.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (59 samples, 1.76%)</title><rect x="69.0221%" y="917" width="1.7591%" height="15" fill="rgb(218,36,50)" fg:x="2315" fg:w="59"/><text x="69.2721%" y="927.50"></text></g><g><title>deno`v8::String::NewFromOneByte (59 samples, 1.76%)</title><rect x="69.0221%" y="901" width="1.7591%" height="15" fill="rgb(226,80,48)" fg:x="2315" fg:w="59"/><text x="69.2721%" y="911.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (39 samples, 1.16%)</title><rect x="69.6184%" y="885" width="1.1628%" height="15" fill="rgb(238,224,15)" fg:x="2335" fg:w="39"/><text x="69.8684%" y="895.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (583 samples, 17.38%)</title><rect x="68.4258%" y="933" width="17.3822%" height="15" fill="rgb(241,136,10)" fg:x="2295" fg:w="583"/><text x="68.6758%" y="943.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; ..</text></g><g><title>deno`deno_web::forgiving_base64_decode (504 samples, 15.03%)</title><rect x="70.7812%" y="917" width="15.0268%" height="15" fill="rgb(208,32,45)" fg:x="2374" fg:w="504"/><text x="71.0312%" y="927.50">deno`deno_web::forgivin..</text></g><g><title>0x11004a53c (585 samples, 17.44%)</title><rect x="68.3959%" y="1029" width="17.4419%" height="15" fill="rgb(207,135,9)" fg:x="2294" fg:w="585"/><text x="68.6459%" y="1039.50">0x11004a53c</text></g><g><title>0x11004b130 (585 samples, 17.44%)</title><rect x="68.3959%" y="1013" width="17.4419%" height="15" fill="rgb(206,86,44)" fg:x="2294" fg:w="585"/><text x="68.6459%" y="1023.50">0x11004b130</text></g><g><title>0x11004b410 (584 samples, 17.41%)</title><rect x="68.4258%" y="997" width="17.4120%" height="15" fill="rgb(245,177,15)" fg:x="2295" fg:w="584"/><text x="68.6758%" y="1007.50">0x11004b410</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (584 samples, 17.41%)</title><rect x="68.4258%" y="981" width="17.4120%" height="15" fill="rgb(206,64,50)" fg:x="2295" fg:w="584"/><text x="68.6758%" y="991.50">deno`Builtins_CEntry_Return..</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (584 samples, 17.41%)</title><rect x="68.4258%" y="965" width="17.4120%" height="15" fill="rgb(234,36,40)" fg:x="2295" fg:w="584"/><text x="68.6758%" y="975.50">deno`v8::internal::Builtin_..</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (584 samples, 17.41%)</title><rect x="68.4258%" y="949" width="17.4120%" height="15" fill="rgb(213,64,8)" fg:x="2295" fg:w="584"/><text x="68.6758%" y="959.50">deno`v8::internal::MaybeHan..</text></g><g><title>deno`v8::internal::ExternalCallbackScope::~ExternalCallbackScope (1 samples, 0.03%)</title><rect x="85.8080%" y="933" width="0.0298%" height="15" fill="rgb(210,75,36)" fg:x="2878" fg:w="1"/><text x="86.0580%" y="943.50"></text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (586 samples, 17.47%)</title><rect x="68.3959%" y="1157" width="17.4717%" height="15" fill="rgb(229,88,21)" fg:x="2294" fg:w="586"/><text x="68.6459%" y="1167.50">deno`v8::internal::SourceTe..</text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (586 samples, 17.47%)</title><rect x="68.3959%" y="1141" width="17.4717%" height="15" fill="rgb(252,204,47)" fg:x="2294" fg:w="586"/><text x="68.6459%" y="1151.50">deno`v8::internal::Executio..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (586 samples, 17.47%)</title><rect x="68.3959%" y="1125" width="17.4717%" height="15" fill="rgb(208,77,27)" fg:x="2294" fg:w="586"/><text x="68.6459%" y="1135.50">deno`v8::internal::(anonymo..</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (586 samples, 17.47%)</title><rect x="68.3959%" y="1109" width="17.4717%" height="15" fill="rgb(221,76,26)" fg:x="2294" fg:w="586"/><text x="68.6459%" y="1119.50">deno`v8::internal::(anonymo..</text></g><g><title>deno`Builtins_JSEntry (586 samples, 17.47%)</title><rect x="68.3959%" y="1093" width="17.4717%" height="15" fill="rgb(225,139,18)" fg:x="2294" fg:w="586"/><text x="68.6459%" y="1103.50">deno`Builtins_JSEntry</text></g><g><title>deno`Builtins_JSEntryTrampoline (586 samples, 17.47%)</title><rect x="68.3959%" y="1077" width="17.4717%" height="15" fill="rgb(230,137,11)" fg:x="2294" fg:w="586"/><text x="68.6459%" y="1087.50">deno`Builtins_JSEntryTrampo..</text></g><g><title>deno`Builtins_GeneratorPrototypeNext (586 samples, 17.47%)</title><rect x="68.3959%" y="1061" width="17.4717%" height="15" fill="rgb(212,28,1)" fg:x="2294" fg:w="586"/><text x="68.6459%" y="1071.50">deno`Builtins_GeneratorProt..</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (586 samples, 17.47%)</title><rect x="68.3959%" y="1045" width="17.4717%" height="15" fill="rgb(248,164,17)" fg:x="2294" fg:w="586"/><text x="68.6459%" y="1055.50">deno`Builtins_InterpreterEn..</text></g><g><title>0x11004a7b8 (1 samples, 0.03%)</title><rect x="85.8378%" y="1029" width="0.0298%" height="15" fill="rgb(222,171,42)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="1039.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.03%)</title><rect x="85.8378%" y="1013" width="0.0298%" height="15" fill="rgb(243,84,45)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="1023.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.03%)</title><rect x="85.8378%" y="997" width="0.0298%" height="15" fill="rgb(252,49,23)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="1007.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="85.8378%" y="981" width="0.0298%" height="15" fill="rgb(215,19,7)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="991.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.03%)</title><rect x="85.8378%" y="965" width="0.0298%" height="15" fill="rgb(238,81,41)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="975.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (1 samples, 0.03%)</title><rect x="85.8378%" y="949" width="0.0298%" height="15" fill="rgb(210,199,37)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="959.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (1 samples, 0.03%)</title><rect x="85.8378%" y="933" width="0.0298%" height="15" fill="rgb(244,192,49)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="943.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.03%)</title><rect x="85.8378%" y="917" width="0.0298%" height="15" fill="rgb(226,211,11)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="927.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.03%)</title><rect x="85.8378%" y="901" width="0.0298%" height="15" fill="rgb(236,162,54)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="911.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.03%)</title><rect x="85.8378%" y="885" width="0.0298%" height="15" fill="rgb(220,229,9)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="895.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.03%)</title><rect x="85.8378%" y="869" width="0.0298%" height="15" fill="rgb(250,87,22)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="879.50"></text></g><g><title>deno`v8::internal::Builtin_ConsoleLog (1 samples, 0.03%)</title><rect x="85.8378%" y="853" width="0.0298%" height="15" fill="rgb(239,43,17)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="863.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConsoleCall(v8::internal::Isolate*, v8::internal::BuiltinArguments const&amp;, void (v8::debug::ConsoleDelegate::*) (1 samples, 0.03%)</title><rect x="85.8378%" y="837" width="0.0298%" height="15" fill="rgb(231,177,25)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="847.50"></text></g><g><title>deno`v8_inspector::V8Console::Log (1 samples, 0.03%)</title><rect x="85.8378%" y="821" width="0.0298%" height="15" fill="rgb(219,179,1)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="831.50"></text></g><g><title>deno`v8_inspector::(anonymous namespace)::ConsoleHelper::reportCall (1 samples, 0.03%)</title><rect x="85.8378%" y="805" width="0.0298%" height="15" fill="rgb(238,219,53)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="815.50"></text></g><g><title>deno`v8_inspector::(anonymous namespace)::ConsoleHelper::reportCall(v8_inspector::ConsoleAPIType, std::__1::vector&lt;v8::Local&lt;v8::Value&gt;, std::__1::allocator&lt;v8::Local (1 samples, 0.03%)</title><rect x="85.8378%" y="789" width="0.0298%" height="15" fill="rgb(232,167,36)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="799.50"></text></g><g><title>deno`v8_inspector::V8Debugger::captureStackTrace (1 samples, 0.03%)</title><rect x="85.8378%" y="773" width="0.0298%" height="15" fill="rgb(244,19,51)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="783.50"></text></g><g><title>deno`v8_inspector::V8StackTraceImpl::capture (1 samples, 0.03%)</title><rect x="85.8378%" y="757" width="0.0298%" height="15" fill="rgb(224,6,22)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="767.50"></text></g><g><title>deno`v8::StackTrace::CurrentStackTrace (1 samples, 0.03%)</title><rect x="85.8378%" y="741" width="0.0298%" height="15" fill="rgb(224,145,5)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="751.50"></text></g><g><title>deno`v8::internal::Isolate::CaptureDetailedStackTrace (1 samples, 0.03%)</title><rect x="85.8378%" y="725" width="0.0298%" height="15" fill="rgb(234,130,49)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="735.50"></text></g><g><title>deno`v8::internal::FixedArray::ShrinkOrEmpty(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="85.8378%" y="709" width="0.0298%" height="15" fill="rgb(254,6,2)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="719.50"></text></g><g><title>deno`void v8::internal::Heap::CreateFillerForArray&lt;v8::internal::FixedArrayBase&gt; (1 samples, 0.03%)</title><rect x="85.8378%" y="693" width="0.0298%" height="15" fill="rgb(208,96,46)" fg:x="2879" fg:w="1"/><text x="86.0878%" y="703.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="85.8676%" y="949" width="0.0298%" height="15" fill="rgb(239,3,39)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="959.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="85.8676%" y="933" width="0.0298%" height="15" fill="rgb(233,210,1)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="943.50"></text></g><g><title>deno`deno::proc_state::ProcState::prepare_module_load::_{{closure}} (1 samples, 0.03%)</title><rect x="85.8676%" y="917" width="0.0298%" height="15" fill="rgb(244,137,37)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="927.50"></text></g><g><title>deno`deno::cache::parsed_source::ParsedSourceCache::as_analyzer (1 samples, 0.03%)</title><rect x="85.8676%" y="901" width="0.0298%" height="15" fill="rgb(240,136,2)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="911.50"></text></g><g><title>deno`deno::cache::common::run_sqlite_pragma (1 samples, 0.03%)</title><rect x="85.8676%" y="885" width="0.0298%" height="15" fill="rgb(239,18,37)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="895.50"></text></g><g><title>deno`rusqlite::Connection::execute_batch (1 samples, 0.03%)</title><rect x="85.8676%" y="869" width="0.0298%" height="15" fill="rgb(218,185,22)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="879.50"></text></g><g><title>deno`rusqlite::Connection::prepare (1 samples, 0.03%)</title><rect x="85.8676%" y="853" width="0.0298%" height="15" fill="rgb(225,218,4)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="863.50"></text></g><g><title>deno`rusqlite::inner_connection::InnerConnection::prepare (1 samples, 0.03%)</title><rect x="85.8676%" y="837" width="0.0298%" height="15" fill="rgb(230,182,32)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="847.50"></text></g><g><title>deno`sqlite3LockAndPrepare (1 samples, 0.03%)</title><rect x="85.8676%" y="821" width="0.0298%" height="15" fill="rgb(242,56,43)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="831.50"></text></g><g><title>deno`sqlite3Prepare (1 samples, 0.03%)</title><rect x="85.8676%" y="805" width="0.0298%" height="15" fill="rgb(233,99,24)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="815.50"></text></g><g><title>deno`sqlite3RunParser (1 samples, 0.03%)</title><rect x="85.8676%" y="789" width="0.0298%" height="15" fill="rgb(234,209,42)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="799.50"></text></g><g><title>deno`yy_reduce (1 samples, 0.03%)</title><rect x="85.8676%" y="773" width="0.0298%" height="15" fill="rgb(227,7,12)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="783.50"></text></g><g><title>deno`sqlite3Pragma (1 samples, 0.03%)</title><rect x="85.8676%" y="757" width="0.0298%" height="15" fill="rgb(245,203,43)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="767.50"></text></g><g><title>deno`sqlite3ReadSchema (1 samples, 0.03%)</title><rect x="85.8676%" y="741" width="0.0298%" height="15" fill="rgb(238,205,33)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="751.50"></text></g><g><title>deno`sqlite3Init (1 samples, 0.03%)</title><rect x="85.8676%" y="725" width="0.0298%" height="15" fill="rgb(231,56,7)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="735.50"></text></g><g><title>deno`sqlite3InitOne (1 samples, 0.03%)</title><rect x="85.8676%" y="709" width="0.0298%" height="15" fill="rgb(244,186,29)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="719.50"></text></g><g><title>deno`sqlite3BtreeBeginTrans (1 samples, 0.03%)</title><rect x="85.8676%" y="693" width="0.0298%" height="15" fill="rgb(234,111,31)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="703.50"></text></g><g><title>deno`sqlite3PagerSharedLock (1 samples, 0.03%)</title><rect x="85.8676%" y="677" width="0.0298%" height="15" fill="rgb(241,149,10)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="687.50"></text></g><g><title>deno`walTryBeginRead (1 samples, 0.03%)</title><rect x="85.8676%" y="661" width="0.0298%" height="15" fill="rgb(249,206,44)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="671.50"></text></g><g><title>deno`walIndexReadHdr (1 samples, 0.03%)</title><rect x="85.8676%" y="645" width="0.0298%" height="15" fill="rgb(251,153,30)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="655.50"></text></g><g><title>deno`walIndexPageRealloc (1 samples, 0.03%)</title><rect x="85.8676%" y="629" width="0.0298%" height="15" fill="rgb(239,152,38)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="639.50"></text></g><g><title>deno`unixShmMap (1 samples, 0.03%)</title><rect x="85.8676%" y="613" width="0.0298%" height="15" fill="rgb(249,139,47)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`pwrite (1 samples, 0.03%)</title><rect x="85.8676%" y="597" width="0.0298%" height="15" fill="rgb(244,64,35)" fg:x="2880" fg:w="1"/><text x="86.1176%" y="607.50"></text></g><g><title>deno`&lt;serde_v8::magic::bytestring::ByteString as serde_v8::magic::transl8::FromV8&gt;::from_v8 (14 samples, 0.42%)</title><rect x="85.8974%" y="677" width="0.4174%" height="15" fill="rgb(216,46,15)" fg:x="2881" fg:w="14"/><text x="86.1474%" y="687.50"></text></g><g><title>deno`v8::String::WriteOneByte (14 samples, 0.42%)</title><rect x="85.8974%" y="661" width="0.4174%" height="15" fill="rgb(250,74,19)" fg:x="2881" fg:w="14"/><text x="86.1474%" y="671.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (14 samples, 0.42%)</title><rect x="85.8974%" y="645" width="0.4174%" height="15" fill="rgb(249,42,33)" fg:x="2881" fg:w="14"/><text x="86.1474%" y="655.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.42%)</title><rect x="85.8974%" y="629" width="0.4174%" height="15" fill="rgb(242,149,17)" fg:x="2881" fg:w="14"/><text x="86.1474%" y="639.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (1 samples, 0.03%)</title><rect x="86.3148%" y="549" width="0.0298%" height="15" fill="rgb(244,29,21)" fg:x="2895" fg:w="1"/><text x="86.5648%" y="559.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (1 samples, 0.03%)</title><rect x="86.3148%" y="533" width="0.0298%" height="15" fill="rgb(220,130,37)" fg:x="2895" fg:w="1"/><text x="86.5648%" y="543.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (1 samples, 0.03%)</title><rect x="86.3148%" y="517" width="0.0298%" height="15" fill="rgb(211,67,2)" fg:x="2895" fg:w="1"/><text x="86.5648%" y="527.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (1 samples, 0.03%)</title><rect x="86.3148%" y="501" width="0.0298%" height="15" fill="rgb(235,68,52)" fg:x="2895" fg:w="1"/><text x="86.5648%" y="511.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.03%)</title><rect x="86.3148%" y="485" width="0.0298%" height="15" fill="rgb(246,142,3)" fg:x="2895" fg:w="1"/><text x="86.5648%" y="495.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.03%)</title><rect x="86.3148%" y="469" width="0.0298%" height="15" fill="rgb(241,25,7)" fg:x="2895" fg:w="1"/><text x="86.5648%" y="479.50"></text></g><g><title>libsystem_c.dylib`__sfvwrite (1 samples, 0.03%)</title><rect x="86.3148%" y="453" width="0.0298%" height="15" fill="rgb(242,119,39)" fg:x="2895" fg:w="1"/><text x="86.5648%" y="463.50"></text></g><g><title>deno`v8::internal::PauseAllocationObserversScope::~PauseAllocationObserversScope (1 samples, 0.03%)</title><rect x="86.3447%" y="517" width="0.0298%" height="15" fill="rgb(241,98,45)" fg:x="2896" fg:w="1"/><text x="86.5947%" y="527.50"></text></g><g><title>deno`v8::internal::SpaceWithLinearArea::ResumeAllocationObservers (1 samples, 0.03%)</title><rect x="86.3447%" y="501" width="0.0298%" height="15" fill="rgb(254,28,30)" fg:x="2896" fg:w="1"/><text x="86.5947%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="86.3447%" y="485" width="0.0298%" height="15" fill="rgb(241,142,54)" fg:x="2896" fg:w="1"/><text x="86.5947%" y="495.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (6 samples, 0.18%)</title><rect x="86.3745%" y="485" width="0.1789%" height="15" fill="rgb(222,85,15)" fg:x="2897" fg:w="6"/><text x="86.6245%" y="495.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (10 samples, 0.30%)</title><rect x="86.3447%" y="533" width="0.2982%" height="15" fill="rgb(210,85,47)" fg:x="2896" fg:w="10"/><text x="86.5947%" y="543.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (9 samples, 0.27%)</title><rect x="86.3745%" y="517" width="0.2683%" height="15" fill="rgb(224,206,25)" fg:x="2897" fg:w="9"/><text x="86.6245%" y="527.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (9 samples, 0.27%)</title><rect x="86.3745%" y="501" width="0.2683%" height="15" fill="rgb(243,201,19)" fg:x="2897" fg:w="9"/><text x="86.6245%" y="511.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (3 samples, 0.09%)</title><rect x="86.5534%" y="485" width="0.0894%" height="15" fill="rgb(236,59,4)" fg:x="2903" fg:w="3"/><text x="86.8034%" y="495.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedPageFromPool (1 samples, 0.03%)</title><rect x="86.6428%" y="485" width="0.0298%" height="15" fill="rgb(254,179,45)" fg:x="2906" fg:w="1"/><text x="86.8928%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.03%)</title><rect x="86.6428%" y="469" width="0.0298%" height="15" fill="rgb(226,14,10)" fg:x="2906" fg:w="1"/><text x="86.8928%" y="479.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (13 samples, 0.39%)</title><rect x="86.3148%" y="565" width="0.3876%" height="15" fill="rgb(244,27,41)" fg:x="2895" fg:w="13"/><text x="86.5648%" y="575.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (12 samples, 0.36%)</title><rect x="86.3447%" y="549" width="0.3578%" height="15" fill="rgb(235,35,32)" fg:x="2896" fg:w="12"/><text x="86.5947%" y="559.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::Prologue (2 samples, 0.06%)</title><rect x="86.6428%" y="533" width="0.0596%" height="15" fill="rgb(218,68,31)" fg:x="2906" fg:w="2"/><text x="86.8928%" y="543.50"></text></g><g><title>deno`v8::internal::SemiSpace::Commit (2 samples, 0.06%)</title><rect x="86.6428%" y="517" width="0.0596%" height="15" fill="rgb(207,120,37)" fg:x="2906" fg:w="2"/><text x="86.8928%" y="527.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (2 samples, 0.06%)</title><rect x="86.6428%" y="501" width="0.0596%" height="15" fill="rgb(227,98,0)" fg:x="2906" fg:w="2"/><text x="86.8928%" y="511.50"></text></g><g><title>deno`v8::internal::Page::Page (1 samples, 0.03%)</title><rect x="86.6726%" y="485" width="0.0298%" height="15" fill="rgb(207,7,3)" fg:x="2907" fg:w="1"/><text x="86.9226%" y="495.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (1 samples, 0.03%)</title><rect x="86.6726%" y="469" width="0.0298%" height="15" fill="rgb(206,98,19)" fg:x="2907" fg:w="1"/><text x="86.9226%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="86.6726%" y="453" width="0.0298%" height="15" fill="rgb(217,5,26)" fg:x="2907" fg:w="1"/><text x="86.9226%" y="463.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewStringFromOneByte(v8::base::Vector (14 samples, 0.42%)</title><rect x="86.3148%" y="645" width="0.4174%" height="15" fill="rgb(235,190,38)" fg:x="2895" fg:w="14"/><text x="86.5648%" y="655.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (14 samples, 0.42%)</title><rect x="86.3148%" y="629" width="0.4174%" height="15" fill="rgb(247,86,24)" fg:x="2895" fg:w="14"/><text x="86.5648%" y="639.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (14 samples, 0.42%)</title><rect x="86.3148%" y="613" width="0.4174%" height="15" fill="rgb(205,101,16)" fg:x="2895" fg:w="14"/><text x="86.5648%" y="623.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (14 samples, 0.42%)</title><rect x="86.3148%" y="597" width="0.4174%" height="15" fill="rgb(246,168,33)" fg:x="2895" fg:w="14"/><text x="86.5648%" y="607.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (14 samples, 0.42%)</title><rect x="86.3148%" y="581" width="0.4174%" height="15" fill="rgb(231,114,1)" fg:x="2895" fg:w="14"/><text x="86.5648%" y="591.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::AllocateRaw (1 samples, 0.03%)</title><rect x="86.7024%" y="565" width="0.0298%" height="15" fill="rgb(207,184,53)" fg:x="2908" fg:w="1"/><text x="86.9524%" y="575.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (1 samples, 0.03%)</title><rect x="86.7024%" y="549" width="0.0298%" height="15" fill="rgb(224,95,51)" fg:x="2908" fg:w="1"/><text x="86.9524%" y="559.50"></text></g><g><title>deno`v8::internal::LargePage::LargePage (1 samples, 0.03%)</title><rect x="86.7024%" y="533" width="0.0298%" height="15" fill="rgb(212,188,45)" fg:x="2908" fg:w="1"/><text x="86.9524%" y="543.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (1 samples, 0.03%)</title><rect x="86.7024%" y="517" width="0.0298%" height="15" fill="rgb(223,154,38)" fg:x="2908" fg:w="1"/><text x="86.9524%" y="527.50"></text></g><g><title>deno`v8::internal::BasicMemoryChunk::BasicMemoryChunk (1 samples, 0.03%)</title><rect x="86.7024%" y="501" width="0.0298%" height="15" fill="rgb(251,22,52)" fg:x="2908" fg:w="1"/><text x="86.9524%" y="511.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (38 samples, 1.13%)</title><rect x="86.3148%" y="677" width="1.1330%" height="15" fill="rgb(229,209,22)" fg:x="2895" fg:w="38"/><text x="86.5648%" y="687.50"></text></g><g><title>deno`v8::String::NewFromOneByte (38 samples, 1.13%)</title><rect x="86.3148%" y="661" width="1.1330%" height="15" fill="rgb(234,138,34)" fg:x="2895" fg:w="38"/><text x="86.5648%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.72%)</title><rect x="86.7323%" y="645" width="0.7156%" height="15" fill="rgb(212,95,11)" fg:x="2909" fg:w="24"/><text x="86.9823%" y="655.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (395 samples, 11.78%)</title><rect x="85.8974%" y="917" width="11.7770%" height="15" fill="rgb(240,179,47)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="927.50">deno`v8::internal..</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (395 samples, 11.78%)</title><rect x="85.8974%" y="901" width="11.7770%" height="15" fill="rgb(240,163,11)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="911.50">deno`v8::internal..</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (395 samples, 11.78%)</title><rect x="85.8974%" y="885" width="11.7770%" height="15" fill="rgb(236,37,12)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="895.50">deno`v8::internal..</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (395 samples, 11.78%)</title><rect x="85.8974%" y="869" width="11.7770%" height="15" fill="rgb(232,164,16)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="879.50">deno`v8::internal..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (395 samples, 11.78%)</title><rect x="85.8974%" y="853" width="11.7770%" height="15" fill="rgb(244,205,15)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="863.50">deno`v8::internal..</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (395 samples, 11.78%)</title><rect x="85.8974%" y="837" width="11.7770%" height="15" fill="rgb(223,117,47)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="847.50">deno`v8::internal..</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (395 samples, 11.78%)</title><rect x="85.8974%" y="821" width="11.7770%" height="15" fill="rgb(244,107,35)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="831.50">deno`Builtins_JSR..</text></g><g><title>deno`Builtins_RunMicrotasks (395 samples, 11.78%)</title><rect x="85.8974%" y="805" width="11.7770%" height="15" fill="rgb(205,140,8)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="815.50">deno`Builtins_Run..</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (395 samples, 11.78%)</title><rect x="85.8974%" y="789" width="11.7770%" height="15" fill="rgb(228,84,46)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="799.50">deno`Builtins_Int..</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (395 samples, 11.78%)</title><rect x="85.8974%" y="773" width="11.7770%" height="15" fill="rgb(254,188,9)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="783.50">deno`Builtins_Int..</text></g><g><title>0x11004a53c (395 samples, 11.78%)</title><rect x="85.8974%" y="757" width="11.7770%" height="15" fill="rgb(206,112,54)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="767.50">0x11004a53c</text></g><g><title>0x11004b130 (395 samples, 11.78%)</title><rect x="85.8974%" y="741" width="11.7770%" height="15" fill="rgb(216,84,49)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="751.50">0x11004b130</text></g><g><title>0x11004bf10 (395 samples, 11.78%)</title><rect x="85.8974%" y="725" width="11.7770%" height="15" fill="rgb(214,194,35)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="735.50">0x11004bf10</text></g><g><title>deno`Builtins_CallApiCallback (395 samples, 11.78%)</title><rect x="85.8974%" y="709" width="11.7770%" height="15" fill="rgb(249,28,3)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="719.50">deno`Builtins_Cal..</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (395 samples, 11.78%)</title><rect x="85.8974%" y="693" width="11.7770%" height="15" fill="rgb(222,56,52)" fg:x="2881" fg:w="395"/><text x="86.1474%" y="703.50">deno`&lt;extern &quot;C&quot; ..</text></g><g><title>deno`deno_web::forgiving_base64_decode (343 samples, 10.23%)</title><rect x="87.4478%" y="677" width="10.2266%" height="15" fill="rgb(245,217,50)" fg:x="2933" fg:w="343"/><text x="87.6978%" y="687.50">deno`deno_web::..</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.03%)</title><rect x="97.6744%" y="725" width="0.0298%" height="15" fill="rgb(213,201,24)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="735.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.03%)</title><rect x="97.6744%" y="709" width="0.0298%" height="15" fill="rgb(248,116,28)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="719.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="97.6744%" y="693" width="0.0298%" height="15" fill="rgb(219,72,43)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="703.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.03%)</title><rect x="97.6744%" y="677" width="0.0298%" height="15" fill="rgb(209,138,14)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="687.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.03%)</title><rect x="97.6744%" y="661" width="0.0298%" height="15" fill="rgb(222,18,33)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="671.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::new_from_utf8 (1 samples, 0.03%)</title><rect x="97.6744%" y="645" width="0.0298%" height="15" fill="rgb(213,199,7)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="655.50"></text></g><g><title>deno`v8::String::NewFromUtf8 (1 samples, 0.03%)</title><rect x="97.6744%" y="629" width="0.0298%" height="15" fill="rgb(250,110,10)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="639.50"></text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (1 samples, 0.03%)</title><rect x="97.6744%" y="613" width="0.0298%" height="15" fill="rgb(248,123,6)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="623.50"></text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (1 samples, 0.03%)</title><rect x="97.6744%" y="597" width="0.0298%" height="15" fill="rgb(206,91,31)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="607.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (1 samples, 0.03%)</title><rect x="97.6744%" y="581" width="0.0298%" height="15" fill="rgb(211,154,13)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="591.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (1 samples, 0.03%)</title><rect x="97.6744%" y="565" width="0.0298%" height="15" fill="rgb(225,148,7)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="575.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.03%)</title><rect x="97.6744%" y="549" width="0.0298%" height="15" fill="rgb(220,160,43)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="559.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.03%)</title><rect x="97.6744%" y="533" width="0.0298%" height="15" fill="rgb(213,52,39)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="543.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.03%)</title><rect x="97.6744%" y="517" width="0.0298%" height="15" fill="rgb(243,137,7)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="527.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.03%)</title><rect x="97.6744%" y="501" width="0.0298%" height="15" fill="rgb(230,79,13)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="511.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.03%)</title><rect x="97.6744%" y="485" width="0.0298%" height="15" fill="rgb(247,105,23)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="495.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.03%)</title><rect x="97.6744%" y="469" width="0.0298%" height="15" fill="rgb(223,179,41)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="479.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.03%)</title><rect x="97.6744%" y="453" width="0.0298%" height="15" fill="rgb(218,9,34)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="463.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (1 samples, 0.03%)</title><rect x="97.6744%" y="437" width="0.0298%" height="15" fill="rgb(222,106,8)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="447.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (1 samples, 0.03%)</title><rect x="97.6744%" y="421" width="0.0298%" height="15" fill="rgb(211,220,0)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="431.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (1 samples, 0.03%)</title><rect x="97.6744%" y="405" width="0.0298%" height="15" fill="rgb(229,52,16)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="415.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="97.6744%" y="389" width="0.0298%" height="15" fill="rgb(212,155,18)" fg:x="3276" fg:w="1"/><text x="97.9244%" y="399.50"></text></g><g><title>deno`&lt;serde_v8::ser::StructSerializers as serde::ser::SerializeStruct&gt;::end (1 samples, 0.03%)</title><rect x="97.7042%" y="629" width="0.0298%" height="15" fill="rgb(242,21,14)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="639.50"></text></g><g><title>deno`v8::String::NewFromOneByte (1 samples, 0.03%)</title><rect x="97.7042%" y="613" width="0.0298%" height="15" fill="rgb(222,19,48)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="623.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewStringFromOneByte(v8::base::Vector (1 samples, 0.03%)</title><rect x="97.7042%" y="597" width="0.0298%" height="15" fill="rgb(232,45,27)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="607.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (1 samples, 0.03%)</title><rect x="97.7042%" y="581" width="0.0298%" height="15" fill="rgb(249,103,42)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="591.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (1 samples, 0.03%)</title><rect x="97.7042%" y="565" width="0.0298%" height="15" fill="rgb(246,81,33)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="575.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.03%)</title><rect x="97.7042%" y="549" width="0.0298%" height="15" fill="rgb(252,33,42)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="559.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.03%)</title><rect x="97.7042%" y="533" width="0.0298%" height="15" fill="rgb(209,212,41)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="543.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.03%)</title><rect x="97.7042%" y="517" width="0.0298%" height="15" fill="rgb(207,154,6)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="527.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.03%)</title><rect x="97.7042%" y="501" width="0.0298%" height="15" fill="rgb(223,64,47)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="511.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.03%)</title><rect x="97.7042%" y="485" width="0.0298%" height="15" fill="rgb(211,161,38)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="495.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.03%)</title><rect x="97.7042%" y="469" width="0.0298%" height="15" fill="rgb(219,138,40)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="479.50"></text></g><g><title>deno`v8::internal::Scavenger::~Scavenger (1 samples, 0.03%)</title><rect x="97.7042%" y="453" width="0.0298%" height="15" fill="rgb(241,228,46)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="463.50"></text></g><g><title>deno`heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;::Local::~Local (1 samples, 0.03%)</title><rect x="97.7042%" y="437" width="0.0298%" height="15" fill="rgb(223,209,38)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="97.7042%" y="421" width="0.0298%" height="15" fill="rgb(236,164,45)" fg:x="3277" fg:w="1"/><text x="97.9542%" y="431.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (400 samples, 11.93%)</title><rect x="85.8676%" y="965" width="11.9261%" height="15" fill="rgb(231,15,5)" fg:x="2880" fg:w="400"/><text x="86.1176%" y="975.50">deno`&lt;core::future..</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (399 samples, 11.90%)</title><rect x="85.8974%" y="949" width="11.8962%" height="15" fill="rgb(252,35,15)" fg:x="2881" fg:w="399"/><text x="86.1474%" y="959.50">deno`deno_core::ru..</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (399 samples, 11.90%)</title><rect x="85.8974%" y="933" width="11.8962%" height="15" fill="rgb(248,181,18)" fg:x="2881" fg:w="399"/><text x="86.1474%" y="943.50">deno`v8::Module::E..</text></g><g><title>deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle (4 samples, 0.12%)</title><rect x="97.6744%" y="917" width="0.1193%" height="15" fill="rgb(233,39,42)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="927.50"></text></g><g><title>deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle (4 samples, 0.12%)</title><rect x="97.6744%" y="901" width="0.1193%" height="15" fill="rgb(238,110,33)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="911.50"></text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (4 samples, 0.12%)</title><rect x="97.6744%" y="885" width="0.1193%" height="15" fill="rgb(233,195,10)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="895.50"></text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (4 samples, 0.12%)</title><rect x="97.6744%" y="869" width="0.1193%" height="15" fill="rgb(254,105,3)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="879.50"></text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (4 samples, 0.12%)</title><rect x="97.6744%" y="853" width="0.1193%" height="15" fill="rgb(221,225,9)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="863.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (4 samples, 0.12%)</title><rect x="97.6744%" y="837" width="0.1193%" height="15" fill="rgb(224,227,45)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="847.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (4 samples, 0.12%)</title><rect x="97.6744%" y="821" width="0.1193%" height="15" fill="rgb(229,198,43)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="831.50"></text></g><g><title>deno`Builtins_JSEntry (4 samples, 0.12%)</title><rect x="97.6744%" y="805" width="0.1193%" height="15" fill="rgb(206,209,35)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="815.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (4 samples, 0.12%)</title><rect x="97.6744%" y="789" width="0.1193%" height="15" fill="rgb(245,195,53)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="799.50"></text></g><g><title>deno`Builtins_GeneratorPrototypeNext (4 samples, 0.12%)</title><rect x="97.6744%" y="773" width="0.1193%" height="15" fill="rgb(240,92,26)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="783.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (4 samples, 0.12%)</title><rect x="97.6744%" y="757" width="0.1193%" height="15" fill="rgb(207,40,23)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="767.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (4 samples, 0.12%)</title><rect x="97.6744%" y="741" width="0.1193%" height="15" fill="rgb(223,111,35)" fg:x="3276" fg:w="4"/><text x="97.9244%" y="751.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3 samples, 0.09%)</title><rect x="97.7042%" y="725" width="0.0894%" height="15" fill="rgb(229,147,28)" fg:x="3277" fg:w="3"/><text x="97.9542%" y="735.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3 samples, 0.09%)</title><rect x="97.7042%" y="709" width="0.0894%" height="15" fill="rgb(211,29,28)" fg:x="3277" fg:w="3"/><text x="97.9542%" y="719.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (3 samples, 0.09%)</title><rect x="97.7042%" y="693" width="0.0894%" height="15" fill="rgb(228,72,33)" fg:x="3277" fg:w="3"/><text x="97.9542%" y="703.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.09%)</title><rect x="97.7042%" y="677" width="0.0894%" height="15" fill="rgb(205,214,31)" fg:x="3277" fg:w="3"/><text x="97.9542%" y="687.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (3 samples, 0.09%)</title><rect x="97.7042%" y="661" width="0.0894%" height="15" fill="rgb(224,111,15)" fg:x="3277" fg:w="3"/><text x="97.9542%" y="671.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.09%)</title><rect x="97.7042%" y="645" width="0.0894%" height="15" fill="rgb(253,21,26)" fg:x="3277" fg:w="3"/><text x="97.9542%" y="655.50"></text></g><g><title>deno`deno_web::forgiving_base64_decode (2 samples, 0.06%)</title><rect x="97.7340%" y="629" width="0.0596%" height="15" fill="rgb(245,139,43)" fg:x="3278" fg:w="2"/><text x="97.9840%" y="639.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (401 samples, 11.96%)</title><rect x="85.8676%" y="997" width="11.9559%" height="15" fill="rgb(252,170,7)" fg:x="2880" fg:w="401"/><text x="86.1176%" y="1007.50">deno`&lt;core::future..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (401 samples, 11.96%)</title><rect x="85.8676%" y="981" width="11.9559%" height="15" fill="rgb(231,118,14)" fg:x="2880" fg:w="401"/><text x="86.1176%" y="991.50">deno`&lt;core::future..</text></g><g><title>deno`&lt;deno_core::modules::RecursiveModuleLoad as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.03%)</title><rect x="97.7937%" y="965" width="0.0298%" height="15" fill="rgb(238,83,0)" fg:x="3280" fg:w="1"/><text x="98.0437%" y="975.50"></text></g><g><title>deno`&lt;deno::module_loader::CliModuleLoader as deno_core::modules::ModuleLoader&gt;::resolve (1 samples, 0.03%)</title><rect x="97.7937%" y="949" width="0.0298%" height="15" fill="rgb(221,39,39)" fg:x="3280" fg:w="1"/><text x="98.0437%" y="959.50"></text></g><g><title>deno`deno_core::module_specifier::resolve_url_or_path (1 samples, 0.03%)</title><rect x="97.7937%" y="933" width="0.0298%" height="15" fill="rgb(222,119,46)" fg:x="3280" fg:w="1"/><text x="98.0437%" y="943.50"></text></g><g><title>deno`deno_core::module_specifier::resolve_path (1 samples, 0.03%)</title><rect x="97.7937%" y="917" width="0.0298%" height="15" fill="rgb(222,165,49)" fg:x="3280" fg:w="1"/><text x="98.0437%" y="927.50"></text></g><g><title>deno`std::env::current_dir (1 samples, 0.03%)</title><rect x="97.7937%" y="901" width="0.0298%" height="15" fill="rgb(219,113,52)" fg:x="3280" fg:w="1"/><text x="98.0437%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="97.7937%" y="885" width="0.0298%" height="15" fill="rgb(214,7,15)" fg:x="3280" fg:w="1"/><text x="98.0437%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="97.7937%" y="869" width="0.0298%" height="15" fill="rgb(235,32,4)" fg:x="3280" fg:w="1"/><text x="98.0437%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="97.7937%" y="853" width="0.0298%" height="15" fill="rgb(238,90,54)" fg:x="3280" fg:w="1"/><text x="98.0437%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="853" width="0.0298%" height="15" fill="rgb(213,208,19)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="97.8235%" y="837" width="0.0298%" height="15" fill="rgb(233,156,4)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="821" width="0.0298%" height="15" fill="rgb(207,194,5)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="805" width="0.0298%" height="15" fill="rgb(206,111,30)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="789" width="0.0298%" height="15" fill="rgb(243,70,54)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="97.8235%" y="773" width="0.0298%" height="15" fill="rgb(242,28,8)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="757" width="0.0298%" height="15" fill="rgb(219,106,18)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="741" width="0.0298%" height="15" fill="rgb(244,222,10)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="751.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="725" width="0.0298%" height="15" fill="rgb(236,179,52)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="735.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="97.8235%" y="709" width="0.0298%" height="15" fill="rgb(213,23,39)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="719.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="693" width="0.0298%" height="15" fill="rgb(238,48,10)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="703.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="677" width="0.0298%" height="15" fill="rgb(251,196,23)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="687.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="661" width="0.0298%" height="15" fill="rgb(250,152,24)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="671.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="97.8235%" y="645" width="0.0298%" height="15" fill="rgb(209,150,17)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="655.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="629" width="0.0298%" height="15" fill="rgb(234,202,34)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="639.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="613" width="0.0298%" height="15" fill="rgb(253,148,53)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="623.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="597" width="0.0298%" height="15" fill="rgb(218,129,16)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="607.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="581" width="0.0298%" height="15" fill="rgb(216,85,19)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="591.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="565" width="0.0298%" height="15" fill="rgb(235,228,7)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="575.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="549" width="0.0298%" height="15" fill="rgb(245,175,0)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="559.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="533" width="0.0298%" height="15" fill="rgb(208,168,36)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="543.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="517" width="0.0298%" height="15" fill="rgb(246,171,24)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="527.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="501" width="0.0298%" height="15" fill="rgb(215,142,24)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="511.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="485" width="0.0298%" height="15" fill="rgb(250,187,7)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="495.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="469" width="0.0298%" height="15" fill="rgb(228,66,33)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="479.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="453" width="0.0298%" height="15" fill="rgb(234,215,21)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="463.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="437" width="0.0298%" height="15" fill="rgb(222,191,20)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="447.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="421" width="0.0298%" height="15" fill="rgb(245,79,54)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="431.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="405" width="0.0298%" height="15" fill="rgb(240,10,37)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="415.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="389" width="0.0298%" height="15" fill="rgb(214,192,32)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="399.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="373" width="0.0298%" height="15" fill="rgb(209,36,54)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="383.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="357" width="0.0298%" height="15" fill="rgb(220,10,11)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="367.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="341" width="0.0298%" height="15" fill="rgb(221,106,17)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="351.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="325" width="0.0298%" height="15" fill="rgb(251,142,44)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="335.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="309" width="0.0298%" height="15" fill="rgb(238,13,15)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="319.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="293" width="0.0298%" height="15" fill="rgb(208,107,27)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="303.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="277" width="0.0298%" height="15" fill="rgb(205,136,37)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="287.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="261" width="0.0298%" height="15" fill="rgb(250,205,27)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="271.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="245" width="0.0298%" height="15" fill="rgb(210,80,43)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="255.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="229" width="0.0298%" height="15" fill="rgb(247,160,36)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="239.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="213" width="0.0298%" height="15" fill="rgb(234,13,49)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="223.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="197" width="0.0298%" height="15" fill="rgb(234,122,0)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="207.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="181" width="0.0298%" height="15" fill="rgb(207,146,38)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="191.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="165" width="0.0298%" height="15" fill="rgb(207,177,25)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="175.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="149" width="0.0298%" height="15" fill="rgb(211,178,42)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="159.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="97.8235%" y="133" width="0.0298%" height="15" fill="rgb(230,69,54)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="143.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="117" width="0.0298%" height="15" fill="rgb(214,135,41)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="127.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="101" width="0.0298%" height="15" fill="rgb(237,67,25)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="111.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="85" width="0.0298%" height="15" fill="rgb(222,189,50)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="95.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.8235%" y="69" width="0.0298%" height="15" fill="rgb(245,148,34)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="79.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.8235%" y="53" width="0.0298%" height="15" fill="rgb(222,29,6)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="63.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="97.8235%" y="37" width="0.0298%" height="15" fill="rgb(221,189,43)" fg:x="3281" fg:w="1"/><text x="98.0735%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.06%)</title><rect x="97.8235%" y="965" width="0.0596%" height="15" fill="rgb(207,36,27)" fg:x="3281" fg:w="2"/><text x="98.0735%" y="975.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.06%)</title><rect x="97.8235%" y="949" width="0.0596%" height="15" fill="rgb(217,90,24)" fg:x="3281" fg:w="2"/><text x="98.0735%" y="959.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.06%)</title><rect x="97.8235%" y="933" width="0.0596%" height="15" fill="rgb(224,66,35)" fg:x="3281" fg:w="2"/><text x="98.0735%" y="943.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.06%)</title><rect x="97.8235%" y="917" width="0.0596%" height="15" fill="rgb(221,13,50)" fg:x="3281" fg:w="2"/><text x="98.0735%" y="927.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.06%)</title><rect x="97.8235%" y="901" width="0.0596%" height="15" fill="rgb(236,68,49)" fg:x="3281" fg:w="2"/><text x="98.0735%" y="911.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.06%)</title><rect x="97.8235%" y="885" width="0.0596%" height="15" fill="rgb(229,146,28)" fg:x="3281" fg:w="2"/><text x="98.0735%" y="895.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.06%)</title><rect x="97.8235%" y="869" width="0.0596%" height="15" fill="rgb(225,31,38)" fg:x="3281" fg:w="2"/><text x="98.0735%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.03%)</title><rect x="97.8533%" y="853" width="0.0298%" height="15" fill="rgb(250,208,3)" fg:x="3282" fg:w="1"/><text x="98.1033%" y="863.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.03%)</title><rect x="97.8533%" y="837" width="0.0298%" height="15" fill="rgb(246,54,23)" fg:x="3282" fg:w="1"/><text x="98.1033%" y="847.50"></text></g><g><title>deno`v8::internal::HashTable&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Rehash (1 samples, 0.03%)</title><rect x="97.8533%" y="821" width="0.0298%" height="15" fill="rgb(243,76,11)" fg:x="3282" fg:w="1"/><text x="98.1033%" y="831.50"></text></g><g><title>deno`v8::internal::LocalIsolate::LocalIsolate (1 samples, 0.03%)</title><rect x="97.8831%" y="885" width="0.0298%" height="15" fill="rgb(245,21,50)" fg:x="3283" fg:w="1"/><text x="98.1331%" y="895.50"></text></g><g><title>libsystem_platform.dylib`_platform_strcmp (1 samples, 0.03%)</title><rect x="97.8831%" y="869" width="0.0298%" height="15" fill="rgb(228,9,43)" fg:x="3283" fg:w="1"/><text x="98.1331%" y="879.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.12%)</title><rect x="97.8235%" y="981" width="0.1193%" height="15" fill="rgb(208,100,47)" fg:x="3281" fg:w="4"/><text x="98.0735%" y="991.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.06%)</title><rect x="97.8831%" y="965" width="0.0596%" height="15" fill="rgb(232,26,8)" fg:x="3283" fg:w="2"/><text x="98.1331%" y="975.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.06%)</title><rect x="97.8831%" y="949" width="0.0596%" height="15" fill="rgb(216,166,38)" fg:x="3283" fg:w="2"/><text x="98.1331%" y="959.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.06%)</title><rect x="97.8831%" y="933" width="0.0596%" height="15" fill="rgb(251,202,51)" fg:x="3283" fg:w="2"/><text x="98.1331%" y="943.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.06%)</title><rect x="97.8831%" y="917" width="0.0596%" height="15" fill="rgb(254,216,34)" fg:x="3283" fg:w="2"/><text x="98.1331%" y="927.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.06%)</title><rect x="97.8831%" y="901" width="0.0596%" height="15" fill="rgb(251,32,27)" fg:x="3283" fg:w="2"/><text x="98.1331%" y="911.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.03%)</title><rect x="97.9129%" y="885" width="0.0298%" height="15" fill="rgb(208,127,28)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="895.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.03%)</title><rect x="97.9129%" y="869" width="0.0298%" height="15" fill="rgb(224,137,22)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.03%)</title><rect x="97.9129%" y="853" width="0.0298%" height="15" fill="rgb(254,70,32)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.03%)</title><rect x="97.9129%" y="837" width="0.0298%" height="15" fill="rgb(229,75,37)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.9129%" y="821" width="0.0298%" height="15" fill="rgb(252,64,23)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.9129%" y="805" width="0.0298%" height="15" fill="rgb(232,162,48)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.9129%" y="789" width="0.0298%" height="15" fill="rgb(246,160,12)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="97.9129%" y="773" width="0.0298%" height="15" fill="rgb(247,166,0)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="97.9129%" y="757" width="0.0298%" height="15" fill="rgb(249,219,21)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="767.50"></text></g><g><title>deno`v8::internal::Heap::AllocateRawOrFail (1 samples, 0.03%)</title><rect x="97.9129%" y="741" width="0.0298%" height="15" fill="rgb(205,209,3)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="751.50"></text></g><g><title>deno`v8::internal::OldLargeObjectSpace::AllocateRaw (1 samples, 0.03%)</title><rect x="97.9129%" y="725" width="0.0298%" height="15" fill="rgb(243,44,1)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="735.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (1 samples, 0.03%)</title><rect x="97.9129%" y="709" width="0.0298%" height="15" fill="rgb(206,159,16)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="719.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (1 samples, 0.03%)</title><rect x="97.9129%" y="693" width="0.0298%" height="15" fill="rgb(244,77,30)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="703.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (1 samples, 0.03%)</title><rect x="97.9129%" y="677" width="0.0298%" height="15" fill="rgb(218,69,12)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.03%)</title><rect x="97.9129%" y="661" width="0.0298%" height="15" fill="rgb(212,87,7)" fg:x="3284" fg:w="1"/><text x="98.1629%" y="671.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.03%)</title><rect x="97.9428%" y="981" width="0.0298%" height="15" fill="rgb(245,114,25)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="991.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.03%)</title><rect x="97.9428%" y="965" width="0.0298%" height="15" fill="rgb(210,61,42)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="975.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.03%)</title><rect x="97.9428%" y="949" width="0.0298%" height="15" fill="rgb(211,52,33)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="959.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.03%)</title><rect x="97.9428%" y="933" width="0.0298%" height="15" fill="rgb(234,58,33)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="943.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="97.9428%" y="917" width="0.0298%" height="15" fill="rgb(220,115,36)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="927.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.03%)</title><rect x="97.9428%" y="901" width="0.0298%" height="15" fill="rgb(243,153,54)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="911.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.03%)</title><rect x="97.9428%" y="885" width="0.0298%" height="15" fill="rgb(251,47,18)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="895.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.03%)</title><rect x="97.9428%" y="869" width="0.0298%" height="15" fill="rgb(242,102,42)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="97.9428%" y="853" width="0.0298%" height="15" fill="rgb(234,31,38)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="97.9428%" y="837" width="0.0298%" height="15" fill="rgb(221,117,51)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="847.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.03%)</title><rect x="97.9428%" y="821" width="0.0298%" height="15" fill="rgb(212,20,18)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="831.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.03%)</title><rect x="97.9428%" y="805" width="0.0298%" height="15" fill="rgb(245,133,36)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="815.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.03%)</title><rect x="97.9428%" y="789" width="0.0298%" height="15" fill="rgb(212,6,19)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="799.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="97.9428%" y="773" width="0.0298%" height="15" fill="rgb(218,1,36)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="783.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="97.9428%" y="757" width="0.0298%" height="15" fill="rgb(246,84,54)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="767.50"></text></g><g><title>deno`bool v8::internal::(anonymous namespace)::IterativelyExecuteAndFinalizeUnoptimizedCompilationJobs&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::AccountingAllocator*, v8::internal::IsCompiledScope*, std::__1::vector&lt;v8::internal::FinalizeUnoptimizedCompilationData, std::__1::allocator&lt;v8::internal::FinalizeUnoptimizedCompilationData&gt; &gt;*, std::__1::vector&lt;v8::internal::DeferredFinalizationJobData, std::__1::allocator (1 samples, 0.03%)</title><rect x="97.9428%" y="741" width="0.0298%" height="15" fill="rgb(242,110,6)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="751.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ExecuteSingleUnoptimizedCompilationJob(v8::internal::ParseInfo*, v8::internal::FunctionLiteral*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::AccountingAllocator*, std::__1::vector&lt;v8::internal::FunctionLiteral*, std::__1::allocator (1 samples, 0.03%)</title><rect x="97.9428%" y="725" width="0.0298%" height="15" fill="rgb(214,47,5)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="735.50"></text></g><g><title>deno`v8::internal::interpreter::InterpreterCompilationJob::ExecuteJobImpl (1 samples, 0.03%)</title><rect x="97.9428%" y="709" width="0.0298%" height="15" fill="rgb(218,159,25)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="719.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::GenerateBytecode (1 samples, 0.03%)</title><rect x="97.9428%" y="693" width="0.0298%" height="15" fill="rgb(215,211,28)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="703.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::GenerateBytecodeBody (1 samples, 0.03%)</title><rect x="97.9428%" y="677" width="0.0298%" height="15" fill="rgb(238,59,32)" fg:x="3285" fg:w="1"/><text x="98.1928%" y="687.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (407 samples, 12.13%)</title><rect x="85.8676%" y="1045" width="12.1348%" height="15" fill="rgb(226,82,3)" fg:x="2880" fg:w="407"/><text x="86.1176%" y="1055.50">deno`&lt;core::future..</text></g><g><title>deno`deno::run_command::_{{closure}} (407 samples, 12.13%)</title><rect x="85.8676%" y="1029" width="12.1348%" height="15" fill="rgb(240,164,32)" fg:x="2880" fg:w="407"/><text x="86.1176%" y="1039.50">deno`deno::run_com..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (407 samples, 12.13%)</title><rect x="85.8676%" y="1013" width="12.1348%" height="15" fill="rgb(232,46,7)" fg:x="2880" fg:w="407"/><text x="86.1176%" y="1023.50">deno`&lt;core::future..</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (6 samples, 0.18%)</title><rect x="97.8235%" y="997" width="0.1789%" height="15" fill="rgb(229,129,53)" fg:x="3281" fg:w="6"/><text x="98.0735%" y="1007.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.03%)</title><rect x="97.9726%" y="981" width="0.0298%" height="15" fill="rgb(234,188,29)" fg:x="3286" fg:w="1"/><text x="98.2226%" y="991.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.03%)</title><rect x="97.9726%" y="965" width="0.0298%" height="15" fill="rgb(246,141,4)" fg:x="3286" fg:w="1"/><text x="98.2226%" y="975.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.03%)</title><rect x="97.9726%" y="949" width="0.0298%" height="15" fill="rgb(229,23,39)" fg:x="3286" fg:w="1"/><text x="98.2226%" y="959.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.03%)</title><rect x="97.9726%" y="933" width="0.0298%" height="15" fill="rgb(206,12,3)" fg:x="3286" fg:w="1"/><text x="98.2226%" y="943.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.03%)</title><rect x="97.9726%" y="917" width="0.0298%" height="15" fill="rgb(252,226,20)" fg:x="3286" fg:w="1"/><text x="98.2226%" y="927.50"></text></g><g><title>dyld`start (408 samples, 12.16%)</title><rect x="85.8676%" y="1157" width="12.1646%" height="15" fill="rgb(216,123,35)" fg:x="2880" fg:w="408"/><text x="86.1176%" y="1167.50">dyld`start</text></g><g><title>deno`main (408 samples, 12.16%)</title><rect x="85.8676%" y="1141" width="12.1646%" height="15" fill="rgb(212,68,40)" fg:x="2880" fg:w="408"/><text x="86.1176%" y="1151.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (408 samples, 12.16%)</title><rect x="85.8676%" y="1125" width="12.1646%" height="15" fill="rgb(254,125,32)" fg:x="2880" fg:w="408"/><text x="86.1176%" y="1135.50">deno`std::sys_comm..</text></g><g><title>deno`deno::main (408 samples, 12.16%)</title><rect x="85.8676%" y="1109" width="12.1646%" height="15" fill="rgb(253,97,22)" fg:x="2880" fg:w="408"/><text x="86.1176%" y="1119.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (408 samples, 12.16%)</title><rect x="85.8676%" y="1093" width="12.1646%" height="15" fill="rgb(241,101,14)" fg:x="2880" fg:w="408"/><text x="86.1176%" y="1103.50">deno`deno_runtime:..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (408 samples, 12.16%)</title><rect x="85.8676%" y="1077" width="12.1646%" height="15" fill="rgb(238,103,29)" fg:x="2880" fg:w="408"/><text x="86.1176%" y="1087.50">deno`&lt;core::future..</text></g><g><title>deno`deno::main::_{{closure}} (408 samples, 12.16%)</title><rect x="85.8676%" y="1061" width="12.1646%" height="15" fill="rgb(233,195,47)" fg:x="2880" fg:w="408"/><text x="86.1176%" y="1071.50">deno`deno::main::_..</text></g><g><title>deno`deno::args::flags::flags_from_vec (1 samples, 0.03%)</title><rect x="98.0024%" y="1045" width="0.0298%" height="15" fill="rgb(246,218,30)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="1055.50"></text></g><g><title>deno`deno::args::flags::clap_root (1 samples, 0.03%)</title><rect x="98.0024%" y="1029" width="0.0298%" height="15" fill="rgb(219,145,47)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="1039.50"></text></g><g><title>deno`&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="98.0024%" y="1013" width="0.0298%" height="15" fill="rgb(243,12,26)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="1023.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.03%)</title><rect x="98.0024%" y="997" width="0.0298%" height="15" fill="rgb(214,87,16)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="1007.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.03%)</title><rect x="98.0024%" y="981" width="0.0298%" height="15" fill="rgb(208,99,42)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="991.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="98.0024%" y="965" width="0.0298%" height="15" fill="rgb(253,99,2)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="975.50"></text></g><g><title>deno`alloc::fmt::format (1 samples, 0.03%)</title><rect x="98.0024%" y="949" width="0.0298%" height="15" fill="rgb(220,168,23)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="959.50"></text></g><g><title>deno`alloc::fmt::format::format_inner (1 samples, 0.03%)</title><rect x="98.0024%" y="933" width="0.0298%" height="15" fill="rgb(242,38,24)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="943.50"></text></g><g><title>deno`core::fmt::write (1 samples, 0.03%)</title><rect x="98.0024%" y="917" width="0.0298%" height="15" fill="rgb(225,182,9)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="98.0024%" y="901" width="0.0298%" height="15" fill="rgb(243,178,37)" fg:x="3287" fg:w="1"/><text x="98.2524%" y="911.50"></text></g><g><title>deno`v8::platform::DefaultJobWorker::Run (1 samples, 0.03%)</title><rect x="98.0322%" y="1109" width="0.0298%" height="15" fill="rgb(232,139,19)" fg:x="3288" fg:w="1"/><text x="98.2822%" y="1119.50"></text></g><g><title>deno`v8::internal::MemoryChunk::ReleaseAllocatedMemoryNeededForWritableChunk (1 samples, 0.03%)</title><rect x="98.0918%" y="1029" width="0.0298%" height="15" fill="rgb(225,201,24)" fg:x="3290" fg:w="1"/><text x="98.3418%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="98.0918%" y="1013" width="0.0298%" height="15" fill="rgb(221,47,46)" fg:x="3290" fg:w="1"/><text x="98.3418%" y="1023.50"></text></g><g><title>deno`v8::base::RegionAllocator::TrimRegion (1 samples, 0.03%)</title><rect x="98.1515%" y="997" width="0.0298%" height="15" fill="rgb(249,23,13)" fg:x="3292" fg:w="1"/><text x="98.4015%" y="1007.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (5 samples, 0.15%)</title><rect x="98.1813%" y="997" width="0.1491%" height="15" fill="rgb(219,9,5)" fg:x="3293" fg:w="5"/><text x="98.4313%" y="1007.50"></text></g><g><title>deno`v8::internal::VirtualMemory::Free (28 samples, 0.83%)</title><rect x="98.1216%" y="1029" width="0.8348%" height="15" fill="rgb(254,171,16)" fg:x="3291" fg:w="28"/><text x="98.3716%" y="1039.50"></text></g><g><title>deno`v8::base::BoundedPageAllocator::FreePages (27 samples, 0.81%)</title><rect x="98.1515%" y="1013" width="0.8050%" height="15" fill="rgb(230,171,20)" fg:x="3292" fg:w="27"/><text x="98.4015%" y="1023.50"></text></g><g><title>libsystem_kernel.dylib`madvise (21 samples, 0.63%)</title><rect x="98.3304%" y="997" width="0.6261%" height="15" fill="rgb(210,71,41)" fg:x="3298" fg:w="21"/><text x="98.5804%" y="1007.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (16 samples, 0.48%)</title><rect x="98.9565%" y="1029" width="0.4770%" height="15" fill="rgb(206,173,20)" fg:x="3319" fg:w="16"/><text x="99.2065%" y="1039.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::Unmapper::PerformFreeMemoryOnQueuedChunks (59 samples, 1.76%)</title><rect x="98.0918%" y="1061" width="1.7591%" height="15" fill="rgb(233,88,34)" fg:x="3290" fg:w="59"/><text x="98.3418%" y="1071.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::PerformFreeMemory (59 samples, 1.76%)</title><rect x="98.0918%" y="1045" width="1.7591%" height="15" fill="rgb(223,209,46)" fg:x="3290" fg:w="59"/><text x="98.3418%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.42%)</title><rect x="99.4335%" y="1029" width="0.4174%" height="15" fill="rgb(250,43,18)" fg:x="3335" fg:w="14"/><text x="99.6835%" y="1039.50"></text></g><g><title>deno`v8::platform::DefaultJobWorker::Run (61 samples, 1.82%)</title><rect x="98.0620%" y="1093" width="1.8187%" height="15" fill="rgb(208,13,10)" fg:x="3289" fg:w="61"/><text x="98.3120%" y="1103.50">d..</text></g><g><title>deno`v8::internal::MemoryAllocator::Unmapper::UnmapFreeMemoryJob::Run (61 samples, 1.82%)</title><rect x="98.0620%" y="1077" width="1.8187%" height="15" fill="rgb(212,200,36)" fg:x="3289" fg:w="61"/><text x="98.3120%" y="1087.50">d..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.03%)</title><rect x="99.8509%" y="1061" width="0.0298%" height="15" fill="rgb(225,90,30)" fg:x="3349" fg:w="1"/><text x="100.1009%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.09%)</title><rect x="99.8807%" y="1077" width="0.0894%" height="15" fill="rgb(236,182,39)" fg:x="3350" fg:w="3"/><text x="100.1307%" y="1087.50"></text></g><g><title>all (3,354 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(212,144,35)" fg:x="0" fg:w="3354"/><text x="0.2500%" y="1183.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (66 samples, 1.97%)</title><rect x="98.0322%" y="1157" width="1.9678%" height="15" fill="rgb(228,63,44)" fg:x="3288" fg:w="66"/><text x="98.2822%" y="1167.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (66 samples, 1.97%)</title><rect x="98.0322%" y="1141" width="1.9678%" height="15" fill="rgb(228,109,6)" fg:x="3288" fg:w="66"/><text x="98.2822%" y="1151.50">l..</text></g><g><title>deno`v8::base::ThreadEntry (66 samples, 1.97%)</title><rect x="98.0322%" y="1125" width="1.9678%" height="15" fill="rgb(238,117,24)" fg:x="3288" fg:w="66"/><text x="98.2822%" y="1135.50">d..</text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (65 samples, 1.94%)</title><rect x="98.0620%" y="1109" width="1.9380%" height="15" fill="rgb(242,26,26)" fg:x="3289" fg:w="65"/><text x="98.3120%" y="1119.50">d..</text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (4 samples, 0.12%)</title><rect x="99.8807%" y="1093" width="0.1193%" height="15" fill="rgb(221,92,48)" fg:x="3350" fg:w="4"/><text x="100.1307%" y="1103.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.03%)</title><rect x="99.9702%" y="1077" width="0.0298%" height="15" fill="rgb(209,209,32)" fg:x="3353" fg:w="1"/><text x="100.2202%" y="1087.50"></text></g></svg></svg>